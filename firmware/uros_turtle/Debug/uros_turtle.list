
uros_turtle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b20  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  08015d00  08015d00  00016d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016cb8  08016cb8  000181e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016cb8  08016cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016cc0  08016cc0  000181e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016cc0  08016cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016cc8  08016cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08016ccc  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac6c  200001e0  08016eac  000181e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ae4c  08016eac  00018e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226b7  00000000  00000000  00018210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d93  00000000  00000000  0003a8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  0003f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d9  00000000  00000000  00041180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cc0a  00000000  00000000  00042659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214fd  00000000  00000000  0006f263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112a86  00000000  00000000  00090760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a31e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e8c  00000000  00000000  001a325c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001ab0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015ce8 	.word	0x08015ce8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08015ce8 	.word	0x08015ce8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9d3 	b.w	80006b8 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <MX_FREERTOS_Init+0x18>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_FREERTOS_Init+0x1c>)
 80006c6:	f005 fa9f 	bl	8005c08 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a03      	ldr	r2, [pc, #12]	@ (80006dc <MX_FREERTOS_Init+0x20>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08015d98 	.word	0x08015d98
 80006d8:	08000e09 	.word	0x08000e09
 80006dc:	200001fc 	.word	0x200001fc

080006e0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006ec:	f006 fb60 	bl	8006db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006f0:	4b5a      	ldr	r3, [pc, #360]	@ (800085c <pvPortMallocMicroROS+0x17c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006f8:	f000 f986 	bl	8000a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006fc:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <pvPortMallocMicroROS+0x180>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4013      	ands	r3, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	f040 8090 	bne.w	800082a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01e      	beq.n	800074e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000710:	2208      	movs	r2, #8
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	2b00      	cmp	r3, #0
 8000720:	d015      	beq.n	800074e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f023 0307 	bic.w	r3, r3, #7
 8000728:	3308      	adds	r3, #8
 800072a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00b      	beq.n	800074e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800073a:	f383 8811 	msr	BASEPRI, r3
 800073e:	f3bf 8f6f 	isb	sy
 8000742:	f3bf 8f4f 	dsb	sy
 8000746:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	e7fd      	b.n	800074a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d06a      	beq.n	800082a <pvPortMallocMicroROS+0x14a>
 8000754:	4b43      	ldr	r3, [pc, #268]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d865      	bhi.n	800082a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800075e:	4b42      	ldr	r3, [pc, #264]	@ (8000868 <pvPortMallocMicroROS+0x188>)
 8000760:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000762:	4b41      	ldr	r3, [pc, #260]	@ (8000868 <pvPortMallocMicroROS+0x188>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000768:	e004      	b.n	8000774 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	d903      	bls.n	8000786 <pvPortMallocMicroROS+0xa6>
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f1      	bne.n	800076a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000786:	4b35      	ldr	r3, [pc, #212]	@ (800085c <pvPortMallocMicroROS+0x17c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800078c:	429a      	cmp	r2, r3
 800078e:	d04c      	beq.n	800082a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2208      	movs	r2, #8
 8000796:	4413      	add	r3, r2
 8000798:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800079a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80007a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1ad2      	subs	r2, r2, r3
 80007aa:	2308      	movs	r3, #8
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d920      	bls.n	80007f4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80007b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	f003 0307 	and.w	r3, r3, #7
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00b      	beq.n	80007dc <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	613b      	str	r3, [r7, #16]
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	1ad2      	subs	r2, r2, r3
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ee:	69b8      	ldr	r0, [r7, #24]
 80007f0:	f000 f96c 	bl	8000acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000800:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <pvPortMallocMicroROS+0x18c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d203      	bcs.n	8000816 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a16      	ldr	r2, [pc, #88]	@ (800086c <pvPortMallocMicroROS+0x18c>)
 8000814:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <pvPortMallocMicroROS+0x180>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	431a      	orrs	r2, r3
 8000820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000822:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800082a:	f006 facf 	bl	8006dcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00b      	beq.n	8000850 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800083c:	f383 8811 	msr	BASEPRI, r3
 8000840:	f3bf 8f6f 	isb	sy
 8000844:	f3bf 8f4f 	dsb	sy
 8000848:	60fb      	str	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000850:	69fb      	ldr	r3, [r7, #28]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20003d44 	.word	0x20003d44
 8000860:	20003d50 	.word	0x20003d50
 8000864:	20003d48 	.word	0x20003d48
 8000868:	20003d3c 	.word	0x20003d3c
 800086c:	20003d4c 	.word	0x20003d4c

08000870 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d04a      	beq.n	8000918 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000882:	2308      	movs	r3, #8
 8000884:	425b      	negs	r3, r3
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4013      	ands	r3, r2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <vPortFreeMicroROS+0x46>
	__asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	60fb      	str	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	e7fd      	b.n	80008b2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00b      	beq.n	80008d6 <vPortFreeMicroROS+0x66>
	__asm volatile
 80008be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	60bb      	str	r3, [r7, #8]
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	e7fd      	b.n	80008d2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d019      	beq.n	8000918 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d115      	bne.n	8000918 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008fc:	f006 fa58 	bl	8006db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <vPortFreeMicroROS+0xb4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <vPortFreeMicroROS+0xb4>)
 800090c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800090e:	6938      	ldr	r0, [r7, #16]
 8000910:	f000 f8dc 	bl	8000acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000914:	f006 fa5a 	bl	8006dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20003d50 	.word	0x20003d50
 8000924:	20003d48 	.word	0x20003d48

08000928 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000934:	2308      	movs	r3, #8
 8000936:	425b      	negs	r3, r3
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <getBlockSize+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	43db      	mvns	r3, r3
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]

	return count;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20003d50 	.word	0x20003d50

08000964 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800096e:	f006 fa1f 	bl	8006db0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000972:	6838      	ldr	r0, [r7, #0]
 8000974:	f7ff feb4 	bl	80006e0 <pvPortMallocMicroROS>
 8000978:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d014      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffce 	bl	8000928 <getBlockSize>
 800098c:	4603      	mov	r3, r0
 800098e:	2208      	movs	r2, #8
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d201      	bcs.n	80009a0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f014 fb60 	bl	801506a <memcpy>

		vPortFreeMicroROS(pv);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff60 	bl	8000870 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80009b0:	f006 fa0c 	bl	8006dcc <xTaskResumeAll>

	return newmem;
 80009b4:	68bb      	ldr	r3, [r7, #8]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009c8:	f006 f9f2 	bl	8006db0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff fe82 	bl	80006e0 <pvPortMallocMicroROS>
 80009dc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009e2:	e004      	b.n	80009ee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	613a      	str	r2, [r7, #16]
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	617a      	str	r2, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f5      	bne.n	80009e4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009f8:	f006 f9e8 	bl	8006dcc <xTaskResumeAll>
  	return mem;
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a14:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <prvHeapInit+0xac>)
 8000a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00c      	beq.n	8000a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3307      	adds	r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab4 <prvHeapInit+0xac>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a40:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <prvHeapInit+0xb0>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <prvHeapInit+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a54:	2208      	movs	r2, #8
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f023 0307 	bic.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a15      	ldr	r2, [pc, #84]	@ (8000abc <prvHeapInit+0xb4>)
 8000a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <prvHeapInit+0xb4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <prvHeapInit+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <prvHeapInit+0xb4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <prvHeapInit+0xb8>)
 8000a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <prvHeapInit+0xbc>)
 8000a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <prvHeapInit+0xc0>)
 8000aa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	2000313c 	.word	0x2000313c
 8000ab8:	20003d3c 	.word	0x20003d3c
 8000abc:	20003d44 	.word	0x20003d44
 8000ac0:	20003d4c 	.word	0x20003d4c
 8000ac4:	20003d48 	.word	0x20003d48
 8000ac8:	20003d50 	.word	0x20003d50

08000acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ad4:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <prvInsertBlockIntoFreeList+0xac>)
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e002      	b.n	8000ae0 <prvInsertBlockIntoFreeList+0x14>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d8f7      	bhi.n	8000ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4413      	add	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d108      	bne.n	8000b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	441a      	add	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d118      	bne.n	8000b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d00d      	beq.n	8000b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	441a      	add	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e008      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e003      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d002      	beq.n	8000b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20003d3c 	.word	0x20003d3c
 8000b7c:	20003d44 	.word	0x20003d44

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2105      	movs	r1, #5
 8000bba:	200b      	movs	r0, #11
 8000bbc:	f001 f872 	bl	8001ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f001 f889 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2105      	movs	r1, #5
 8000bca:	200c      	movs	r0, #12
 8000bcc:	f001 f86a 	bl	8001ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bd0:	200c      	movs	r0, #12
 8000bd2:	f001 f881 	bl	8001cd8 <HAL_NVIC_EnableIRQ>

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c06:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c12:	4b29      	ldr	r3, [pc, #164]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	4a28      	ldr	r2, [pc, #160]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1e:	4b26      	ldr	r3, [pc, #152]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b23      	ldr	r3, [pc, #140]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	4a22      	ldr	r2, [pc, #136]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c36:	4b20      	ldr	r3, [pc, #128]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f001 fd07 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480f      	ldr	r0, [pc, #60]	@ (8000cbc <MX_GPIO_Init+0xd8>)
 8000c7e:	f001 fb77 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c82:	2320      	movs	r3, #32
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9c:	f001 fb68 	bl	8002370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	2028      	movs	r0, #40	@ 0x28
 8000ca6:	f000 fffd 	bl	8001ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000caa:	2028      	movs	r0, #40	@ 0x28
 8000cac:	f001 f814 	bl	8001cd8 <HAL_NVIC_EnableIRQ>

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48000800 	.word	0x48000800

08000cc0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_IWDG_Init+0x34>)
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <MX_IWDG_Init+0x38>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <MX_IWDG_Init+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_IWDG_Init+0x34>)
 8000cd2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000cd6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_IWDG_Init+0x34>)
 8000cda:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000cde:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <MX_IWDG_Init+0x34>)
 8000ce2:	f001 fd11 	bl	8002708 <HAL_IWDG_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000cec:	f000 f9e8 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20003d54 	.word	0x20003d54
 8000cf8:	40003000 	.word	0x40003000

08000cfc <HAL_GPIO_EXTI_Callback>:
void send_kill_turtle_request(const char* turtle_name);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d0c:	d102      	bne.n	8000d14 <HAL_GPIO_EXTI_Callback+0x18>
        button_pressed = 1;
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0x24>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
    }
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	20003e55 	.word	0x20003e55

08000d24 <send_kill_turtle_request>:

void send_kill_turtle_request(const char* turtle_name) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    // Set the turtle name to kill
	turtlesim__srv__Kill_Request__init(&kill_req);
 8000d2c:	4810      	ldr	r0, [pc, #64]	@ (8000d70 <send_kill_turtle_request+0x4c>)
 8000d2e:	f00b f929 	bl	800bf84 <turtlesim__srv__Kill_Request__init>

    memset(kill_req.name.data, 0, kill_req.name.capacity);
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <send_kill_turtle_request+0x4c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <send_kill_turtle_request+0x4c>)
 8000d38:	6892      	ldr	r2, [r2, #8]
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f014 f8cb 	bl	8014ed8 <memset>
    strcpy(kill_req.name.data, turtle_name);
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <send_kill_turtle_request+0x4c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f014 f986 	bl	801505a <strcpy>
    kill_req.name.size = strlen(turtle_name);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fa70 	bl	8000234 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a06      	ldr	r2, [pc, #24]	@ (8000d70 <send_kill_turtle_request+0x4c>)
 8000d58:	6053      	str	r3, [r2, #4]

    // Send the service request
    int64_t sequence_number;
    RCLSOFTCHECK(rcl_send_request(&kill_client, &kill_req, &sequence_number));
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4903      	ldr	r1, [pc, #12]	@ (8000d70 <send_kill_turtle_request+0x4c>)
 8000d62:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <send_kill_turtle_request+0x50>)
 8000d64:	f007 fd6e 	bl	8008844 <rcl_send_request>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20003e48 	.word	0x20003e48
 8000d74:	20003e44 	.word	0x20003e44

08000d78 <timer_callback>:

void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	e9c7 2300 	strd	r2, r3, [r7]
    static uint8_t cnt = 0;

    if (timer != NULL) {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d02e      	beq.n	8000de8 <timer_callback+0x70>
        // Sync micro-ROS session
        rmw_uros_sync_session(timeout_ms);
 8000d8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00a fd1c 	bl	800b7cc <rmw_uros_sync_session>

        if (button_pressed) {
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <timer_callback+0x78>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d008      	beq.n	8000db0 <timer_callback+0x38>
            send_kill_turtle_request("turtle1");
 8000d9e:	4815      	ldr	r0, [pc, #84]	@ (8000df4 <timer_callback+0x7c>)
 8000da0:	f7ff ffc0 	bl	8000d24 <send_kill_turtle_request>
            send_kill_turtle_request("turtle2");
 8000da4:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <timer_callback+0x80>)
 8000da6:	f7ff ffbd 	bl	8000d24 <send_kill_turtle_request>
            button_pressed = 0;
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <timer_callback+0x78>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
        }

        // Toggle LED every 50 cycles (approximately every 0.5 seconds)
        if (cnt == 0)
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <timer_callback+0x84>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d104      	bne.n	8000dc2 <timer_callback+0x4a>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000db8:	2120      	movs	r1, #32
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbe:	f001 fc71 	bl	80026a4 <HAL_GPIO_TogglePin>
        cnt = (cnt + 1) % 50;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <timer_callback+0x84>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <timer_callback+0x88>)
 8000dca:	fb82 1203 	smull	r1, r2, r2, r3
 8000dce:	1111      	asrs	r1, r2, #4
 8000dd0:	17da      	asrs	r2, r3, #31
 8000dd2:	1a8a      	subs	r2, r1, r2
 8000dd4:	2132      	movs	r1, #50	@ 0x32
 8000dd6:	fb01 f202 	mul.w	r2, r1, r2
 8000dda:	1a9a      	subs	r2, r3, r2
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <timer_callback+0x84>)
 8000de0:	701a      	strb	r2, [r3, #0]

        HAL_IWDG_Refresh(&hiwdg);
 8000de2:	4808      	ldr	r0, [pc, #32]	@ (8000e04 <timer_callback+0x8c>)
 8000de4:	f001 fcdf 	bl	80027a6 <HAL_IWDG_Refresh>
    }
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20003e55 	.word	0x20003e55
 8000df4:	08015d0c 	.word	0x08015d0c
 8000df8:	08015d14 	.word	0x08015d14
 8000dfc:	20003e56 	.word	0x20003e56
 8000e00:	51eb851f 	.word	0x51eb851f
 8000e04:	20003d54 	.word	0x20003d54

08000e08 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8000e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e0c:	b0cc      	sub	sp, #304	@ 0x130
 8000e0e:	af02      	add	r7, sp, #8
 8000e10:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

	// micro-ROS configuration
	rmw_uros_set_custom_transport(true, (void*) &hlpuart1,
 8000e14:	4b57      	ldr	r3, [pc, #348]	@ (8000f74 <StartDefaultTask+0x16c>)
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b57      	ldr	r3, [pc, #348]	@ (8000f78 <StartDefaultTask+0x170>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	4b57      	ldr	r3, [pc, #348]	@ (8000f7c <StartDefaultTask+0x174>)
 8000e1e:	4a58      	ldr	r2, [pc, #352]	@ (8000f80 <StartDefaultTask+0x178>)
 8000e20:	4958      	ldr	r1, [pc, #352]	@ (8000f84 <StartDefaultTask+0x17c>)
 8000e22:	2001      	movs	r0, #1
 8000e24:	f009 fd74 	bl	800a910 <rmw_uros_set_custom_transport>
			cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8000e28:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f009 f80f 	bl	8009e50 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8000e32:	4b55      	ldr	r3, [pc, #340]	@ (8000f88 <StartDefaultTask+0x180>)
 8000e34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	freeRTOS_allocator.deallocate = microros_deallocate;
 8000e38:	4b54      	ldr	r3, [pc, #336]	@ (8000f8c <StartDefaultTask+0x184>)
 8000e3a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	freeRTOS_allocator.reallocate = microros_reallocate;
 8000e3e:	4b54      	ldr	r3, [pc, #336]	@ (8000f90 <StartDefaultTask+0x188>)
 8000e40:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8000e44:	4b53      	ldr	r3, [pc, #332]	@ (8000f94 <StartDefaultTask+0x18c>)
 8000e46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000e4a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f009 f80c 	bl	8009e6c <rcutils_set_default_allocator>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f083 0301 	eor.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <StartDefaultTask+0x60>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8000e60:	219c      	movs	r1, #156	@ 0x9c
 8000e62:	484d      	ldr	r0, [pc, #308]	@ (8000f98 <StartDefaultTask+0x190>)
 8000e64:	f013 feb2 	bl	8014bcc <iprintf>
	}
	allocator = rcl_get_default_allocator();
 8000e68:	4c4c      	ldr	r4, [pc, #304]	@ (8000f9c <StartDefaultTask+0x194>)
 8000e6a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f009 f81a 	bl	8009ea8 <rcutils_get_default_allocator>
 8000e74:	4625      	mov	r5, r4
 8000e76:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	602b      	str	r3, [r5, #0]

	//create init
	init_options = rcl_get_zero_initialized_init_options();
 8000e82:	f007 fd67 	bl	8008954 <rcl_get_zero_initialized_init_options>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a45      	ldr	r2, [pc, #276]	@ (8000fa0 <StartDefaultTask+0x198>)
 8000e8a:	6013      	str	r3, [r2, #0]
	RCLSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8000e8c:	4b43      	ldr	r3, [pc, #268]	@ (8000f9c <StartDefaultTask+0x194>)
 8000e8e:	466c      	mov	r4, sp
 8000e90:	f103 020c 	add.w	r2, r3, #12
 8000e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e98:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9e:	4840      	ldr	r0, [pc, #256]	@ (8000fa0 <StartDefaultTask+0x198>)
 8000ea0:	f007 fd5a 	bl	8008958 <rcl_init_options_init>
	RCLSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 99));
 8000ea4:	2163      	movs	r1, #99	@ 0x63
 8000ea6:	483e      	ldr	r0, [pc, #248]	@ (8000fa0 <StartDefaultTask+0x198>)
 8000ea8:	f007 fe52 	bl	8008b50 <rcl_init_options_set_domain_id>

	//create support
	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 8000eac:	4b3b      	ldr	r3, [pc, #236]	@ (8000f9c <StartDefaultTask+0x194>)
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <StartDefaultTask+0x198>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	483b      	ldr	r0, [pc, #236]	@ (8000fa4 <StartDefaultTask+0x19c>)
 8000eb8:	f008 ff22 	bl	8009d00 <rclc_support_init_with_options>
			&allocator);

	// create node
	rclc_node_init_default(&node, "uros_turtle", "", &support);
 8000ebc:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <StartDefaultTask+0x19c>)
 8000ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa8 <StartDefaultTask+0x1a0>)
 8000ec0:	493a      	ldr	r1, [pc, #232]	@ (8000fac <StartDefaultTask+0x1a4>)
 8000ec2:	483b      	ldr	r0, [pc, #236]	@ (8000fb0 <StartDefaultTask+0x1a8>)
 8000ec4:	f008 ff50 	bl	8009d68 <rclc_node_init_default>

	//create timer
	rclc_timer_init_default(&timer, &support, timer_period, timer_callback);
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb4 <StartDefaultTask+0x1ac>)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	4690      	mov	r8, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	4b39      	ldr	r3, [pc, #228]	@ (8000fb8 <StartDefaultTask+0x1b0>)
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4642      	mov	r2, r8
 8000ed6:	464b      	mov	r3, r9
 8000ed8:	4932      	ldr	r1, [pc, #200]	@ (8000fa4 <StartDefaultTask+0x19c>)
 8000eda:	4838      	ldr	r0, [pc, #224]	@ (8000fbc <StartDefaultTask+0x1b4>)
 8000edc:	f008 ff80 	bl	8009de0 <rclc_timer_init_default>

	kill_req.name.capacity = 20;
 8000ee0:	4b37      	ldr	r3, [pc, #220]	@ (8000fc0 <StartDefaultTask+0x1b8>)
 8000ee2:	2214      	movs	r2, #20
 8000ee4:	609a      	str	r2, [r3, #8]
	kill_req.name.data = (char*) malloc(kill_req.name.capacity * sizeof(char));
 8000ee6:	4b36      	ldr	r3, [pc, #216]	@ (8000fc0 <StartDefaultTask+0x1b8>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f013 fb7a 	bl	80145e4 <malloc>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <StartDefaultTask+0x1b8>)
 8000ef6:	601a      	str	r2, [r3, #0]
	kill_req.name.size = 0;
 8000ef8:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <StartDefaultTask+0x1b8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]

	rcl_client_options_t client_options = rcl_client_get_default_options();
 8000efe:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000f02:	4618      	mov	r0, r3
 8000f04:	f007 fc74 	bl	80087f0 <rcl_client_get_default_options>
	RCLSOFTCHECK(rclc_client_init_default(
 8000f08:	f00b f858 	bl	800bfbc <rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__Kill>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <StartDefaultTask+0x1bc>)
 8000f10:	4927      	ldr	r1, [pc, #156]	@ (8000fb0 <StartDefaultTask+0x1a8>)
 8000f12:	482d      	ldr	r0, [pc, #180]	@ (8000fc8 <StartDefaultTask+0x1c0>)
 8000f14:	f008 f870 	bl	8008ff8 <rclc_client_init_default>
		&node,
		ROSIDL_GET_SRV_TYPE_SUPPORT(turtlesim, srv, Kill),
		"/remove_turtle"));  // Custom service name

	//create executor
	executor = rclc_executor_get_zero_initialized_executor();
 8000f18:	4c2c      	ldr	r4, [pc, #176]	@ (8000fcc <StartDefaultTask+0x1c4>)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f008 fbe7 	bl	80096f0 <rclc_executor_get_zero_initialized_executor>
 8000f22:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000f26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2388      	movs	r3, #136	@ 0x88
 8000f30:	461a      	mov	r2, r3
 8000f32:	f014 f89a 	bl	801506a <memcpy>
	rclc_executor_init(&executor, &support.context, 2, &allocator); //total number of handles = #subscriptions + #timers
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <StartDefaultTask+0x194>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	491a      	ldr	r1, [pc, #104]	@ (8000fa4 <StartDefaultTask+0x19c>)
 8000f3c:	4823      	ldr	r0, [pc, #140]	@ (8000fcc <StartDefaultTask+0x1c4>)
 8000f3e:	f008 fbe3 	bl	8009708 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 8000f42:	491e      	ldr	r1, [pc, #120]	@ (8000fbc <StartDefaultTask+0x1b4>)
 8000f44:	4821      	ldr	r0, [pc, #132]	@ (8000fcc <StartDefaultTask+0x1c4>)
 8000f46:	f008 fc4f 	bl	80097e8 <rclc_executor_add_timer>
	rclc_executor_add_client(&executor, &kill_client, &kill_res, NULL);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <StartDefaultTask+0x1c8>)
 8000f4e:	491e      	ldr	r1, [pc, #120]	@ (8000fc8 <StartDefaultTask+0x1c0>)
 8000f50:	481e      	ldr	r0, [pc, #120]	@ (8000fcc <StartDefaultTask+0x1c4>)
 8000f52:	f008 fc73 	bl	800983c <rclc_executor_add_client>
	rclc_executor_spin(&executor);
 8000f56:	481d      	ldr	r0, [pc, #116]	@ (8000fcc <StartDefaultTask+0x1c4>)
 8000f58:	f008 fe90 	bl	8009c7c <rclc_executor_spin>

	free(kill_req.name.data);
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <StartDefaultTask+0x1b8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f013 fb47 	bl	80145f4 <free>
}
 8000f66:	bf00      	nop
 8000f68:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f72:	bf00      	nop
 8000f74:	080019cd 	.word	0x080019cd
 8000f78:	08001969 	.word	0x08001969
 8000f7c:	08001949 	.word	0x08001949
 8000f80:	0800191d 	.word	0x0800191d
 8000f84:	20003eb4 	.word	0x20003eb4
 8000f88:	080010cd 	.word	0x080010cd
 8000f8c:	08001111 	.word	0x08001111
 8000f90:	08001149 	.word	0x08001149
 8000f94:	080011b5 	.word	0x080011b5
 8000f98:	08015d1c 	.word	0x08015d1c
 8000f9c:	20003da0 	.word	0x20003da0
 8000fa0:	20003db4 	.word	0x20003db4
 8000fa4:	20003d6c 	.word	0x20003d6c
 8000fa8:	08015d44 	.word	0x08015d44
 8000fac:	08015d48 	.word	0x08015d48
 8000fb0:	20003d64 	.word	0x20003d64
 8000fb4:	00989680 	.word	0x00989680
 8000fb8:	08000d79 	.word	0x08000d79
 8000fbc:	20003e40 	.word	0x20003e40
 8000fc0:	20003e48 	.word	0x20003e48
 8000fc4:	08015d54 	.word	0x08015d54
 8000fc8:	20003e44 	.word	0x20003e44
 8000fcc:	20003db8 	.word	0x20003db8
 8000fd0:	20003e54 	.word	0x20003e54

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f000 fd75 	bl	8001ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f810 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f7ff fe00 	bl	8000be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe4:	f7ff fdcc 	bl	8000b80 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000fe8:	f000 fb90 	bl	800170c <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8000fec:	f7ff fe68 	bl	8000cc0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ff0:	f004 fdc0 	bl	8005b74 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ff4:	f7ff fb62 	bl	80006bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ff8:	f004 fde0 	bl	8005bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <main+0x28>

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	@ 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	2238      	movs	r2, #56	@ 0x38
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f013 ff62 	bl	8014ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001022:	2000      	movs	r0, #0
 8001024:	f001 fbd0 	bl	80027c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001028:	230a      	movs	r3, #10
 800102a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001032:	2340      	movs	r3, #64	@ 0x40
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001036:	2301      	movs	r3, #1
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001042:	2304      	movs	r3, #4
 8001044:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001046:	2355      	movs	r3, #85	@ 0x55
 8001048:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104a:	2302      	movs	r3, #2
 800104c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fc68 	bl	8002930 <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001066:	f000 f82b 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2303      	movs	r3, #3
 8001070:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2104      	movs	r1, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f001 ff66 	bl	8002f54 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800108e:	f000 f817 	bl	80010c0 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	@ 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010ae:	f000 fd23 	bl	8001af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012c00 	.word	0x40012c00

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <Error_Handler+0x8>

080010cc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <microros_allocate+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <microros_allocate+0x3c>)
 80010e4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <microros_allocate+0x40>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <microros_allocate+0x40>)
 80010f4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff faf2 	bl	80006e0 <pvPortMallocMicroROS>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20003e58 	.word	0x20003e58
 800110c:	20003e5c 	.word	0x20003e5c

08001110 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00c      	beq.n	800113a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fc01 	bl	8000928 <getBlockSize>
 8001126:	4603      	mov	r3, r0
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <microros_deallocate+0x34>)
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	461a      	mov	r2, r3
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <microros_deallocate+0x34>)
 8001132:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fb9b 	bl	8000870 <vPortFreeMicroROS>
  }
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20003e5c 	.word	0x20003e5c

08001148 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <microros_reallocate+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	461a      	mov	r2, r3
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <microros_reallocate+0x64>)
 8001162:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <microros_reallocate+0x68>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	461a      	mov	r2, r3
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <microros_reallocate+0x68>)
 8001172:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d104      	bne.n	8001184 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff fab0 	bl	80006e0 <pvPortMallocMicroROS>
 8001180:	4603      	mov	r3, r0
 8001182:	e00e      	b.n	80011a2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff fbcf 	bl	8000928 <getBlockSize>
 800118a:	4603      	mov	r3, r0
 800118c:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <microros_reallocate+0x68>)
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	461a      	mov	r2, r3
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <microros_reallocate+0x68>)
 8001196:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff fbe2 	bl	8000964 <pvPortReallocMicroROS>
 80011a0:	4603      	mov	r3, r0
  }
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20003e58 	.word	0x20003e58
 80011b0:	20003e5c 	.word	0x20003e5c

080011b4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <microros_zero_allocate+0x48>)
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <microros_zero_allocate+0x48>)
 80011d2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <microros_zero_allocate+0x4c>)
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <microros_zero_allocate+0x4c>)
 80011e6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fbe7 	bl	80009be <pvPortCallocMicroROS>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20003e58 	.word	0x20003e58
 8001200:	20003e5c 	.word	0x20003e5c
 8001204:	00000000 	.word	0x00000000

08001208 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800121a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800121e:	a320      	add	r3, pc, #128	@ (adr r3, 80012a0 <UTILS_NanosecondsToTimespec+0x98>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff f864 	bl	80002f0 <__aeabi_ldivmod>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001236:	a31a      	add	r3, pc, #104	@ (adr r3, 80012a0 <UTILS_NanosecondsToTimespec+0x98>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f858 	bl	80002f0 <__aeabi_ldivmod>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	da20      	bge.n	800128e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a11      	ldr	r2, [pc, #68]	@ (8001298 <UTILS_NanosecondsToTimespec+0x90>)
 8001252:	fb82 1203 	smull	r1, r2, r2, r3
 8001256:	1712      	asrs	r2, r2, #28
 8001258:	17db      	asrs	r3, r3, #31
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	6979      	ldr	r1, [r7, #20]
 8001268:	17c8      	asrs	r0, r1, #31
 800126a:	460c      	mov	r4, r1
 800126c:	4605      	mov	r5, r0
 800126e:	ebb2 0804 	subs.w	r8, r2, r4
 8001272:	eb63 0905 	sbc.w	r9, r3, r5
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	4906      	ldr	r1, [pc, #24]	@ (800129c <UTILS_NanosecondsToTimespec+0x94>)
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	441a      	add	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
    }
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001298:	44b82fa1 	.word	0x44b82fa1
 800129c:	3b9aca00 	.word	0x3b9aca00
 80012a0:	3b9aca00 	.word	0x3b9aca00
 80012a4:	00000000 	.word	0x00000000

080012a8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80012a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012ac:	b08e      	sub	sp, #56	@ 0x38
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80012b2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80012b4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80012b8:	2300      	movs	r3, #0
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80012ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ce:	4618      	mov	r0, r3
 80012d0:	f005 fff8 	bl	80072c4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80012d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d6:	17da      	asrs	r2, r3, #31
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	61fa      	str	r2, [r7, #28]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	000b      	movs	r3, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80012ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f0:	2200      	movs	r2, #0
 80012f2:	461c      	mov	r4, r3
 80012f4:	4615      	mov	r5, r2
 80012f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012fa:	1911      	adds	r1, r2, r4
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	416b      	adcs	r3, r5
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001306:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800130a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	f04f 0400 	mov.w	r4, #0
 8001316:	f04f 0500 	mov.w	r5, #0
 800131a:	015d      	lsls	r5, r3, #5
 800131c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001320:	0154      	lsls	r4, r2, #5
 8001322:	4622      	mov	r2, r4
 8001324:	462b      	mov	r3, r5
 8001326:	ebb2 0800 	subs.w	r8, r2, r0
 800132a:	eb63 0901 	sbc.w	r9, r3, r1
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800133a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800133e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001342:	4690      	mov	r8, r2
 8001344:	4699      	mov	r9, r3
 8001346:	eb18 0a00 	adds.w	sl, r8, r0
 800134a:	eb49 0b01 	adc.w	fp, r9, r1
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800135a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800135e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001362:	ebb2 040a 	subs.w	r4, r2, sl
 8001366:	603c      	str	r4, [r7, #0]
 8001368:	eb63 030b 	sbc.w	r3, r3, fp
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001372:	4623      	mov	r3, r4
 8001374:	181b      	adds	r3, r3, r0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	462b      	mov	r3, r5
 800137a:	eb41 0303 	adc.w	r3, r1, r3
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	6a3a      	ldr	r2, [r7, #32]
 8001382:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001386:	f7ff ff3f 	bl	8001208 <UTILS_NanosecondsToTimespec>

    return 0;
 800138a:	2300      	movs	r3, #0
 800138c:	4618      	mov	r0, r3
 800138e:	3738      	adds	r7, #56	@ 0x38
 8001390:	46bd      	mov	sp, r7
 8001392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_MspInit+0x50>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a2:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_MspInit+0x50>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_MspInit+0x50>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <HAL_MspInit+0x50>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ba:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <HAL_MspInit+0x50>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_MspInit+0x50>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	210f      	movs	r1, #15
 80013d2:	f06f 0001 	mvn.w	r0, #1
 80013d6:	f000 fc65 	bl	8001ca4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013da:	f001 fa99 	bl	8002910 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	@ 0x30
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013fc:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <HAL_InitTick+0xc4>)
 80013fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001400:	4a2b      	ldr	r2, [pc, #172]	@ (80014b0 <HAL_InitTick+0xc4>)
 8001402:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001406:	6613      	str	r3, [r2, #96]	@ 0x60
 8001408:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <HAL_InitTick+0xc4>)
 800140a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f001 ff6e 	bl	8003300 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001424:	f001 ff56 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8001428:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800142a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142c:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <HAL_InitTick+0xc8>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	3b01      	subs	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_InitTick+0xcc>)
 800143a:	4a20      	ldr	r2, [pc, #128]	@ (80014bc <HAL_InitTick+0xd0>)
 800143c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <HAL_InitTick+0xcc>)
 8001440:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001446:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <HAL_InitTick+0xcc>)
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <HAL_InitTick+0xcc>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_InitTick+0xcc>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001458:	4817      	ldr	r0, [pc, #92]	@ (80014b8 <HAL_InitTick+0xcc>)
 800145a:	f002 fa17 	bl	800388c <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001464:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001468:	2b00      	cmp	r3, #0
 800146a:	d11b      	bne.n	80014a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800146c:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <HAL_InitTick+0xcc>)
 800146e:	f002 fa6f 	bl	8003950 <HAL_TIM_Base_Start_IT>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001478:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800147c:	2b00      	cmp	r3, #0
 800147e:	d111      	bne.n	80014a4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001480:	2019      	movs	r0, #25
 8001482:	f000 fc29 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d808      	bhi.n	800149e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2019      	movs	r0, #25
 8001492:	f000 fc07 	bl	8001ca4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_InitTick+0xd4>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e002      	b.n	80014a4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3730      	adds	r7, #48	@ 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	431bde83 	.word	0x431bde83
 80014b8:	20003e60 	.word	0x20003e60
 80014bc:	40012c00 	.word	0x40012c00
 80014c0:	20000008 	.word	0x20000008

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <DMA1_Channel1_IRQHandler+0x10>)
 8001502:	f000 fdda 	bl	80020ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20003f48 	.word	0x20003f48

08001510 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <DMA1_Channel2_IRQHandler+0x10>)
 8001516:	f000 fdd0 	bl	80020ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20003fa8 	.word	0x20003fa8

08001524 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800152a:	f002 fa89 	bl	8003a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20003e60 	.word	0x20003e60

08001538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800153c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001540:	f001 f8ca 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <LPUART1_IRQHandler+0x10>)
 800154e:	f002 fe9b 	bl	8004288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20003eb4 	.word	0x20003eb4

0800155c <_getpid>:
    errno = ENOSYS;  // "Function not implemented"
    return -1;
}

int _getpid(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_kill>:

int _kill(int pid, int sig)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001576:	f013 fd43 	bl	8015000 <__errno>
 800157a:	4603      	mov	r3, r0
 800157c:	2216      	movs	r2, #22
 800157e:	601a      	str	r2, [r3, #0]
  return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_exit>:

void _exit (int status)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001594:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffe7 	bl	800156c <_kill>
  while (1) {}    /* Make sure we hang here */
 800159e:	bf00      	nop
 80015a0:	e7fd      	b.n	800159e <_exit+0x12>

080015a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e00a      	b.n	80015ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b4:	f3af 8000 	nop.w
 80015b8:	4601      	mov	r1, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	60ba      	str	r2, [r7, #8]
 80015c0:	b2ca      	uxtb	r2, r1
 80015c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbf0      	blt.n	80015b4 <_read+0x12>
  }

  return len;
 80015d2:	687b      	ldr	r3, [r7, #4]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e009      	b.n	8001602 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	60ba      	str	r2, [r7, #8]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbf1      	blt.n	80015ee <_write+0x12>
  }
  return len;
 800160a:	687b      	ldr	r3, [r7, #4]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_close>:

int _close(int file)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800163c:	605a      	str	r2, [r3, #4]
  return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_isatty>:

int _isatty(int file)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f013 fca8 	bl	8015000 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20020000 	.word	0x20020000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	20003eb0 	.word	0x20003eb0
 80016e4:	2000ae50 	.word	0x2000ae50

080016e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001712:	4a21      	ldr	r2, [pc, #132]	@ (8001798 <MX_LPUART1_UART_Init+0x8c>)
 8001714:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8001716:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001718:	4a20      	ldr	r2, [pc, #128]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800171a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001730:	220c      	movs	r2, #12
 8001732:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800174c:	4811      	ldr	r0, [pc, #68]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 800174e:	f002 fbe9 	bl	8003f24 <HAL_UART_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001758:	f7ff fcb2 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175c:	2100      	movs	r1, #0
 800175e:	480d      	ldr	r0, [pc, #52]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001760:	f004 f8f9 	bl	8005956 <HAL_UARTEx_SetTxFifoThreshold>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800176a:	f7ff fca9 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176e:	2100      	movs	r1, #0
 8001770:	4808      	ldr	r0, [pc, #32]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001772:	f004 f92e 	bl	80059d2 <HAL_UARTEx_SetRxFifoThreshold>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800177c:	f7ff fca0 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <MX_LPUART1_UART_Init+0x88>)
 8001782:	f004 f8af 	bl	80058e4 <HAL_UARTEx_DisableFifoMode>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800178c:	f7ff fc98 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20003eb4 	.word	0x20003eb4
 8001798:	40008000 	.word	0x40008000
 800179c:	001e8480 	.word	0x001e8480

080017a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09e      	sub	sp, #120	@ 0x78
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2254      	movs	r2, #84	@ 0x54
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f013 fb89 	bl	8014ed8 <memset>
  if(uartHandle->Instance==LPUART1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001904 <HAL_UART_MspInit+0x164>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f040 8094 	bne.w	80018fa <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017d2:	2320      	movs	r3, #32
 80017d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 fe06 	bl	80033f0 <HAL_RCCEx_PeriphCLKConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017ea:	f7ff fc69 	bl	80010c0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017ee:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <HAL_UART_MspInit+0x168>)
 80017f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f2:	4a45      	ldr	r2, [pc, #276]	@ (8001908 <HAL_UART_MspInit+0x168>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80017fa:	4b43      	ldr	r3, [pc, #268]	@ (8001908 <HAL_UART_MspInit+0x168>)
 80017fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b40      	ldr	r3, [pc, #256]	@ (8001908 <HAL_UART_MspInit+0x168>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a3f      	ldr	r2, [pc, #252]	@ (8001908 <HAL_UART_MspInit+0x168>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <HAL_UART_MspInit+0x168>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800181e:	230c      	movs	r3, #12
 8001820:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800182e:	230c      	movs	r3, #12
 8001830:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183c:	f000 fd98 	bl	8002370 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001840:	4b32      	ldr	r3, [pc, #200]	@ (800190c <HAL_UART_MspInit+0x16c>)
 8001842:	4a33      	ldr	r2, [pc, #204]	@ (8001910 <HAL_UART_MspInit+0x170>)
 8001844:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001846:	4b31      	ldr	r3, [pc, #196]	@ (800190c <HAL_UART_MspInit+0x16c>)
 8001848:	2222      	movs	r2, #34	@ 0x22
 800184a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800184c:	4b2f      	ldr	r3, [pc, #188]	@ (800190c <HAL_UART_MspInit+0x16c>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001852:	4b2e      	ldr	r3, [pc, #184]	@ (800190c <HAL_UART_MspInit+0x16c>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001858:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <HAL_UART_MspInit+0x16c>)
 800185a:	2280      	movs	r2, #128	@ 0x80
 800185c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800185e:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <HAL_UART_MspInit+0x16c>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001864:	4b29      	ldr	r3, [pc, #164]	@ (800190c <HAL_UART_MspInit+0x16c>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800186a:	4b28      	ldr	r3, [pc, #160]	@ (800190c <HAL_UART_MspInit+0x16c>)
 800186c:	2220      	movs	r2, #32
 800186e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001870:	4b26      	ldr	r3, [pc, #152]	@ (800190c <HAL_UART_MspInit+0x16c>)
 8001872:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001876:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001878:	4824      	ldr	r0, [pc, #144]	@ (800190c <HAL_UART_MspInit+0x16c>)
 800187a:	f000 fa3b 	bl	8001cf4 <HAL_DMA_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001884:	f7ff fc1c 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a20      	ldr	r2, [pc, #128]	@ (800190c <HAL_UART_MspInit+0x16c>)
 800188c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001890:	4a1e      	ldr	r2, [pc, #120]	@ (800190c <HAL_UART_MspInit+0x16c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001896:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <HAL_UART_MspInit+0x174>)
 8001898:	4a1f      	ldr	r2, [pc, #124]	@ (8001918 <HAL_UART_MspInit+0x178>)
 800189a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <HAL_UART_MspInit+0x174>)
 800189e:	2223      	movs	r2, #35	@ 0x23
 80018a0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018a4:	2210      	movs	r2, #16
 80018a6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018b0:	2280      	movs	r2, #128	@ 0x80
 80018b2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018c8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80018cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80018ce:	4811      	ldr	r0, [pc, #68]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018d0:	f000 fa10 	bl	8001cf4 <HAL_DMA_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80018da:	f7ff fbf1 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001914 <HAL_UART_MspInit+0x174>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2105      	movs	r1, #5
 80018ee:	205b      	movs	r0, #91	@ 0x5b
 80018f0:	f000 f9d8 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80018f4:	205b      	movs	r0, #91	@ 0x5b
 80018f6:	f000 f9ef 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3778      	adds	r7, #120	@ 0x78
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40008000 	.word	0x40008000
 8001908:	40021000 	.word	0x40021000
 800190c:	20003f48 	.word	0x20003f48
 8001910:	40020008 	.word	0x40020008
 8001914:	20003fa8 	.word	0x20003fa8
 8001918:	4002001c 	.word	0x4002001c

0800191c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800192a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800192c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001930:	4904      	ldr	r1, [pc, #16]	@ (8001944 <cubemx_transport_open+0x28>)
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f002 fbc6 	bl	80040c4 <HAL_UART_Receive_DMA>
    return true;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20004008 	.word	0x20004008

08001948 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001956:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f002 fbff 	bl	800415c <HAL_UART_DMAStop>
    return true;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800197c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001984:	2b20      	cmp	r3, #32
 8001986:	d11b      	bne.n	80019c0 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f002 fb17 	bl	8003fc4 <HAL_UART_Transmit_DMA>
 8001996:	4603      	mov	r3, r0
 8001998:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800199a:	e002      	b.n	80019a2 <cubemx_transport_write+0x3a>
            osDelay(1);
 800199c:	2001      	movs	r0, #1
 800199e:	f004 f9c5 	bl	8005d2c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019a2:	7cfb      	ldrb	r3, [r7, #19]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d104      	bne.n	80019b2 <cubemx_transport_write+0x4a>
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d1f4      	bne.n	800199c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80019b2:	7cfb      	ldrb	r3, [r7, #19]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <cubemx_transport_write+0x54>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	e002      	b.n	80019c2 <cubemx_transport_write+0x5a>
 80019bc:	2300      	movs	r3, #0
 80019be:	e000      	b.n	80019c2 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80019c0:	2300      	movs	r3, #0
    }
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80019e0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80019e6:	b672      	cpsid	i
}
 80019e8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80019f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a68 <cubemx_transport_read+0x9c>)
 80019fa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019fc:	b662      	cpsie	i
}
 80019fe:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	3301      	adds	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f004 f990 	bl	8005d2c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a0c:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <cubemx_transport_read+0xa0>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <cubemx_transport_read+0x9c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d103      	bne.n	8001a20 <cubemx_transport_read+0x54>
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbe2      	blt.n	80019e6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a24:	e011      	b.n	8001a4a <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <cubemx_transport_read+0xa0>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	440b      	add	r3, r1
 8001a30:	490f      	ldr	r1, [pc, #60]	@ (8001a70 <cubemx_transport_read+0xa4>)
 8001a32:	5c8a      	ldrb	r2, [r1, r2]
 8001a34:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <cubemx_transport_read+0xa0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <cubemx_transport_read+0xa0>)
 8001a42:	6013      	str	r3, [r2, #0]
        wrote++;
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a4a:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <cubemx_transport_read+0xa0>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <cubemx_transport_read+0x9c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d003      	beq.n	8001a5e <cubemx_transport_read+0x92>
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3e3      	bcc.n	8001a26 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	2000480c 	.word	0x2000480c
 8001a6c:	20004808 	.word	0x20004808
 8001a70:	20004008 	.word	0x20004008

08001a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a78:	f7ff fe36 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7e:	490d      	ldr	r1, [pc, #52]	@ (8001ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a80:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <LoopForever+0xe>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a94:	4c0a      	ldr	r4, [pc, #40]	@ (8001ac0 <LoopForever+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f013 fab3 	bl	801500c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aa6:	f7ff fa95 	bl	8000fd4 <main>

08001aaa <LoopForever>:

LoopForever:
    b LoopForever
 8001aaa:	e7fe      	b.n	8001aaa <LoopForever>
  ldr   r0, =_estack
 8001aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ab8:	08016ccc 	.word	0x08016ccc
  ldr r2, =_sbss
 8001abc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ac0:	2000ae4c 	.word	0x2000ae4c

08001ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC1_2_IRQHandler>

08001ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f8dc 	bl	8001c8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f7ff fc88 	bl	80013ec <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e001      	b.n	8001aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae8:	f7ff fc56 	bl	8001398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aec:	79fb      	ldrb	r3, [r7, #7]

}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_IncTick+0x1c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_IncTick+0x20>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a03      	ldr	r2, [pc, #12]	@ (8001b14 <HAL_IncTick+0x1c>)
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	20004810 	.word	0x20004810
 8001b18:	2000000c 	.word	0x2000000c

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20004810 	.word	0x20004810

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	@ (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	@ (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff4c 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb2:	f7ff ff63 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	6978      	ldr	r0, [r7, #20]
 8001cbe:	f7ff ffb3 	bl	8001c28 <NVIC_EncodePriority>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff82 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff56 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e08d      	b.n	8001e22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <HAL_DMA_Init+0x138>)
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d80f      	bhi.n	8001d32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <HAL_DMA_Init+0x13c>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <HAL_DMA_Init+0x140>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a42      	ldr	r2, [pc, #264]	@ (8001e38 <HAL_DMA_Init+0x144>)
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d30:	e00e      	b.n	8001d50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_DMA_Init+0x148>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e34 <HAL_DMA_Init+0x140>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	009a      	lsls	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e40 <HAL_DMA_Init+0x14c>)
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fa82 	bl	80022ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001db0:	d102      	bne.n	8001db8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001dcc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <HAL_DMA_Init+0x104>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d80c      	bhi.n	8001df8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 faa2 	bl	8002328 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e008      	b.n	8001e0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40020407 	.word	0x40020407
 8001e30:	bffdfff8 	.word	0xbffdfff8
 8001e34:	cccccccd 	.word	0xcccccccd
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	bffdfbf8 	.word	0xbffdfbf8
 8001e40:	40020400 	.word	0x40020400

08001e44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Start_IT+0x20>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e066      	b.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d155      	bne.n	8001f24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f9c7 	bl	8002230 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 020e 	orr.w	r2, r2, #14
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e00f      	b.n	8001edc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 020a 	orr.w	r2, r2, #10
 8001eda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ef8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e005      	b.n	8001f30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d005      	beq.n	8001f5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e037      	b.n	8001fce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020e 	bic.w	r2, r2, #14
 8001f6c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f7c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	f003 021f 	and.w	r2, r3, #31
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001faa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fcc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d00d      	beq.n	8002020 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2204      	movs	r2, #4
 8002008:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	e047      	b.n	80020b0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020e 	bic.w	r2, r2, #14
 800202e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800204e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800206c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002084:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800208e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
    }
  }
  return status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2204      	movs	r2, #4
 80020dc:	409a      	lsls	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d026      	beq.n	8002134 <HAL_DMA_IRQHandler+0x7a>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d021      	beq.n	8002134 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0204 	bic.w	r2, r2, #4
 800210c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	2104      	movs	r1, #4
 800211c:	fa01 f202 	lsl.w	r2, r1, r2
 8002120:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	2b00      	cmp	r3, #0
 8002128:	d071      	beq.n	800220e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002132:	e06c      	b.n	800220e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2202      	movs	r2, #2
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d02e      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d029      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020a 	bic.w	r2, r2, #10
 800216e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	2102      	movs	r1, #2
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d038      	beq.n	800220e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021a4:	e033      	b.n	800220e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2208      	movs	r2, #8
 80021b0:	409a      	lsls	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d02a      	beq.n	8002210 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d025      	beq.n	8002210 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 020e 	bic.w	r2, r2, #14
 80021d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800220e:	bf00      	nop
 8002210:	bf00      	nop
}
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002246:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002258:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f003 021f 	and.w	r2, r3, #31
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d108      	bne.n	8002290 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800228e:	e007      	b.n	80022a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80022bc:	429a      	cmp	r2, r3
 80022be:	d802      	bhi.n	80022c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80022c0:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e001      	b.n	80022ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80022c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3b08      	subs	r3, #8
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	009a      	lsls	r2, r3, #2
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80022f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2201      	movs	r2, #1
 8002300:	409a      	lsls	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40020407 	.word	0x40020407
 8002318:	40020800 	.word	0x40020800
 800231c:	40020820 	.word	0x40020820
 8002320:	cccccccd 	.word	0xcccccccd
 8002324:	40020880 	.word	0x40020880

08002328 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a08      	ldr	r2, [pc, #32]	@ (800236c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800234a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3b01      	subs	r3, #1
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2201      	movs	r2, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	1000823f 	.word	0x1000823f
 800236c:	40020940 	.word	0x40020940

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800237e:	e15a      	b.n	8002636 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2101      	movs	r1, #1
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 814c 	beq.w	8002630 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d005      	beq.n	80023b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d130      	bne.n	8002412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023e6:	2201      	movs	r2, #1
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 0201 	and.w	r2, r3, #1
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b03      	cmp	r3, #3
 800241c:	d017      	beq.n	800244e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d123      	bne.n	80024a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	08da      	lsrs	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3208      	adds	r2, #8
 800249c:	6939      	ldr	r1, [r7, #16]
 800249e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80a6 	beq.w	8002630 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e4:	4b5b      	ldr	r3, [pc, #364]	@ (8002654 <HAL_GPIO_Init+0x2e4>)
 80024e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002654 <HAL_GPIO_Init+0x2e4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80024f0:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <HAL_GPIO_Init+0x2e4>)
 80024f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fc:	4a56      	ldr	r2, [pc, #344]	@ (8002658 <HAL_GPIO_Init+0x2e8>)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	220f      	movs	r2, #15
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002526:	d01f      	beq.n	8002568 <HAL_GPIO_Init+0x1f8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a4c      	ldr	r2, [pc, #304]	@ (800265c <HAL_GPIO_Init+0x2ec>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d019      	beq.n	8002564 <HAL_GPIO_Init+0x1f4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4b      	ldr	r2, [pc, #300]	@ (8002660 <HAL_GPIO_Init+0x2f0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <HAL_GPIO_Init+0x1f0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4a      	ldr	r2, [pc, #296]	@ (8002664 <HAL_GPIO_Init+0x2f4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00d      	beq.n	800255c <HAL_GPIO_Init+0x1ec>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a49      	ldr	r2, [pc, #292]	@ (8002668 <HAL_GPIO_Init+0x2f8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <HAL_GPIO_Init+0x1e8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a48      	ldr	r2, [pc, #288]	@ (800266c <HAL_GPIO_Init+0x2fc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_GPIO_Init+0x1e4>
 8002550:	2305      	movs	r3, #5
 8002552:	e00a      	b.n	800256a <HAL_GPIO_Init+0x1fa>
 8002554:	2306      	movs	r3, #6
 8002556:	e008      	b.n	800256a <HAL_GPIO_Init+0x1fa>
 8002558:	2304      	movs	r3, #4
 800255a:	e006      	b.n	800256a <HAL_GPIO_Init+0x1fa>
 800255c:	2303      	movs	r3, #3
 800255e:	e004      	b.n	800256a <HAL_GPIO_Init+0x1fa>
 8002560:	2302      	movs	r3, #2
 8002562:	e002      	b.n	800256a <HAL_GPIO_Init+0x1fa>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_GPIO_Init+0x1fa>
 8002568:	2300      	movs	r3, #0
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	f002 0203 	and.w	r2, r2, #3
 8002570:	0092      	lsls	r2, r2, #2
 8002572:	4093      	lsls	r3, r2
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257a:	4937      	ldr	r1, [pc, #220]	@ (8002658 <HAL_GPIO_Init+0x2e8>)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002588:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <HAL_GPIO_Init+0x300>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ac:	4a30      	ldr	r2, [pc, #192]	@ (8002670 <HAL_GPIO_Init+0x300>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002670 <HAL_GPIO_Init+0x300>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025d6:	4a26      	ldr	r2, [pc, #152]	@ (8002670 <HAL_GPIO_Init+0x300>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025dc:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <HAL_GPIO_Init+0x300>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002600:	4a1b      	ldr	r2, [pc, #108]	@ (8002670 <HAL_GPIO_Init+0x300>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002606:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <HAL_GPIO_Init+0x300>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800262a:	4a11      	ldr	r2, [pc, #68]	@ (8002670 <HAL_GPIO_Init+0x300>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3301      	adds	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	f47f ae9d 	bne.w	8002380 <HAL_GPIO_Init+0x10>
  }
}
 8002646:	bf00      	nop
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40021000 	.word	0x40021000
 8002658:	40010000 	.word	0x40010000
 800265c:	48000400 	.word	0x48000400
 8002660:	48000800 	.word	0x48000800
 8002664:	48000c00 	.word	0x48000c00
 8002668:	48001000 	.word	0x48001000
 800266c:	48001400 	.word	0x48001400
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002690:	e002      	b.n	8002698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43d9      	mvns	r1, r3
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	400b      	ands	r3, r1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fb00 	bl	8000cfc <HAL_GPIO_EXTI_Callback>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e041      	b.n	800279e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002722:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f245 5255 	movw	r2, #21845	@ 0x5555
 800272c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6852      	ldr	r2, [r2, #4]
 8002736:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6892      	ldr	r2, [r2, #8]
 8002740:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002742:	f7ff f9eb 	bl	8001b1c <HAL_GetTick>
 8002746:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002748:	e00f      	b.n	800276a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800274a:	f7ff f9e7 	bl	8001b1c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b31      	cmp	r3, #49	@ 0x31
 8002756:	d908      	bls.n	800276a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e019      	b.n	800279e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e8      	bne.n	800274a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	429a      	cmp	r2, r3
 8002784:	d005      	beq.n	8002792 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68d2      	ldr	r2, [r2, #12]
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	e004      	b.n	800279c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800279a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80027b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d141      	bne.n	800285a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e2:	d131      	bne.n	8002848 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027e4:	4b47      	ldr	r3, [pc, #284]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027ea:	4a46      	ldr	r2, [pc, #280]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f4:	4b43      	ldr	r3, [pc, #268]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027fc:	4a41      	ldr	r2, [pc, #260]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002804:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2232      	movs	r2, #50	@ 0x32
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	4a3f      	ldr	r2, [pc, #252]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0c9b      	lsrs	r3, r3, #18
 8002816:	3301      	adds	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800281a:	e002      	b.n	8002822 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3b01      	subs	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002822:	4b38      	ldr	r3, [pc, #224]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282e:	d102      	bne.n	8002836 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f2      	bne.n	800281c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002836:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002842:	d158      	bne.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e057      	b.n	80028f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002848:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800284e:	4a2d      	ldr	r2, [pc, #180]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002858:	e04d      	b.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002860:	d141      	bne.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002862:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286e:	d131      	bne.n	80028d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002870:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002876:	4a23      	ldr	r2, [pc, #140]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002880:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002888:	4a1e      	ldr	r2, [pc, #120]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800288e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002890:	4b1d      	ldr	r3, [pc, #116]	@ (8002908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2232      	movs	r2, #50	@ 0x32
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	4a1c      	ldr	r2, [pc, #112]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	0c9b      	lsrs	r3, r3, #18
 80028a2:	3301      	adds	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a6:	e002      	b.n	80028ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ba:	d102      	bne.n	80028c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f2      	bne.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ce:	d112      	bne.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e011      	b.n	80028f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028da:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028e4:	e007      	b.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40007000 	.word	0x40007000
 8002908:	20000004 	.word	0x20000004
 800290c:	431bde83 	.word	0x431bde83

08002910 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002914:	4b05      	ldr	r3, [pc, #20]	@ (800292c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a04      	ldr	r2, [pc, #16]	@ (800292c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800291a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800291e:	6093      	str	r3, [r2, #8]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40007000 	.word	0x40007000

08002930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e2fe      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d075      	beq.n	8002a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294e:	4b97      	ldr	r3, [pc, #604]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002958:	4b94      	ldr	r3, [pc, #592]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b0c      	cmp	r3, #12
 8002966:	d102      	bne.n	800296e <HAL_RCC_OscConfig+0x3e>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d002      	beq.n	8002974 <HAL_RCC_OscConfig+0x44>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d10b      	bne.n	800298c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d05b      	beq.n	8002a38 <HAL_RCC_OscConfig+0x108>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d157      	bne.n	8002a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e2d9      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x74>
 8002996:	4b85      	ldr	r3, [pc, #532]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a84      	ldr	r2, [pc, #528]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e01d      	b.n	80029e0 <HAL_RCC_OscConfig+0xb0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x98>
 80029ae:	4b7f      	ldr	r3, [pc, #508]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7b      	ldr	r2, [pc, #492]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0xb0>
 80029c8:	4b78      	ldr	r3, [pc, #480]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a77      	ldr	r2, [pc, #476]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b75      	ldr	r3, [pc, #468]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a74      	ldr	r2, [pc, #464]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff f898 	bl	8001b1c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff f894 	bl	8001b1c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e29e      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a02:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0xc0>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff f884 	bl	8001b1c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff f880 	bl	8001b1c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	@ 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e28a      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2a:	4b60      	ldr	r3, [pc, #384]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0xe8>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d075      	beq.n	8002b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a46:	4b59      	ldr	r3, [pc, #356]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a50:	4b56      	ldr	r3, [pc, #344]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b0c      	cmp	r3, #12
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_OscConfig+0x136>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_OscConfig+0x13c>
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d11f      	bne.n	8002aac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_OscConfig+0x154>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e25d      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b49      	ldr	r3, [pc, #292]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	4946      	ldr	r1, [pc, #280]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a98:	4b45      	ldr	r3, [pc, #276]	@ (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fca5 	bl	80013ec <HAL_InitTick>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d043      	beq.n	8002b30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e249      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f82c 	bl	8001b1c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7ff f828 	bl	8001b1c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e232      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ada:	4b34      	ldr	r3, [pc, #208]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	492d      	ldr	r1, [pc, #180]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
 8002afa:	e01a      	b.n	8002b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a2a      	ldr	r2, [pc, #168]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7ff f808 	bl	8001b1c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7ff f804 	bl	8001b1c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e20e      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b22:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1e0>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d041      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b46:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4c:	4a17      	ldr	r2, [pc, #92]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b56:	f7fe ffe1 	bl	8001b1c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5e:	f7fe ffdd 	bl	8001b1c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e1e7      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b70:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ef      	beq.n	8002b5e <HAL_RCC_OscConfig+0x22e>
 8002b7e:	e020      	b.n	8002bc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b80:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b86:	4a09      	ldr	r2, [pc, #36]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe ffc4 	bl	8001b1c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b96:	e00d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe ffc0 	bl	8001b1c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d906      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1ca      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ea      	bne.n	8002b98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80a6 	beq.w	8002d1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bd4:	4b84      	ldr	r3, [pc, #528]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2b4>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x2b6>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	4b7f      	ldr	r3, [pc, #508]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bee:	4a7e      	ldr	r2, [pc, #504]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c02:	2301      	movs	r3, #1
 8002c04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c06:	4b79      	ldr	r3, [pc, #484]	@ (8002dec <HAL_RCC_OscConfig+0x4bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c12:	4b76      	ldr	r3, [pc, #472]	@ (8002dec <HAL_RCC_OscConfig+0x4bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a75      	ldr	r2, [pc, #468]	@ (8002dec <HAL_RCC_OscConfig+0x4bc>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe ff7d 	bl	8001b1c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7fe ff79 	bl	8001b1c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e183      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c38:	4b6c      	ldr	r3, [pc, #432]	@ (8002dec <HAL_RCC_OscConfig+0x4bc>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d108      	bne.n	8002c5e <HAL_RCC_OscConfig+0x32e>
 8002c4c:	4b66      	ldr	r3, [pc, #408]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	4a65      	ldr	r2, [pc, #404]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5c:	e024      	b.n	8002ca8 <HAL_RCC_OscConfig+0x378>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d110      	bne.n	8002c88 <HAL_RCC_OscConfig+0x358>
 8002c66:	4b60      	ldr	r3, [pc, #384]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c76:	4b5c      	ldr	r3, [pc, #368]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c86:	e00f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x378>
 8002c88:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	4a56      	ldr	r2, [pc, #344]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c98:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	4a52      	ldr	r2, [pc, #328]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d016      	beq.n	8002cde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe ff34 	bl	8001b1c <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fe ff30 	bl	8001b1c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e138      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cce:	4b46      	ldr	r3, [pc, #280]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ed      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x388>
 8002cdc:	e015      	b.n	8002d0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe ff1d 	bl	8001b1c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe ff19 	bl	8001b1c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e121      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ed      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b35      	ldr	r3, [pc, #212]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	4a34      	ldr	r2, [pc, #208]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d03c      	beq.n	8002da2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01c      	beq.n	8002d6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d30:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d36:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe feec 	bl	8001b1c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d48:	f7fe fee8 	bl	8001b1c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0f2      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d5a:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ef      	beq.n	8002d48 <HAL_RCC_OscConfig+0x418>
 8002d68:	e01b      	b.n	8002da2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d70:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fecf 	bl	8001b1c <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d82:	f7fe fecb 	bl	8001b1c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0d5      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1ef      	bne.n	8002d82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80c9 	beq.w	8002f3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dac:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	f000 8083 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d15e      	bne.n	8002e80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <HAL_RCC_OscConfig+0x4b8>)
 8002dc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe fea5 	bl	8001b1c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd4:	e00c      	b.n	8002df0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fea1 	bl	8001b1c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d905      	bls.n	8002df0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0ab      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df0:	4b55      	ldr	r3, [pc, #340]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ec      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfc:	4b52      	ldr	r3, [pc, #328]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	4b52      	ldr	r3, [pc, #328]	@ (8002f4c <HAL_RCC_OscConfig+0x61c>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6a11      	ldr	r1, [r2, #32]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e0c:	3a01      	subs	r2, #1
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	4311      	orrs	r1, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002e16:	0212      	lsls	r2, r2, #8
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e1e:	0852      	lsrs	r2, r2, #1
 8002e20:	3a01      	subs	r2, #1
 8002e22:	0552      	lsls	r2, r2, #21
 8002e24:	4311      	orrs	r1, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e2a:	0852      	lsrs	r2, r2, #1
 8002e2c:	3a01      	subs	r2, #1
 8002e2e:	0652      	lsls	r2, r2, #25
 8002e30:	4311      	orrs	r1, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e36:	06d2      	lsls	r2, r2, #27
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	4943      	ldr	r1, [pc, #268]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e40:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a40      	ldr	r2, [pc, #256]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a3d      	ldr	r2, [pc, #244]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fe60 	bl	8001b1c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fe5c 	bl	8001b1c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e066      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e72:	4b35      	ldr	r3, [pc, #212]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x530>
 8002e7e:	e05e      	b.n	8002f3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e80:	4b31      	ldr	r3, [pc, #196]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a30      	ldr	r2, [pc, #192]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fe46 	bl	8001b1c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe fe42 	bl	8001b1c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e04c      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002eb2:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	4924      	ldr	r1, [pc, #144]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002eb8:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <HAL_RCC_OscConfig+0x620>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	60cb      	str	r3, [r1, #12]
 8002ebe:	e03e      	b.n	8002f3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e039      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <HAL_RCC_OscConfig+0x618>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d12c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	3b01      	subs	r3, #1
 8002eec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d123      	bne.n	8002f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d11b      	bne.n	8002f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d113      	bne.n	8002f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	3b01      	subs	r3, #1
 8002f34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3720      	adds	r7, #32
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	019f800c 	.word	0x019f800c
 8002f50:	feeefffc 	.word	0xfeeefffc

08002f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e11e      	b.n	80031aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b91      	ldr	r3, [pc, #580]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d910      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b8e      	ldr	r3, [pc, #568]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 020f 	bic.w	r2, r3, #15
 8002f82:	498c      	ldr	r1, [pc, #560]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e106      	b.n	80031aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d073      	beq.n	8003090 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d129      	bne.n	8003004 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb0:	4b81      	ldr	r3, [pc, #516]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0f4      	b.n	80031aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fc0:	f000 f9d0 	bl	8003364 <RCC_GetSysClockFreqFromPLLSource>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4a7c      	ldr	r2, [pc, #496]	@ (80031bc <HAL_RCC_ClockConfig+0x268>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d93f      	bls.n	800304e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fce:	4b7a      	ldr	r3, [pc, #488]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d033      	beq.n	800304e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d12f      	bne.n	800304e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fee:	4b72      	ldr	r3, [pc, #456]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ff6:	4a70      	ldr	r2, [pc, #448]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ffc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e024      	b.n	800304e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300c:	4b6a      	ldr	r3, [pc, #424]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0c6      	b.n	80031aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800301c:	4b66      	ldr	r3, [pc, #408]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0be      	b.n	80031aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800302c:	f000 f8ce 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8003030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4a61      	ldr	r2, [pc, #388]	@ (80031bc <HAL_RCC_ClockConfig+0x268>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d909      	bls.n	800304e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800303a:	4b5f      	ldr	r3, [pc, #380]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003042:	4a5d      	ldr	r2, [pc, #372]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8003044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003048:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4957      	ldr	r1, [pc, #348]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003060:	f7fe fd5c 	bl	8001b1c <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fe fd58 	bl	8001b1c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e095      	b.n	80031aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b4e      	ldr	r3, [pc, #312]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d023      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b43      	ldr	r3, [pc, #268]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a42      	ldr	r2, [pc, #264]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 80030ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030c0:	4b3d      	ldr	r3, [pc, #244]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030c8:	4a3b      	ldr	r2, [pc, #236]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 80030ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b39      	ldr	r3, [pc, #228]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4936      	ldr	r1, [pc, #216]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b80      	cmp	r3, #128	@ 0x80
 80030e8:	d105      	bne.n	80030f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030ea:	4b33      	ldr	r3, [pc, #204]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	4a32      	ldr	r2, [pc, #200]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 80030f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f6:	4b2f      	ldr	r3, [pc, #188]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d21d      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003104:	4b2b      	ldr	r3, [pc, #172]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 020f 	bic.w	r2, r3, #15
 800310c:	4929      	ldr	r1, [pc, #164]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003114:	f7fe fd02 	bl	8001b1c <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe fcfe 	bl	8001b1c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e03b      	b.n	80031aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d1ed      	bne.n	800311c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314c:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4917      	ldr	r1, [pc, #92]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316a:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	490f      	ldr	r1, [pc, #60]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800317e:	f000 f825 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8003182:	4602      	mov	r2, r0
 8003184:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	490c      	ldr	r1, [pc, #48]	@ (80031c0 <HAL_RCC_ClockConfig+0x26c>)
 8003190:	5ccb      	ldrb	r3, [r1, r3]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	4a0a      	ldr	r2, [pc, #40]	@ (80031c4 <HAL_RCC_ClockConfig+0x270>)
 800319c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800319e:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <HAL_RCC_ClockConfig+0x274>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe f922 	bl	80013ec <HAL_InitTick>
 80031a8:	4603      	mov	r3, r0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	04c4b400 	.word	0x04c4b400
 80031c0:	08015dbc 	.word	0x08015dbc
 80031c4:	20000004 	.word	0x20000004
 80031c8:	20000008 	.word	0x20000008

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d102      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031de:	4b2a      	ldr	r3, [pc, #168]	@ (8003288 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e047      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031e4:	4b27      	ldr	r3, [pc, #156]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f0:	4b26      	ldr	r3, [pc, #152]	@ (800328c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	e03e      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031f6:	4b23      	ldr	r3, [pc, #140]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d136      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003202:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800320c:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	3301      	adds	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d10c      	bne.n	800323a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003220:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800322a:	68d2      	ldr	r2, [r2, #12]
 800322c:	0a12      	lsrs	r2, r2, #8
 800322e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	617b      	str	r3, [r7, #20]
      break;
 8003238:	e00c      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800323a:	4a13      	ldr	r2, [pc, #76]	@ (8003288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	4a10      	ldr	r2, [pc, #64]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003244:	68d2      	ldr	r2, [r2, #12]
 8003246:	0a12      	lsrs	r2, r2, #8
 8003248:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800324c:	fb02 f303 	mul.w	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]
      break;
 8003252:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0e5b      	lsrs	r3, r3, #25
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	3301      	adds	r3, #1
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	e001      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003274:	693b      	ldr	r3, [r7, #16]
}
 8003276:	4618      	mov	r0, r3
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	00f42400 	.word	0x00f42400
 800328c:	016e3600 	.word	0x016e3600

08003290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000004 	.word	0x20000004

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032ac:	f7ff fff0 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4904      	ldr	r1, [pc, #16]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08015dcc 	.word	0x08015dcc

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032d8:	f7ff ffda 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0adb      	lsrs	r3, r3, #11
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4904      	ldr	r1, [pc, #16]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08015dcc 	.word	0x08015dcc

08003300 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	220f      	movs	r2, #15
 800330e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003310:	4b12      	ldr	r3, [pc, #72]	@ (800335c <HAL_RCC_GetClockConfig+0x5c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800331c:	4b0f      	ldr	r3, [pc, #60]	@ (800335c <HAL_RCC_GetClockConfig+0x5c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003334:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_GetClockConfig+0x5c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	08db      	lsrs	r3, r3, #3
 800333a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <HAL_RCC_GetClockConfig+0x60>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 020f 	and.w	r2, r3, #15
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	601a      	str	r2, [r3, #0]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
 8003360:	40022000 	.word	0x40022000

08003364 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800336a:	4b1e      	ldr	r3, [pc, #120]	@ (80033e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003374:	4b1b      	ldr	r3, [pc, #108]	@ (80033e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3301      	adds	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d10c      	bne.n	80033a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003388:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003392:	68d2      	ldr	r2, [r2, #12]
 8003394:	0a12      	lsrs	r2, r2, #8
 8003396:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	617b      	str	r3, [r7, #20]
    break;
 80033a0:	e00c      	b.n	80033bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033a2:	4a12      	ldr	r2, [pc, #72]	@ (80033ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	4a0e      	ldr	r2, [pc, #56]	@ (80033e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033ac:	68d2      	ldr	r2, [r2, #12]
 80033ae:	0a12      	lsrs	r2, r2, #8
 80033b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
    break;
 80033ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0e5b      	lsrs	r3, r3, #25
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	3301      	adds	r3, #1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80033d6:	687b      	ldr	r3, [r7, #4]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40021000 	.word	0x40021000
 80033e8:	016e3600 	.word	0x016e3600
 80033ec:	00f42400 	.word	0x00f42400

080033f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033f8:	2300      	movs	r3, #0
 80033fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033fc:	2300      	movs	r3, #0
 80033fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8098 	beq.w	800353e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b43      	ldr	r3, [pc, #268]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b40      	ldr	r3, [pc, #256]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	4a3f      	ldr	r2, [pc, #252]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003428:	6593      	str	r3, [r2, #88]	@ 0x58
 800342a:	4b3d      	ldr	r3, [pc, #244]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800343a:	4b3a      	ldr	r3, [pc, #232]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a39      	ldr	r2, [pc, #228]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003446:	f7fe fb69 	bl	8001b1c <HAL_GetTick>
 800344a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800344c:	e009      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344e:	f7fe fb65 	bl	8001b1c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d902      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	74fb      	strb	r3, [r7, #19]
        break;
 8003460:	e005      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003462:	4b30      	ldr	r3, [pc, #192]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0ef      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d159      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003474:	4b2a      	ldr	r3, [pc, #168]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800347e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01e      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	429a      	cmp	r2, r3
 800348e:	d019      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003490:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800349c:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034bc:	4a18      	ldr	r2, [pc, #96]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d016      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fe fb25 	bl	8001b1c <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d4:	e00b      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe fb21 	bl	8001b1c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d902      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	74fb      	strb	r3, [r7, #19]
            break;
 80034ec:	e006      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ec      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003502:	4b07      	ldr	r3, [pc, #28]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003510:	4903      	ldr	r1, [pc, #12]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003518:	e008      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	74bb      	strb	r3, [r7, #18]
 800351e:	e005      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352c:	7c7b      	ldrb	r3, [r7, #17]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003532:	4ba7      	ldr	r3, [pc, #668]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	4aa6      	ldr	r2, [pc, #664]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800354a:	4ba1      	ldr	r3, [pc, #644]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003550:	f023 0203 	bic.w	r2, r3, #3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	499d      	ldr	r1, [pc, #628]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800356c:	4b98      	ldr	r3, [pc, #608]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003572:	f023 020c 	bic.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4995      	ldr	r1, [pc, #596]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800358e:	4b90      	ldr	r3, [pc, #576]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003594:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	498c      	ldr	r1, [pc, #560]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035b0:	4b87      	ldr	r3, [pc, #540]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	4984      	ldr	r1, [pc, #528]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035d2:	4b7f      	ldr	r3, [pc, #508]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	497b      	ldr	r1, [pc, #492]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035f4:	4b76      	ldr	r3, [pc, #472]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	4973      	ldr	r1, [pc, #460]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003616:	4b6e      	ldr	r3, [pc, #440]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	496a      	ldr	r1, [pc, #424]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003638:	4b65      	ldr	r3, [pc, #404]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4962      	ldr	r1, [pc, #392]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800365a:	4b5d      	ldr	r3, [pc, #372]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	4959      	ldr	r1, [pc, #356]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800367c:	4b54      	ldr	r3, [pc, #336]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368a:	4951      	ldr	r1, [pc, #324]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800369e:	4b4c      	ldr	r3, [pc, #304]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	4948      	ldr	r1, [pc, #288]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036c0:	4b43      	ldr	r3, [pc, #268]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	4940      	ldr	r1, [pc, #256]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e0:	4b3b      	ldr	r3, [pc, #236]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a3a      	ldr	r2, [pc, #232]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036f8:	4b35      	ldr	r3, [pc, #212]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	4932      	ldr	r1, [pc, #200]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003718:	4b2d      	ldr	r3, [pc, #180]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a2c      	ldr	r2, [pc, #176]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003722:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003730:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	4924      	ldr	r1, [pc, #144]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800374e:	d105      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003750:	4b1f      	ldr	r3, [pc, #124]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a1e      	ldr	r2, [pc, #120]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800375a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d015      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003768:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	4916      	ldr	r1, [pc, #88]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003786:	d105      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003792:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d019      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	4908      	ldr	r1, [pc, #32]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037be:	d109      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a02      	ldr	r2, [pc, #8]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ca:	60d3      	str	r3, [r2, #12]
 80037cc:	e002      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037e0:	4b29      	ldr	r3, [pc, #164]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	4926      	ldr	r1, [pc, #152]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003800:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a20      	ldr	r2, [pc, #128]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800380a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003826:	4918      	ldr	r1, [pc, #96]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003836:	d105      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003838:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a12      	ldr	r2, [pc, #72]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003842:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003850:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003852:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003856:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385e:	490a      	ldr	r1, [pc, #40]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800386e:	d105      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800387a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800387c:	7cbb      	ldrb	r3, [r7, #18]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000

0800388c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e049      	b.n	8003932 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f841 	bl	800393a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f000 fa30 	bl	8003d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d001      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e054      	b.n	8003a12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a26      	ldr	r2, [pc, #152]	@ (8003a20 <HAL_TIM_Base_Start_IT+0xd0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d022      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003992:	d01d      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a22      	ldr	r2, [pc, #136]	@ (8003a24 <HAL_TIM_Base_Start_IT+0xd4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d018      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a21      	ldr	r2, [pc, #132]	@ (8003a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1f      	ldr	r2, [pc, #124]	@ (8003a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00e      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a30 <HAL_TIM_Base_Start_IT+0xe0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a34 <HAL_TIM_Base_Start_IT+0xe4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003a38 <HAL_TIM_Base_Start_IT+0xe8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d115      	bne.n	80039fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <HAL_TIM_Base_Start_IT+0xec>)
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d015      	beq.n	8003a0e <HAL_TIM_Base_Start_IT+0xbe>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e8:	d011      	beq.n	8003a0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fa:	e008      	b.n	8003a0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e000      	b.n	8003a10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40013400 	.word	0x40013400
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40015000 	.word	0x40015000
 8003a3c:	00010007 	.word	0x00010007

08003a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d020      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01b      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0202 	mvn.w	r2, #2
 8003a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f931 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f923 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f934 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d020      	beq.n	8003af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01b      	beq.n	8003af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0204 	mvn.w	r2, #4
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f90b 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8fd 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f90e 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d020      	beq.n	8003b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0208 	mvn.w	r2, #8
 8003b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2204      	movs	r2, #4
 8003b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8e5 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8d7 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8e8 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d020      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01b      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0210 	mvn.w	r2, #16
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8bf 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8b1 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f8c2 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0201 	mvn.w	r2, #1
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd fa78 	bl	800109c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f969 	bl	8003eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00c      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f961 	bl	8003ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f87c 	bl	8003d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f06f 0220 	mvn.w	r2, #32
 8003c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f929 	bl	8003e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00c      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f935 	bl	8003ed4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00c      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f92d 	bl	8003ee8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00c      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f925 	bl	8003efc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f91d 	bl	8003f10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a4c      	ldr	r2, [pc, #304]	@ (8003e74 <TIM_Base_SetConfig+0x144>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d017      	beq.n	8003d78 <TIM_Base_SetConfig+0x48>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4e:	d013      	beq.n	8003d78 <TIM_Base_SetConfig+0x48>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a49      	ldr	r2, [pc, #292]	@ (8003e78 <TIM_Base_SetConfig+0x148>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00f      	beq.n	8003d78 <TIM_Base_SetConfig+0x48>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a48      	ldr	r2, [pc, #288]	@ (8003e7c <TIM_Base_SetConfig+0x14c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <TIM_Base_SetConfig+0x48>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a47      	ldr	r2, [pc, #284]	@ (8003e80 <TIM_Base_SetConfig+0x150>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <TIM_Base_SetConfig+0x48>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a46      	ldr	r2, [pc, #280]	@ (8003e84 <TIM_Base_SetConfig+0x154>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_Base_SetConfig+0x48>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a45      	ldr	r2, [pc, #276]	@ (8003e88 <TIM_Base_SetConfig+0x158>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d108      	bne.n	8003d8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a39      	ldr	r2, [pc, #228]	@ (8003e74 <TIM_Base_SetConfig+0x144>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d023      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d98:	d01f      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a36      	ldr	r2, [pc, #216]	@ (8003e78 <TIM_Base_SetConfig+0x148>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01b      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a35      	ldr	r2, [pc, #212]	@ (8003e7c <TIM_Base_SetConfig+0x14c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d017      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a34      	ldr	r2, [pc, #208]	@ (8003e80 <TIM_Base_SetConfig+0x150>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a33      	ldr	r2, [pc, #204]	@ (8003e84 <TIM_Base_SetConfig+0x154>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00f      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a33      	ldr	r2, [pc, #204]	@ (8003e8c <TIM_Base_SetConfig+0x15c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00b      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a32      	ldr	r2, [pc, #200]	@ (8003e90 <TIM_Base_SetConfig+0x160>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a31      	ldr	r2, [pc, #196]	@ (8003e94 <TIM_Base_SetConfig+0x164>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_Base_SetConfig+0xaa>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e88 <TIM_Base_SetConfig+0x158>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d108      	bne.n	8003dec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a18      	ldr	r2, [pc, #96]	@ (8003e74 <TIM_Base_SetConfig+0x144>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <TIM_Base_SetConfig+0x110>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e84 <TIM_Base_SetConfig+0x154>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00f      	beq.n	8003e40 <TIM_Base_SetConfig+0x110>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	@ (8003e8c <TIM_Base_SetConfig+0x15c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00b      	beq.n	8003e40 <TIM_Base_SetConfig+0x110>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a19      	ldr	r2, [pc, #100]	@ (8003e90 <TIM_Base_SetConfig+0x160>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d007      	beq.n	8003e40 <TIM_Base_SetConfig+0x110>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a18      	ldr	r2, [pc, #96]	@ (8003e94 <TIM_Base_SetConfig+0x164>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_Base_SetConfig+0x110>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <TIM_Base_SetConfig+0x158>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d103      	bne.n	8003e48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f023 0201 	bic.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	611a      	str	r2, [r3, #16]
  }
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40013400 	.word	0x40013400
 8003e88:	40015000 	.word	0x40015000
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800

08003e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e042      	b.n	8003fbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fd fc29 	bl	80017a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2224      	movs	r2, #36	@ 0x24
 8003f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f001 f806 	bl	8004f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fd07 	bl	8004988 <UART_SetConfig>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e01b      	b.n	8003fbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f001 f885 	bl	80050c4 <UART_CheckIdleState>
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	@ 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d167      	bne.n	80040ac <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_UART_Transmit_DMA+0x24>
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e060      	b.n	80040ae <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2221      	movs	r2, #33	@ 0x21
 800400e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d028      	beq.n	800406c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800401e:	4a26      	ldr	r2, [pc, #152]	@ (80040b8 <HAL_UART_Transmit_DMA+0xf4>)
 8004020:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004026:	4a25      	ldr	r2, [pc, #148]	@ (80040bc <HAL_UART_Transmit_DMA+0xf8>)
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800402e:	4a24      	ldr	r2, [pc, #144]	@ (80040c0 <HAL_UART_Transmit_DMA+0xfc>)
 8004030:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004036:	2200      	movs	r2, #0
 8004038:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004042:	4619      	mov	r1, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3328      	adds	r3, #40	@ 0x28
 800404a:	461a      	mov	r2, r3
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	f7fd fef9 	bl	8001e44 <HAL_DMA_Start_IT>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2210      	movs	r2, #16
 800405c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e020      	b.n	80040ae <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2240      	movs	r2, #64	@ 0x40
 8004072:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	613b      	str	r3, [r7, #16]
   return(result);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3308      	adds	r3, #8
 8004092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004094:	623a      	str	r2, [r7, #32]
 8004096:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	6a3a      	ldr	r2, [r7, #32]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3728      	adds	r7, #40	@ 0x28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	0800558f 	.word	0x0800558f
 80040bc:	08005629 	.word	0x08005629
 80040c0:	080057af 	.word	0x080057af

080040c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	@ 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d137      	bne.n	800414c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_UART_Receive_DMA+0x24>
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e030      	b.n	800414e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a18      	ldr	r2, [pc, #96]	@ (8004158 <HAL_UART_Receive_DMA+0x94>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d01f      	beq.n	800413c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d018      	beq.n	800413c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	613b      	str	r3, [r7, #16]
   return(result);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	623b      	str	r3, [r7, #32]
 800412a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	69f9      	ldr	r1, [r7, #28]
 800412e:	6a3a      	ldr	r2, [r7, #32]
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	61bb      	str	r3, [r7, #24]
   return(result);
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e6      	bne.n	800410a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	461a      	mov	r2, r3
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f001 f8d6 	bl	80052f4 <UART_Start_Receive_DMA>
 8004148:	4603      	mov	r3, r0
 800414a:	e000      	b.n	800414e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3728      	adds	r7, #40	@ 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40008000 	.word	0x40008000

0800415c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b090      	sub	sp, #64	@ 0x40
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004172:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417e:	2b80      	cmp	r3, #128	@ 0x80
 8004180:	d139      	bne.n	80041f6 <HAL_UART_DMAStop+0x9a>
 8004182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004184:	2b21      	cmp	r3, #33	@ 0x21
 8004186:	d136      	bne.n	80041f6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	61fb      	str	r3, [r7, #28]
   return(result);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419e:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e5      	bne.n	8004188 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fd feb6 	bl	8001f3a <HAL_DMA_Abort>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe f81d 	bl	8002218 <HAL_DMA_GetError>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d105      	bne.n	80041f0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2210      	movs	r2, #16
 80041e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e047      	b.n	8004280 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f001 f925 	bl	8005440 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b40      	cmp	r3, #64	@ 0x40
 8004202:	d13c      	bne.n	800427e <HAL_UART_DMAStop+0x122>
 8004204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004206:	2b22      	cmp	r3, #34	@ 0x22
 8004208:	d139      	bne.n	800427e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	60bb      	str	r3, [r7, #8]
   return(result);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800422a:	61ba      	str	r2, [r7, #24]
 800422c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6979      	ldr	r1, [r7, #20]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	613b      	str	r3, [r7, #16]
   return(result);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d017      	beq.n	8004278 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd fe73 	bl	8001f3a <HAL_DMA_Abort>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00e      	beq.n	8004278 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004260:	4618      	mov	r0, r3
 8004262:	f7fd ffd9 	bl	8002218 <HAL_DMA_GetError>
 8004266:	4603      	mov	r3, r0
 8004268:	2b20      	cmp	r3, #32
 800426a:	d105      	bne.n	8004278 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2210      	movs	r2, #16
 8004270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e003      	b.n	8004280 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f001 f922 	bl	80054c2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3740      	adds	r7, #64	@ 0x40
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b0ba      	sub	sp, #232	@ 0xe8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80042b6:	4013      	ands	r3, r2
 80042b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80042bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11b      	bne.n	80042fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8300 	beq.w	80048f2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
      }
      return;
 80042fa:	e2fa      	b.n	80048f2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8123 	beq.w	800454c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004306:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800430a:	4b8d      	ldr	r3, [pc, #564]	@ (8004540 <HAL_UART_IRQHandler+0x2b8>)
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004312:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004316:	4b8b      	ldr	r3, [pc, #556]	@ (8004544 <HAL_UART_IRQHandler+0x2bc>)
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8116 	beq.w	800454c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d011      	beq.n	8004350 <HAL_UART_IRQHandler+0xc8>
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2201      	movs	r2, #1
 800433e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004346:	f043 0201 	orr.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d011      	beq.n	8004380 <HAL_UART_IRQHandler+0xf8>
 800435c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2202      	movs	r2, #2
 800436e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004376:	f043 0204 	orr.w	r2, r3, #4
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d011      	beq.n	80043b0 <HAL_UART_IRQHandler+0x128>
 800438c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2204      	movs	r2, #4
 800439e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	f043 0202 	orr.w	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d105      	bne.n	80043d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80043cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004540 <HAL_UART_IRQHandler+0x2b8>)
 80043ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2208      	movs	r2, #8
 80043da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e2:	f043 0208 	orr.w	r2, r3, #8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d012      	beq.n	800441e <HAL_UART_IRQHandler+0x196>
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00c      	beq.n	800441e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800440c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8266 	beq.w	80048f6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d013      	beq.n	800445e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004464:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004472:	2b40      	cmp	r3, #64	@ 0x40
 8004474:	d005      	beq.n	8004482 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800447a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800447e:	2b00      	cmp	r3, #0
 8004480:	d054      	beq.n	800452c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f001 f81d 	bl	80054c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b40      	cmp	r3, #64	@ 0x40
 8004494:	d146      	bne.n	8004524 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3308      	adds	r3, #8
 800449c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1d9      	bne.n	8004496 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d017      	beq.n	800451c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f2:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <HAL_UART_IRQHandler+0x2c0>)
 80044f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fd fd75 	bl	8001fec <HAL_DMA_Abort_IT>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d019      	beq.n	800453c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004516:	4610      	mov	r0, r2
 8004518:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800451a:	e00f      	b.n	800453c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fa1d 	bl	800495c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004522:	e00b      	b.n	800453c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa19 	bl	800495c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452a:	e007      	b.n	800453c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa15 	bl	800495c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800453a:	e1dc      	b.n	80048f6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	bf00      	nop
    return;
 800453e:	e1da      	b.n	80048f6 <HAL_UART_IRQHandler+0x66e>
 8004540:	10000001 	.word	0x10000001
 8004544:	04000120 	.word	0x04000120
 8004548:	0800582f 	.word	0x0800582f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 8170 	bne.w	8004836 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8169 	beq.w	8004836 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8162 	beq.w	8004836 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2210      	movs	r2, #16
 8004578:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	f040 80d8 	bne.w	800473a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80af 	beq.w	8004700 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045ac:	429a      	cmp	r2, r3
 80045ae:	f080 80a7 	bcs.w	8004700 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 8087 	bne.w	80046de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004606:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1da      	bne.n	80045d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800462a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800463e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004642:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004646:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e1      	bne.n	800461a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3308      	adds	r3, #8
 800465c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800466c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800467a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800467c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004680:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e3      	bne.n	8004656 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ac:	f023 0310 	bic.w	r3, r3, #16
 80046b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e4      	bne.n	800469c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fd fc2e 	bl	8001f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f939 	bl	8004970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80046fe:	e0fc      	b.n	80048fa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800470a:	429a      	cmp	r2, r3
 800470c:	f040 80f5 	bne.w	80048fa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	f040 80eb 	bne.w	80048fa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f91c 	bl	8004970 <HAL_UARTEx_RxEventCallback>
      return;
 8004738:	e0df      	b.n	80048fa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004746:	b29b      	uxth	r3, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80d1 	beq.w	80048fe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800475c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80cc 	beq.w	80048fe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800477a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004788:	647b      	str	r3, [r7, #68]	@ 0x44
 800478a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800478e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e4      	bne.n	8004766 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3308      	adds	r3, #8
 80047a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	623b      	str	r3, [r7, #32]
   return(result);
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3308      	adds	r3, #8
 80047c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e1      	bne.n	800479c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f023 0310 	bic.w	r3, r3, #16
 8004800:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	617b      	str	r3, [r7, #20]
   return(result);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e4      	bne.n	80047ec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f89e 	bl	8004970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004834:	e063      	b.n	80048fe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <HAL_UART_IRQHandler+0x5d8>
 8004842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004856:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 f825 	bl	80058a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800485e:	e051      	b.n	8004904 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d014      	beq.n	8004896 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800487c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03a      	beq.n	8004902 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4798      	blx	r3
    }
    return;
 8004894:	e035      	b.n	8004902 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_UART_IRQHandler+0x62e>
 80048a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 ffcf 	bl	8005852 <UART_EndTransmit_IT>
    return;
 80048b4:	e026      	b.n	8004904 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_UART_IRQHandler+0x64e>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fffe 	bl	80058d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048d4:	e016      	b.n	8004904 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d010      	beq.n	8004904 <HAL_UART_IRQHandler+0x67c>
 80048e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da0c      	bge.n	8004904 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 ffe6 	bl	80058bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048f0:	e008      	b.n	8004904 <HAL_UART_IRQHandler+0x67c>
      return;
 80048f2:	bf00      	nop
 80048f4:	e006      	b.n	8004904 <HAL_UART_IRQHandler+0x67c>
    return;
 80048f6:	bf00      	nop
 80048f8:	e004      	b.n	8004904 <HAL_UART_IRQHandler+0x67c>
      return;
 80048fa:	bf00      	nop
 80048fc:	e002      	b.n	8004904 <HAL_UART_IRQHandler+0x67c>
      return;
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <HAL_UART_IRQHandler+0x67c>
    return;
 8004902:	bf00      	nop
  }
}
 8004904:	37e8      	adds	r7, #232	@ 0xe8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop

0800490c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800498c:	b08c      	sub	sp, #48	@ 0x30
 800498e:	af00      	add	r7, sp, #0
 8004990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4baa      	ldr	r3, [pc, #680]	@ (8004c60 <UART_SetConfig+0x2d8>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a9f      	ldr	r2, [pc, #636]	@ (8004c64 <UART_SetConfig+0x2dc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049f0:	4313      	orrs	r3, r2
 80049f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80049fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	f023 010f 	bic.w	r1, r3, #15
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a90      	ldr	r2, [pc, #576]	@ (8004c68 <UART_SetConfig+0x2e0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d125      	bne.n	8004a78 <UART_SetConfig+0xf0>
 8004a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8004c6c <UART_SetConfig+0x2e4>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d81a      	bhi.n	8004a70 <UART_SetConfig+0xe8>
 8004a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <UART_SetConfig+0xb8>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a61 	.word	0x08004a61
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004a69 	.word	0x08004a69
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a56:	e116      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a5e:	e112      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004a60:	2304      	movs	r3, #4
 8004a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a66:	e10e      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6e:	e10a      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a76:	e106      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c70 <UART_SetConfig+0x2e8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d138      	bne.n	8004af4 <UART_SetConfig+0x16c>
 8004a82:	4b7a      	ldr	r3, [pc, #488]	@ (8004c6c <UART_SetConfig+0x2e4>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d82d      	bhi.n	8004aec <UART_SetConfig+0x164>
 8004a90:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <UART_SetConfig+0x110>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004aed 	.word	0x08004aed
 8004aa0:	08004aed 	.word	0x08004aed
 8004aa4:	08004aed 	.word	0x08004aed
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004aed 	.word	0x08004aed
 8004ab0:	08004aed 	.word	0x08004aed
 8004ab4:	08004aed 	.word	0x08004aed
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	08004aed 	.word	0x08004aed
 8004ac0:	08004aed 	.word	0x08004aed
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004ae5 	.word	0x08004ae5
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad2:	e0d8      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ada:	e0d4      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae2:	e0d0      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aea:	e0cc      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af2:	e0c8      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5e      	ldr	r2, [pc, #376]	@ (8004c74 <UART_SetConfig+0x2ec>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d125      	bne.n	8004b4a <UART_SetConfig+0x1c2>
 8004afe:	4b5b      	ldr	r3, [pc, #364]	@ (8004c6c <UART_SetConfig+0x2e4>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b08:	2b30      	cmp	r3, #48	@ 0x30
 8004b0a:	d016      	beq.n	8004b3a <UART_SetConfig+0x1b2>
 8004b0c:	2b30      	cmp	r3, #48	@ 0x30
 8004b0e:	d818      	bhi.n	8004b42 <UART_SetConfig+0x1ba>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d00a      	beq.n	8004b2a <UART_SetConfig+0x1a2>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d814      	bhi.n	8004b42 <UART_SetConfig+0x1ba>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <UART_SetConfig+0x19a>
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d008      	beq.n	8004b32 <UART_SetConfig+0x1aa>
 8004b20:	e00f      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b28:	e0ad      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b30:	e0a9      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b32:	2304      	movs	r3, #4
 8004b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b38:	e0a5      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b3a:	2308      	movs	r3, #8
 8004b3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b40:	e0a1      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b42:	2310      	movs	r3, #16
 8004b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b48:	e09d      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c78 <UART_SetConfig+0x2f0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d125      	bne.n	8004ba0 <UART_SetConfig+0x218>
 8004b54:	4b45      	ldr	r3, [pc, #276]	@ (8004c6c <UART_SetConfig+0x2e4>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b60:	d016      	beq.n	8004b90 <UART_SetConfig+0x208>
 8004b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b64:	d818      	bhi.n	8004b98 <UART_SetConfig+0x210>
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d00a      	beq.n	8004b80 <UART_SetConfig+0x1f8>
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d814      	bhi.n	8004b98 <UART_SetConfig+0x210>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <UART_SetConfig+0x1f0>
 8004b72:	2b40      	cmp	r3, #64	@ 0x40
 8004b74:	d008      	beq.n	8004b88 <UART_SetConfig+0x200>
 8004b76:	e00f      	b.n	8004b98 <UART_SetConfig+0x210>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7e:	e082      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b80:	2302      	movs	r3, #2
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b86:	e07e      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8e:	e07a      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b90:	2308      	movs	r3, #8
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b96:	e076      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9e:	e072      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a35      	ldr	r2, [pc, #212]	@ (8004c7c <UART_SetConfig+0x2f4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d12a      	bne.n	8004c00 <UART_SetConfig+0x278>
 8004baa:	4b30      	ldr	r3, [pc, #192]	@ (8004c6c <UART_SetConfig+0x2e4>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb8:	d01a      	beq.n	8004bf0 <UART_SetConfig+0x268>
 8004bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bbe:	d81b      	bhi.n	8004bf8 <UART_SetConfig+0x270>
 8004bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc4:	d00c      	beq.n	8004be0 <UART_SetConfig+0x258>
 8004bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bca:	d815      	bhi.n	8004bf8 <UART_SetConfig+0x270>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <UART_SetConfig+0x250>
 8004bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd4:	d008      	beq.n	8004be8 <UART_SetConfig+0x260>
 8004bd6:	e00f      	b.n	8004bf8 <UART_SetConfig+0x270>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bde:	e052      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004be0:	2302      	movs	r3, #2
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be6:	e04e      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bee:	e04a      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf6:	e046      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfe:	e042      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <UART_SetConfig+0x2dc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d13a      	bne.n	8004c80 <UART_SetConfig+0x2f8>
 8004c0a:	4b18      	ldr	r3, [pc, #96]	@ (8004c6c <UART_SetConfig+0x2e4>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c18:	d01a      	beq.n	8004c50 <UART_SetConfig+0x2c8>
 8004c1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c1e:	d81b      	bhi.n	8004c58 <UART_SetConfig+0x2d0>
 8004c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c24:	d00c      	beq.n	8004c40 <UART_SetConfig+0x2b8>
 8004c26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c2a:	d815      	bhi.n	8004c58 <UART_SetConfig+0x2d0>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <UART_SetConfig+0x2b0>
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c34:	d008      	beq.n	8004c48 <UART_SetConfig+0x2c0>
 8004c36:	e00f      	b.n	8004c58 <UART_SetConfig+0x2d0>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c3e:	e022      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004c40:	2302      	movs	r3, #2
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c46:	e01e      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c4e:	e01a      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004c50:	2308      	movs	r3, #8
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c56:	e016      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5e:	e012      	b.n	8004c86 <UART_SetConfig+0x2fe>
 8004c60:	cfff69f3 	.word	0xcfff69f3
 8004c64:	40008000 	.word	0x40008000
 8004c68:	40013800 	.word	0x40013800
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40004400 	.word	0x40004400
 8004c74:	40004800 	.word	0x40004800
 8004c78:	40004c00 	.word	0x40004c00
 8004c7c:	40005000 	.word	0x40005000
 8004c80:	2310      	movs	r3, #16
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4aae      	ldr	r2, [pc, #696]	@ (8004f44 <UART_SetConfig+0x5bc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	f040 8097 	bne.w	8004dc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d823      	bhi.n	8004ce2 <UART_SetConfig+0x35a>
 8004c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <UART_SetConfig+0x318>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cc5 	.word	0x08004cc5
 8004ca4:	08004ce3 	.word	0x08004ce3
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004ce3 	.word	0x08004ce3
 8004cb0:	08004cd3 	.word	0x08004cd3
 8004cb4:	08004ce3 	.word	0x08004ce3
 8004cb8:	08004ce3 	.word	0x08004ce3
 8004cbc:	08004ce3 	.word	0x08004ce3
 8004cc0:	08004cdb 	.word	0x08004cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc4:	f7fe faf0 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cca:	e010      	b.n	8004cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ccc:	4b9e      	ldr	r3, [pc, #632]	@ (8004f48 <UART_SetConfig+0x5c0>)
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cd0:	e00d      	b.n	8004cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd2:	f7fe fa7b 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004cd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cd8:	e009      	b.n	8004cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ce0:	e005      	b.n	8004cee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8130 	beq.w	8004f56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	4a94      	ldr	r2, [pc, #592]	@ (8004f4c <UART_SetConfig+0x5c4>)
 8004cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4413      	add	r3, r2
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d305      	bcc.n	8004d26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d903      	bls.n	8004d2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d2c:	e113      	b.n	8004f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	2200      	movs	r2, #0
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	60fa      	str	r2, [r7, #12]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	4a84      	ldr	r2, [pc, #528]	@ (8004f4c <UART_SetConfig+0x5c4>)
 8004d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2200      	movs	r2, #0
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d50:	f7fb fb1e 	bl	8000390 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	020b      	lsls	r3, r1, #8
 8004d66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d6a:	0202      	lsls	r2, r0, #8
 8004d6c:	6979      	ldr	r1, [r7, #20]
 8004d6e:	6849      	ldr	r1, [r1, #4]
 8004d70:	0849      	lsrs	r1, r1, #1
 8004d72:	2000      	movs	r0, #0
 8004d74:	460c      	mov	r4, r1
 8004d76:	4605      	mov	r5, r0
 8004d78:	eb12 0804 	adds.w	r8, r2, r4
 8004d7c:	eb43 0905 	adc.w	r9, r3, r5
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	469a      	mov	sl, r3
 8004d88:	4693      	mov	fp, r2
 8004d8a:	4652      	mov	r2, sl
 8004d8c:	465b      	mov	r3, fp
 8004d8e:	4640      	mov	r0, r8
 8004d90:	4649      	mov	r1, r9
 8004d92:	f7fb fafd 	bl	8000390 <__aeabi_uldivmod>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004da4:	d308      	bcc.n	8004db8 <UART_SetConfig+0x430>
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dac:	d204      	bcs.n	8004db8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	60da      	str	r2, [r3, #12]
 8004db6:	e0ce      	b.n	8004f56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004dbe:	e0ca      	b.n	8004f56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc8:	d166      	bne.n	8004e98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d827      	bhi.n	8004e22 <UART_SetConfig+0x49a>
 8004dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <UART_SetConfig+0x450>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e23 	.word	0x08004e23
 8004df0:	08004e23 	.word	0x08004e23
 8004df4:	08004e23 	.word	0x08004e23
 8004df8:	08004e1b 	.word	0x08004e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fe fa54 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e02:	e014      	b.n	8004e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7fe fa66 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8004e08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e0a:	e010      	b.n	8004e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8004f48 <UART_SetConfig+0x5c0>)
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e10:	e00d      	b.n	8004e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e12:	f7fe f9db 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004e16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e18:	e009      	b.n	8004e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e20:	e005      	b.n	8004e2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8090 	beq.w	8004f56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	4a44      	ldr	r2, [pc, #272]	@ (8004f4c <UART_SetConfig+0x5c4>)
 8004e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e48:	005a      	lsls	r2, r3, #1
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	441a      	add	r2, r3
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	d916      	bls.n	8004e90 <UART_SetConfig+0x508>
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e68:	d212      	bcs.n	8004e90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f023 030f 	bic.w	r3, r3, #15
 8004e72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	8bfb      	ldrh	r3, [r7, #30]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	8bfa      	ldrh	r2, [r7, #30]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	e062      	b.n	8004f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e96:	e05e      	b.n	8004f56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d828      	bhi.n	8004ef2 <UART_SetConfig+0x56a>
 8004ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <UART_SetConfig+0x520>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004ed5 	.word	0x08004ed5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	08004ef3 	.word	0x08004ef3
 8004eb8:	08004ee3 	.word	0x08004ee3
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004ef3 	.word	0x08004ef3
 8004ec4:	08004ef3 	.word	0x08004ef3
 8004ec8:	08004eeb 	.word	0x08004eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f7fe f9ec 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ed2:	e014      	b.n	8004efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed4:	f7fe f9fe 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8004ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004eda:	e010      	b.n	8004efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f48 <UART_SetConfig+0x5c0>)
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ee0:	e00d      	b.n	8004efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fe f973 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004ee6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ee8:	e009      	b.n	8004efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ef0:	e005      	b.n	8004efe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004efc:	bf00      	nop
    }

    if (pclk != 0U)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d028      	beq.n	8004f56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	4a10      	ldr	r2, [pc, #64]	@ (8004f4c <UART_SetConfig+0x5c4>)
 8004f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	441a      	add	r2, r3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	d910      	bls.n	8004f50 <UART_SetConfig+0x5c8>
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f34:	d20c      	bcs.n	8004f50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60da      	str	r2, [r3, #12]
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x5ce>
 8004f42:	bf00      	nop
 8004f44:	40008000 	.word	0x40008000
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	08015dd4 	.word	0x08015dd4
      }
      else
      {
        ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3730      	adds	r7, #48	@ 0x30
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01a      	beq.n	8005096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800507e:	d10a      	bne.n	8005096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
  }
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b098      	sub	sp, #96	@ 0x60
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050d4:	f7fc fd22 	bl	8001b1c <HAL_GetTick>
 80050d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d12f      	bne.n	8005148 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f0:	2200      	movs	r2, #0
 80050f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f88e 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d022      	beq.n	8005148 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005116:	653b      	str	r3, [r7, #80]	@ 0x50
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005120:	647b      	str	r3, [r7, #68]	@ 0x44
 8005122:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800512e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e6      	bne.n	8005102 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e063      	b.n	8005210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d149      	bne.n	80051ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005156:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800515e:	2200      	movs	r2, #0
 8005160:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f857 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d03c      	beq.n	80051ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	623b      	str	r3, [r7, #32]
   return(result);
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800518e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005190:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e6      	bne.n	8005170 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3308      	adds	r3, #8
 80051c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051c2:	61fa      	str	r2, [r7, #28]
 80051c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	69b9      	ldr	r1, [r7, #24]
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	617b      	str	r3, [r7, #20]
   return(result);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e5      	bne.n	80051a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e012      	b.n	8005210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3758      	adds	r7, #88	@ 0x58
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005228:	e04f      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005230:	d04b      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005232:	f7fc fc73 	bl	8001b1c <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <UART_WaitOnFlagUntilTimeout+0x30>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e04e      	b.n	80052ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d037      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b80      	cmp	r3, #128	@ 0x80
 800525e:	d034      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b40      	cmp	r3, #64	@ 0x40
 8005264:	d031      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d110      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2208      	movs	r2, #8
 800527a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f920 	bl	80054c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2208      	movs	r2, #8
 8005286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e029      	b.n	80052ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a4:	d111      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f906 	bl	80054c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e00f      	b.n	80052ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4013      	ands	r3, r2
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	bf0c      	ite	eq
 80052da:	2301      	moveq	r3, #1
 80052dc:	2300      	movne	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d0a0      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b096      	sub	sp, #88	@ 0x58
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2222      	movs	r2, #34	@ 0x22
 800531c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d02d      	beq.n	8005386 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005330:	4a40      	ldr	r2, [pc, #256]	@ (8005434 <UART_Start_Receive_DMA+0x140>)
 8005332:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800533a:	4a3f      	ldr	r2, [pc, #252]	@ (8005438 <UART_Start_Receive_DMA+0x144>)
 800533c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005344:	4a3d      	ldr	r2, [pc, #244]	@ (800543c <UART_Start_Receive_DMA+0x148>)
 8005346:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800534e:	2200      	movs	r2, #0
 8005350:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3324      	adds	r3, #36	@ 0x24
 800535e:	4619      	mov	r1, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005364:	461a      	mov	r2, r3
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	f7fc fd6c 	bl	8001e44 <HAL_DMA_Start_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2210      	movs	r2, #16
 8005376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e051      	b.n	800542a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d018      	beq.n	80053c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80053ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e6      	bne.n	800538e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80053e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80053e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80053ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e5      	bne.n	80053c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	613b      	str	r3, [r7, #16]
   return(result);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800540a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005414:	623a      	str	r2, [r7, #32]
 8005416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	69f9      	ldr	r1, [r7, #28]
 800541a:	6a3a      	ldr	r2, [r7, #32]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	61bb      	str	r3, [r7, #24]
   return(result);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e5      	bne.n	80053f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3758      	adds	r7, #88	@ 0x58
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	08005645 	.word	0x08005645
 8005438:	08005771 	.word	0x08005771
 800543c:	080057af 	.word	0x080057af

08005440 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b08f      	sub	sp, #60	@ 0x3c
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	61fb      	str	r3, [r7, #28]
   return(result);
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800545c:	637b      	str	r3, [r7, #52]	@ 0x34
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005468:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800546c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e6      	bne.n	8005448 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3308      	adds	r3, #8
 8005480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	60bb      	str	r3, [r7, #8]
   return(result);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005490:	633b      	str	r3, [r7, #48]	@ 0x30
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549a:	61ba      	str	r2, [r7, #24]
 800549c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6979      	ldr	r1, [r7, #20]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	613b      	str	r3, [r7, #16]
   return(result);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e5      	bne.n	800547a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80054b6:	bf00      	nop
 80054b8:	373c      	adds	r7, #60	@ 0x3c
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b095      	sub	sp, #84	@ 0x54
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	61fb      	str	r3, [r7, #28]
   return(result);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005520:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005522:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e3      	bne.n	80054fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d118      	bne.n	800556e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	60bb      	str	r3, [r7, #8]
   return(result);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f023 0310 	bic.w	r3, r3, #16
 8005550:	647b      	str	r3, [r7, #68]	@ 0x44
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6979      	ldr	r1, [r7, #20]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	613b      	str	r3, [r7, #16]
   return(result);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e6      	bne.n	800553c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005582:	bf00      	nop
 8005584:	3754      	adds	r7, #84	@ 0x54
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b090      	sub	sp, #64	@ 0x40
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d137      	bne.n	800561a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80055aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	623b      	str	r3, [r7, #32]
   return(result);
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e5      	bne.n	80055b2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80055fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	461a      	mov	r2, r3
 8005602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	69b9      	ldr	r1, [r7, #24]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	617b      	str	r3, [r7, #20]
   return(result);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e6      	bne.n	80055e6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005618:	e002      	b.n	8005620 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800561a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800561c:	f7ff f976 	bl	800490c <HAL_UART_TxCpltCallback>
}
 8005620:	bf00      	nop
 8005622:	3740      	adds	r7, #64	@ 0x40
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff f972 	bl	8004920 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b09c      	sub	sp, #112	@ 0x70
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d171      	bne.n	8005744 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005662:	2200      	movs	r2, #0
 8005664:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800567c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800567e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005686:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005688:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800568c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e6      	bne.n	8005668 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80056b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80056ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80056bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	623b      	str	r3, [r7, #32]
   return(result);
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80056e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80056f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800570c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800570e:	2b01      	cmp	r3, #1
 8005710:	d118      	bne.n	8005744 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0310 	bic.w	r3, r3, #16
 8005726:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	69b9      	ldr	r1, [r7, #24]
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	617b      	str	r3, [r7, #20]
   return(result);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e6      	bne.n	8005712 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005746:	2200      	movs	r2, #0
 8005748:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800574c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d107      	bne.n	8005762 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005754:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005758:	4619      	mov	r1, r3
 800575a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800575c:	f7ff f908 	bl	8004970 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005760:	e002      	b.n	8005768 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005762:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005764:	f7ff f8e6 	bl	8004934 <HAL_UART_RxCpltCallback>
}
 8005768:	bf00      	nop
 800576a:	3770      	adds	r7, #112	@ 0x70
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d109      	bne.n	80057a0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	b29b      	uxth	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff f8e9 	bl	8004970 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800579e:	e002      	b.n	80057a6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff f8d1 	bl	8004948 <HAL_UART_RxHalfCpltCallback>
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b086      	sub	sp, #24
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d6:	2b80      	cmp	r3, #128	@ 0x80
 80057d8:	d109      	bne.n	80057ee <UART_DMAError+0x40>
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b21      	cmp	r3, #33	@ 0x21
 80057de:	d106      	bne.n	80057ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	f7ff fe29 	bl	8005440 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f8:	2b40      	cmp	r3, #64	@ 0x40
 80057fa:	d109      	bne.n	8005810 <UART_DMAError+0x62>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b22      	cmp	r3, #34	@ 0x22
 8005800:	d106      	bne.n	8005810 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7ff fe59 	bl	80054c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005816:	f043 0210 	orr.w	r2, r3, #16
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005820:	6978      	ldr	r0, [r7, #20]
 8005822:	f7ff f89b 	bl	800495c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005826:	bf00      	nop
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff f889 	bl	800495c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b088      	sub	sp, #32
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	60bb      	str	r3, [r7, #8]
   return(result);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6979      	ldr	r1, [r7, #20]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	613b      	str	r3, [r7, #16]
   return(result);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff f836 	bl	800490c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a0:	bf00      	nop
 80058a2:	3720      	adds	r7, #32
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_UARTEx_DisableFifoMode+0x16>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e027      	b.n	800594a <HAL_UARTEx_DisableFifoMode+0x66>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2224      	movs	r2, #36	@ 0x24
 8005906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005928:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800596a:	2302      	movs	r3, #2
 800596c:	e02d      	b.n	80059ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2224      	movs	r2, #36	@ 0x24
 800597a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f850 	bl	8005a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e02d      	b.n	8005a46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2224      	movs	r2, #36	@ 0x24
 80059f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f812 	bl	8005a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d108      	bne.n	8005a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a70:	e031      	b.n	8005ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a72:	2308      	movs	r3, #8
 8005a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a76:	2308      	movs	r3, #8
 8005a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	0e5b      	lsrs	r3, r3, #25
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	0f5b      	lsrs	r3, r3, #29
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	7b3a      	ldrb	r2, [r7, #12]
 8005a9e:	4911      	ldr	r1, [pc, #68]	@ (8005ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8005aa0:	5c8a      	ldrb	r2, [r1, r2]
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aa6:	7b3a      	ldrb	r2, [r7, #12]
 8005aa8:	490f      	ldr	r1, [pc, #60]	@ (8005ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8005aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	7b7a      	ldrb	r2, [r7, #13]
 8005abc:	4909      	ldr	r1, [pc, #36]	@ (8005ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8005abe:	5c8a      	ldrb	r2, [r1, r2]
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ac4:	7b7a      	ldrb	r2, [r7, #13]
 8005ac6:	4908      	ldr	r1, [pc, #32]	@ (8005ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8005ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	08015dec 	.word	0x08015dec
 8005ae8:	08015df4 	.word	0x08015df4

08005aec <__NVIC_SetPriority>:
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	6039      	str	r1, [r7, #0]
 8005af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	db0a      	blt.n	8005b16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	490c      	ldr	r1, [pc, #48]	@ (8005b38 <__NVIC_SetPriority+0x4c>)
 8005b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0a:	0112      	lsls	r2, r2, #4
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	440b      	add	r3, r1
 8005b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b14:	e00a      	b.n	8005b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	4908      	ldr	r1, [pc, #32]	@ (8005b3c <__NVIC_SetPriority+0x50>)
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	3b04      	subs	r3, #4
 8005b24:	0112      	lsls	r2, r2, #4
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	440b      	add	r3, r1
 8005b2a:	761a      	strb	r2, [r3, #24]
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	e000e100 	.word	0xe000e100
 8005b3c:	e000ed00 	.word	0xe000ed00

08005b40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b44:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <SysTick_Handler+0x1c>)
 8005b46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b48:	f001 fd40 	bl	80075cc <xTaskGetSchedulerState>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b52:	f002 fb39 	bl	80081c8 <xPortSysTickHandler>
  }
}
 8005b56:	bf00      	nop
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000e010 	.word	0xe000e010

08005b60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b64:	2100      	movs	r1, #0
 8005b66:	f06f 0004 	mvn.w	r0, #4
 8005b6a:	f7ff ffbf 	bl	8005aec <__NVIC_SetPriority>
#endif
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b7a:	f3ef 8305 	mrs	r3, IPSR
 8005b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b86:	f06f 0305 	mvn.w	r3, #5
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	e00c      	b.n	8005ba8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <osKernelInitialize+0x44>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b96:	4b08      	ldr	r3, [pc, #32]	@ (8005bb8 <osKernelInitialize+0x44>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	e002      	b.n	8005ba8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ba8:	687b      	ldr	r3, [r7, #4]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20004814 	.word	0x20004814

08005bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc2:	f3ef 8305 	mrs	r3, IPSR
 8005bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8005bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bce:	f06f 0305 	mvn.w	r3, #5
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	e010      	b.n	8005bf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <osKernelStart+0x48>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d109      	bne.n	8005bf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005bde:	f7ff ffbf 	bl	8005b60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005be2:	4b08      	ldr	r3, [pc, #32]	@ (8005c04 <osKernelStart+0x48>)
 8005be4:	2202      	movs	r2, #2
 8005be6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005be8:	f001 f87a 	bl	8006ce0 <vTaskStartScheduler>
      stat = osOK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	e002      	b.n	8005bf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bf8:	687b      	ldr	r3, [r7, #4]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20004814 	.word	0x20004814

08005c08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	@ 0x38
 8005c0c:	af04      	add	r7, sp, #16
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c18:	f3ef 8305 	mrs	r3, IPSR
 8005c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d17e      	bne.n	8005d22 <osThreadNew+0x11a>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d07b      	beq.n	8005d22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c2a:	2380      	movs	r3, #128	@ 0x80
 8005c2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c2e:	2318      	movs	r3, #24
 8005c30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d045      	beq.n	8005cce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <osThreadNew+0x48>
        name = attr->name;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <osThreadNew+0x6e>
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b38      	cmp	r3, #56	@ 0x38
 8005c68:	d805      	bhi.n	8005c76 <osThreadNew+0x6e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <osThreadNew+0x72>
        return (NULL);
 8005c76:	2300      	movs	r3, #0
 8005c78:	e054      	b.n	8005d24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00e      	beq.n	8005cb0 <osThreadNew+0xa8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b5b      	cmp	r3, #91	@ 0x5b
 8005c98:	d90a      	bls.n	8005cb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d006      	beq.n	8005cb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <osThreadNew+0xa8>
        mem = 1;
 8005caa:	2301      	movs	r3, #1
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	e010      	b.n	8005cd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10c      	bne.n	8005cd2 <osThreadNew+0xca>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d108      	bne.n	8005cd2 <osThreadNew+0xca>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <osThreadNew+0xca>
          mem = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	e001      	b.n	8005cd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d110      	bne.n	8005cfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ce0:	9202      	str	r2, [sp, #8]
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6a3a      	ldr	r2, [r7, #32]
 8005cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fe1a 	bl	8006928 <xTaskCreateStatic>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	e013      	b.n	8005d22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d110      	bne.n	8005d22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	f107 0310 	add.w	r3, r7, #16
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fe68 	bl	80069e8 <xTaskCreate>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d001      	beq.n	8005d22 <osThreadNew+0x11a>
            hTask = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d22:	693b      	ldr	r3, [r7, #16]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3728      	adds	r7, #40	@ 0x28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d34:	f3ef 8305 	mrs	r3, IPSR
 8005d38:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <osDelay+0x1c>
    stat = osErrorISR;
 8005d40:	f06f 0305 	mvn.w	r3, #5
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e007      	b.n	8005d58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 ff8e 	bl	8006c74 <vTaskDelay>
    }
  }

  return (stat);
 8005d58:	68fb      	ldr	r3, [r7, #12]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a07      	ldr	r2, [pc, #28]	@ (8005d90 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4a06      	ldr	r2, [pc, #24]	@ (8005d94 <vApplicationGetIdleTaskMemory+0x30>)
 8005d7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2280      	movs	r2, #128	@ 0x80
 8005d80:	601a      	str	r2, [r3, #0]
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20004818 	.word	0x20004818
 8005d94:	20004874 	.word	0x20004874

08005d98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a07      	ldr	r2, [pc, #28]	@ (8005dc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005da8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4a06      	ldr	r2, [pc, #24]	@ (8005dc8 <vApplicationGetTimerTaskMemory+0x30>)
 8005dae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005db6:	601a      	str	r2, [r3, #0]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	20004a74 	.word	0x20004a74
 8005dc8:	20004ad0 	.word	0x20004ad0

08005dcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f103 0208 	add.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005de4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f103 0208 	add.w	r2, r3, #8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f103 0208 	add.w	r2, r3, #8
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e84:	d103      	bne.n	8005e8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e00c      	b.n	8005ea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3308      	adds	r3, #8
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e002      	b.n	8005e9c <vListInsert+0x2e>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d2f6      	bcs.n	8005e96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6892      	ldr	r2, [r2, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6852      	ldr	r2, [r2, #4]
 8005f00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d103      	bne.n	8005f14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1e5a      	subs	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <xQueueGenericReset+0x2c>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60bb      	str	r3, [r7, #8]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f60:	f002 f8a2 	bl	80080a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6c:	68f9      	ldr	r1, [r7, #12]
 8005f6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	441a      	add	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f90:	3b01      	subs	r3, #1
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	441a      	add	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	22ff      	movs	r2, #255	@ 0xff
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	22ff      	movs	r2, #255	@ 0xff
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d114      	bne.n	8005fe0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01a      	beq.n	8005ff4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3310      	adds	r3, #16
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f91a 	bl	80071fc <xTaskRemoveFromEventList>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d012      	beq.n	8005ff4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fce:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <xQueueGenericReset+0xd0>)
 8005fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	e009      	b.n	8005ff4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3310      	adds	r3, #16
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff fef1 	bl	8005dcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3324      	adds	r3, #36	@ 0x24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff feec 	bl	8005dcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ff4:	f002 f88a 	bl	800810c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ff8:	2301      	movs	r3, #1
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	@ 0x38
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10b      	bne.n	8006034 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <xQueueGenericCreateStatic+0x56>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <xQueueGenericCreateStatic+0x5a>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <xQueueGenericCreateStatic+0x5c>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10b      	bne.n	8006080 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	623b      	str	r3, [r7, #32]
}
 800607a:	bf00      	nop
 800607c:	bf00      	nop
 800607e:	e7fd      	b.n	800607c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d102      	bne.n	800608c <xQueueGenericCreateStatic+0x84>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <xQueueGenericCreateStatic+0x88>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <xQueueGenericCreateStatic+0x8a>
 8006090:	2300      	movs	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	61fb      	str	r3, [r7, #28]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060ae:	2350      	movs	r3, #80	@ 0x50
 80060b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b50      	cmp	r3, #80	@ 0x50
 80060b6:	d00b      	beq.n	80060d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	61bb      	str	r3, [r7, #24]
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	e7fd      	b.n	80060cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80060d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00d      	beq.n	80060f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f805 	bl	8006102 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	@ 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
 800610e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	e002      	b.n	8006124 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006130:	2101      	movs	r1, #1
 8006132:	69b8      	ldr	r0, [r7, #24]
 8006134:	f7ff fefe 	bl	8005f34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	@ 0x38
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006156:	2300      	movs	r3, #0
 8006158:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <xQueueGenericSend+0x34>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <xQueueGenericSend+0x42>
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <xQueueGenericSend+0x46>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueGenericSend+0x48>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <xQueueGenericSend+0x64>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d103      	bne.n	80061ba <xQueueGenericSend+0x72>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <xQueueGenericSend+0x76>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <xQueueGenericSend+0x78>
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10b      	bne.n	80061dc <xQueueGenericSend+0x94>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	623b      	str	r3, [r7, #32]
}
 80061d6:	bf00      	nop
 80061d8:	bf00      	nop
 80061da:	e7fd      	b.n	80061d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061dc:	f001 f9f6 	bl	80075cc <xTaskGetSchedulerState>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <xQueueGenericSend+0xa4>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <xQueueGenericSend+0xa8>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <xQueueGenericSend+0xaa>
 80061f0:	2300      	movs	r3, #0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <xQueueGenericSend+0xc6>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	61fb      	str	r3, [r7, #28]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800620e:	f001 ff4b 	bl	80080a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621a:	429a      	cmp	r2, r3
 800621c:	d302      	bcc.n	8006224 <xQueueGenericSend+0xdc>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d129      	bne.n	8006278 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800622a:	f000 fa0f 	bl	800664c <prvCopyDataToQueue>
 800622e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d010      	beq.n	800625a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	3324      	adds	r3, #36	@ 0x24
 800623c:	4618      	mov	r0, r3
 800623e:	f000 ffdd 	bl	80071fc <xTaskRemoveFromEventList>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006248:	4b3f      	ldr	r3, [pc, #252]	@ (8006348 <xQueueGenericSend+0x200>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	e00a      	b.n	8006270 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800625a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006260:	4b39      	ldr	r3, [pc, #228]	@ (8006348 <xQueueGenericSend+0x200>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006270:	f001 ff4c 	bl	800810c <vPortExitCritical>
				return pdPASS;
 8006274:	2301      	movs	r3, #1
 8006276:	e063      	b.n	8006340 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800627e:	f001 ff45 	bl	800810c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006282:	2300      	movs	r3, #0
 8006284:	e05c      	b.n	8006340 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	4618      	mov	r0, r3
 8006292:	f001 f83f 	bl	8007314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800629a:	f001 ff37 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800629e:	f000 fd87 	bl	8006db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062a2:	f001 ff01 	bl	80080a8 <vPortEnterCritical>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062b2:	d103      	bne.n	80062bc <xQueueGenericSend+0x174>
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x18a>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062d2:	f001 ff1b 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d6:	1d3a      	adds	r2, r7, #4
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f82e 	bl	8007340 <xTaskCheckForTimeOut>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d124      	bne.n	8006334 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ec:	f000 faa6 	bl	800683c <prvIsQueueFull>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d018      	beq.n	8006328 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	3310      	adds	r3, #16
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 ff2a 	bl	8007158 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006306:	f000 fa31 	bl	800676c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800630a:	f000 fd5f 	bl	8006dcc <xTaskResumeAll>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f47f af7c 	bne.w	800620e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006316:	4b0c      	ldr	r3, [pc, #48]	@ (8006348 <xQueueGenericSend+0x200>)
 8006318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	e772      	b.n	800620e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800632a:	f000 fa1f 	bl	800676c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800632e:	f000 fd4d 	bl	8006dcc <xTaskResumeAll>
 8006332:	e76c      	b.n	800620e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006336:	f000 fa19 	bl	800676c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800633a:	f000 fd47 	bl	8006dcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800633e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006340:	4618      	mov	r0, r3
 8006342:	3738      	adds	r7, #56	@ 0x38
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b090      	sub	sp, #64	@ 0x40
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800635e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10b      	bne.n	800637c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d103      	bne.n	800638a <xQueueGenericSendFromISR+0x3e>
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <xQueueGenericSendFromISR+0x42>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <xQueueGenericSendFromISR+0x44>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d103      	bne.n	80063ba <xQueueGenericSendFromISR+0x6e>
 80063b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <xQueueGenericSendFromISR+0x72>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <xQueueGenericSendFromISR+0x74>
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	623b      	str	r3, [r7, #32]
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063dc:	f001 ff44 	bl	8008268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063e0:	f3ef 8211 	mrs	r2, BASEPRI
 80063e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	61fa      	str	r2, [r7, #28]
 80063f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <xQueueGenericSendFromISR+0xc2>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d12f      	bne.n	800646e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006414:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006424:	f000 f912 	bl	800664c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006428:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006430:	d112      	bne.n	8006458 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800643a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643c:	3324      	adds	r3, #36	@ 0x24
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fedc 	bl	80071fc <xTaskRemoveFromEventList>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00e      	beq.n	8006468 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e007      	b.n	8006468 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800645c:	3301      	adds	r3, #1
 800645e:	b2db      	uxtb	r3, r3
 8006460:	b25a      	sxtb	r2, r3
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006468:	2301      	movs	r3, #1
 800646a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800646c:	e001      	b.n	8006472 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800646e:	2300      	movs	r3, #0
 8006470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006474:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800647c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800647e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006480:	4618      	mov	r0, r3
 8006482:	3740      	adds	r7, #64	@ 0x40
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	@ 0x30
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006494:	2300      	movs	r3, #0
 8006496:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <xQueueReceive+0x32>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	623b      	str	r3, [r7, #32]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <xQueueReceive+0x40>
 80064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <xQueueReceive+0x44>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <xQueueReceive+0x46>
 80064cc:	2300      	movs	r3, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <xQueueReceive+0x62>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	61fb      	str	r3, [r7, #28]
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	e7fd      	b.n	80064e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ea:	f001 f86f 	bl	80075cc <xTaskGetSchedulerState>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <xQueueReceive+0x72>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <xQueueReceive+0x76>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <xQueueReceive+0x78>
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10b      	bne.n	800651c <xQueueReceive+0x94>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	61bb      	str	r3, [r7, #24]
}
 8006516:	bf00      	nop
 8006518:	bf00      	nop
 800651a:	e7fd      	b.n	8006518 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800651c:	f001 fdc4 	bl	80080a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01f      	beq.n	800656c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006530:	f000 f8f6 	bl	8006720 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00f      	beq.n	8006564 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	3310      	adds	r3, #16
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fe57 	bl	80071fc <xTaskRemoveFromEventList>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d007      	beq.n	8006564 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006554:	4b3c      	ldr	r3, [pc, #240]	@ (8006648 <xQueueReceive+0x1c0>)
 8006556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006564:	f001 fdd2 	bl	800810c <vPortExitCritical>
				return pdPASS;
 8006568:	2301      	movs	r3, #1
 800656a:	e069      	b.n	8006640 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006572:	f001 fdcb 	bl	800810c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006576:	2300      	movs	r3, #0
 8006578:	e062      	b.n	8006640 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006580:	f107 0310 	add.w	r3, r7, #16
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fec5 	bl	8007314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800658a:	2301      	movs	r3, #1
 800658c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800658e:	f001 fdbd 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006592:	f000 fc0d 	bl	8006db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006596:	f001 fd87 	bl	80080a8 <vPortEnterCritical>
 800659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065a0:	b25b      	sxtb	r3, r3
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065a6:	d103      	bne.n	80065b0 <xQueueReceive+0x128>
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065b6:	b25b      	sxtb	r3, r3
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065bc:	d103      	bne.n	80065c6 <xQueueReceive+0x13e>
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065c6:	f001 fda1 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ca:	1d3a      	adds	r2, r7, #4
 80065cc:	f107 0310 	add.w	r3, r7, #16
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 feb4 	bl	8007340 <xTaskCheckForTimeOut>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d123      	bne.n	8006626 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065e0:	f000 f916 	bl	8006810 <prvIsQueueEmpty>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d017      	beq.n	800661a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ec:	3324      	adds	r3, #36	@ 0x24
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	4611      	mov	r1, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fdb0 	bl	8007158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065fa:	f000 f8b7 	bl	800676c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065fe:	f000 fbe5 	bl	8006dcc <xTaskResumeAll>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d189      	bne.n	800651c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006608:	4b0f      	ldr	r3, [pc, #60]	@ (8006648 <xQueueReceive+0x1c0>)
 800660a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	e780      	b.n	800651c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800661a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800661c:	f000 f8a6 	bl	800676c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006620:	f000 fbd4 	bl	8006dcc <xTaskResumeAll>
 8006624:	e77a      	b.n	800651c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006628:	f000 f8a0 	bl	800676c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800662c:	f000 fbce 	bl	8006dcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006632:	f000 f8ed 	bl	8006810 <prvIsQueueEmpty>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	f43f af6f 	beq.w	800651c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800663e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006640:	4618      	mov	r0, r3
 8006642:	3730      	adds	r7, #48	@ 0x30
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006660:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10d      	bne.n	8006686 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d14d      	bne.n	800670e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 ffc6 	bl	8007608 <xTaskPriorityDisinherit>
 800667c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	e043      	b.n	800670e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d119      	bne.n	80066c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6858      	ldr	r0, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006694:	461a      	mov	r2, r3
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	f00e fce7 	bl	801506a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d32b      	bcc.n	800670e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	605a      	str	r2, [r3, #4]
 80066be:	e026      	b.n	800670e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68d8      	ldr	r0, [r3, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	461a      	mov	r2, r3
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	f00e fccd 	bl	801506a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	425b      	negs	r3, r3
 80066da:	441a      	add	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d207      	bcs.n	80066fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	425b      	negs	r3, r3
 80066f6:	441a      	add	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d105      	bne.n	800670e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	3b01      	subs	r3, #1
 800670c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006716:	697b      	ldr	r3, [r7, #20]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d018      	beq.n	8006764 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673a:	441a      	add	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	429a      	cmp	r2, r3
 800674a:	d303      	bcc.n	8006754 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68d9      	ldr	r1, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675c:	461a      	mov	r2, r3
 800675e:	6838      	ldr	r0, [r7, #0]
 8006760:	f00e fc83 	bl	801506a <memcpy>
	}
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006774:	f001 fc98 	bl	80080a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800677e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006780:	e011      	b.n	80067a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d012      	beq.n	80067b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3324      	adds	r3, #36	@ 0x24
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fd34 	bl	80071fc <xTaskRemoveFromEventList>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800679a:	f000 fe35 	bl	8007408 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dce9      	bgt.n	8006782 <prvUnlockQueue+0x16>
 80067ae:	e000      	b.n	80067b2 <prvUnlockQueue+0x46>
					break;
 80067b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	22ff      	movs	r2, #255	@ 0xff
 80067b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80067ba:	f001 fca7 	bl	800810c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067be:	f001 fc73 	bl	80080a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067ca:	e011      	b.n	80067f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d012      	beq.n	80067fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3310      	adds	r3, #16
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fd0f 	bl	80071fc <xTaskRemoveFromEventList>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067e4:	f000 fe10 	bl	8007408 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dce9      	bgt.n	80067cc <prvUnlockQueue+0x60>
 80067f8:	e000      	b.n	80067fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	22ff      	movs	r2, #255	@ 0xff
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006804:	f001 fc82 	bl	800810c <vPortExitCritical>
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006818:	f001 fc46 	bl	80080a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006820:	2b00      	cmp	r3, #0
 8006822:	d102      	bne.n	800682a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006824:	2301      	movs	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e001      	b.n	800682e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800682e:	f001 fc6d 	bl	800810c <vPortExitCritical>

	return xReturn;
 8006832:	68fb      	ldr	r3, [r7, #12]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006844:	f001 fc30 	bl	80080a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006850:	429a      	cmp	r2, r3
 8006852:	d102      	bne.n	800685a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e001      	b.n	800685e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800685e:	f001 fc55 	bl	800810c <vPortExitCritical>

	return xReturn;
 8006862:	68fb      	ldr	r3, [r7, #12]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e014      	b.n	80068a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800687c:	4a0f      	ldr	r2, [pc, #60]	@ (80068bc <vQueueAddToRegistry+0x50>)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10b      	bne.n	80068a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006888:	490c      	ldr	r1, [pc, #48]	@ (80068bc <vQueueAddToRegistry+0x50>)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006892:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <vQueueAddToRegistry+0x50>)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	4413      	add	r3, r2
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800689e:	e006      	b.n	80068ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b07      	cmp	r3, #7
 80068aa:	d9e7      	bls.n	800687c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20004ed0 	.word	0x20004ed0

080068c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068d0:	f001 fbea 	bl	80080a8 <vPortEnterCritical>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068e0:	d103      	bne.n	80068ea <vQueueWaitForMessageRestricted+0x2a>
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068f0:	b25b      	sxtb	r3, r3
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068f6:	d103      	bne.n	8006900 <vQueueWaitForMessageRestricted+0x40>
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006900:	f001 fc04 	bl	800810c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	3324      	adds	r3, #36	@ 0x24
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fc45 	bl	80071a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800691a:	6978      	ldr	r0, [r7, #20]
 800691c:	f7ff ff26 	bl	800676c <prvUnlockQueue>
	}
 8006920:	bf00      	nop
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08e      	sub	sp, #56	@ 0x38
 800692c:	af04      	add	r7, sp, #16
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <xTaskCreateStatic+0x2c>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	623b      	str	r3, [r7, #32]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <xTaskCreateStatic+0x4a>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	61fb      	str	r3, [r7, #28]
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006972:	235c      	movs	r3, #92	@ 0x5c
 8006974:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b5c      	cmp	r3, #92	@ 0x5c
 800697a:	d00b      	beq.n	8006994 <xTaskCreateStatic+0x6c>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	61bb      	str	r3, [r7, #24]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006994:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01e      	beq.n	80069da <xTaskCreateStatic+0xb2>
 800699c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01b      	beq.n	80069da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069b4:	2300      	movs	r3, #0
 80069b6:	9303      	str	r3, [sp, #12]
 80069b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ba:	9302      	str	r3, [sp, #8]
 80069bc:	f107 0314 	add.w	r3, r7, #20
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f850 	bl	8006a72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80069d4:	f000 f8de 	bl	8006b94 <prvAddNewTaskToReadyList>
 80069d8:	e001      	b.n	80069de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069de:	697b      	ldr	r3, [r7, #20]
	}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3728      	adds	r7, #40	@ 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08c      	sub	sp, #48	@ 0x30
 80069ec:	af04      	add	r7, sp, #16
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4613      	mov	r3, r2
 80069f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069f8:	88fb      	ldrh	r3, [r7, #6]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 fc75 	bl	80082ec <pvPortMalloc>
 8006a02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00e      	beq.n	8006a28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a0a:	205c      	movs	r0, #92	@ 0x5c
 8006a0c:	f001 fc6e 	bl	80082ec <pvPortMalloc>
 8006a10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a1e:	e005      	b.n	8006a2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a20:	6978      	ldr	r0, [r7, #20]
 8006a22:	f001 fd31 	bl	8008488 <vPortFree>
 8006a26:	e001      	b.n	8006a2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d017      	beq.n	8006a62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9303      	str	r3, [sp, #12]
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	9302      	str	r3, [sp, #8]
 8006a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f80e 	bl	8006a72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a56:	69f8      	ldr	r0, [r7, #28]
 8006a58:	f000 f89c 	bl	8006b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	61bb      	str	r3, [r7, #24]
 8006a60:	e002      	b.n	8006a68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a68:	69bb      	ldr	r3, [r7, #24]
	}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b088      	sub	sp, #32
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	461a      	mov	r2, r3
 8006a8a:	21a5      	movs	r1, #165	@ 0xa5
 8006a8c:	f00e fa24 	bl	8014ed8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f023 0307 	bic.w	r3, r3, #7
 8006aa8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	617b      	str	r3, [r7, #20]
}
 8006ac6:	bf00      	nop
 8006ac8:	bf00      	nop
 8006aca:	e7fd      	b.n	8006ac8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d01f      	beq.n	8006b12 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	e012      	b.n	8006afe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	7819      	ldrb	r1, [r3, #0]
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3334      	adds	r3, #52	@ 0x34
 8006ae8:	460a      	mov	r2, r1
 8006aea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d006      	beq.n	8006b06 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	3301      	adds	r3, #1
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	2b0f      	cmp	r3, #15
 8006b02:	d9e9      	bls.n	8006ad8 <prvInitialiseNewTask+0x66>
 8006b04:	e000      	b.n	8006b08 <prvInitialiseNewTask+0x96>
			{
				break;
 8006b06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b10:	e003      	b.n	8006b1a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	2b37      	cmp	r3, #55	@ 0x37
 8006b1e:	d901      	bls.n	8006b24 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b20:	2337      	movs	r3, #55	@ 0x37
 8006b22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b32:	2200      	movs	r2, #0
 8006b34:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff f966 	bl	8005e0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b42:	3318      	adds	r3, #24
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff f961 	bl	8005e0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b52:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	2200      	movs	r2, #0
 8006b64:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	69b8      	ldr	r0, [r7, #24]
 8006b74:	f001 f966 	bl	8007e44 <pxPortInitialiseStack>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b8a:	bf00      	nop
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b9c:	f001 fa84 	bl	80080a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006baa:	4b2c      	ldr	r3, [pc, #176]	@ (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bb8:	4b27      	ldr	r3, [pc, #156]	@ (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d110      	bne.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bc0:	f000 fc46 	bl	8007450 <prvInitialiseTaskLists>
 8006bc4:	e00d      	b.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bc6:	4b26      	ldr	r3, [pc, #152]	@ (8006c60 <prvAddNewTaskToReadyList+0xcc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bce:	4b23      	ldr	r3, [pc, #140]	@ (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d802      	bhi.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006be2:	4b20      	ldr	r3, [pc, #128]	@ (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3301      	adds	r3, #1
 8006be8:	4a1e      	ldr	r2, [pc, #120]	@ (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bec:	4b1d      	ldr	r3, [pc, #116]	@ (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c68 <prvAddNewTaskToReadyList+0xd4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d903      	bls.n	8006c08 <prvAddNewTaskToReadyList+0x74>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c04:	4a18      	ldr	r2, [pc, #96]	@ (8006c68 <prvAddNewTaskToReadyList+0xd4>)
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4a15      	ldr	r2, [pc, #84]	@ (8006c6c <prvAddNewTaskToReadyList+0xd8>)
 8006c16:	441a      	add	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f7ff f901 	bl	8005e26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c24:	f001 fa72 	bl	800810c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c28:	4b0d      	ldr	r3, [pc, #52]	@ (8006c60 <prvAddNewTaskToReadyList+0xcc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c30:	4b0a      	ldr	r3, [pc, #40]	@ (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d207      	bcs.n	8006c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c70 <prvAddNewTaskToReadyList+0xdc>)
 8006c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	200053e4 	.word	0x200053e4
 8006c5c:	20004f10 	.word	0x20004f10
 8006c60:	200053f0 	.word	0x200053f0
 8006c64:	20005400 	.word	0x20005400
 8006c68:	200053ec 	.word	0x200053ec
 8006c6c:	20004f14 	.word	0x20004f14
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d018      	beq.n	8006cb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c86:	4b14      	ldr	r3, [pc, #80]	@ (8006cd8 <vTaskDelay+0x64>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <vTaskDelay+0x32>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	60bb      	str	r3, [r7, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	e7fd      	b.n	8006ca2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ca6:	f000 f883 	bl	8006db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006caa:	2100      	movs	r1, #0
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fd1b 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cb2:	f000 f88b 	bl	8006dcc <xTaskResumeAll>
 8006cb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d107      	bne.n	8006cce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006cbe:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <vTaskDelay+0x68>)
 8006cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	2000540c 	.word	0x2000540c
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	@ 0x28
 8006ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cee:	463a      	mov	r2, r7
 8006cf0:	1d39      	adds	r1, r7, #4
 8006cf2:	f107 0308 	add.w	r3, r7, #8
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff f834 	bl	8005d64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	9202      	str	r2, [sp, #8]
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	460a      	mov	r2, r1
 8006d0e:	4922      	ldr	r1, [pc, #136]	@ (8006d98 <vTaskStartScheduler+0xb8>)
 8006d10:	4822      	ldr	r0, [pc, #136]	@ (8006d9c <vTaskStartScheduler+0xbc>)
 8006d12:	f7ff fe09 	bl	8006928 <xTaskCreateStatic>
 8006d16:	4603      	mov	r3, r0
 8006d18:	4a21      	ldr	r2, [pc, #132]	@ (8006da0 <vTaskStartScheduler+0xc0>)
 8006d1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d1c:	4b20      	ldr	r3, [pc, #128]	@ (8006da0 <vTaskStartScheduler+0xc0>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d24:	2301      	movs	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e001      	b.n	8006d2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d102      	bne.n	8006d3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d34:	f000 fd2c 	bl	8007790 <xTimerCreateTimerTask>
 8006d38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d116      	bne.n	8006d6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	613b      	str	r3, [r7, #16]
}
 8006d52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d54:	4b13      	ldr	r3, [pc, #76]	@ (8006da4 <vTaskStartScheduler+0xc4>)
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d5c:	4b12      	ldr	r3, [pc, #72]	@ (8006da8 <vTaskStartScheduler+0xc8>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d62:	4b12      	ldr	r3, [pc, #72]	@ (8006dac <vTaskStartScheduler+0xcc>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d68:	f001 f8fa 	bl	8007f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d6c:	e00f      	b.n	8006d8e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d74:	d10b      	bne.n	8006d8e <vTaskStartScheduler+0xae>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60fb      	str	r3, [r7, #12]
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	e7fd      	b.n	8006d8a <vTaskStartScheduler+0xaa>
}
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	08015d64 	.word	0x08015d64
 8006d9c:	08007421 	.word	0x08007421
 8006da0:	20005408 	.word	0x20005408
 8006da4:	20005404 	.word	0x20005404
 8006da8:	200053f0 	.word	0x200053f0
 8006dac:	200053e8 	.word	0x200053e8

08006db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006db4:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <vTaskSuspendAll+0x18>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	4a03      	ldr	r2, [pc, #12]	@ (8006dc8 <vTaskSuspendAll+0x18>)
 8006dbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dbe:	bf00      	nop
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	2000540c 	.word	0x2000540c

08006dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dda:	4b42      	ldr	r3, [pc, #264]	@ (8006ee4 <xTaskResumeAll+0x118>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <xTaskResumeAll+0x2e>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	603b      	str	r3, [r7, #0]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dfa:	f001 f955 	bl	80080a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dfe:	4b39      	ldr	r3, [pc, #228]	@ (8006ee4 <xTaskResumeAll+0x118>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	4a37      	ldr	r2, [pc, #220]	@ (8006ee4 <xTaskResumeAll+0x118>)
 8006e06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e08:	4b36      	ldr	r3, [pc, #216]	@ (8006ee4 <xTaskResumeAll+0x118>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d162      	bne.n	8006ed6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e10:	4b35      	ldr	r3, [pc, #212]	@ (8006ee8 <xTaskResumeAll+0x11c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d05e      	beq.n	8006ed6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e18:	e02f      	b.n	8006e7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1a:	4b34      	ldr	r3, [pc, #208]	@ (8006eec <xTaskResumeAll+0x120>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3318      	adds	r3, #24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff f85a 	bl	8005ee0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff f855 	bl	8005ee0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ef0 <xTaskResumeAll+0x124>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d903      	bls.n	8006e4a <xTaskResumeAll+0x7e>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	4a2a      	ldr	r2, [pc, #168]	@ (8006ef0 <xTaskResumeAll+0x124>)
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4a27      	ldr	r2, [pc, #156]	@ (8006ef4 <xTaskResumeAll+0x128>)
 8006e58:	441a      	add	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7fe ffe0 	bl	8005e26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6a:	4b23      	ldr	r3, [pc, #140]	@ (8006ef8 <xTaskResumeAll+0x12c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d302      	bcc.n	8006e7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006e74:	4b21      	ldr	r3, [pc, #132]	@ (8006efc <xTaskResumeAll+0x130>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8006eec <xTaskResumeAll+0x120>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1cb      	bne.n	8006e1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e88:	f000 fb80 	bl	800758c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006f00 <xTaskResumeAll+0x134>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d010      	beq.n	8006eba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e98:	f000 f846 	bl	8006f28 <xTaskIncrementTick>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006ea2:	4b16      	ldr	r3, [pc, #88]	@ (8006efc <xTaskResumeAll+0x130>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f1      	bne.n	8006e98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006eb4:	4b12      	ldr	r3, [pc, #72]	@ (8006f00 <xTaskResumeAll+0x134>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006eba:	4b10      	ldr	r3, [pc, #64]	@ (8006efc <xTaskResumeAll+0x130>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <xTaskResumeAll+0x138>)
 8006ec8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ed6:	f001 f919 	bl	800810c <vPortExitCritical>

	return xAlreadyYielded;
 8006eda:	68bb      	ldr	r3, [r7, #8]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	2000540c 	.word	0x2000540c
 8006ee8:	200053e4 	.word	0x200053e4
 8006eec:	200053a4 	.word	0x200053a4
 8006ef0:	200053ec 	.word	0x200053ec
 8006ef4:	20004f14 	.word	0x20004f14
 8006ef8:	20004f10 	.word	0x20004f10
 8006efc:	200053f8 	.word	0x200053f8
 8006f00:	200053f4 	.word	0x200053f4
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f0e:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <xTaskGetTickCount+0x1c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f14:	687b      	ldr	r3, [r7, #4]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	200053e8 	.word	0x200053e8

08006f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f32:	4b4f      	ldr	r3, [pc, #316]	@ (8007070 <xTaskIncrementTick+0x148>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f040 8090 	bne.w	800705c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007074 <xTaskIncrementTick+0x14c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f44:	4a4b      	ldr	r2, [pc, #300]	@ (8007074 <xTaskIncrementTick+0x14c>)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d121      	bne.n	8006f94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f50:	4b49      	ldr	r3, [pc, #292]	@ (8007078 <xTaskIncrementTick+0x150>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00b      	beq.n	8006f72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	603b      	str	r3, [r7, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	e7fd      	b.n	8006f6e <xTaskIncrementTick+0x46>
 8006f72:	4b41      	ldr	r3, [pc, #260]	@ (8007078 <xTaskIncrementTick+0x150>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	4b40      	ldr	r3, [pc, #256]	@ (800707c <xTaskIncrementTick+0x154>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007078 <xTaskIncrementTick+0x150>)
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	4a3e      	ldr	r2, [pc, #248]	@ (800707c <xTaskIncrementTick+0x154>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	4b3e      	ldr	r3, [pc, #248]	@ (8007080 <xTaskIncrementTick+0x158>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007080 <xTaskIncrementTick+0x158>)
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	f000 fafc 	bl	800758c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f94:	4b3b      	ldr	r3, [pc, #236]	@ (8007084 <xTaskIncrementTick+0x15c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d349      	bcc.n	8007032 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f9e:	4b36      	ldr	r3, [pc, #216]	@ (8007078 <xTaskIncrementTick+0x150>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa8:	4b36      	ldr	r3, [pc, #216]	@ (8007084 <xTaskIncrementTick+0x15c>)
 8006faa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fae:	601a      	str	r2, [r3, #0]
					break;
 8006fb0:	e03f      	b.n	8007032 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb2:	4b31      	ldr	r3, [pc, #196]	@ (8007078 <xTaskIncrementTick+0x150>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d203      	bcs.n	8006fd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fca:	4a2e      	ldr	r2, [pc, #184]	@ (8007084 <xTaskIncrementTick+0x15c>)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fd0:	e02f      	b.n	8007032 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe ff82 	bl	8005ee0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	3318      	adds	r3, #24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe ff79 	bl	8005ee0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff2:	4b25      	ldr	r3, [pc, #148]	@ (8007088 <xTaskIncrementTick+0x160>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d903      	bls.n	8007002 <xTaskIncrementTick+0xda>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	4a22      	ldr	r2, [pc, #136]	@ (8007088 <xTaskIncrementTick+0x160>)
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4a1f      	ldr	r2, [pc, #124]	@ (800708c <xTaskIncrementTick+0x164>)
 8007010:	441a      	add	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f7fe ff04 	bl	8005e26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007022:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <xTaskIncrementTick+0x168>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007028:	429a      	cmp	r2, r3
 800702a:	d3b8      	bcc.n	8006f9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007030:	e7b5      	b.n	8006f9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007032:	4b17      	ldr	r3, [pc, #92]	@ (8007090 <xTaskIncrementTick+0x168>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007038:	4914      	ldr	r1, [pc, #80]	@ (800708c <xTaskIncrementTick+0x164>)
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d901      	bls.n	800704e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800704a:	2301      	movs	r3, #1
 800704c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800704e:	4b11      	ldr	r3, [pc, #68]	@ (8007094 <xTaskIncrementTick+0x16c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007056:	2301      	movs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	e004      	b.n	8007066 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800705c:	4b0e      	ldr	r3, [pc, #56]	@ (8007098 <xTaskIncrementTick+0x170>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	4a0d      	ldr	r2, [pc, #52]	@ (8007098 <xTaskIncrementTick+0x170>)
 8007064:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007066:	697b      	ldr	r3, [r7, #20]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	2000540c 	.word	0x2000540c
 8007074:	200053e8 	.word	0x200053e8
 8007078:	2000539c 	.word	0x2000539c
 800707c:	200053a0 	.word	0x200053a0
 8007080:	200053fc 	.word	0x200053fc
 8007084:	20005404 	.word	0x20005404
 8007088:	200053ec 	.word	0x200053ec
 800708c:	20004f14 	.word	0x20004f14
 8007090:	20004f10 	.word	0x20004f10
 8007094:	200053f8 	.word	0x200053f8
 8007098:	200053f4 	.word	0x200053f4

0800709c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070a2:	4b28      	ldr	r3, [pc, #160]	@ (8007144 <vTaskSwitchContext+0xa8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070aa:	4b27      	ldr	r3, [pc, #156]	@ (8007148 <vTaskSwitchContext+0xac>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070b0:	e042      	b.n	8007138 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80070b2:	4b25      	ldr	r3, [pc, #148]	@ (8007148 <vTaskSwitchContext+0xac>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b8:	4b24      	ldr	r3, [pc, #144]	@ (800714c <vTaskSwitchContext+0xb0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	e011      	b.n	80070e4 <vTaskSwitchContext+0x48>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <vTaskSwitchContext+0x42>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	607b      	str	r3, [r7, #4]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <vTaskSwitchContext+0x3e>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	491a      	ldr	r1, [pc, #104]	@ (8007150 <vTaskSwitchContext+0xb4>)
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0e3      	beq.n	80070c0 <vTaskSwitchContext+0x24>
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4a13      	ldr	r2, [pc, #76]	@ (8007150 <vTaskSwitchContext+0xb4>)
 8007104:	4413      	add	r3, r2
 8007106:	60bb      	str	r3, [r7, #8]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	605a      	str	r2, [r3, #4]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	3308      	adds	r3, #8
 800711a:	429a      	cmp	r2, r3
 800711c:	d104      	bne.n	8007128 <vTaskSwitchContext+0x8c>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	605a      	str	r2, [r3, #4]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	4a09      	ldr	r2, [pc, #36]	@ (8007154 <vTaskSwitchContext+0xb8>)
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	4a06      	ldr	r2, [pc, #24]	@ (800714c <vTaskSwitchContext+0xb0>)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6013      	str	r3, [r2, #0]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	2000540c 	.word	0x2000540c
 8007148:	200053f8 	.word	0x200053f8
 800714c:	200053ec 	.word	0x200053ec
 8007150:	20004f14 	.word	0x20004f14
 8007154:	20004f10 	.word	0x20004f10

08007158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	60fb      	str	r3, [r7, #12]
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007180:	4b07      	ldr	r3, [pc, #28]	@ (80071a0 <vTaskPlaceOnEventList+0x48>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3318      	adds	r3, #24
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fe fe70 	bl	8005e6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800718e:	2101      	movs	r1, #1
 8007190:	6838      	ldr	r0, [r7, #0]
 8007192:	f000 faa9 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20004f10 	.word	0x20004f10

080071a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10b      	bne.n	80071ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	617b      	str	r3, [r7, #20]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071ce:	4b0a      	ldr	r3, [pc, #40]	@ (80071f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3318      	adds	r3, #24
 80071d4:	4619      	mov	r1, r3
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7fe fe25 	bl	8005e26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	68b8      	ldr	r0, [r7, #8]
 80071ec:	f000 fa7c 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
	}
 80071f0:	bf00      	nop
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20004f10 	.word	0x20004f10

080071fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	60fb      	str	r3, [r7, #12]
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	3318      	adds	r3, #24
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fe56 	bl	8005ee0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007234:	4b1d      	ldr	r3, [pc, #116]	@ (80072ac <xTaskRemoveFromEventList+0xb0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d11d      	bne.n	8007278 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	3304      	adds	r3, #4
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fe4d 	bl	8005ee0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724a:	4b19      	ldr	r3, [pc, #100]	@ (80072b0 <xTaskRemoveFromEventList+0xb4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d903      	bls.n	800725a <xTaskRemoveFromEventList+0x5e>
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007256:	4a16      	ldr	r2, [pc, #88]	@ (80072b0 <xTaskRemoveFromEventList+0xb4>)
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4a13      	ldr	r2, [pc, #76]	@ (80072b4 <xTaskRemoveFromEventList+0xb8>)
 8007268:	441a      	add	r2, r3
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	3304      	adds	r3, #4
 800726e:	4619      	mov	r1, r3
 8007270:	4610      	mov	r0, r2
 8007272:	f7fe fdd8 	bl	8005e26 <vListInsertEnd>
 8007276:	e005      	b.n	8007284 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3318      	adds	r3, #24
 800727c:	4619      	mov	r1, r3
 800727e:	480e      	ldr	r0, [pc, #56]	@ (80072b8 <xTaskRemoveFromEventList+0xbc>)
 8007280:	f7fe fdd1 	bl	8005e26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007288:	4b0c      	ldr	r3, [pc, #48]	@ (80072bc <xTaskRemoveFromEventList+0xc0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	429a      	cmp	r2, r3
 8007290:	d905      	bls.n	800729e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007292:	2301      	movs	r3, #1
 8007294:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007296:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <xTaskRemoveFromEventList+0xc4>)
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e001      	b.n	80072a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2000540c 	.word	0x2000540c
 80072b0:	200053ec 	.word	0x200053ec
 80072b4:	20004f14 	.word	0x20004f14
 80072b8:	200053a4 	.word	0x200053a4
 80072bc:	20004f10 	.word	0x20004f10
 80072c0:	200053f8 	.word	0x200053f8

080072c4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10b      	bne.n	80072ea <vTaskSetTimeOutState+0x26>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60fb      	str	r3, [r7, #12]
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80072ea:	f000 fedd 	bl	80080a8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072ee:	4b07      	ldr	r3, [pc, #28]	@ (800730c <vTaskSetTimeOutState+0x48>)
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80072f6:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <vTaskSetTimeOutState+0x4c>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80072fe:	f000 ff05 	bl	800810c <vPortExitCritical>
}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200053fc 	.word	0x200053fc
 8007310:	200053e8 	.word	0x200053e8

08007314 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800731c:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <vTaskInternalSetTimeOutState+0x24>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007324:	4b05      	ldr	r3, [pc, #20]	@ (800733c <vTaskInternalSetTimeOutState+0x28>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	605a      	str	r2, [r3, #4]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	200053fc 	.word	0x200053fc
 800733c:	200053e8 	.word	0x200053e8

08007340 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60fb      	str	r3, [r7, #12]
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	e7fd      	b.n	8007382 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007386:	f000 fe8f 	bl	80080a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800738a:	4b1d      	ldr	r3, [pc, #116]	@ (8007400 <xTaskCheckForTimeOut+0xc0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073a2:	d102      	bne.n	80073aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	e023      	b.n	80073f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b15      	ldr	r3, [pc, #84]	@ (8007404 <xTaskCheckForTimeOut+0xc4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d007      	beq.n	80073c6 <xTaskCheckForTimeOut+0x86>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	e015      	b.n	80073f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d20b      	bcs.n	80073e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff ff99 	bl	8007314 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	61fb      	str	r3, [r7, #28]
 80073e6:	e004      	b.n	80073f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073ee:	2301      	movs	r3, #1
 80073f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073f2:	f000 fe8b 	bl	800810c <vPortExitCritical>

	return xReturn;
 80073f6:	69fb      	ldr	r3, [r7, #28]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	200053e8 	.word	0x200053e8
 8007404:	200053fc 	.word	0x200053fc

08007408 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800740c:	4b03      	ldr	r3, [pc, #12]	@ (800741c <vTaskMissedYield+0x14>)
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]
}
 8007412:	bf00      	nop
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	200053f8 	.word	0x200053f8

08007420 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007428:	f000 f852 	bl	80074d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800742c:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <prvIdleTask+0x28>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d9f9      	bls.n	8007428 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007434:	4b05      	ldr	r3, [pc, #20]	@ (800744c <prvIdleTask+0x2c>)
 8007436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007444:	e7f0      	b.n	8007428 <prvIdleTask+0x8>
 8007446:	bf00      	nop
 8007448:	20004f14 	.word	0x20004f14
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007456:	2300      	movs	r3, #0
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	e00c      	b.n	8007476 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a12      	ldr	r2, [pc, #72]	@ (80074b0 <prvInitialiseTaskLists+0x60>)
 8007468:	4413      	add	r3, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fcae 	bl	8005dcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3301      	adds	r3, #1
 8007474:	607b      	str	r3, [r7, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b37      	cmp	r3, #55	@ 0x37
 800747a:	d9ef      	bls.n	800745c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800747c:	480d      	ldr	r0, [pc, #52]	@ (80074b4 <prvInitialiseTaskLists+0x64>)
 800747e:	f7fe fca5 	bl	8005dcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007482:	480d      	ldr	r0, [pc, #52]	@ (80074b8 <prvInitialiseTaskLists+0x68>)
 8007484:	f7fe fca2 	bl	8005dcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007488:	480c      	ldr	r0, [pc, #48]	@ (80074bc <prvInitialiseTaskLists+0x6c>)
 800748a:	f7fe fc9f 	bl	8005dcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800748e:	480c      	ldr	r0, [pc, #48]	@ (80074c0 <prvInitialiseTaskLists+0x70>)
 8007490:	f7fe fc9c 	bl	8005dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007494:	480b      	ldr	r0, [pc, #44]	@ (80074c4 <prvInitialiseTaskLists+0x74>)
 8007496:	f7fe fc99 	bl	8005dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800749a:	4b0b      	ldr	r3, [pc, #44]	@ (80074c8 <prvInitialiseTaskLists+0x78>)
 800749c:	4a05      	ldr	r2, [pc, #20]	@ (80074b4 <prvInitialiseTaskLists+0x64>)
 800749e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074a0:	4b0a      	ldr	r3, [pc, #40]	@ (80074cc <prvInitialiseTaskLists+0x7c>)
 80074a2:	4a05      	ldr	r2, [pc, #20]	@ (80074b8 <prvInitialiseTaskLists+0x68>)
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20004f14 	.word	0x20004f14
 80074b4:	20005374 	.word	0x20005374
 80074b8:	20005388 	.word	0x20005388
 80074bc:	200053a4 	.word	0x200053a4
 80074c0:	200053b8 	.word	0x200053b8
 80074c4:	200053d0 	.word	0x200053d0
 80074c8:	2000539c 	.word	0x2000539c
 80074cc:	200053a0 	.word	0x200053a0

080074d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074d6:	e019      	b.n	800750c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074d8:	f000 fde6 	bl	80080a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074dc:	4b10      	ldr	r3, [pc, #64]	@ (8007520 <prvCheckTasksWaitingTermination+0x50>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fcf9 	bl	8005ee0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <prvCheckTasksWaitingTermination+0x54>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007524 <prvCheckTasksWaitingTermination+0x54>)
 80074f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007528 <prvCheckTasksWaitingTermination+0x58>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007528 <prvCheckTasksWaitingTermination+0x58>)
 8007500:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007502:	f000 fe03 	bl	800810c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f810 	bl	800752c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <prvCheckTasksWaitingTermination+0x58>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e1      	bne.n	80074d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200053b8 	.word	0x200053b8
 8007524:	200053e4 	.word	0x200053e4
 8007528:	200053cc 	.word	0x200053cc

0800752c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800753a:	2b00      	cmp	r3, #0
 800753c:	d108      	bne.n	8007550 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	4618      	mov	r0, r3
 8007544:	f000 ffa0 	bl	8008488 <vPortFree>
				vPortFree( pxTCB );
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 ff9d 	bl	8008488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800754e:	e019      	b.n	8007584 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007556:	2b01      	cmp	r3, #1
 8007558:	d103      	bne.n	8007562 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 ff94 	bl	8008488 <vPortFree>
	}
 8007560:	e010      	b.n	8007584 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007568:	2b02      	cmp	r3, #2
 800756a:	d00b      	beq.n	8007584 <prvDeleteTCB+0x58>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	60fb      	str	r3, [r7, #12]
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	e7fd      	b.n	8007580 <prvDeleteTCB+0x54>
	}
 8007584:	bf00      	nop
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007592:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <prvResetNextTaskUnblockTime+0x38>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <prvResetNextTaskUnblockTime+0x3c>)
 800759e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075a4:	e008      	b.n	80075b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a6:	4b07      	ldr	r3, [pc, #28]	@ (80075c4 <prvResetNextTaskUnblockTime+0x38>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	4a04      	ldr	r2, [pc, #16]	@ (80075c8 <prvResetNextTaskUnblockTime+0x3c>)
 80075b6:	6013      	str	r3, [r2, #0]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	2000539c 	.word	0x2000539c
 80075c8:	20005404 	.word	0x20005404

080075cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <xTaskGetSchedulerState+0x34>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075da:	2301      	movs	r3, #1
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	e008      	b.n	80075f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075e0:	4b08      	ldr	r3, [pc, #32]	@ (8007604 <xTaskGetSchedulerState+0x38>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075e8:	2302      	movs	r3, #2
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	e001      	b.n	80075f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075f2:	687b      	ldr	r3, [r7, #4]
	}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	200053f0 	.word	0x200053f0
 8007604:	2000540c 	.word	0x2000540c

08007608 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d058      	beq.n	80076d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800761e:	4b2f      	ldr	r3, [pc, #188]	@ (80076dc <xTaskPriorityDisinherit+0xd4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	429a      	cmp	r2, r3
 8007626:	d00b      	beq.n	8007640 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	60fb      	str	r3, [r7, #12]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60bb      	str	r3, [r7, #8]
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	e7fd      	b.n	800765c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007664:	1e5a      	subs	r2, r3, #1
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007672:	429a      	cmp	r2, r3
 8007674:	d02c      	beq.n	80076d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800767a:	2b00      	cmp	r3, #0
 800767c:	d128      	bne.n	80076d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	3304      	adds	r3, #4
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fc2c 	bl	8005ee0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a0:	4b0f      	ldr	r3, [pc, #60]	@ (80076e0 <xTaskPriorityDisinherit+0xd8>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d903      	bls.n	80076b0 <xTaskPriorityDisinherit+0xa8>
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a0c      	ldr	r2, [pc, #48]	@ (80076e0 <xTaskPriorityDisinherit+0xd8>)
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4a09      	ldr	r2, [pc, #36]	@ (80076e4 <xTaskPriorityDisinherit+0xdc>)
 80076be:	441a      	add	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f7fe fbad 	bl	8005e26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076cc:	2301      	movs	r3, #1
 80076ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076d0:	697b      	ldr	r3, [r7, #20]
	}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20004f10 	.word	0x20004f10
 80076e0:	200053ec 	.word	0x200053ec
 80076e4:	20004f14 	.word	0x20004f14

080076e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076f2:	4b21      	ldr	r3, [pc, #132]	@ (8007778 <prvAddCurrentTaskToDelayedList+0x90>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076f8:	4b20      	ldr	r3, [pc, #128]	@ (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fbee 	bl	8005ee0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800770a:	d10a      	bne.n	8007722 <prvAddCurrentTaskToDelayedList+0x3a>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007712:	4b1a      	ldr	r3, [pc, #104]	@ (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3304      	adds	r3, #4
 8007718:	4619      	mov	r1, r3
 800771a:	4819      	ldr	r0, [pc, #100]	@ (8007780 <prvAddCurrentTaskToDelayedList+0x98>)
 800771c:	f7fe fb83 	bl	8005e26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007720:	e026      	b.n	8007770 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800772a:	4b14      	ldr	r3, [pc, #80]	@ (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	429a      	cmp	r2, r3
 8007738:	d209      	bcs.n	800774e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800773a:	4b12      	ldr	r3, [pc, #72]	@ (8007784 <prvAddCurrentTaskToDelayedList+0x9c>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b0f      	ldr	r3, [pc, #60]	@ (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7fe fb91 	bl	8005e6e <vListInsert>
}
 800774c:	e010      	b.n	8007770 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774e:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3304      	adds	r3, #4
 8007758:	4619      	mov	r1, r3
 800775a:	4610      	mov	r0, r2
 800775c:	f7fe fb87 	bl	8005e6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007760:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d202      	bcs.n	8007770 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800776a:	4a08      	ldr	r2, [pc, #32]	@ (800778c <prvAddCurrentTaskToDelayedList+0xa4>)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6013      	str	r3, [r2, #0]
}
 8007770:	bf00      	nop
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200053e8 	.word	0x200053e8
 800777c:	20004f10 	.word	0x20004f10
 8007780:	200053d0 	.word	0x200053d0
 8007784:	200053a0 	.word	0x200053a0
 8007788:	2000539c 	.word	0x2000539c
 800778c:	20005404 	.word	0x20005404

08007790 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	@ 0x28
 8007794:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800779a:	f000 fb13 	bl	8007dc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800779e:	4b1d      	ldr	r3, [pc, #116]	@ (8007814 <xTimerCreateTimerTask+0x84>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d021      	beq.n	80077ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077ae:	1d3a      	adds	r2, r7, #4
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	f107 030c 	add.w	r3, r7, #12
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fe faed 	bl	8005d98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	9202      	str	r2, [sp, #8]
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	2302      	movs	r3, #2
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2300      	movs	r3, #0
 80077ce:	460a      	mov	r2, r1
 80077d0:	4911      	ldr	r1, [pc, #68]	@ (8007818 <xTimerCreateTimerTask+0x88>)
 80077d2:	4812      	ldr	r0, [pc, #72]	@ (800781c <xTimerCreateTimerTask+0x8c>)
 80077d4:	f7ff f8a8 	bl	8006928 <xTaskCreateStatic>
 80077d8:	4603      	mov	r3, r0
 80077da:	4a11      	ldr	r2, [pc, #68]	@ (8007820 <xTimerCreateTimerTask+0x90>)
 80077dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077de:	4b10      	ldr	r3, [pc, #64]	@ (8007820 <xTimerCreateTimerTask+0x90>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077e6:	2301      	movs	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10b      	bne.n	8007808 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	613b      	str	r3, [r7, #16]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007808:	697b      	ldr	r3, [r7, #20]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20005440 	.word	0x20005440
 8007818:	08015d6c 	.word	0x08015d6c
 800781c:	0800795d 	.word	0x0800795d
 8007820:	20005444 	.word	0x20005444

08007824 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	@ 0x28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007832:	2300      	movs	r3, #0
 8007834:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <xTimerGenericCommand+0x30>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	623b      	str	r3, [r7, #32]
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007854:	4b19      	ldr	r3, [pc, #100]	@ (80078bc <xTimerGenericCommand+0x98>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d02a      	beq.n	80078b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b05      	cmp	r3, #5
 800786c:	dc18      	bgt.n	80078a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800786e:	f7ff fead 	bl	80075cc <xTaskGetSchedulerState>
 8007872:	4603      	mov	r3, r0
 8007874:	2b02      	cmp	r3, #2
 8007876:	d109      	bne.n	800788c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007878:	4b10      	ldr	r3, [pc, #64]	@ (80078bc <xTimerGenericCommand+0x98>)
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	f107 0110 	add.w	r1, r7, #16
 8007880:	2300      	movs	r3, #0
 8007882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007884:	f7fe fc60 	bl	8006148 <xQueueGenericSend>
 8007888:	6278      	str	r0, [r7, #36]	@ 0x24
 800788a:	e012      	b.n	80078b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800788c:	4b0b      	ldr	r3, [pc, #44]	@ (80078bc <xTimerGenericCommand+0x98>)
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	f107 0110 	add.w	r1, r7, #16
 8007894:	2300      	movs	r3, #0
 8007896:	2200      	movs	r2, #0
 8007898:	f7fe fc56 	bl	8006148 <xQueueGenericSend>
 800789c:	6278      	str	r0, [r7, #36]	@ 0x24
 800789e:	e008      	b.n	80078b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078a0:	4b06      	ldr	r3, [pc, #24]	@ (80078bc <xTimerGenericCommand+0x98>)
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	f107 0110 	add.w	r1, r7, #16
 80078a8:	2300      	movs	r3, #0
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	f7fe fd4e 	bl	800634c <xQueueGenericSendFromISR>
 80078b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3728      	adds	r7, #40	@ 0x28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20005440 	.word	0x20005440

080078c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ca:	4b23      	ldr	r3, [pc, #140]	@ (8007958 <prvProcessExpiredTimer+0x98>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fb01 	bl	8005ee0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d023      	beq.n	8007934 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	18d1      	adds	r1, r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	6978      	ldr	r0, [r7, #20]
 80078fa:	f000 f8d5 	bl	8007aa8 <prvInsertTimerInActiveList>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d020      	beq.n	8007946 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007904:	2300      	movs	r3, #0
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	2300      	movs	r3, #0
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	2100      	movs	r1, #0
 800790e:	6978      	ldr	r0, [r7, #20]
 8007910:	f7ff ff88 	bl	8007824 <xTimerGenericCommand>
 8007914:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d114      	bne.n	8007946 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60fb      	str	r3, [r7, #12]
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800793a:	f023 0301 	bic.w	r3, r3, #1
 800793e:	b2da      	uxtb	r2, r3
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	6978      	ldr	r0, [r7, #20]
 800794c:	4798      	blx	r3
}
 800794e:	bf00      	nop
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20005438 	.word	0x20005438

0800795c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007964:	f107 0308 	add.w	r3, r7, #8
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f859 	bl	8007a20 <prvGetNextExpireTime>
 800796e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4619      	mov	r1, r3
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f805 	bl	8007984 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800797a:	f000 f8d7 	bl	8007b2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800797e:	bf00      	nop
 8007980:	e7f0      	b.n	8007964 <prvTimerTask+0x8>
	...

08007984 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800798e:	f7ff fa0f 	bl	8006db0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007992:	f107 0308 	add.w	r3, r7, #8
 8007996:	4618      	mov	r0, r3
 8007998:	f000 f866 	bl	8007a68 <prvSampleTimeNow>
 800799c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d130      	bne.n	8007a06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <prvProcessTimerOrBlockTask+0x3c>
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d806      	bhi.n	80079c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079b2:	f7ff fa0b 	bl	8006dcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079b6:	68f9      	ldr	r1, [r7, #12]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff81 	bl	80078c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079be:	e024      	b.n	8007a0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d008      	beq.n	80079d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079c6:	4b13      	ldr	r3, [pc, #76]	@ (8007a14 <prvProcessTimerOrBlockTask+0x90>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <prvProcessTimerOrBlockTask+0x50>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <prvProcessTimerOrBlockTask+0x52>
 80079d4:	2300      	movs	r3, #0
 80079d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007a18 <prvProcessTimerOrBlockTask+0x94>)
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	4619      	mov	r1, r3
 80079e6:	f7fe ff6b 	bl	80068c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079ea:	f7ff f9ef 	bl	8006dcc <xTaskResumeAll>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079f4:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <prvProcessTimerOrBlockTask+0x98>)
 80079f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	f3bf 8f6f 	isb	sy
}
 8007a04:	e001      	b.n	8007a0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a06:	f7ff f9e1 	bl	8006dcc <xTaskResumeAll>
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	2000543c 	.word	0x2000543c
 8007a18:	20005440 	.word	0x20005440
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a28:	4b0e      	ldr	r3, [pc, #56]	@ (8007a64 <prvGetNextExpireTime+0x44>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <prvGetNextExpireTime+0x16>
 8007a32:	2201      	movs	r2, #1
 8007a34:	e000      	b.n	8007a38 <prvGetNextExpireTime+0x18>
 8007a36:	2200      	movs	r2, #0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d105      	bne.n	8007a50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a44:	4b07      	ldr	r3, [pc, #28]	@ (8007a64 <prvGetNextExpireTime+0x44>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	e001      	b.n	8007a54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a54:	68fb      	ldr	r3, [r7, #12]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20005438 	.word	0x20005438

08007a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a70:	f7ff fa4a 	bl	8006f08 <xTaskGetTickCount>
 8007a74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a76:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa4 <prvSampleTimeNow+0x3c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d205      	bcs.n	8007a8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a80:	f000 f93a 	bl	8007cf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e002      	b.n	8007a92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a92:	4a04      	ldr	r2, [pc, #16]	@ (8007aa4 <prvSampleTimeNow+0x3c>)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a98:	68fb      	ldr	r3, [r7, #12]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20005448 	.word	0x20005448

08007aa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d812      	bhi.n	8007af4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	1ad2      	subs	r2, r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d302      	bcc.n	8007ae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007adc:	2301      	movs	r3, #1
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	e01b      	b.n	8007b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ae2:	4b10      	ldr	r3, [pc, #64]	@ (8007b24 <prvInsertTimerInActiveList+0x7c>)
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe f9be 	bl	8005e6e <vListInsert>
 8007af2:	e012      	b.n	8007b1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d206      	bcs.n	8007b0a <prvInsertTimerInActiveList+0x62>
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d302      	bcc.n	8007b0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	e007      	b.n	8007b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b0a:	4b07      	ldr	r3, [pc, #28]	@ (8007b28 <prvInsertTimerInActiveList+0x80>)
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f7fe f9aa 	bl	8005e6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b1a:	697b      	ldr	r3, [r7, #20]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	2000543c 	.word	0x2000543c
 8007b28:	20005438 	.word	0x20005438

08007b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08e      	sub	sp, #56	@ 0x38
 8007b30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b32:	e0ce      	b.n	8007cd2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	da19      	bge.n	8007b6e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b3a:	1d3b      	adds	r3, r7, #4
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	61fb      	str	r3, [r7, #28]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b64:	6850      	ldr	r0, [r2, #4]
 8007b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b68:	6892      	ldr	r2, [r2, #8]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f2c0 80ae 	blt.w	8007cd2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe f9aa 	bl	8005ee0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff ff6a 	bl	8007a68 <prvSampleTimeNow>
 8007b94:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b09      	cmp	r3, #9
 8007b9a:	f200 8097 	bhi.w	8007ccc <prvProcessReceivedCommands+0x1a0>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <prvProcessReceivedCommands+0x78>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bcd 	.word	0x08007bcd
 8007ba8:	08007bcd 	.word	0x08007bcd
 8007bac:	08007bcd 	.word	0x08007bcd
 8007bb0:	08007c43 	.word	0x08007c43
 8007bb4:	08007c57 	.word	0x08007c57
 8007bb8:	08007ca3 	.word	0x08007ca3
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bcd 	.word	0x08007bcd
 8007bc4:	08007c43 	.word	0x08007c43
 8007bc8:	08007c57 	.word	0x08007c57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	18d1      	adds	r1, r2, r3
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bec:	f7ff ff5c 	bl	8007aa8 <prvInsertTimerInActiveList>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d06c      	beq.n	8007cd0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d061      	beq.n	8007cd0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	441a      	add	r2, r3
 8007c14:	2300      	movs	r3, #0
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c1e:	f7ff fe01 	bl	8007824 <xTimerGenericCommand>
 8007c22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d152      	bne.n	8007cd0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	61bb      	str	r3, [r7, #24]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c48:	f023 0301 	bic.w	r3, r3, #1
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c54:	e03d      	b.n	8007cd2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c5c:	f043 0301 	orr.w	r3, r3, #1
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10b      	bne.n	8007c8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	617b      	str	r3, [r7, #20]
}
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	e7fd      	b.n	8007c8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	18d1      	adds	r1, r2, r3
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c9c:	f7ff ff04 	bl	8007aa8 <prvInsertTimerInActiveList>
					break;
 8007ca0:	e017      	b.n	8007cd2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d103      	bne.n	8007cb8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007cb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb2:	f000 fbe9 	bl	8008488 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cb6:	e00c      	b.n	8007cd2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cbe:	f023 0301 	bic.w	r3, r3, #1
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cca:	e002      	b.n	8007cd2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007ccc:	bf00      	nop
 8007cce:	e000      	b.n	8007cd2 <prvProcessReceivedCommands+0x1a6>
					break;
 8007cd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cd2:	4b08      	ldr	r3, [pc, #32]	@ (8007cf4 <prvProcessReceivedCommands+0x1c8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	1d39      	adds	r1, r7, #4
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fbd4 	bl	8006488 <xQueueReceive>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f47f af26 	bne.w	8007b34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	3730      	adds	r7, #48	@ 0x30
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20005440 	.word	0x20005440

08007cf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cfe:	e049      	b.n	8007d94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d00:	4b2e      	ldr	r3, [pc, #184]	@ (8007dbc <prvSwitchTimerLists+0xc4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007dbc <prvSwitchTimerLists+0xc4>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3304      	adds	r3, #4
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe f8e1 	bl	8005ee0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d02f      	beq.n	8007d94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d90e      	bls.n	8007d64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d52:	4b1a      	ldr	r3, [pc, #104]	@ (8007dbc <prvSwitchTimerLists+0xc4>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7fe f886 	bl	8005e6e <vListInsert>
 8007d62:	e017      	b.n	8007d94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d64:	2300      	movs	r3, #0
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff fd58 	bl	8007824 <xTimerGenericCommand>
 8007d74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10b      	bne.n	8007d94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	603b      	str	r3, [r7, #0]
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	e7fd      	b.n	8007d90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d94:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <prvSwitchTimerLists+0xc4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1b0      	bne.n	8007d00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d9e:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <prvSwitchTimerLists+0xc4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007da4:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <prvSwitchTimerLists+0xc8>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a04      	ldr	r2, [pc, #16]	@ (8007dbc <prvSwitchTimerLists+0xc4>)
 8007daa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dac:	4a04      	ldr	r2, [pc, #16]	@ (8007dc0 <prvSwitchTimerLists+0xc8>)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	6013      	str	r3, [r2, #0]
}
 8007db2:	bf00      	nop
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20005438 	.word	0x20005438
 8007dc0:	2000543c 	.word	0x2000543c

08007dc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dca:	f000 f96d 	bl	80080a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007dce:	4b15      	ldr	r3, [pc, #84]	@ (8007e24 <prvCheckForValidListAndQueue+0x60>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d120      	bne.n	8007e18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dd6:	4814      	ldr	r0, [pc, #80]	@ (8007e28 <prvCheckForValidListAndQueue+0x64>)
 8007dd8:	f7fd fff8 	bl	8005dcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ddc:	4813      	ldr	r0, [pc, #76]	@ (8007e2c <prvCheckForValidListAndQueue+0x68>)
 8007dde:	f7fd fff5 	bl	8005dcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007de2:	4b13      	ldr	r3, [pc, #76]	@ (8007e30 <prvCheckForValidListAndQueue+0x6c>)
 8007de4:	4a10      	ldr	r2, [pc, #64]	@ (8007e28 <prvCheckForValidListAndQueue+0x64>)
 8007de6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007de8:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <prvCheckForValidListAndQueue+0x70>)
 8007dea:	4a10      	ldr	r2, [pc, #64]	@ (8007e2c <prvCheckForValidListAndQueue+0x68>)
 8007dec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dee:	2300      	movs	r3, #0
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4b11      	ldr	r3, [pc, #68]	@ (8007e38 <prvCheckForValidListAndQueue+0x74>)
 8007df4:	4a11      	ldr	r2, [pc, #68]	@ (8007e3c <prvCheckForValidListAndQueue+0x78>)
 8007df6:	2110      	movs	r1, #16
 8007df8:	200a      	movs	r0, #10
 8007dfa:	f7fe f905 	bl	8006008 <xQueueGenericCreateStatic>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	4a08      	ldr	r2, [pc, #32]	@ (8007e24 <prvCheckForValidListAndQueue+0x60>)
 8007e02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e04:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <prvCheckForValidListAndQueue+0x60>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <prvCheckForValidListAndQueue+0x60>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	490b      	ldr	r1, [pc, #44]	@ (8007e40 <prvCheckForValidListAndQueue+0x7c>)
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fd2a 	bl	800686c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e18:	f000 f978 	bl	800810c <vPortExitCritical>
}
 8007e1c:	bf00      	nop
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20005440 	.word	0x20005440
 8007e28:	20005410 	.word	0x20005410
 8007e2c:	20005424 	.word	0x20005424
 8007e30:	20005438 	.word	0x20005438
 8007e34:	2000543c 	.word	0x2000543c
 8007e38:	200054ec 	.word	0x200054ec
 8007e3c:	2000544c 	.word	0x2000544c
 8007e40:	08015d74 	.word	0x08015d74

08007e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3b04      	subs	r3, #4
 8007e54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3b04      	subs	r3, #4
 8007e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f023 0201 	bic.w	r2, r3, #1
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3b04      	subs	r3, #4
 8007e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e74:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea8 <pxPortInitialiseStack+0x64>)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3b14      	subs	r3, #20
 8007e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f06f 0202 	mvn.w	r2, #2
 8007e92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3b20      	subs	r3, #32
 8007e98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	08007ead 	.word	0x08007ead

08007eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eb6:	4b13      	ldr	r3, [pc, #76]	@ (8007f04 <prvTaskExitError+0x58>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ebe:	d00b      	beq.n	8007ed8 <prvTaskExitError+0x2c>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	60fb      	str	r3, [r7, #12]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <prvTaskExitError+0x28>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	60bb      	str	r3, [r7, #8]
}
 8007eea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007eec:	bf00      	nop
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0fc      	beq.n	8007eee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20000010 	.word	0x20000010
	...

08007f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f10:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <pxCurrentTCBConst2>)
 8007f12:	6819      	ldr	r1, [r3, #0]
 8007f14:	6808      	ldr	r0, [r1, #0]
 8007f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1a:	f380 8809 	msr	PSP, r0
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8811 	msr	BASEPRI, r0
 8007f2a:	4770      	bx	lr
 8007f2c:	f3af 8000 	nop.w

08007f30 <pxCurrentTCBConst2>:
 8007f30:	20004f10 	.word	0x20004f10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop

08007f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f38:	4808      	ldr	r0, [pc, #32]	@ (8007f5c <prvPortStartFirstTask+0x24>)
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	6800      	ldr	r0, [r0, #0]
 8007f3e:	f380 8808 	msr	MSP, r0
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8814 	msr	CONTROL, r0
 8007f4a:	b662      	cpsie	i
 8007f4c:	b661      	cpsie	f
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	df00      	svc	0
 8007f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f5a:	bf00      	nop
 8007f5c:	e000ed08 	.word	0xe000ed08

08007f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f66:	4b47      	ldr	r3, [pc, #284]	@ (8008084 <xPortStartScheduler+0x124>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a47      	ldr	r2, [pc, #284]	@ (8008088 <xPortStartScheduler+0x128>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d10b      	bne.n	8007f88 <xPortStartScheduler+0x28>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f88:	4b3e      	ldr	r3, [pc, #248]	@ (8008084 <xPortStartScheduler+0x124>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800808c <xPortStartScheduler+0x12c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10b      	bne.n	8007faa <xPortStartScheduler+0x4a>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	613b      	str	r3, [r7, #16]
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	e7fd      	b.n	8007fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007faa:	4b39      	ldr	r3, [pc, #228]	@ (8008090 <xPortStartScheduler+0x130>)
 8007fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	22ff      	movs	r2, #255	@ 0xff
 8007fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	4b31      	ldr	r3, [pc, #196]	@ (8008094 <xPortStartScheduler+0x134>)
 8007fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fd2:	4b31      	ldr	r3, [pc, #196]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fd8:	e009      	b.n	8007fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007fda:	4b2f      	ldr	r3, [pc, #188]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff6:	2b80      	cmp	r3, #128	@ 0x80
 8007ff8:	d0ef      	beq.n	8007fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ffa:	4b27      	ldr	r3, [pc, #156]	@ (8008098 <xPortStartScheduler+0x138>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f1c3 0307 	rsb	r3, r3, #7
 8008002:	2b04      	cmp	r3, #4
 8008004:	d00b      	beq.n	800801e <xPortStartScheduler+0xbe>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	60bb      	str	r3, [r7, #8]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800801e:	4b1e      	ldr	r3, [pc, #120]	@ (8008098 <xPortStartScheduler+0x138>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	4a1c      	ldr	r2, [pc, #112]	@ (8008098 <xPortStartScheduler+0x138>)
 8008026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008028:	4b1b      	ldr	r3, [pc, #108]	@ (8008098 <xPortStartScheduler+0x138>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008030:	4a19      	ldr	r2, [pc, #100]	@ (8008098 <xPortStartScheduler+0x138>)
 8008032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	b2da      	uxtb	r2, r3
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800803c:	4b17      	ldr	r3, [pc, #92]	@ (800809c <xPortStartScheduler+0x13c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a16      	ldr	r2, [pc, #88]	@ (800809c <xPortStartScheduler+0x13c>)
 8008042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008048:	4b14      	ldr	r3, [pc, #80]	@ (800809c <xPortStartScheduler+0x13c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a13      	ldr	r2, [pc, #76]	@ (800809c <xPortStartScheduler+0x13c>)
 800804e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008054:	f000 f8da 	bl	800820c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008058:	4b11      	ldr	r3, [pc, #68]	@ (80080a0 <xPortStartScheduler+0x140>)
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800805e:	f000 f8f9 	bl	8008254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008062:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <xPortStartScheduler+0x144>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a0f      	ldr	r2, [pc, #60]	@ (80080a4 <xPortStartScheduler+0x144>)
 8008068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800806c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800806e:	f7ff ff63 	bl	8007f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008072:	f7ff f813 	bl	800709c <vTaskSwitchContext>
	prvTaskExitError();
 8008076:	f7ff ff19 	bl	8007eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	e000ed00 	.word	0xe000ed00
 8008088:	410fc271 	.word	0x410fc271
 800808c:	410fc270 	.word	0x410fc270
 8008090:	e000e400 	.word	0xe000e400
 8008094:	2000553c 	.word	0x2000553c
 8008098:	20005540 	.word	0x20005540
 800809c:	e000ed20 	.word	0xe000ed20
 80080a0:	20000010 	.word	0x20000010
 80080a4:	e000ef34 	.word	0xe000ef34

080080a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
}
 80080c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d110      	bne.n	80080f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008108 <vPortEnterCritical+0x60>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	603b      	str	r3, [r7, #0]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <vPortEnterCritical+0x4a>
	}
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000010 	.word	0x20000010
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008112:	4b12      	ldr	r3, [pc, #72]	@ (800815c <vPortExitCritical+0x50>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <vPortExitCritical+0x26>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	607b      	str	r3, [r7, #4]
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	e7fd      	b.n	800812e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008132:	4b0a      	ldr	r3, [pc, #40]	@ (800815c <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3b01      	subs	r3, #1
 8008138:	4a08      	ldr	r2, [pc, #32]	@ (800815c <vPortExitCritical+0x50>)
 800813a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800813c:	4b07      	ldr	r3, [pc, #28]	@ (800815c <vPortExitCritical+0x50>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <vPortExitCritical+0x44>
 8008144:	2300      	movs	r3, #0
 8008146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f383 8811 	msr	BASEPRI, r3
}
 800814e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	20000010 	.word	0x20000010

08008160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008160:	f3ef 8009 	mrs	r0, PSP
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4b15      	ldr	r3, [pc, #84]	@ (80081c0 <pxCurrentTCBConst>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f01e 0f10 	tst.w	lr, #16
 8008170:	bf08      	it	eq
 8008172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	6010      	str	r0, [r2, #0]
 800817c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008184:	f380 8811 	msr	BASEPRI, r0
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f7fe ff84 	bl	800709c <vTaskSwitchContext>
 8008194:	f04f 0000 	mov.w	r0, #0
 8008198:	f380 8811 	msr	BASEPRI, r0
 800819c:	bc09      	pop	{r0, r3}
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	6808      	ldr	r0, [r1, #0]
 80081a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a6:	f01e 0f10 	tst.w	lr, #16
 80081aa:	bf08      	it	eq
 80081ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081b0:	f380 8809 	msr	PSP, r0
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w

080081c0 <pxCurrentTCBConst>:
 80081c0:	20004f10 	.word	0x20004f10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081e2:	f7fe fea1 	bl	8006f28 <xTaskIncrementTick>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ec:	4b06      	ldr	r3, [pc, #24]	@ (8008208 <xPortSysTickHandler+0x40>)
 80081ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008216:	4b0b      	ldr	r3, [pc, #44]	@ (8008244 <vPortSetupTimerInterrupt+0x38>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800821c:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <vPortSetupTimerInterrupt+0x3c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0a      	ldr	r2, [pc, #40]	@ (800824c <vPortSetupTimerInterrupt+0x40>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	4a09      	ldr	r2, [pc, #36]	@ (8008250 <vPortSetupTimerInterrupt+0x44>)
 800822a:	3b01      	subs	r3, #1
 800822c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800822e:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	e000e010 	.word	0xe000e010
 8008244:	e000e018 	.word	0xe000e018
 8008248:	20000004 	.word	0x20000004
 800824c:	10624dd3 	.word	0x10624dd3
 8008250:	e000e014 	.word	0xe000e014

08008254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008264 <vPortEnableVFP+0x10>
 8008258:	6801      	ldr	r1, [r0, #0]
 800825a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800825e:	6001      	str	r1, [r0, #0]
 8008260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008262:	bf00      	nop
 8008264:	e000ed88 	.word	0xe000ed88

08008268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800826e:	f3ef 8305 	mrs	r3, IPSR
 8008272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d915      	bls.n	80082a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800827a:	4a18      	ldr	r2, [pc, #96]	@ (80082dc <vPortValidateInterruptPriority+0x74>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008284:	4b16      	ldr	r3, [pc, #88]	@ (80082e0 <vPortValidateInterruptPriority+0x78>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	7afa      	ldrb	r2, [r7, #11]
 800828a:	429a      	cmp	r2, r3
 800828c:	d20b      	bcs.n	80082a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082a6:	4b0f      	ldr	r3, [pc, #60]	@ (80082e4 <vPortValidateInterruptPriority+0x7c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082ae:	4b0e      	ldr	r3, [pc, #56]	@ (80082e8 <vPortValidateInterruptPriority+0x80>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d90b      	bls.n	80082ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	603b      	str	r3, [r7, #0]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <vPortValidateInterruptPriority+0x62>
	}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	e000e3f0 	.word	0xe000e3f0
 80082e0:	2000553c 	.word	0x2000553c
 80082e4:	e000ed0c 	.word	0xe000ed0c
 80082e8:	20005540 	.word	0x20005540

080082ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	@ 0x28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082f8:	f7fe fd5a 	bl	8006db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008470 <pvPortMalloc+0x184>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008304:	f000 f924 	bl	8008550 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008308:	4b5a      	ldr	r3, [pc, #360]	@ (8008474 <pvPortMalloc+0x188>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	f040 8095 	bne.w	8008440 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01e      	beq.n	800835a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800831c:	2208      	movs	r2, #8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d015      	beq.n	800835a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f023 0307 	bic.w	r3, r3, #7
 8008334:	3308      	adds	r3, #8
 8008336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <pvPortMalloc+0x6e>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	617b      	str	r3, [r7, #20]
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	e7fd      	b.n	8008356 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d06f      	beq.n	8008440 <pvPortMalloc+0x154>
 8008360:	4b45      	ldr	r3, [pc, #276]	@ (8008478 <pvPortMalloc+0x18c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	429a      	cmp	r2, r3
 8008368:	d86a      	bhi.n	8008440 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800836a:	4b44      	ldr	r3, [pc, #272]	@ (800847c <pvPortMalloc+0x190>)
 800836c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800836e:	4b43      	ldr	r3, [pc, #268]	@ (800847c <pvPortMalloc+0x190>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008374:	e004      	b.n	8008380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d903      	bls.n	8008392 <pvPortMalloc+0xa6>
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f1      	bne.n	8008376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008392:	4b37      	ldr	r3, [pc, #220]	@ (8008470 <pvPortMalloc+0x184>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008398:	429a      	cmp	r2, r3
 800839a:	d051      	beq.n	8008440 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2208      	movs	r2, #8
 80083a2:	4413      	add	r3, r2
 80083a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	1ad2      	subs	r2, r2, r3
 80083b6:	2308      	movs	r3, #8
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d920      	bls.n	8008400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4413      	add	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <pvPortMalloc+0xfc>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1ad2      	subs	r2, r2, r3
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083fa:	69b8      	ldr	r0, [r7, #24]
 80083fc:	f000 f90a 	bl	8008614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008400:	4b1d      	ldr	r3, [pc, #116]	@ (8008478 <pvPortMalloc+0x18c>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	4a1b      	ldr	r2, [pc, #108]	@ (8008478 <pvPortMalloc+0x18c>)
 800840c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800840e:	4b1a      	ldr	r3, [pc, #104]	@ (8008478 <pvPortMalloc+0x18c>)
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b1b      	ldr	r3, [pc, #108]	@ (8008480 <pvPortMalloc+0x194>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d203      	bcs.n	8008422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800841a:	4b17      	ldr	r3, [pc, #92]	@ (8008478 <pvPortMalloc+0x18c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a18      	ldr	r2, [pc, #96]	@ (8008480 <pvPortMalloc+0x194>)
 8008420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	4b13      	ldr	r3, [pc, #76]	@ (8008474 <pvPortMalloc+0x188>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	431a      	orrs	r2, r3
 800842c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008436:	4b13      	ldr	r3, [pc, #76]	@ (8008484 <pvPortMalloc+0x198>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3301      	adds	r3, #1
 800843c:	4a11      	ldr	r2, [pc, #68]	@ (8008484 <pvPortMalloc+0x198>)
 800843e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008440:	f7fe fcc4 	bl	8006dcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <pvPortMalloc+0x17a>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	60fb      	str	r3, [r7, #12]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <pvPortMalloc+0x176>
	return pvReturn;
 8008466:	69fb      	ldr	r3, [r7, #28]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3728      	adds	r7, #40	@ 0x28
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	2000614c 	.word	0x2000614c
 8008474:	20006160 	.word	0x20006160
 8008478:	20006150 	.word	0x20006150
 800847c:	20006144 	.word	0x20006144
 8008480:	20006154 	.word	0x20006154
 8008484:	20006158 	.word	0x20006158

08008488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d04f      	beq.n	800853a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800849a:	2308      	movs	r3, #8
 800849c:	425b      	negs	r3, r3
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4413      	add	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	4b25      	ldr	r3, [pc, #148]	@ (8008544 <vPortFree+0xbc>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4013      	ands	r3, r2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <vPortFree+0x46>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60fb      	str	r3, [r7, #12]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <vPortFree+0x66>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60bb      	str	r3, [r7, #8]
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	e7fd      	b.n	80084ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	4b14      	ldr	r3, [pc, #80]	@ (8008544 <vPortFree+0xbc>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01e      	beq.n	800853a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11a      	bne.n	800853a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	4b0e      	ldr	r3, [pc, #56]	@ (8008544 <vPortFree+0xbc>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	43db      	mvns	r3, r3
 800850e:	401a      	ands	r2, r3
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008514:	f7fe fc4c 	bl	8006db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	4b0a      	ldr	r3, [pc, #40]	@ (8008548 <vPortFree+0xc0>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4413      	add	r3, r2
 8008522:	4a09      	ldr	r2, [pc, #36]	@ (8008548 <vPortFree+0xc0>)
 8008524:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008526:	6938      	ldr	r0, [r7, #16]
 8008528:	f000 f874 	bl	8008614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800852c:	4b07      	ldr	r3, [pc, #28]	@ (800854c <vPortFree+0xc4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3301      	adds	r3, #1
 8008532:	4a06      	ldr	r2, [pc, #24]	@ (800854c <vPortFree+0xc4>)
 8008534:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008536:	f7fe fc49 	bl	8006dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800853a:	bf00      	nop
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20006160 	.word	0x20006160
 8008548:	20006150 	.word	0x20006150
 800854c:	2000615c 	.word	0x2000615c

08008550 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008556:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800855a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800855c:	4b27      	ldr	r3, [pc, #156]	@ (80085fc <prvHeapInit+0xac>)
 800855e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00c      	beq.n	8008584 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3307      	adds	r3, #7
 800856e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0307 	bic.w	r3, r3, #7
 8008576:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	4a1f      	ldr	r2, [pc, #124]	@ (80085fc <prvHeapInit+0xac>)
 8008580:	4413      	add	r3, r2
 8008582:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008588:	4a1d      	ldr	r2, [pc, #116]	@ (8008600 <prvHeapInit+0xb0>)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800858e:	4b1c      	ldr	r3, [pc, #112]	@ (8008600 <prvHeapInit+0xb0>)
 8008590:	2200      	movs	r2, #0
 8008592:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4413      	add	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800859c:	2208      	movs	r2, #8
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	1a9b      	subs	r3, r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0307 	bic.w	r3, r3, #7
 80085aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a15      	ldr	r2, [pc, #84]	@ (8008604 <prvHeapInit+0xb4>)
 80085b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085b2:	4b14      	ldr	r3, [pc, #80]	@ (8008604 <prvHeapInit+0xb4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ba:	4b12      	ldr	r3, [pc, #72]	@ (8008604 <prvHeapInit+0xb4>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	1ad2      	subs	r2, r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008604 <prvHeapInit+0xb4>)
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008608 <prvHeapInit+0xb8>)
 80085de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4a09      	ldr	r2, [pc, #36]	@ (800860c <prvHeapInit+0xbc>)
 80085e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085e8:	4b09      	ldr	r3, [pc, #36]	@ (8008610 <prvHeapInit+0xc0>)
 80085ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80085ee:	601a      	str	r2, [r3, #0]
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	20005544 	.word	0x20005544
 8008600:	20006144 	.word	0x20006144
 8008604:	2000614c 	.word	0x2000614c
 8008608:	20006154 	.word	0x20006154
 800860c:	20006150 	.word	0x20006150
 8008610:	20006160 	.word	0x20006160

08008614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800861c:	4b28      	ldr	r3, [pc, #160]	@ (80086c0 <prvInsertBlockIntoFreeList+0xac>)
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e002      	b.n	8008628 <prvInsertBlockIntoFreeList+0x14>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	429a      	cmp	r2, r3
 8008630:	d8f7      	bhi.n	8008622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	4413      	add	r3, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d108      	bne.n	8008656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	441a      	add	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	441a      	add	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d118      	bne.n	800869c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d00d      	beq.n	8008692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	441a      	add	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e008      	b.n	80086a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008692:	4b0c      	ldr	r3, [pc, #48]	@ (80086c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	e003      	b.n	80086a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d002      	beq.n	80086b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b2:	bf00      	nop
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	20006144 	.word	0x20006144
 80086c4:	2000614c 	.word	0x2000614c

080086c8 <rcl_get_zero_initialized_client>:
 80086c8:	4b01      	ldr	r3, [pc, #4]	@ (80086d0 <rcl_get_zero_initialized_client+0x8>)
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	08015dfc 	.word	0x08015dfc

080086d4 <rcl_client_init>:
 80086d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086d8:	b089      	sub	sp, #36	@ 0x24
 80086da:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80086dc:	b1c5      	cbz	r5, 8008710 <rcl_client_init+0x3c>
 80086de:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80086e2:	4604      	mov	r4, r0
 80086e4:	4648      	mov	r0, r9
 80086e6:	4688      	mov	r8, r1
 80086e8:	4617      	mov	r7, r2
 80086ea:	461e      	mov	r6, r3
 80086ec:	f001 fbea 	bl	8009ec4 <rcutils_allocator_is_valid>
 80086f0:	b170      	cbz	r0, 8008710 <rcl_client_init+0x3c>
 80086f2:	b16c      	cbz	r4, 8008710 <rcl_client_init+0x3c>
 80086f4:	4640      	mov	r0, r8
 80086f6:	f000 fb83 	bl	8008e00 <rcl_node_is_valid>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d05e      	beq.n	80087bc <rcl_client_init+0xe8>
 80086fe:	b13f      	cbz	r7, 8008710 <rcl_client_init+0x3c>
 8008700:	b136      	cbz	r6, 8008710 <rcl_client_init+0x3c>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	b14b      	cbz	r3, 800871a <rcl_client_init+0x46>
 8008706:	2664      	movs	r6, #100	@ 0x64
 8008708:	4630      	mov	r0, r6
 800870a:	b009      	add	sp, #36	@ 0x24
 800870c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008710:	260b      	movs	r6, #11
 8008712:	4630      	mov	r0, r6
 8008714:	b009      	add	sp, #36	@ 0x24
 8008716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800871a:	aa07      	add	r2, sp, #28
 800871c:	9205      	str	r2, [sp, #20]
 800871e:	2201      	movs	r2, #1
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	9203      	str	r2, [sp, #12]
 8008724:	9307      	str	r3, [sp, #28]
 8008726:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800872a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800872e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008732:	4631      	mov	r1, r6
 8008734:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008738:	4640      	mov	r0, r8
 800873a:	f000 fbb5 	bl	8008ea8 <rcl_node_resolve_name>
 800873e:	2800      	cmp	r0, #0
 8008740:	d14b      	bne.n	80087da <rcl_client_init+0x106>
 8008742:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008744:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008746:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800874a:	4798      	blx	r3
 800874c:	6020      	str	r0, [r4, #0]
 800874e:	2800      	cmp	r0, #0
 8008750:	d049      	beq.n	80087e6 <rcl_client_init+0x112>
 8008752:	4640      	mov	r0, r8
 8008754:	f000 fb76 	bl	8008e44 <rcl_node_get_rmw_handle>
 8008758:	462b      	mov	r3, r5
 800875a:	9a07      	ldr	r2, [sp, #28]
 800875c:	6826      	ldr	r6, [r4, #0]
 800875e:	4639      	mov	r1, r7
 8008760:	f002 f8ec 	bl	800a93c <rmw_create_client>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 800876a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800876e:	b360      	cbz	r0, 80087ca <rcl_client_init+0xf6>
 8008770:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8008774:	f002 f9f8 	bl	800ab68 <rmw_client_request_publisher_get_actual_qos>
 8008778:	bb28      	cbnz	r0, 80087c6 <rcl_client_init+0xf2>
 800877a:	6821      	ldr	r1, [r4, #0]
 800877c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8008780:	31b8      	adds	r1, #184	@ 0xb8
 8008782:	f002 fa01 	bl	800ab88 <rmw_client_response_subscription_get_actual_qos>
 8008786:	4606      	mov	r6, r0
 8008788:	b9e8      	cbnz	r0, 80087c6 <rcl_client_init+0xf2>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8008790:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 8008794:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8008798:	4629      	mov	r1, r5
 800879a:	4618      	mov	r0, r3
 800879c:	2268      	movs	r2, #104	@ 0x68
 800879e:	f00c fc64 	bl	801506a <memcpy>
 80087a2:	2100      	movs	r1, #0
 80087a4:	4603      	mov	r3, r0
 80087a6:	2000      	movs	r0, #0
 80087a8:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
 80087ac:	9807      	ldr	r0, [sp, #28]
 80087ae:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80087b0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80087b2:	4798      	blx	r3
 80087b4:	4630      	mov	r0, r6
 80087b6:	b009      	add	sp, #36	@ 0x24
 80087b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087bc:	26c8      	movs	r6, #200	@ 0xc8
 80087be:	4630      	mov	r0, r6
 80087c0:	b009      	add	sp, #36	@ 0x24
 80087c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	b12b      	cbz	r3, 80087d6 <rcl_client_init+0x102>
 80087ca:	4618      	mov	r0, r3
 80087cc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80087ce:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80087d0:	4790      	blx	r2
 80087d2:	2300      	movs	r3, #0
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	2601      	movs	r6, #1
 80087d8:	e7e8      	b.n	80087ac <rcl_client_init+0xd8>
 80087da:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d903      	bls.n	80087ea <rcl_client_init+0x116>
 80087e2:	280a      	cmp	r0, #10
 80087e4:	d1f7      	bne.n	80087d6 <rcl_client_init+0x102>
 80087e6:	260a      	movs	r6, #10
 80087e8:	e7e0      	b.n	80087ac <rcl_client_init+0xd8>
 80087ea:	2668      	movs	r6, #104	@ 0x68
 80087ec:	e7de      	b.n	80087ac <rcl_client_init+0xd8>
 80087ee:	bf00      	nop

080087f0 <rcl_client_get_default_options>:
 80087f0:	b530      	push	{r4, r5, lr}
 80087f2:	4d0f      	ldr	r5, [pc, #60]	@ (8008830 <rcl_client_get_default_options+0x40>)
 80087f4:	490f      	ldr	r1, [pc, #60]	@ (8008834 <rcl_client_get_default_options+0x44>)
 80087f6:	b087      	sub	sp, #28
 80087f8:	4604      	mov	r4, r0
 80087fa:	2250      	movs	r2, #80	@ 0x50
 80087fc:	4628      	mov	r0, r5
 80087fe:	f00c fc34 	bl	801506a <memcpy>
 8008802:	4668      	mov	r0, sp
 8008804:	f001 fb50 	bl	8009ea8 <rcutils_get_default_allocator>
 8008808:	46ec      	mov	ip, sp
 800880a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800880e:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8008812:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008816:	2268      	movs	r2, #104	@ 0x68
 8008818:	f8dc 3000 	ldr.w	r3, [ip]
 800881c:	f8ce 3000 	str.w	r3, [lr]
 8008820:	4629      	mov	r1, r5
 8008822:	4620      	mov	r0, r4
 8008824:	f00c fc21 	bl	801506a <memcpy>
 8008828:	4620      	mov	r0, r4
 800882a:	b007      	add	sp, #28
 800882c:	bd30      	pop	{r4, r5, pc}
 800882e:	bf00      	nop
 8008830:	20006168 	.word	0x20006168
 8008834:	08015e00 	.word	0x08015e00

08008838 <rcl_client_get_rmw_handle>:
 8008838:	b118      	cbz	r0, 8008842 <rcl_client_get_rmw_handle+0xa>
 800883a:	6800      	ldr	r0, [r0, #0]
 800883c:	b108      	cbz	r0, 8008842 <rcl_client_get_rmw_handle+0xa>
 800883e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8008842:	4770      	bx	lr

08008844 <rcl_send_request>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	b1e8      	cbz	r0, 8008886 <rcl_send_request+0x42>
 800884a:	4604      	mov	r4, r0
 800884c:	6800      	ldr	r0, [r0, #0]
 800884e:	b1d0      	cbz	r0, 8008886 <rcl_send_request+0x42>
 8008850:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8008854:	b1bb      	cbz	r3, 8008886 <rcl_send_request+0x42>
 8008856:	460e      	mov	r6, r1
 8008858:	b1d1      	cbz	r1, 8008890 <rcl_send_request+0x4c>
 800885a:	4615      	mov	r5, r2
 800885c:	b1c2      	cbz	r2, 8008890 <rcl_send_request+0x4c>
 800885e:	2105      	movs	r1, #5
 8008860:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8008864:	f001 fb3c 	bl	8009ee0 <__atomic_load_8>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	e9c5 0100 	strd	r0, r1, [r5]
 800886e:	462a      	mov	r2, r5
 8008870:	4631      	mov	r1, r6
 8008872:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8008876:	f002 fd8d 	bl	800b394 <rmw_send_request>
 800887a:	4606      	mov	r6, r0
 800887c:	b160      	cbz	r0, 8008898 <rcl_send_request+0x54>
 800887e:	2601      	movs	r6, #1
 8008880:	4630      	mov	r0, r6
 8008882:	b002      	add	sp, #8
 8008884:	bd70      	pop	{r4, r5, r6, pc}
 8008886:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800888a:	4630      	mov	r0, r6
 800888c:	b002      	add	sp, #8
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	260b      	movs	r6, #11
 8008892:	4630      	mov	r0, r6
 8008894:	b002      	add	sp, #8
 8008896:	bd70      	pop	{r4, r5, r6, pc}
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	2105      	movs	r1, #5
 800889c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088a0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80088a4:	9100      	str	r1, [sp, #0]
 80088a6:	f001 fb87 	bl	8009fb8 <__atomic_exchange_8>
 80088aa:	4630      	mov	r0, r6
 80088ac:	b002      	add	sp, #8
 80088ae:	bd70      	pop	{r4, r5, r6, pc}

080088b0 <rcl_take_response>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	468e      	mov	lr, r1
 80088b4:	460c      	mov	r4, r1
 80088b6:	4616      	mov	r6, r2
 80088b8:	4605      	mov	r5, r0
 80088ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80088be:	b08c      	sub	sp, #48	@ 0x30
 80088c0:	f10d 0c18 	add.w	ip, sp, #24
 80088c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80088c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80088cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80088d0:	b35d      	cbz	r5, 800892a <rcl_take_response+0x7a>
 80088d2:	682b      	ldr	r3, [r5, #0]
 80088d4:	b34b      	cbz	r3, 800892a <rcl_take_response+0x7a>
 80088d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80088da:	b330      	cbz	r0, 800892a <rcl_take_response+0x7a>
 80088dc:	b346      	cbz	r6, 8008930 <rcl_take_response+0x80>
 80088de:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8008938 <rcl_take_response+0x88>
 80088e2:	2300      	movs	r3, #0
 80088e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80088e8:	4632      	mov	r2, r6
 80088ea:	f10d 0307 	add.w	r3, sp, #7
 80088ee:	a902      	add	r1, sp, #8
 80088f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80088f8:	f002 fe54 	bl	800b5a4 <rmw_take_response>
 80088fc:	4605      	mov	r5, r0
 80088fe:	b9c8      	cbnz	r0, 8008934 <rcl_take_response+0x84>
 8008900:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008904:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8008908:	2a00      	cmp	r2, #0
 800890a:	bf08      	it	eq
 800890c:	461d      	moveq	r5, r3
 800890e:	f10d 0e18 	add.w	lr, sp, #24
 8008912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008916:	46a4      	mov	ip, r4
 8008918:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800891c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008920:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008924:	4628      	mov	r0, r5
 8008926:	b00c      	add	sp, #48	@ 0x30
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800892e:	e7ee      	b.n	800890e <rcl_take_response+0x5e>
 8008930:	250b      	movs	r5, #11
 8008932:	e7ec      	b.n	800890e <rcl_take_response+0x5e>
 8008934:	2501      	movs	r5, #1
 8008936:	e7ea      	b.n	800890e <rcl_take_response+0x5e>
	...

08008940 <rcl_client_is_valid>:
 8008940:	b130      	cbz	r0, 8008950 <rcl_client_is_valid+0x10>
 8008942:	6800      	ldr	r0, [r0, #0]
 8008944:	b120      	cbz	r0, 8008950 <rcl_client_is_valid+0x10>
 8008946:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800894a:	3800      	subs	r0, #0
 800894c:	bf18      	it	ne
 800894e:	2001      	movne	r0, #1
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop

08008954 <rcl_get_zero_initialized_init_options>:
 8008954:	2000      	movs	r0, #0
 8008956:	4770      	bx	lr

08008958 <rcl_init_options_init>:
 8008958:	b084      	sub	sp, #16
 800895a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895c:	b097      	sub	sp, #92	@ 0x5c
 800895e:	ae1d      	add	r6, sp, #116	@ 0x74
 8008960:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8008964:	2800      	cmp	r0, #0
 8008966:	d058      	beq.n	8008a1a <rcl_init_options_init+0xc2>
 8008968:	6803      	ldr	r3, [r0, #0]
 800896a:	4605      	mov	r5, r0
 800896c:	b133      	cbz	r3, 800897c <rcl_init_options_init+0x24>
 800896e:	2464      	movs	r4, #100	@ 0x64
 8008970:	4620      	mov	r0, r4
 8008972:	b017      	add	sp, #92	@ 0x5c
 8008974:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008978:	b004      	add	sp, #16
 800897a:	4770      	bx	lr
 800897c:	4630      	mov	r0, r6
 800897e:	f001 faa1 	bl	8009ec4 <rcutils_allocator_is_valid>
 8008982:	2800      	cmp	r0, #0
 8008984:	d049      	beq.n	8008a1a <rcl_init_options_init+0xc2>
 8008986:	46b4      	mov	ip, r6
 8008988:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800898c:	ac11      	add	r4, sp, #68	@ 0x44
 800898e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008990:	f8dc 3000 	ldr.w	r3, [ip]
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8008998:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800899a:	2050      	movs	r0, #80	@ 0x50
 800899c:	4798      	blx	r3
 800899e:	4604      	mov	r4, r0
 80089a0:	6028      	str	r0, [r5, #0]
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d03b      	beq.n	8008a1e <rcl_init_options_init+0xc6>
 80089a6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80089aa:	4686      	mov	lr, r0
 80089ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80089b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80089b4:	f8dc 3000 	ldr.w	r3, [ip]
 80089b8:	f8ce 3000 	str.w	r3, [lr]
 80089bc:	a802      	add	r0, sp, #8
 80089be:	f001 fe53 	bl	800a668 <rmw_get_zero_initialized_init_options>
 80089c2:	f10d 0e08 	add.w	lr, sp, #8
 80089c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80089ca:	f104 0c18 	add.w	ip, r4, #24
 80089ce:	682f      	ldr	r7, [r5, #0]
 80089d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80089d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80089d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80089dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80089e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80089e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80089e8:	ac20      	add	r4, sp, #128	@ 0x80
 80089ea:	e88c 0003 	stmia.w	ip, {r0, r1}
 80089ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80089f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80089f6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80089fa:	f107 0018 	add.w	r0, r7, #24
 80089fe:	f002 f8d9 	bl	800abb4 <rmw_init_options_init>
 8008a02:	4604      	mov	r4, r0
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d0b3      	beq.n	8008970 <rcl_init_options_init+0x18>
 8008a08:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8008a0a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008a0c:	6828      	ldr	r0, [r5, #0]
 8008a0e:	4798      	blx	r3
 8008a10:	4620      	mov	r0, r4
 8008a12:	f007 fd3f 	bl	8010494 <rcl_convert_rmw_ret_to_rcl_ret>
 8008a16:	4604      	mov	r4, r0
 8008a18:	e7aa      	b.n	8008970 <rcl_init_options_init+0x18>
 8008a1a:	240b      	movs	r4, #11
 8008a1c:	e7a8      	b.n	8008970 <rcl_init_options_init+0x18>
 8008a1e:	240a      	movs	r4, #10
 8008a20:	e7a6      	b.n	8008970 <rcl_init_options_init+0x18>
 8008a22:	bf00      	nop

08008a24 <rcl_init_options_fini>:
 8008a24:	b530      	push	{r4, r5, lr}
 8008a26:	b087      	sub	sp, #28
 8008a28:	b1f0      	cbz	r0, 8008a68 <rcl_init_options_fini+0x44>
 8008a2a:	6803      	ldr	r3, [r0, #0]
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	b1db      	cbz	r3, 8008a68 <rcl_init_options_fini+0x44>
 8008a30:	469c      	mov	ip, r3
 8008a32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008a36:	f10d 0e04 	add.w	lr, sp, #4
 8008a3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008a3e:	f8dc 3000 	ldr.w	r3, [ip]
 8008a42:	f8ce 3000 	str.w	r3, [lr]
 8008a46:	a801      	add	r0, sp, #4
 8008a48:	f001 fa3c 	bl	8009ec4 <rcutils_allocator_is_valid>
 8008a4c:	b160      	cbz	r0, 8008a68 <rcl_init_options_fini+0x44>
 8008a4e:	6820      	ldr	r0, [r4, #0]
 8008a50:	3018      	adds	r0, #24
 8008a52:	f002 f985 	bl	800ad60 <rmw_init_options_fini>
 8008a56:	4605      	mov	r5, r0
 8008a58:	b950      	cbnz	r0, 8008a70 <rcl_init_options_fini+0x4c>
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	9905      	ldr	r1, [sp, #20]
 8008a60:	4798      	blx	r3
 8008a62:	4628      	mov	r0, r5
 8008a64:	b007      	add	sp, #28
 8008a66:	bd30      	pop	{r4, r5, pc}
 8008a68:	250b      	movs	r5, #11
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	b007      	add	sp, #28
 8008a6e:	bd30      	pop	{r4, r5, pc}
 8008a70:	f007 fd10 	bl	8010494 <rcl_convert_rmw_ret_to_rcl_ret>
 8008a74:	4605      	mov	r5, r0
 8008a76:	e7f8      	b.n	8008a6a <rcl_init_options_fini+0x46>

08008a78 <rcl_init_options_copy>:
 8008a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7c:	b094      	sub	sp, #80	@ 0x50
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d058      	beq.n	8008b34 <rcl_init_options_copy+0xbc>
 8008a82:	4604      	mov	r4, r0
 8008a84:	6800      	ldr	r0, [r0, #0]
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d054      	beq.n	8008b34 <rcl_init_options_copy+0xbc>
 8008a8a:	460e      	mov	r6, r1
 8008a8c:	f001 fa1a 	bl	8009ec4 <rcutils_allocator_is_valid>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d04f      	beq.n	8008b34 <rcl_init_options_copy+0xbc>
 8008a94:	2e00      	cmp	r6, #0
 8008a96:	d04d      	beq.n	8008b34 <rcl_init_options_copy+0xbc>
 8008a98:	6833      	ldr	r3, [r6, #0]
 8008a9a:	b123      	cbz	r3, 8008aa6 <rcl_init_options_copy+0x2e>
 8008a9c:	2464      	movs	r4, #100	@ 0x64
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	b014      	add	sp, #80	@ 0x50
 8008aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa6:	6827      	ldr	r7, [r4, #0]
 8008aa8:	46bc      	mov	ip, r7
 8008aaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008aae:	ad0f      	add	r5, sp, #60	@ 0x3c
 8008ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ab6:	f8d7 8000 	ldr.w	r8, [r7]
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	4619      	mov	r1, r3
 8008abe:	2050      	movs	r0, #80	@ 0x50
 8008ac0:	47c0      	blx	r8
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	6030      	str	r0, [r6, #0]
 8008ac6:	b3d0      	cbz	r0, 8008b3e <rcl_init_options_copy+0xc6>
 8008ac8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8008acc:	4686      	mov	lr, r0
 8008ace:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008ad2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008ad6:	f8dc 3000 	ldr.w	r3, [ip]
 8008ada:	f8ce 3000 	str.w	r3, [lr]
 8008ade:	4668      	mov	r0, sp
 8008ae0:	f001 fdc2 	bl	800a668 <rmw_get_zero_initialized_init_options>
 8008ae4:	46ee      	mov	lr, sp
 8008ae6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008aea:	f105 0c18 	add.w	ip, r5, #24
 8008aee:	6824      	ldr	r4, [r4, #0]
 8008af0:	6835      	ldr	r5, [r6, #0]
 8008af2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008af6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008afa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008afe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008b02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008b06:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008b0a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008b0e:	f104 0018 	add.w	r0, r4, #24
 8008b12:	f105 0118 	add.w	r1, r5, #24
 8008b16:	f002 f8af 	bl	800ac78 <rmw_init_options_copy>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d0be      	beq.n	8008a9e <rcl_init_options_copy+0x26>
 8008b20:	f001 fa9a 	bl	800a058 <rcutils_get_error_string>
 8008b24:	f001 fab0 	bl	800a088 <rcutils_reset_error>
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff ff7b 	bl	8008a24 <rcl_init_options_fini>
 8008b2e:	b140      	cbz	r0, 8008b42 <rcl_init_options_copy+0xca>
 8008b30:	4604      	mov	r4, r0
 8008b32:	e7b4      	b.n	8008a9e <rcl_init_options_copy+0x26>
 8008b34:	240b      	movs	r4, #11
 8008b36:	4620      	mov	r0, r4
 8008b38:	b014      	add	sp, #80	@ 0x50
 8008b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3e:	240a      	movs	r4, #10
 8008b40:	e7ad      	b.n	8008a9e <rcl_init_options_copy+0x26>
 8008b42:	4620      	mov	r0, r4
 8008b44:	b014      	add	sp, #80	@ 0x50
 8008b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4a:	f007 bca3 	b.w	8010494 <rcl_convert_rmw_ret_to_rcl_ret>
 8008b4e:	bf00      	nop

08008b50 <rcl_init_options_set_domain_id>:
 8008b50:	b120      	cbz	r0, 8008b5c <rcl_init_options_set_domain_id+0xc>
 8008b52:	6803      	ldr	r3, [r0, #0]
 8008b54:	b113      	cbz	r3, 8008b5c <rcl_init_options_set_domain_id+0xc>
 8008b56:	6259      	str	r1, [r3, #36]	@ 0x24
 8008b58:	2000      	movs	r0, #0
 8008b5a:	4770      	bx	lr
 8008b5c:	200b      	movs	r0, #11
 8008b5e:	4770      	bx	lr

08008b60 <rcl_get_zero_initialized_node>:
 8008b60:	4a03      	ldr	r2, [pc, #12]	@ (8008b70 <rcl_get_zero_initialized_node+0x10>)
 8008b62:	4603      	mov	r3, r0
 8008b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b68:	e883 0003 	stmia.w	r3, {r0, r1}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	4770      	bx	lr
 8008b70:	080165f8 	.word	0x080165f8

08008b74 <rcl_node_init>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	b0a9      	sub	sp, #164	@ 0xa4
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8008b80:	a823      	add	r0, sp, #140	@ 0x8c
 8008b82:	460e      	mov	r6, r1
 8008b84:	4615      	mov	r5, r2
 8008b86:	461f      	mov	r7, r3
 8008b88:	f007 ff48 	bl	8010a1c <rcl_guard_condition_get_default_options>
 8008b8c:	f1b8 0f00 	cmp.w	r8, #0
 8008b90:	f000 80e6 	beq.w	8008d60 <rcl_node_init+0x1ec>
 8008b94:	4640      	mov	r0, r8
 8008b96:	f001 f995 	bl	8009ec4 <rcutils_allocator_is_valid>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	f000 80e0 	beq.w	8008d60 <rcl_node_init+0x1ec>
 8008ba0:	2e00      	cmp	r6, #0
 8008ba2:	f000 80dd 	beq.w	8008d60 <rcl_node_init+0x1ec>
 8008ba6:	2d00      	cmp	r5, #0
 8008ba8:	f000 80da 	beq.w	8008d60 <rcl_node_init+0x1ec>
 8008bac:	2c00      	cmp	r4, #0
 8008bae:	f000 80d7 	beq.w	8008d60 <rcl_node_init+0x1ec>
 8008bb2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008bb6:	f1b9 0f00 	cmp.w	r9, #0
 8008bba:	f040 80fd 	bne.w	8008db8 <rcl_node_init+0x244>
 8008bbe:	2f00      	cmp	r7, #0
 8008bc0:	f000 80ce 	beq.w	8008d60 <rcl_node_init+0x1ec>
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	f007 fc83 	bl	80104d0 <rcl_context_is_valid>
 8008bca:	4682      	mov	sl, r0
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	f000 80cd 	beq.w	8008d6c <rcl_node_init+0x1f8>
 8008bd2:	464a      	mov	r2, r9
 8008bd4:	a922      	add	r1, sp, #136	@ 0x88
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8008bdc:	f001 fe3a 	bl	800a854 <rmw_validate_node_name>
 8008be0:	4681      	mov	r9, r0
 8008be2:	2800      	cmp	r0, #0
 8008be4:	f040 80be 	bne.w	8008d64 <rcl_node_init+0x1f0>
 8008be8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f040 80f0 	bne.w	8008dd0 <rcl_node_init+0x25c>
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7f7 fb1f 	bl	8000234 <strlen>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f040 80bb 	bne.w	8008d72 <rcl_node_init+0x1fe>
 8008bfc:	4d7c      	ldr	r5, [pc, #496]	@ (8008df0 <rcl_node_init+0x27c>)
 8008bfe:	a922      	add	r1, sp, #136	@ 0x88
 8008c00:	2200      	movs	r2, #0
 8008c02:	4628      	mov	r0, r5
 8008c04:	f001 fe08 	bl	800a818 <rmw_validate_namespace>
 8008c08:	4681      	mov	r9, r0
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f040 80aa 	bne.w	8008d64 <rcl_node_init+0x1f0>
 8008c10:	4682      	mov	sl, r0
 8008c12:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f040 80e0 	bne.w	8008dda <rcl_node_init+0x266>
 8008c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c1e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008c22:	2078      	movs	r0, #120	@ 0x78
 8008c24:	4798      	blx	r3
 8008c26:	4681      	mov	r9, r0
 8008c28:	6060      	str	r0, [r4, #4]
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f000 80ca 	beq.w	8008dc4 <rcl_node_init+0x250>
 8008c30:	2200      	movs	r2, #0
 8008c32:	2300      	movs	r3, #0
 8008c34:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8008c38:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8008c3c:	a808      	add	r0, sp, #32
 8008c3e:	f000 f907 	bl	8008e50 <rcl_node_get_default_options>
 8008c42:	a908      	add	r1, sp, #32
 8008c44:	4648      	mov	r0, r9
 8008c46:	2268      	movs	r2, #104	@ 0x68
 8008c48:	f00c fa0f 	bl	801506a <memcpy>
 8008c4c:	6861      	ldr	r1, [r4, #4]
 8008c4e:	6027      	str	r7, [r4, #0]
 8008c50:	4640      	mov	r0, r8
 8008c52:	f000 f90b 	bl	8008e6c <rcl_node_options_copy>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d158      	bne.n	8008d0c <rcl_node_init+0x198>
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f7f7 faea 	bl	8000234 <strlen>
 8008c60:	4428      	add	r0, r5
 8008c62:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8008c66:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8008c6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c6c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	bf0c      	ite	eq
 8008c74:	4b5f      	ldreq	r3, [pc, #380]	@ (8008df4 <rcl_node_init+0x280>)
 8008c76:	4b60      	ldrne	r3, [pc, #384]	@ (8008df8 <rcl_node_init+0x284>)
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8008c84:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008c88:	f001 fa1a 	bl	800a0c0 <rcutils_format_string_limit>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	4631      	mov	r1, r6
 8008c96:	3028      	adds	r0, #40	@ 0x28
 8008c98:	462a      	mov	r2, r5
 8008c9a:	6866      	ldr	r6, [r4, #4]
 8008c9c:	f002 fa8e 	bl	800b1bc <rmw_create_node>
 8008ca0:	6863      	ldr	r3, [r4, #4]
 8008ca2:	66b0      	str	r0, [r6, #104]	@ 0x68
 8008ca4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d032      	beq.n	8008d10 <rcl_node_init+0x19c>
 8008caa:	f002 fb1b 	bl	800b2e4 <rmw_node_get_graph_guard_condition>
 8008cae:	4681      	mov	r9, r0
 8008cb0:	b360      	cbz	r0, 8008d0c <rcl_node_init+0x198>
 8008cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008cba:	6866      	ldr	r6, [r4, #4]
 8008cbc:	2008      	movs	r0, #8
 8008cbe:	4798      	blx	r3
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8008cc4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8008cc8:	f1bb 0f00 	cmp.w	fp, #0
 8008ccc:	d020      	beq.n	8008d10 <rcl_node_init+0x19c>
 8008cce:	a806      	add	r0, sp, #24
 8008cd0:	f007 fdc8 	bl	8010864 <rcl_get_zero_initialized_guard_condition>
 8008cd4:	a806      	add	r0, sp, #24
 8008cd6:	c803      	ldmia	r0, {r0, r1}
 8008cd8:	6863      	ldr	r3, [r4, #4]
 8008cda:	46c4      	mov	ip, r8
 8008cdc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8008ce0:	e88b 0003 	stmia.w	fp, {r0, r1}
 8008ce4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008ce8:	ae23      	add	r6, sp, #140	@ 0x8c
 8008cea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008cec:	f8dc 3000 	ldr.w	r3, [ip]
 8008cf0:	6033      	str	r3, [r6, #0]
 8008cf2:	ab28      	add	r3, sp, #160	@ 0xa0
 8008cf4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8008cf8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d00:	463a      	mov	r2, r7
 8008d02:	4670      	mov	r0, lr
 8008d04:	f007 fe04 	bl	8010910 <rcl_guard_condition_init_from_rmw>
 8008d08:	4681      	mov	r9, r0
 8008d0a:	b328      	cbz	r0, 8008d58 <rcl_node_init+0x1e4>
 8008d0c:	6863      	ldr	r3, [r4, #4]
 8008d0e:	b1f3      	cbz	r3, 8008d4e <rcl_node_init+0x1da>
 8008d10:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008d12:	b128      	cbz	r0, 8008d20 <rcl_node_init+0x1ac>
 8008d14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d18:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008d1c:	4798      	blx	r3
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8008d22:	b110      	cbz	r0, 8008d2a <rcl_node_init+0x1b6>
 8008d24:	f002 fa62 	bl	800b1ec <rmw_destroy_node>
 8008d28:	6863      	ldr	r3, [r4, #4]
 8008d2a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8008d2c:	b148      	cbz	r0, 8008d42 <rcl_node_init+0x1ce>
 8008d2e:	f007 fe4f 	bl	80109d0 <rcl_guard_condition_fini>
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008d38:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8008d3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d3e:	4798      	blx	r3
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d4c:	4798      	blx	r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e9c4 3300 	strd	r3, r3, [r4]
 8008d54:	f04f 0901 	mov.w	r9, #1
 8008d58:	f1ba 0f00 	cmp.w	sl, #0
 8008d5c:	d125      	bne.n	8008daa <rcl_node_init+0x236>
 8008d5e:	e001      	b.n	8008d64 <rcl_node_init+0x1f0>
 8008d60:	f04f 090b 	mov.w	r9, #11
 8008d64:	4648      	mov	r0, r9
 8008d66:	b029      	add	sp, #164	@ 0xa4
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8008d70:	e7f8      	b.n	8008d64 <rcl_node_init+0x1f0>
 8008d72:	782b      	ldrb	r3, [r5, #0]
 8008d74:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d76:	f43f af42 	beq.w	8008bfe <rcl_node_init+0x8a>
 8008d7a:	9503      	str	r5, [sp, #12]
 8008d7c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	4b1e      	ldr	r3, [pc, #120]	@ (8008dfc <rcl_node_init+0x288>)
 8008d84:	9302      	str	r3, [sp, #8]
 8008d86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d8a:	9301      	str	r3, [sp, #4]
 8008d8c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8008d90:	f001 f996 	bl	800a0c0 <rcutils_format_string_limit>
 8008d94:	4605      	mov	r5, r0
 8008d96:	b340      	cbz	r0, 8008dea <rcl_node_init+0x276>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	a922      	add	r1, sp, #136	@ 0x88
 8008d9c:	9222      	str	r2, [sp, #136]	@ 0x88
 8008d9e:	f001 fd3b 	bl	800a818 <rmw_validate_namespace>
 8008da2:	4681      	mov	r9, r0
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f43f af34 	beq.w	8008c12 <rcl_node_init+0x9e>
 8008daa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008db2:	4628      	mov	r0, r5
 8008db4:	4798      	blx	r3
 8008db6:	e7d5      	b.n	8008d64 <rcl_node_init+0x1f0>
 8008db8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8008dbc:	4648      	mov	r0, r9
 8008dbe:	b029      	add	sp, #164	@ 0xa4
 8008dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	f04f 090a 	mov.w	r9, #10
 8008dc8:	f1ba 0f00 	cmp.w	sl, #0
 8008dcc:	d1ed      	bne.n	8008daa <rcl_node_init+0x236>
 8008dce:	e7c9      	b.n	8008d64 <rcl_node_init+0x1f0>
 8008dd0:	f001 fd92 	bl	800a8f8 <rmw_node_name_validation_result_string>
 8008dd4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8008dd8:	e7c4      	b.n	8008d64 <rcl_node_init+0x1f0>
 8008dda:	f001 fd2f 	bl	800a83c <rmw_namespace_validation_result_string>
 8008dde:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8008de2:	f1ba 0f00 	cmp.w	sl, #0
 8008de6:	d1e0      	bne.n	8008daa <rcl_node_init+0x236>
 8008de8:	e7bc      	b.n	8008d64 <rcl_node_init+0x1f0>
 8008dea:	f04f 090a 	mov.w	r9, #10
 8008dee:	e7b9      	b.n	8008d64 <rcl_node_init+0x1f0>
 8008df0:	08015e54 	.word	0x08015e54
 8008df4:	08015e5c 	.word	0x08015e5c
 8008df8:	08015e64 	.word	0x08015e64
 8008dfc:	08015e58 	.word	0x08015e58

08008e00 <rcl_node_is_valid>:
 8008e00:	b130      	cbz	r0, 8008e10 <rcl_node_is_valid+0x10>
 8008e02:	6843      	ldr	r3, [r0, #4]
 8008e04:	b123      	cbz	r3, 8008e10 <rcl_node_is_valid+0x10>
 8008e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e08:	b113      	cbz	r3, 8008e10 <rcl_node_is_valid+0x10>
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	f007 bb60 	b.w	80104d0 <rcl_context_is_valid>
 8008e10:	2000      	movs	r0, #0
 8008e12:	4770      	bx	lr

08008e14 <rcl_node_get_name>:
 8008e14:	b120      	cbz	r0, 8008e20 <rcl_node_get_name+0xc>
 8008e16:	6840      	ldr	r0, [r0, #4]
 8008e18:	b110      	cbz	r0, 8008e20 <rcl_node_get_name+0xc>
 8008e1a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8008e1c:	b100      	cbz	r0, 8008e20 <rcl_node_get_name+0xc>
 8008e1e:	6880      	ldr	r0, [r0, #8]
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop

08008e24 <rcl_node_get_namespace>:
 8008e24:	b120      	cbz	r0, 8008e30 <rcl_node_get_namespace+0xc>
 8008e26:	6840      	ldr	r0, [r0, #4]
 8008e28:	b110      	cbz	r0, 8008e30 <rcl_node_get_namespace+0xc>
 8008e2a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8008e2c:	b100      	cbz	r0, 8008e30 <rcl_node_get_namespace+0xc>
 8008e2e:	68c0      	ldr	r0, [r0, #12]
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop

08008e34 <rcl_node_get_options>:
 8008e34:	b128      	cbz	r0, 8008e42 <rcl_node_get_options+0xe>
 8008e36:	6840      	ldr	r0, [r0, #4]
 8008e38:	b118      	cbz	r0, 8008e42 <rcl_node_get_options+0xe>
 8008e3a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	bf08      	it	eq
 8008e40:	2000      	moveq	r0, #0
 8008e42:	4770      	bx	lr

08008e44 <rcl_node_get_rmw_handle>:
 8008e44:	b110      	cbz	r0, 8008e4c <rcl_node_get_rmw_handle+0x8>
 8008e46:	6840      	ldr	r0, [r0, #4]
 8008e48:	b100      	cbz	r0, 8008e4c <rcl_node_get_rmw_handle+0x8>
 8008e4a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <rcl_node_get_default_options>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	2268      	movs	r2, #104	@ 0x68
 8008e54:	4604      	mov	r4, r0
 8008e56:	2100      	movs	r1, #0
 8008e58:	f00c f83e 	bl	8014ed8 <memset>
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f001 f823 	bl	8009ea8 <rcutils_get_default_allocator>
 8008e62:	2301      	movs	r3, #1
 8008e64:	7523      	strb	r3, [r4, #20]
 8008e66:	4620      	mov	r0, r4
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	bf00      	nop

08008e6c <rcl_node_options_copy>:
 8008e6c:	b1d0      	cbz	r0, 8008ea4 <rcl_node_options_copy+0x38>
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	460c      	mov	r4, r1
 8008e72:	b1a9      	cbz	r1, 8008ea0 <rcl_node_options_copy+0x34>
 8008e74:	4288      	cmp	r0, r1
 8008e76:	4684      	mov	ip, r0
 8008e78:	d012      	beq.n	8008ea0 <rcl_node_options_copy+0x34>
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	8a86      	ldrh	r6, [r0, #20]
 8008e7e:	468e      	mov	lr, r1
 8008e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	f8ce 3000 	str.w	r3, [lr]
 8008e8c:	f10c 0118 	add.w	r1, ip, #24
 8008e90:	2250      	movs	r2, #80	@ 0x50
 8008e92:	82a6      	strh	r6, [r4, #20]
 8008e94:	f104 0018 	add.w	r0, r4, #24
 8008e98:	f00c f8e7 	bl	801506a <memcpy>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	200b      	movs	r0, #11
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	200b      	movs	r0, #11
 8008ea6:	4770      	bx	lr

08008ea8 <rcl_node_resolve_name>:
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eae:	b091      	sub	sp, #68	@ 0x44
 8008eb0:	ac1a      	add	r4, sp, #104	@ 0x68
 8008eb2:	e884 000c 	stmia.w	r4, {r2, r3}
 8008eb6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d03b      	beq.n	8008f36 <rcl_node_resolve_name+0x8e>
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	f7ff ffb7 	bl	8008e34 <rcl_node_get_options>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d037      	beq.n	8008f3a <rcl_node_resolve_name+0x92>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7ff ffa2 	bl	8008e14 <rcl_node_get_name>
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f7ff ffa6 	bl	8008e24 <rcl_node_get_namespace>
 8008ed8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8008edc:	4681      	mov	r9, r0
 8008ede:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008ee2:	ad0b      	add	r5, sp, #44	@ 0x2c
 8008ee4:	46ac      	mov	ip, r5
 8008ee6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008eea:	f8de 3000 	ldr.w	r3, [lr]
 8008eee:	f8cc 3000 	str.w	r3, [ip]
 8008ef2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ef4:	b1fb      	cbz	r3, 8008f36 <rcl_node_resolve_name+0x8e>
 8008ef6:	468a      	mov	sl, r1
 8008ef8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8008efc:	f001 fa38 	bl	800a370 <rcutils_get_zero_initialized_string_map>
 8008f00:	ab10      	add	r3, sp, #64	@ 0x40
 8008f02:	9008      	str	r0, [sp, #32]
 8008f04:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008f08:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8008f12:	a808      	add	r0, sp, #32
 8008f14:	f001 faa4 	bl	800a460 <rcutils_string_map_init>
 8008f18:	4607      	mov	r7, r0
 8008f1a:	b180      	cbz	r0, 8008f3e <rcl_node_resolve_name+0x96>
 8008f1c:	f001 f89c 	bl	800a058 <rcutils_get_error_string>
 8008f20:	f001 f8b2 	bl	800a088 <rcutils_reset_error>
 8008f24:	2f0a      	cmp	r7, #10
 8008f26:	bf18      	it	ne
 8008f28:	2701      	movne	r7, #1
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	b011      	add	sp, #68	@ 0x44
 8008f2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f32:	b002      	add	sp, #8
 8008f34:	4770      	bx	lr
 8008f36:	270b      	movs	r7, #11
 8008f38:	e7f7      	b.n	8008f2a <rcl_node_resolve_name+0x82>
 8008f3a:	2701      	movs	r7, #1
 8008f3c:	e7f5      	b.n	8008f2a <rcl_node_resolve_name+0x82>
 8008f3e:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f40:	9007      	str	r0, [sp, #28]
 8008f42:	a808      	add	r0, sp, #32
 8008f44:	f007 fc88 	bl	8010858 <rcl_get_default_topic_name_substitutions>
 8008f48:	4607      	mov	r7, r0
 8008f4a:	b1a8      	cbz	r0, 8008f78 <rcl_node_resolve_name+0xd0>
 8008f4c:	280a      	cmp	r0, #10
 8008f4e:	9c07      	ldr	r4, [sp, #28]
 8008f50:	d000      	beq.n	8008f54 <rcl_node_resolve_name+0xac>
 8008f52:	2701      	movs	r7, #1
 8008f54:	a808      	add	r0, sp, #32
 8008f56:	f001 fac3 	bl	800a4e0 <rcutils_string_map_fini>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d13d      	bne.n	8008fda <rcl_node_resolve_name+0x132>
 8008f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f60:	4659      	mov	r1, fp
 8008f62:	47d0      	blx	sl
 8008f64:	4659      	mov	r1, fp
 8008f66:	4620      	mov	r0, r4
 8008f68:	47d0      	blx	sl
 8008f6a:	f1b8 0f00 	cmp.w	r8, #0
 8008f6e:	d0dc      	beq.n	8008f2a <rcl_node_resolve_name+0x82>
 8008f70:	2f67      	cmp	r7, #103	@ 0x67
 8008f72:	bf08      	it	eq
 8008f74:	2768      	moveq	r7, #104	@ 0x68
 8008f76:	e7d8      	b.n	8008f2a <rcl_node_resolve_name+0x82>
 8008f78:	ab09      	add	r3, sp, #36	@ 0x24
 8008f7a:	9305      	str	r3, [sp, #20]
 8008f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f7e:	46ec      	mov	ip, sp
 8008f80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	f8cc 3000 	str.w	r3, [ip]
 8008f8a:	464a      	mov	r2, r9
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4620      	mov	r0, r4
 8008f90:	ab08      	add	r3, sp, #32
 8008f92:	f007 fb03 	bl	801059c <rcl_expand_topic_name>
 8008f96:	4607      	mov	r7, r0
 8008f98:	b9b8      	cbnz	r0, 8008fca <rcl_node_resolve_name+0x122>
 8008f9a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008f9c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	a90a      	add	r1, sp, #40	@ 0x28
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f001 fb74 	bl	800a690 <rmw_validate_full_topic_name>
 8008fa8:	b988      	cbnz	r0, 8008fce <rcl_node_resolve_name+0x126>
 8008faa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008fac:	b9d5      	cbnz	r5, 8008fe4 <rcl_node_resolve_name+0x13c>
 8008fae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fb0:	a808      	add	r0, sp, #32
 8008fb2:	601c      	str	r4, [r3, #0]
 8008fb4:	f001 fa94 	bl	800a4e0 <rcutils_string_map_fini>
 8008fb8:	4607      	mov	r7, r0
 8008fba:	b1a8      	cbz	r0, 8008fe8 <rcl_node_resolve_name+0x140>
 8008fbc:	f001 f84c 	bl	800a058 <rcutils_get_error_string>
 8008fc0:	462c      	mov	r4, r5
 8008fc2:	f001 f861 	bl	800a088 <rcutils_reset_error>
 8008fc6:	2701      	movs	r7, #1
 8008fc8:	e7c9      	b.n	8008f5e <rcl_node_resolve_name+0xb6>
 8008fca:	9c07      	ldr	r4, [sp, #28]
 8008fcc:	e7c2      	b.n	8008f54 <rcl_node_resolve_name+0xac>
 8008fce:	f001 f843 	bl	800a058 <rcutils_get_error_string>
 8008fd2:	2701      	movs	r7, #1
 8008fd4:	f001 f858 	bl	800a088 <rcutils_reset_error>
 8008fd8:	e7bc      	b.n	8008f54 <rcl_node_resolve_name+0xac>
 8008fda:	f001 f83d 	bl	800a058 <rcutils_get_error_string>
 8008fde:	f001 f853 	bl	800a088 <rcutils_reset_error>
 8008fe2:	e7bc      	b.n	8008f5e <rcl_node_resolve_name+0xb6>
 8008fe4:	2767      	movs	r7, #103	@ 0x67
 8008fe6:	e7b5      	b.n	8008f54 <rcl_node_resolve_name+0xac>
 8008fe8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fea:	4659      	mov	r1, fp
 8008fec:	47d0      	blx	sl
 8008fee:	4659      	mov	r1, fp
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	47d0      	blx	sl
 8008ff4:	e799      	b.n	8008f2a <rcl_node_resolve_name+0x82>
 8008ff6:	bf00      	nop

08008ff8 <rclc_client_init_default>:
 8008ff8:	b368      	cbz	r0, 8009056 <rclc_client_init_default+0x5e>
 8008ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffe:	460d      	mov	r5, r1
 8009000:	b09e      	sub	sp, #120	@ 0x78
 8009002:	b321      	cbz	r1, 800904e <rclc_client_init_default+0x56>
 8009004:	4616      	mov	r6, r2
 8009006:	b312      	cbz	r2, 800904e <rclc_client_init_default+0x56>
 8009008:	461f      	mov	r7, r3
 800900a:	b303      	cbz	r3, 800904e <rclc_client_init_default+0x56>
 800900c:	4604      	mov	r4, r0
 800900e:	f7ff fb5b 	bl	80086c8 <rcl_get_zero_initialized_client>
 8009012:	f10d 0810 	add.w	r8, sp, #16
 8009016:	6020      	str	r0, [r4, #0]
 8009018:	4640      	mov	r0, r8
 800901a:	f7ff fbe9 	bl	80087f0 <rcl_client_get_default_options>
 800901e:	490f      	ldr	r1, [pc, #60]	@ (800905c <rclc_client_init_default+0x64>)
 8009020:	2250      	movs	r2, #80	@ 0x50
 8009022:	4640      	mov	r0, r8
 8009024:	f00c f821 	bl	801506a <memcpy>
 8009028:	f8cd 8000 	str.w	r8, [sp]
 800902c:	463b      	mov	r3, r7
 800902e:	4632      	mov	r2, r6
 8009030:	4629      	mov	r1, r5
 8009032:	4620      	mov	r0, r4
 8009034:	f7ff fb4e 	bl	80086d4 <rcl_client_init>
 8009038:	b910      	cbnz	r0, 8009040 <rclc_client_init_default+0x48>
 800903a:	b01e      	add	sp, #120	@ 0x78
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009040:	9003      	str	r0, [sp, #12]
 8009042:	f001 f821 	bl	800a088 <rcutils_reset_error>
 8009046:	9803      	ldr	r0, [sp, #12]
 8009048:	b01e      	add	sp, #120	@ 0x78
 800904a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904e:	200b      	movs	r0, #11
 8009050:	b01e      	add	sp, #120	@ 0x78
 8009052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009056:	200b      	movs	r0, #11
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	08016600 	.word	0x08016600

08009060 <_rclc_check_for_new_data>:
 8009060:	2800      	cmp	r0, #0
 8009062:	d046      	beq.n	80090f2 <_rclc_check_for_new_data+0x92>
 8009064:	b510      	push	{r4, lr}
 8009066:	7802      	ldrb	r2, [r0, #0]
 8009068:	b084      	sub	sp, #16
 800906a:	4603      	mov	r3, r0
 800906c:	2a0a      	cmp	r2, #10
 800906e:	d842      	bhi.n	80090f6 <_rclc_check_for_new_data+0x96>
 8009070:	e8df f002 	tbb	[pc, r2]
 8009074:	14181212 	.word	0x14181212
 8009078:	06060614 	.word	0x06060614
 800907c:	2e1a      	.short	0x2e1a
 800907e:	16          	.byte	0x16
 800907f:	00          	.byte	0x00
 8009080:	6a0a      	ldr	r2, [r1, #32]
 8009082:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009084:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009088:	2000      	movs	r0, #0
 800908a:	1a12      	subs	r2, r2, r0
 800908c:	bf18      	it	ne
 800908e:	2201      	movne	r2, #1
 8009090:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009094:	b004      	add	sp, #16
 8009096:	bd10      	pop	{r4, pc}
 8009098:	680a      	ldr	r2, [r1, #0]
 800909a:	e7f2      	b.n	8009082 <_rclc_check_for_new_data+0x22>
 800909c:	698a      	ldr	r2, [r1, #24]
 800909e:	e7f0      	b.n	8009082 <_rclc_check_for_new_data+0x22>
 80090a0:	688a      	ldr	r2, [r1, #8]
 80090a2:	e7ee      	b.n	8009082 <_rclc_check_for_new_data+0x22>
 80090a4:	690a      	ldr	r2, [r1, #16]
 80090a6:	e7ec      	b.n	8009082 <_rclc_check_for_new_data+0x22>
 80090a8:	685c      	ldr	r4, [r3, #4]
 80090aa:	4608      	mov	r0, r1
 80090ac:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80090b0:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80090b4:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80090b8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80090c2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80090c6:	f104 0110 	add.w	r1, r4, #16
 80090ca:	f009 faa9 	bl	8012620 <rcl_action_client_wait_set_get_entities_ready>
 80090ce:	e7e1      	b.n	8009094 <_rclc_check_for_new_data+0x34>
 80090d0:	685c      	ldr	r4, [r3, #4]
 80090d2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 80090d6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 80090da:	e9cd 3200 	strd	r3, r2, [sp]
 80090de:	4608      	mov	r0, r1
 80090e0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80090e4:	f104 0220 	add.w	r2, r4, #32
 80090e8:	f104 0110 	add.w	r1, r4, #16
 80090ec:	f009 fcb0 	bl	8012a50 <rcl_action_server_wait_set_get_entities_ready>
 80090f0:	e7d0      	b.n	8009094 <_rclc_check_for_new_data+0x34>
 80090f2:	200b      	movs	r0, #11
 80090f4:	4770      	bx	lr
 80090f6:	2001      	movs	r0, #1
 80090f8:	e7cc      	b.n	8009094 <_rclc_check_for_new_data+0x34>
 80090fa:	bf00      	nop

080090fc <_rclc_take_new_data>:
 80090fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090fe:	b09b      	sub	sp, #108	@ 0x6c
 8009100:	2800      	cmp	r0, #0
 8009102:	f000 8088 	beq.w	8009216 <_rclc_take_new_data+0x11a>
 8009106:	7803      	ldrb	r3, [r0, #0]
 8009108:	4604      	mov	r4, r0
 800910a:	2b0a      	cmp	r3, #10
 800910c:	f200 8167 	bhi.w	80093de <_rclc_take_new_data+0x2e2>
 8009110:	e8df f003 	tbb	[pc, r3]
 8009114:	44152d2d 	.word	0x44152d2d
 8009118:	19191944 	.word	0x19191944
 800911c:	065a      	.short	0x065a
 800911e:	15          	.byte	0x15
 800911f:	00          	.byte	0x00
 8009120:	6840      	ldr	r0, [r0, #4]
 8009122:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f040 80b2 	bne.w	8009290 <_rclc_take_new_data+0x194>
 800912c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009130:	2b00      	cmp	r3, #0
 8009132:	f040 80e4 	bne.w	80092fe <_rclc_take_new_data+0x202>
 8009136:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800913a:	2b00      	cmp	r3, #0
 800913c:	d16f      	bne.n	800921e <_rclc_take_new_data+0x122>
 800913e:	2500      	movs	r5, #0
 8009140:	4628      	mov	r0, r5
 8009142:	b01b      	add	sp, #108	@ 0x6c
 8009144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009146:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009148:	6a0b      	ldr	r3, [r1, #32]
 800914a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0f5      	beq.n	800913e <_rclc_take_new_data+0x42>
 8009152:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009156:	f104 0110 	add.w	r1, r4, #16
 800915a:	f007 fda7 	bl	8010cac <rcl_take_request>
 800915e:	4605      	mov	r5, r0
 8009160:	2800      	cmp	r0, #0
 8009162:	d0ec      	beq.n	800913e <_rclc_take_new_data+0x42>
 8009164:	f240 2359 	movw	r3, #601	@ 0x259
 8009168:	4298      	cmp	r0, r3
 800916a:	d013      	beq.n	8009194 <_rclc_take_new_data+0x98>
 800916c:	e029      	b.n	80091c2 <_rclc_take_new_data+0xc6>
 800916e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009170:	680b      	ldr	r3, [r1, #0]
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0e1      	beq.n	800913e <_rclc_take_new_data+0x42>
 800917a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800917e:	2300      	movs	r3, #0
 8009180:	aa0a      	add	r2, sp, #40	@ 0x28
 8009182:	f007 fdf5 	bl	8010d70 <rcl_take>
 8009186:	4605      	mov	r5, r0
 8009188:	2800      	cmp	r0, #0
 800918a:	d0d9      	beq.n	8009140 <_rclc_take_new_data+0x44>
 800918c:	f240 1391 	movw	r3, #401	@ 0x191
 8009190:	4298      	cmp	r0, r3
 8009192:	d116      	bne.n	80091c2 <_rclc_take_new_data+0xc6>
 8009194:	2300      	movs	r3, #0
 8009196:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800919a:	e7d1      	b.n	8009140 <_rclc_take_new_data+0x44>
 800919c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800919e:	698b      	ldr	r3, [r1, #24]
 80091a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0ca      	beq.n	800913e <_rclc_take_new_data+0x42>
 80091a8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80091ac:	f104 0110 	add.w	r1, r4, #16
 80091b0:	f7ff fb7e 	bl	80088b0 <rcl_take_response>
 80091b4:	4605      	mov	r5, r0
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d0c1      	beq.n	800913e <_rclc_take_new_data+0x42>
 80091ba:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80091be:	4298      	cmp	r0, r3
 80091c0:	d0be      	beq.n	8009140 <_rclc_take_new_data+0x44>
 80091c2:	f000 ff61 	bl	800a088 <rcutils_reset_error>
 80091c6:	e7bb      	b.n	8009140 <_rclc_take_new_data+0x44>
 80091c8:	6840      	ldr	r0, [r0, #4]
 80091ca:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d17d      	bne.n	80092ce <_rclc_take_new_data+0x1d2>
 80091d2:	69c3      	ldr	r3, [r0, #28]
 80091d4:	b11b      	cbz	r3, 80091de <_rclc_take_new_data+0xe2>
 80091d6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d144      	bne.n	8009268 <_rclc_take_new_data+0x16c>
 80091de:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f040 80ac 	bne.w	8009340 <_rclc_take_new_data+0x244>
 80091e8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0a6      	beq.n	800913e <_rclc_take_new_data+0x42>
 80091f0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80091f2:	a90a      	add	r1, sp, #40	@ 0x28
 80091f4:	3010      	adds	r0, #16
 80091f6:	f009 f8eb 	bl	80123d0 <rcl_action_take_result_response>
 80091fa:	4605      	mov	r5, r0
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d1e0      	bne.n	80091c2 <_rclc_take_new_data+0xc6>
 8009200:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009204:	6860      	ldr	r0, [r4, #4]
 8009206:	f009 fd47 	bl	8012c98 <rclc_action_find_handle_by_result_request_sequence_number>
 800920a:	2800      	cmp	r0, #0
 800920c:	d098      	beq.n	8009140 <_rclc_take_new_data+0x44>
 800920e:	2301      	movs	r3, #1
 8009210:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009214:	e794      	b.n	8009140 <_rclc_take_new_data+0x44>
 8009216:	250b      	movs	r5, #11
 8009218:	4628      	mov	r0, r5
 800921a:	b01b      	add	sp, #108	@ 0x6c
 800921c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800921e:	ae04      	add	r6, sp, #16
 8009220:	aa0a      	add	r2, sp, #40	@ 0x28
 8009222:	3010      	adds	r0, #16
 8009224:	4631      	mov	r1, r6
 8009226:	f009 fb47 	bl	80128b8 <rcl_action_take_cancel_request>
 800922a:	4605      	mov	r5, r0
 800922c:	2800      	cmp	r0, #0
 800922e:	d1c8      	bne.n	80091c2 <_rclc_take_new_data+0xc6>
 8009230:	6860      	ldr	r0, [r4, #4]
 8009232:	a90a      	add	r1, sp, #40	@ 0x28
 8009234:	f009 fcee 	bl	8012c14 <rclc_action_find_goal_handle_by_uuid>
 8009238:	4607      	mov	r7, r0
 800923a:	2800      	cmp	r0, #0
 800923c:	f000 80bb 	beq.w	80093b6 <_rclc_take_new_data+0x2ba>
 8009240:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009244:	2101      	movs	r1, #1
 8009246:	f009 fc6f 	bl	8012b28 <rcl_action_transition_goal_state>
 800924a:	2803      	cmp	r0, #3
 800924c:	4684      	mov	ip, r0
 800924e:	f040 80a7 	bne.w	80093a0 <_rclc_take_new_data+0x2a4>
 8009252:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009254:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8009258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800925a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800925e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009262:	f887 c008 	strb.w	ip, [r7, #8]
 8009266:	e76b      	b.n	8009140 <_rclc_take_new_data+0x44>
 8009268:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800926a:	3010      	adds	r0, #16
 800926c:	f009 f930 	bl	80124d0 <rcl_action_take_feedback>
 8009270:	4605      	mov	r5, r0
 8009272:	2800      	cmp	r0, #0
 8009274:	d1a5      	bne.n	80091c2 <_rclc_take_new_data+0xc6>
 8009276:	6860      	ldr	r0, [r4, #4]
 8009278:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800927a:	f009 fccb 	bl	8012c14 <rclc_action_find_goal_handle_by_uuid>
 800927e:	4603      	mov	r3, r0
 8009280:	2800      	cmp	r0, #0
 8009282:	f000 80a3 	beq.w	80093cc <_rclc_take_new_data+0x2d0>
 8009286:	2201      	movs	r2, #1
 8009288:	6860      	ldr	r0, [r4, #4]
 800928a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800928e:	e7a6      	b.n	80091de <_rclc_take_new_data+0xe2>
 8009290:	f009 fc9a 	bl	8012bc8 <rclc_action_take_goal_handle>
 8009294:	4606      	mov	r6, r0
 8009296:	6860      	ldr	r0, [r4, #4]
 8009298:	2e00      	cmp	r6, #0
 800929a:	f43f af47 	beq.w	800912c <_rclc_take_new_data+0x30>
 800929e:	6070      	str	r0, [r6, #4]
 80092a0:	69f2      	ldr	r2, [r6, #28]
 80092a2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80092a6:	3010      	adds	r0, #16
 80092a8:	f009 fa4e 	bl	8012748 <rcl_action_take_goal_request>
 80092ac:	4605      	mov	r5, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f040 808e 	bne.w	80093d0 <_rclc_take_new_data+0x2d4>
 80092b4:	69f7      	ldr	r7, [r6, #28]
 80092b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80092b8:	7235      	strb	r5, [r6, #8]
 80092ba:	f8c6 0009 	str.w	r0, [r6, #9]
 80092be:	f8c6 100d 	str.w	r1, [r6, #13]
 80092c2:	6860      	ldr	r0, [r4, #4]
 80092c4:	f8c6 2011 	str.w	r2, [r6, #17]
 80092c8:	f8c6 3015 	str.w	r3, [r6, #21]
 80092cc:	e72e      	b.n	800912c <_rclc_take_new_data+0x30>
 80092ce:	aa04      	add	r2, sp, #16
 80092d0:	a90a      	add	r1, sp, #40	@ 0x28
 80092d2:	3010      	adds	r0, #16
 80092d4:	f009 f804 	bl	80122e0 <rcl_action_take_goal_response>
 80092d8:	4605      	mov	r5, r0
 80092da:	2800      	cmp	r0, #0
 80092dc:	f47f af71 	bne.w	80091c2 <_rclc_take_new_data+0xc6>
 80092e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092e4:	6860      	ldr	r0, [r4, #4]
 80092e6:	f009 fcc5 	bl	8012c74 <rclc_action_find_handle_by_goal_request_sequence_number>
 80092ea:	b130      	cbz	r0, 80092fa <_rclc_take_new_data+0x1fe>
 80092ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80092f0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80092f4:	2201      	movs	r2, #1
 80092f6:	f880 2020 	strb.w	r2, [r0, #32]
 80092fa:	6860      	ldr	r0, [r4, #4]
 80092fc:	e769      	b.n	80091d2 <_rclc_take_new_data+0xd6>
 80092fe:	aa04      	add	r2, sp, #16
 8009300:	3010      	adds	r0, #16
 8009302:	a90a      	add	r1, sp, #40	@ 0x28
 8009304:	f009 fa98 	bl	8012838 <rcl_action_take_result_request>
 8009308:	4605      	mov	r5, r0
 800930a:	2800      	cmp	r0, #0
 800930c:	f47f af59 	bne.w	80091c2 <_rclc_take_new_data+0xc6>
 8009310:	6860      	ldr	r0, [r4, #4]
 8009312:	a904      	add	r1, sp, #16
 8009314:	f009 fc7e 	bl	8012c14 <rclc_action_find_goal_handle_by_uuid>
 8009318:	4607      	mov	r7, r0
 800931a:	b160      	cbz	r0, 8009336 <_rclc_take_new_data+0x23a>
 800931c:	ad0a      	add	r5, sp, #40	@ 0x28
 800931e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009324:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009326:	e895 0003 	ldmia.w	r5, {r0, r1}
 800932a:	f04f 0c02 	mov.w	ip, #2
 800932e:	e886 0003 	stmia.w	r6, {r0, r1}
 8009332:	f887 c008 	strb.w	ip, [r7, #8]
 8009336:	6860      	ldr	r0, [r4, #4]
 8009338:	2300      	movs	r3, #0
 800933a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800933e:	e6fa      	b.n	8009136 <_rclc_take_new_data+0x3a>
 8009340:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009344:	a90a      	add	r1, sp, #40	@ 0x28
 8009346:	3010      	adds	r0, #16
 8009348:	f009 f882 	bl	8012450 <rcl_action_take_cancel_response>
 800934c:	4605      	mov	r5, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	f47f af37 	bne.w	80091c2 <_rclc_take_new_data+0xc6>
 8009354:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009358:	6860      	ldr	r0, [r4, #4]
 800935a:	f009 fcaf 	bl	8012cbc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800935e:	4606      	mov	r6, r0
 8009360:	6860      	ldr	r0, [r4, #4]
 8009362:	2e00      	cmp	r6, #0
 8009364:	f43f af40 	beq.w	80091e8 <_rclc_take_new_data+0xec>
 8009368:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800936a:	2701      	movs	r7, #1
 800936c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800936e:	2b00      	cmp	r3, #0
 8009370:	f43f af3a 	beq.w	80091e8 <_rclc_take_new_data+0xec>
 8009374:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009376:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800937a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800937e:	f009 fc49 	bl	8012c14 <rclc_action_find_goal_handle_by_uuid>
 8009382:	b138      	cbz	r0, 8009394 <_rclc_take_new_data+0x298>
 8009384:	6860      	ldr	r0, [r4, #4]
 8009386:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009388:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800938c:	3501      	adds	r5, #1
 800938e:	42ab      	cmp	r3, r5
 8009390:	d8f0      	bhi.n	8009374 <_rclc_take_new_data+0x278>
 8009392:	e729      	b.n	80091e8 <_rclc_take_new_data+0xec>
 8009394:	6860      	ldr	r0, [r4, #4]
 8009396:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009398:	3501      	adds	r5, #1
 800939a:	42ab      	cmp	r3, r5
 800939c:	d8ea      	bhi.n	8009374 <_rclc_take_new_data+0x278>
 800939e:	e723      	b.n	80091e8 <_rclc_take_new_data+0xec>
 80093a0:	ab06      	add	r3, sp, #24
 80093a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80093a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80093a8:	2103      	movs	r1, #3
 80093aa:	e896 000c 	ldmia.w	r6, {r2, r3}
 80093ae:	6860      	ldr	r0, [r4, #4]
 80093b0:	f009 fcfa 	bl	8012da8 <rclc_action_server_goal_cancel_reject>
 80093b4:	e6c4      	b.n	8009140 <_rclc_take_new_data+0x44>
 80093b6:	ab06      	add	r3, sp, #24
 80093b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80093ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80093be:	2102      	movs	r1, #2
 80093c0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80093c4:	6860      	ldr	r0, [r4, #4]
 80093c6:	f009 fcef 	bl	8012da8 <rclc_action_server_goal_cancel_reject>
 80093ca:	e6b9      	b.n	8009140 <_rclc_take_new_data+0x44>
 80093cc:	6860      	ldr	r0, [r4, #4]
 80093ce:	e706      	b.n	80091de <_rclc_take_new_data+0xe2>
 80093d0:	6860      	ldr	r0, [r4, #4]
 80093d2:	4631      	mov	r1, r6
 80093d4:	f009 fc08 	bl	8012be8 <rclc_action_remove_used_goal_handle>
 80093d8:	f000 fe56 	bl	800a088 <rcutils_reset_error>
 80093dc:	e6b0      	b.n	8009140 <_rclc_take_new_data+0x44>
 80093de:	2501      	movs	r5, #1
 80093e0:	e6ae      	b.n	8009140 <_rclc_take_new_data+0x44>
 80093e2:	bf00      	nop

080093e4 <_rclc_execute.part.0>:
 80093e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093e6:	7803      	ldrb	r3, [r0, #0]
 80093e8:	b087      	sub	sp, #28
 80093ea:	4604      	mov	r4, r0
 80093ec:	2b0a      	cmp	r3, #10
 80093ee:	f200 8136 	bhi.w	800965e <_rclc_execute.part.0+0x27a>
 80093f2:	e8df f003 	tbb	[pc, r3]
 80093f6:	435e      	.short	0x435e
 80093f8:	06a1664f 	.word	0x06a1664f
 80093fc:	6c1e0606 	.word	0x6c1e0606
 8009400:	59          	.byte	0x59
 8009401:	00          	.byte	0x00
 8009402:	2b06      	cmp	r3, #6
 8009404:	f000 8122 	beq.w	800964c <_rclc_execute.part.0+0x268>
 8009408:	2b07      	cmp	r3, #7
 800940a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800940c:	f040 8118 	bne.w	8009640 <_rclc_execute.part.0+0x25c>
 8009410:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009414:	6880      	ldr	r0, [r0, #8]
 8009416:	4798      	blx	r3
 8009418:	f104 0110 	add.w	r1, r4, #16
 800941c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800941e:	6860      	ldr	r0, [r4, #4]
 8009420:	f007 fc84 	bl	8010d2c <rcl_send_response>
 8009424:	2800      	cmp	r0, #0
 8009426:	d033      	beq.n	8009490 <_rclc_execute.part.0+0xac>
 8009428:	9005      	str	r0, [sp, #20]
 800942a:	f000 fe2d 	bl	800a088 <rcutils_reset_error>
 800942e:	9805      	ldr	r0, [sp, #20]
 8009430:	e02e      	b.n	8009490 <_rclc_execute.part.0+0xac>
 8009432:	6840      	ldr	r0, [r0, #4]
 8009434:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 8086 	beq.w	800954a <_rclc_execute.part.0+0x166>
 800943e:	2600      	movs	r6, #0
 8009440:	2701      	movs	r7, #1
 8009442:	e004      	b.n	800944e <_rclc_execute.part.0+0x6a>
 8009444:	f009 fb9a 	bl	8012b7c <rclc_action_send_result_request>
 8009448:	b998      	cbnz	r0, 8009472 <_rclc_execute.part.0+0x8e>
 800944a:	722f      	strb	r7, [r5, #8]
 800944c:	6860      	ldr	r0, [r4, #4]
 800944e:	f009 fc47 	bl	8012ce0 <rclc_action_find_first_handle_with_goal_response>
 8009452:	4605      	mov	r5, r0
 8009454:	2800      	cmp	r0, #0
 8009456:	d077      	beq.n	8009548 <_rclc_execute.part.0+0x164>
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009462:	f885 6020 	strb.w	r6, [r5, #32]
 8009466:	4798      	blx	r3
 8009468:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800946c:	4628      	mov	r0, r5
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e8      	bne.n	8009444 <_rclc_execute.part.0+0x60>
 8009472:	6860      	ldr	r0, [r4, #4]
 8009474:	4629      	mov	r1, r5
 8009476:	f009 fbb7 	bl	8012be8 <rclc_action_remove_used_goal_handle>
 800947a:	e7e7      	b.n	800944c <_rclc_execute.part.0+0x68>
 800947c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009480:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009484:	2d00      	cmp	r5, #0
 8009486:	f000 80c9 	beq.w	800961c <_rclc_execute.part.0+0x238>
 800948a:	6880      	ldr	r0, [r0, #8]
 800948c:	4798      	blx	r3
 800948e:	2000      	movs	r0, #0
 8009490:	b007      	add	sp, #28
 8009492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009494:	6840      	ldr	r0, [r0, #4]
 8009496:	f007 ff79 	bl	801138c <rcl_timer_call>
 800949a:	f240 3321 	movw	r3, #801	@ 0x321
 800949e:	4298      	cmp	r0, r3
 80094a0:	d004      	beq.n	80094ac <_rclc_execute.part.0+0xc8>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0f4      	beq.n	8009490 <_rclc_execute.part.0+0xac>
 80094a6:	e7bf      	b.n	8009428 <_rclc_execute.part.0+0x44>
 80094a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80094aa:	4798      	blx	r3
 80094ac:	2000      	movs	r0, #0
 80094ae:	b007      	add	sp, #28
 80094b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b2:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80094b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80094b8:	b925      	cbnz	r5, 80094c4 <_rclc_execute.part.0+0xe0>
 80094ba:	4628      	mov	r0, r5
 80094bc:	4798      	blx	r3
 80094be:	4628      	mov	r0, r5
 80094c0:	e7e6      	b.n	8009490 <_rclc_execute.part.0+0xac>
 80094c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80094c4:	68a0      	ldr	r0, [r4, #8]
 80094c6:	4798      	blx	r3
 80094c8:	2000      	movs	r0, #0
 80094ca:	b007      	add	sp, #28
 80094cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ce:	6840      	ldr	r0, [r0, #4]
 80094d0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80094d4:	bb3b      	cbnz	r3, 8009526 <_rclc_execute.part.0+0x142>
 80094d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d07b      	beq.n	80095d6 <_rclc_execute.part.0+0x1f2>
 80094de:	f640 0634 	movw	r6, #2100	@ 0x834
 80094e2:	2701      	movs	r7, #1
 80094e4:	e007      	b.n	80094f6 <_rclc_execute.part.0+0x112>
 80094e6:	4628      	mov	r0, r5
 80094e8:	f009 fc12 	bl	8012d10 <rclc_action_server_response_goal_request>
 80094ec:	6860      	ldr	r0, [r4, #4]
 80094ee:	4629      	mov	r1, r5
 80094f0:	f009 fb7a 	bl	8012be8 <rclc_action_remove_used_goal_handle>
 80094f4:	6860      	ldr	r0, [r4, #4]
 80094f6:	2100      	movs	r1, #0
 80094f8:	f009 fba4 	bl	8012c44 <rclc_action_find_first_handle_by_status>
 80094fc:	4605      	mov	r5, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	d066      	beq.n	80095d0 <_rclc_execute.part.0+0x1ec>
 8009502:	6863      	ldr	r3, [r4, #4]
 8009504:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	4798      	blx	r3
 800950a:	42b0      	cmp	r0, r6
 800950c:	f04f 0100 	mov.w	r1, #0
 8009510:	d1e9      	bne.n	80094e6 <_rclc_execute.part.0+0x102>
 8009512:	2101      	movs	r1, #1
 8009514:	4628      	mov	r0, r5
 8009516:	f009 fbfb 	bl	8012d10 <rclc_action_server_response_goal_request>
 800951a:	722f      	strb	r7, [r5, #8]
 800951c:	e7ea      	b.n	80094f4 <_rclc_execute.part.0+0x110>
 800951e:	6848      	ldr	r0, [r1, #4]
 8009520:	f009 fb62 	bl	8012be8 <rclc_action_remove_used_goal_handle>
 8009524:	6860      	ldr	r0, [r4, #4]
 8009526:	f009 fb99 	bl	8012c5c <rclc_action_find_first_terminated_handle>
 800952a:	4601      	mov	r1, r0
 800952c:	2800      	cmp	r0, #0
 800952e:	d1f6      	bne.n	800951e <_rclc_execute.part.0+0x13a>
 8009530:	6860      	ldr	r0, [r4, #4]
 8009532:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8009536:	e7ce      	b.n	80094d6 <_rclc_execute.part.0+0xf2>
 8009538:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800953a:	6880      	ldr	r0, [r0, #8]
 800953c:	f104 0110 	add.w	r1, r4, #16
 8009540:	4798      	blx	r3
 8009542:	2000      	movs	r0, #0
 8009544:	b007      	add	sp, #28
 8009546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009548:	6860      	ldr	r0, [r4, #4]
 800954a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800954e:	b18b      	cbz	r3, 8009574 <_rclc_execute.part.0+0x190>
 8009550:	68c5      	ldr	r5, [r0, #12]
 8009552:	b32d      	cbz	r5, 80095a0 <_rclc_execute.part.0+0x1bc>
 8009554:	2600      	movs	r6, #0
 8009556:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800955a:	b143      	cbz	r3, 800956e <_rclc_execute.part.0+0x18a>
 800955c:	69c3      	ldr	r3, [r0, #28]
 800955e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009562:	b123      	cbz	r3, 800956e <_rclc_execute.part.0+0x18a>
 8009564:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009566:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009568:	4628      	mov	r0, r5
 800956a:	4798      	blx	r3
 800956c:	6860      	ldr	r0, [r4, #4]
 800956e:	682d      	ldr	r5, [r5, #0]
 8009570:	2d00      	cmp	r5, #0
 8009572:	d1f0      	bne.n	8009556 <_rclc_execute.part.0+0x172>
 8009574:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009578:	b193      	cbz	r3, 80095a0 <_rclc_execute.part.0+0x1bc>
 800957a:	68c5      	ldr	r5, [r0, #12]
 800957c:	b185      	cbz	r5, 80095a0 <_rclc_execute.part.0+0x1bc>
 800957e:	2600      	movs	r6, #0
 8009580:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009584:	b14b      	cbz	r3, 800959a <_rclc_execute.part.0+0x1b6>
 8009586:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009588:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800958c:	b12b      	cbz	r3, 800959a <_rclc_execute.part.0+0x1b6>
 800958e:	4628      	mov	r0, r5
 8009590:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009594:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009596:	4798      	blx	r3
 8009598:	6860      	ldr	r0, [r4, #4]
 800959a:	682d      	ldr	r5, [r5, #0]
 800959c:	2d00      	cmp	r5, #0
 800959e:	d1ef      	bne.n	8009580 <_rclc_execute.part.0+0x19c>
 80095a0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d081      	beq.n	80094ac <_rclc_execute.part.0+0xc8>
 80095a8:	2700      	movs	r7, #0
 80095aa:	e00b      	b.n	80095c4 <_rclc_execute.part.0+0x1e0>
 80095ac:	6863      	ldr	r3, [r4, #4]
 80095ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80095b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80095b2:	6a1e      	ldr	r6, [r3, #32]
 80095b4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80095b8:	47b0      	blx	r6
 80095ba:	6860      	ldr	r0, [r4, #4]
 80095bc:	4629      	mov	r1, r5
 80095be:	f009 fb13 	bl	8012be8 <rclc_action_remove_used_goal_handle>
 80095c2:	6860      	ldr	r0, [r4, #4]
 80095c4:	f009 fb98 	bl	8012cf8 <rclc_action_find_first_handle_with_result_response>
 80095c8:	4605      	mov	r5, r0
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d1ee      	bne.n	80095ac <_rclc_execute.part.0+0x1c8>
 80095ce:	e76d      	b.n	80094ac <_rclc_execute.part.0+0xc8>
 80095d0:	6860      	ldr	r0, [r4, #4]
 80095d2:	f880 5020 	strb.w	r5, [r0, #32]
 80095d6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f43f af66 	beq.w	80094ac <_rclc_execute.part.0+0xc8>
 80095e0:	68c5      	ldr	r5, [r0, #12]
 80095e2:	b1b5      	cbz	r5, 8009612 <_rclc_execute.part.0+0x22e>
 80095e4:	2602      	movs	r6, #2
 80095e6:	e001      	b.n	80095ec <_rclc_execute.part.0+0x208>
 80095e8:	682d      	ldr	r5, [r5, #0]
 80095ea:	b195      	cbz	r5, 8009612 <_rclc_execute.part.0+0x22e>
 80095ec:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d1f9      	bne.n	80095e8 <_rclc_execute.part.0+0x204>
 80095f4:	69c3      	ldr	r3, [r0, #28]
 80095f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80095f8:	4628      	mov	r0, r5
 80095fa:	4798      	blx	r3
 80095fc:	4603      	mov	r3, r0
 80095fe:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009602:	4628      	mov	r0, r5
 8009604:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009608:	b163      	cbz	r3, 8009624 <_rclc_execute.part.0+0x240>
 800960a:	f009 fba1 	bl	8012d50 <rclc_action_server_goal_cancel_accept>
 800960e:	6860      	ldr	r0, [r4, #4]
 8009610:	e7ea      	b.n	80095e8 <_rclc_execute.part.0+0x204>
 8009612:	2300      	movs	r3, #0
 8009614:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009618:	4618      	mov	r0, r3
 800961a:	e739      	b.n	8009490 <_rclc_execute.part.0+0xac>
 800961c:	4628      	mov	r0, r5
 800961e:	4798      	blx	r3
 8009620:	4628      	mov	r0, r5
 8009622:	e735      	b.n	8009490 <_rclc_execute.part.0+0xac>
 8009624:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009626:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800962a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800962e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009632:	6860      	ldr	r0, [r4, #4]
 8009634:	2101      	movs	r1, #1
 8009636:	f009 fbb7 	bl	8012da8 <rclc_action_server_goal_cancel_reject>
 800963a:	722e      	strb	r6, [r5, #8]
 800963c:	6860      	ldr	r0, [r4, #4]
 800963e:	e7d3      	b.n	80095e8 <_rclc_execute.part.0+0x204>
 8009640:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009642:	6880      	ldr	r0, [r0, #8]
 8009644:	4798      	blx	r3
 8009646:	f104 0110 	add.w	r1, r4, #16
 800964a:	e6e7      	b.n	800941c <_rclc_execute.part.0+0x38>
 800964c:	f100 0110 	add.w	r1, r0, #16
 8009650:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009652:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009654:	6880      	ldr	r0, [r0, #8]
 8009656:	9105      	str	r1, [sp, #20]
 8009658:	4798      	blx	r3
 800965a:	9905      	ldr	r1, [sp, #20]
 800965c:	e6de      	b.n	800941c <_rclc_execute.part.0+0x38>
 800965e:	2001      	movs	r0, #1
 8009660:	e716      	b.n	8009490 <_rclc_execute.part.0+0xac>
 8009662:	bf00      	nop

08009664 <rclc_executor_trigger_any>:
 8009664:	2800      	cmp	r0, #0
 8009666:	d03f      	beq.n	80096e8 <rclc_executor_trigger_any+0x84>
 8009668:	2900      	cmp	r1, #0
 800966a:	d03e      	beq.n	80096ea <rclc_executor_trigger_any+0x86>
 800966c:	4603      	mov	r3, r0
 800966e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009672:	2200      	movs	r2, #0
 8009674:	2800      	cmp	r0, #0
 8009676:	d037      	beq.n	80096e8 <rclc_executor_trigger_any+0x84>
 8009678:	b430      	push	{r4, r5}
 800967a:	f893 c000 	ldrb.w	ip, [r3]
 800967e:	f1bc 0f08 	cmp.w	ip, #8
 8009682:	d11e      	bne.n	80096c2 <rclc_executor_trigger_any+0x5e>
 8009684:	685c      	ldr	r4, [r3, #4]
 8009686:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009688:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800968c:	d105      	bne.n	800969a <rclc_executor_trigger_any+0x36>
 800968e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009692:	b910      	cbnz	r0, 800969a <rclc_executor_trigger_any+0x36>
 8009694:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009698:	b128      	cbz	r0, 80096a6 <rclc_executor_trigger_any+0x42>
 800969a:	bc30      	pop	{r4, r5}
 800969c:	4770      	bx	lr
 800969e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d1f9      	bne.n	800969a <rclc_executor_trigger_any+0x36>
 80096a6:	3201      	adds	r2, #1
 80096a8:	4291      	cmp	r1, r2
 80096aa:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80096ae:	d018      	beq.n	80096e2 <rclc_executor_trigger_any+0x7e>
 80096b0:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d0f0      	beq.n	800969a <rclc_executor_trigger_any+0x36>
 80096b8:	f893 c000 	ldrb.w	ip, [r3]
 80096bc:	f1bc 0f08 	cmp.w	ip, #8
 80096c0:	d0e0      	beq.n	8009684 <rclc_executor_trigger_any+0x20>
 80096c2:	f1bc 0f09 	cmp.w	ip, #9
 80096c6:	d1ea      	bne.n	800969e <rclc_executor_trigger_any+0x3a>
 80096c8:	685c      	ldr	r4, [r3, #4]
 80096ca:	6a25      	ldr	r5, [r4, #32]
 80096cc:	2d00      	cmp	r5, #0
 80096ce:	d1e4      	bne.n	800969a <rclc_executor_trigger_any+0x36>
 80096d0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1e0      	bne.n	800969a <rclc_executor_trigger_any+0x36>
 80096d8:	3201      	adds	r2, #1
 80096da:	4291      	cmp	r1, r2
 80096dc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80096e0:	d1e6      	bne.n	80096b0 <rclc_executor_trigger_any+0x4c>
 80096e2:	2000      	movs	r0, #0
 80096e4:	bc30      	pop	{r4, r5}
 80096e6:	4770      	bx	lr
 80096e8:	4770      	bx	lr
 80096ea:	4608      	mov	r0, r1
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop

080096f0 <rclc_executor_get_zero_initialized_executor>:
 80096f0:	b510      	push	{r4, lr}
 80096f2:	4903      	ldr	r1, [pc, #12]	@ (8009700 <rclc_executor_get_zero_initialized_executor+0x10>)
 80096f4:	4604      	mov	r4, r0
 80096f6:	2288      	movs	r2, #136	@ 0x88
 80096f8:	f00b fcb7 	bl	801506a <memcpy>
 80096fc:	4620      	mov	r0, r4
 80096fe:	bd10      	pop	{r4, pc}
 8009700:	08016650 	.word	0x08016650
 8009704:	00000000 	.word	0x00000000

08009708 <rclc_executor_init>:
 8009708:	2800      	cmp	r0, #0
 800970a:	d05f      	beq.n	80097cc <rclc_executor_init+0xc4>
 800970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009710:	460c      	mov	r4, r1
 8009712:	b0b0      	sub	sp, #192	@ 0xc0
 8009714:	2900      	cmp	r1, #0
 8009716:	d051      	beq.n	80097bc <rclc_executor_init+0xb4>
 8009718:	4605      	mov	r5, r0
 800971a:	4618      	mov	r0, r3
 800971c:	4616      	mov	r6, r2
 800971e:	461f      	mov	r7, r3
 8009720:	f000 fbd0 	bl	8009ec4 <rcutils_allocator_is_valid>
 8009724:	2800      	cmp	r0, #0
 8009726:	d049      	beq.n	80097bc <rclc_executor_init+0xb4>
 8009728:	2e00      	cmp	r6, #0
 800972a:	d047      	beq.n	80097bc <rclc_executor_init+0xb4>
 800972c:	492c      	ldr	r1, [pc, #176]	@ (80097e0 <rclc_executor_init+0xd8>)
 800972e:	2288      	movs	r2, #136	@ 0x88
 8009730:	a80e      	add	r0, sp, #56	@ 0x38
 8009732:	f00b fc9a 	bl	801506a <memcpy>
 8009736:	a90e      	add	r1, sp, #56	@ 0x38
 8009738:	2288      	movs	r2, #136	@ 0x88
 800973a:	4628      	mov	r0, r5
 800973c:	f00b fc95 	bl	801506a <memcpy>
 8009740:	602c      	str	r4, [r5, #0]
 8009742:	4668      	mov	r0, sp
 8009744:	60ae      	str	r6, [r5, #8]
 8009746:	466c      	mov	r4, sp
 8009748:	f007 fffa 	bl	8011740 <rcl_get_zero_initialized_wait_set>
 800974c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800974e:	f105 0c14 	add.w	ip, r5, #20
 8009752:	f8d7 8000 	ldr.w	r8, [r7]
 8009756:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800975a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800975c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009762:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009766:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80097d8 <rclc_executor_init+0xd0>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	f8cc 3000 	str.w	r3, [ip]
 8009770:	6939      	ldr	r1, [r7, #16]
 8009772:	612f      	str	r7, [r5, #16]
 8009774:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009778:	01b0      	lsls	r0, r6, #6
 800977a:	47c0      	blx	r8
 800977c:	6068      	str	r0, [r5, #4]
 800977e:	b338      	cbz	r0, 80097d0 <rclc_executor_init+0xc8>
 8009780:	2400      	movs	r4, #0
 8009782:	e000      	b.n	8009786 <rclc_executor_init+0x7e>
 8009784:	6868      	ldr	r0, [r5, #4]
 8009786:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800978a:	4631      	mov	r1, r6
 800978c:	3401      	adds	r4, #1
 800978e:	f000 fa9f 	bl	8009cd0 <rclc_executor_handle_init>
 8009792:	42a6      	cmp	r6, r4
 8009794:	d1f6      	bne.n	8009784 <rclc_executor_init+0x7c>
 8009796:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800979a:	f000 fa8d 	bl	8009cb8 <rclc_executor_handle_counters_zero_init>
 800979e:	4a11      	ldr	r2, [pc, #68]	@ (80097e4 <rclc_executor_init+0xdc>)
 80097a0:	686b      	ldr	r3, [r5, #4]
 80097a2:	2000      	movs	r0, #0
 80097a4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 80097a8:	b163      	cbz	r3, 80097c4 <rclc_executor_init+0xbc>
 80097aa:	692b      	ldr	r3, [r5, #16]
 80097ac:	b153      	cbz	r3, 80097c4 <rclc_executor_init+0xbc>
 80097ae:	68ab      	ldr	r3, [r5, #8]
 80097b0:	b143      	cbz	r3, 80097c4 <rclc_executor_init+0xbc>
 80097b2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 80097b6:	b030      	add	sp, #192	@ 0xc0
 80097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097bc:	200b      	movs	r0, #11
 80097be:	b030      	add	sp, #192	@ 0xc0
 80097c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c4:	4618      	mov	r0, r3
 80097c6:	b030      	add	sp, #192	@ 0xc0
 80097c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097cc:	200b      	movs	r0, #11
 80097ce:	4770      	bx	lr
 80097d0:	200a      	movs	r0, #10
 80097d2:	e7f4      	b.n	80097be <rclc_executor_init+0xb6>
 80097d4:	f3af 8000 	nop.w
 80097d8:	3b9aca00 	.word	0x3b9aca00
 80097dc:	00000000 	.word	0x00000000
 80097e0:	08016650 	.word	0x08016650
 80097e4:	08009665 	.word	0x08009665

080097e8 <rclc_executor_add_timer>:
 80097e8:	b300      	cbz	r0, 800982c <rclc_executor_add_timer+0x44>
 80097ea:	b1f9      	cbz	r1, 800982c <rclc_executor_add_timer+0x44>
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80097f2:	4293      	cmp	r3, r2
 80097f4:	4604      	mov	r4, r0
 80097f6:	d301      	bcc.n	80097fc <rclc_executor_add_timer+0x14>
 80097f8:	2001      	movs	r0, #1
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	6840      	ldr	r0, [r0, #4]
 80097fe:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8009802:	019d      	lsls	r5, r3, #6
 8009804:	6051      	str	r1, [r2, #4]
 8009806:	2102      	movs	r1, #2
 8009808:	5341      	strh	r1, [r0, r5]
 800980a:	3301      	adds	r3, #1
 800980c:	2000      	movs	r0, #0
 800980e:	2101      	movs	r1, #1
 8009810:	f104 0514 	add.w	r5, r4, #20
 8009814:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8009816:	8711      	strh	r1, [r2, #56]	@ 0x38
 8009818:	4628      	mov	r0, r5
 800981a:	60e3      	str	r3, [r4, #12]
 800981c:	f007 ffa4 	bl	8011768 <rcl_wait_set_is_valid>
 8009820:	b930      	cbnz	r0, 8009830 <rclc_executor_add_timer+0x48>
 8009822:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009824:	3301      	adds	r3, #1
 8009826:	2000      	movs	r0, #0
 8009828:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	200b      	movs	r0, #11
 800982e:	4770      	bx	lr
 8009830:	4628      	mov	r0, r5
 8009832:	f007 ff9f 	bl	8011774 <rcl_wait_set_fini>
 8009836:	2800      	cmp	r0, #0
 8009838:	d0f3      	beq.n	8009822 <rclc_executor_add_timer+0x3a>
 800983a:	bd38      	pop	{r3, r4, r5, pc}

0800983c <rclc_executor_add_client>:
 800983c:	b348      	cbz	r0, 8009892 <rclc_executor_add_client+0x56>
 800983e:	b341      	cbz	r1, 8009892 <rclc_executor_add_client+0x56>
 8009840:	b33a      	cbz	r2, 8009892 <rclc_executor_add_client+0x56>
 8009842:	b333      	cbz	r3, 8009892 <rclc_executor_add_client+0x56>
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4604      	mov	r4, r0
 8009848:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800984c:	42a8      	cmp	r0, r5
 800984e:	d301      	bcc.n	8009854 <rclc_executor_add_client+0x18>
 8009850:	2001      	movs	r0, #1
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	6865      	ldr	r5, [r4, #4]
 8009856:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800985a:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800985e:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009862:	2303      	movs	r3, #3
 8009864:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009868:	3001      	adds	r0, #1
 800986a:	f825 300e 	strh.w	r3, [r5, lr]
 800986e:	2201      	movs	r2, #1
 8009870:	2300      	movs	r3, #0
 8009872:	f104 0514 	add.w	r5, r4, #20
 8009876:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800987a:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800987e:	60e0      	str	r0, [r4, #12]
 8009880:	4628      	mov	r0, r5
 8009882:	f007 ff71 	bl	8011768 <rcl_wait_set_is_valid>
 8009886:	b930      	cbnz	r0, 8009896 <rclc_executor_add_client+0x5a>
 8009888:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800988a:	3301      	adds	r3, #1
 800988c:	2000      	movs	r0, #0
 800988e:	6523      	str	r3, [r4, #80]	@ 0x50
 8009890:	bd38      	pop	{r3, r4, r5, pc}
 8009892:	200b      	movs	r0, #11
 8009894:	4770      	bx	lr
 8009896:	4628      	mov	r0, r5
 8009898:	f007 ff6c 	bl	8011774 <rcl_wait_set_fini>
 800989c:	2800      	cmp	r0, #0
 800989e:	d0f3      	beq.n	8009888 <rclc_executor_add_client+0x4c>
 80098a0:	bd38      	pop	{r3, r4, r5, pc}
 80098a2:	bf00      	nop

080098a4 <rclc_executor_prepare>:
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d044      	beq.n	8009932 <rclc_executor_prepare+0x8e>
 80098a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098aa:	f100 0514 	add.w	r5, r0, #20
 80098ae:	b09b      	sub	sp, #108	@ 0x6c
 80098b0:	4604      	mov	r4, r0
 80098b2:	4628      	mov	r0, r5
 80098b4:	f007 ff58 	bl	8011768 <rcl_wait_set_is_valid>
 80098b8:	b110      	cbz	r0, 80098c0 <rclc_executor_prepare+0x1c>
 80098ba:	2000      	movs	r0, #0
 80098bc:	b01b      	add	sp, #108	@ 0x6c
 80098be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098c0:	4628      	mov	r0, r5
 80098c2:	f007 ff57 	bl	8011774 <rcl_wait_set_fini>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d130      	bne.n	800992c <rclc_executor_prepare+0x88>
 80098ca:	a80c      	add	r0, sp, #48	@ 0x30
 80098cc:	f007 ff38 	bl	8011740 <rcl_get_zero_initialized_wait_set>
 80098d0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80098d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80098d8:	46ae      	mov	lr, r5
 80098da:	6927      	ldr	r7, [r4, #16]
 80098dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80098e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80098e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80098e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80098ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80098f0:	f8dc 3000 	ldr.w	r3, [ip]
 80098f4:	f8ce 3000 	str.w	r3, [lr]
 80098f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80098fa:	ae04      	add	r6, sp, #16
 80098fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6822      	ldr	r2, [r4, #0]
 8009902:	6033      	str	r3, [r6, #0]
 8009904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009906:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009908:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800990c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8009910:	e9cd 2100 	strd	r2, r1, [sp]
 8009914:	4628      	mov	r0, r5
 8009916:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009918:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800991a:	f008 fa29 	bl	8011d70 <rcl_wait_set_init>
 800991e:	2800      	cmp	r0, #0
 8009920:	d0cc      	beq.n	80098bc <rclc_executor_prepare+0x18>
 8009922:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009924:	f000 fbb0 	bl	800a088 <rcutils_reset_error>
 8009928:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800992a:	e7c7      	b.n	80098bc <rclc_executor_prepare+0x18>
 800992c:	f000 fbac 	bl	800a088 <rcutils_reset_error>
 8009930:	e7cb      	b.n	80098ca <rclc_executor_prepare+0x26>
 8009932:	200b      	movs	r0, #11
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop

08009938 <rclc_executor_spin_some.part.0>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	f100 0614 	add.w	r6, r0, #20
 8009940:	b083      	sub	sp, #12
 8009942:	4691      	mov	r9, r2
 8009944:	4698      	mov	r8, r3
 8009946:	4605      	mov	r5, r0
 8009948:	f7ff ffac 	bl	80098a4 <rclc_executor_prepare>
 800994c:	4630      	mov	r0, r6
 800994e:	f007 ffdd 	bl	801190c <rcl_wait_set_clear>
 8009952:	4607      	mov	r7, r0
 8009954:	2800      	cmp	r0, #0
 8009956:	f040 80ed 	bne.w	8009b34 <rclc_executor_spin_some.part.0+0x1fc>
 800995a:	68ab      	ldr	r3, [r5, #8]
 800995c:	4604      	mov	r4, r0
 800995e:	b303      	cbz	r3, 80099a2 <rclc_executor_spin_some.part.0+0x6a>
 8009960:	6869      	ldr	r1, [r5, #4]
 8009962:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009966:	01a2      	lsls	r2, r4, #6
 8009968:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800996c:	b1cb      	cbz	r3, 80099a2 <rclc_executor_spin_some.part.0+0x6a>
 800996e:	5c8b      	ldrb	r3, [r1, r2]
 8009970:	2b0a      	cmp	r3, #10
 8009972:	f200 80d8 	bhi.w	8009b26 <rclc_executor_spin_some.part.0+0x1ee>
 8009976:	e8df f003 	tbb	[pc, r3]
 800997a:	9c9c      	.short	0x9c9c
 800997c:	068c8ca7 	.word	0x068c8ca7
 8009980:	bdc90606 	.word	0xbdc90606
 8009984:	b2          	.byte	0xb2
 8009985:	00          	.byte	0x00
 8009986:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800998a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800998e:	4630      	mov	r0, r6
 8009990:	f008 fb04 	bl	8011f9c <rcl_wait_set_add_service>
 8009994:	2800      	cmp	r0, #0
 8009996:	f040 8086 	bne.w	8009aa6 <rclc_executor_spin_some.part.0+0x16e>
 800999a:	68ab      	ldr	r3, [r5, #8]
 800999c:	3401      	adds	r4, #1
 800999e:	429c      	cmp	r4, r3
 80099a0:	d3de      	bcc.n	8009960 <rclc_executor_spin_some.part.0+0x28>
 80099a2:	4643      	mov	r3, r8
 80099a4:	464a      	mov	r2, r9
 80099a6:	4630      	mov	r0, r6
 80099a8:	f008 fb26 	bl	8011ff8 <rcl_wait>
 80099ac:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 80c7 	beq.w	8009b44 <rclc_executor_spin_some.part.0+0x20c>
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	f040 80b5 	bne.w	8009b26 <rclc_executor_spin_some.part.0+0x1ee>
 80099bc:	68ab      	ldr	r3, [r5, #8]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 8159 	beq.w	8009c76 <rclc_executor_spin_some.part.0+0x33e>
 80099c4:	2400      	movs	r4, #0
 80099c6:	46a0      	mov	r8, r4
 80099c8:	f240 1991 	movw	r9, #401	@ 0x191
 80099cc:	e00a      	b.n	80099e4 <rclc_executor_spin_some.part.0+0xac>
 80099ce:	f7ff fb47 	bl	8009060 <_rclc_check_for_new_data>
 80099d2:	4604      	mov	r4, r0
 80099d4:	b110      	cbz	r0, 80099dc <rclc_executor_spin_some.part.0+0xa4>
 80099d6:	4548      	cmp	r0, r9
 80099d8:	f040 80b2 	bne.w	8009b40 <rclc_executor_spin_some.part.0+0x208>
 80099dc:	68ab      	ldr	r3, [r5, #8]
 80099de:	4598      	cmp	r8, r3
 80099e0:	f080 8126 	bcs.w	8009c30 <rclc_executor_spin_some.part.0+0x2f8>
 80099e4:	686a      	ldr	r2, [r5, #4]
 80099e6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80099ea:	4631      	mov	r1, r6
 80099ec:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80099f0:	f108 0801 	add.w	r8, r8, #1
 80099f4:	f1bc 0f00 	cmp.w	ip, #0
 80099f8:	d1e9      	bne.n	80099ce <rclc_executor_spin_some.part.0+0x96>
 80099fa:	4619      	mov	r1, r3
 80099fc:	4610      	mov	r0, r2
 80099fe:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009a02:	4798      	blx	r3
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f000 809b 	beq.w	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009a0a:	68ab      	ldr	r3, [r5, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 8097 	beq.w	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009a12:	f04f 0800 	mov.w	r8, #0
 8009a16:	f240 1991 	movw	r9, #401	@ 0x191
 8009a1a:	e009      	b.n	8009a30 <rclc_executor_spin_some.part.0+0xf8>
 8009a1c:	f7ff fb6e 	bl	80090fc <_rclc_take_new_data>
 8009a20:	4604      	mov	r4, r0
 8009a22:	b110      	cbz	r0, 8009a2a <rclc_executor_spin_some.part.0+0xf2>
 8009a24:	4548      	cmp	r0, r9
 8009a26:	f040 808b 	bne.w	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009a2a:	68ab      	ldr	r3, [r5, #8]
 8009a2c:	4598      	cmp	r8, r3
 8009a2e:	d209      	bcs.n	8009a44 <rclc_executor_spin_some.part.0+0x10c>
 8009a30:	6868      	ldr	r0, [r5, #4]
 8009a32:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009a36:	4631      	mov	r1, r6
 8009a38:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009a3c:	f108 0801 	add.w	r8, r8, #1
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	d1eb      	bne.n	8009a1c <rclc_executor_spin_some.part.0+0xe4>
 8009a44:	2600      	movs	r6, #0
 8009a46:	b97b      	cbnz	r3, 8009a68 <rclc_executor_spin_some.part.0+0x130>
 8009a48:	e07a      	b.n	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009a4a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009a4e:	2a08      	cmp	r2, #8
 8009a50:	f000 80fd 	beq.w	8009c4e <rclc_executor_spin_some.part.0+0x316>
 8009a54:	2a09      	cmp	r2, #9
 8009a56:	f000 80ef 	beq.w	8009c38 <rclc_executor_spin_some.part.0+0x300>
 8009a5a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8009a5e:	b98a      	cbnz	r2, 8009a84 <rclc_executor_spin_some.part.0+0x14c>
 8009a60:	3601      	adds	r6, #1
 8009a62:	429e      	cmp	r6, r3
 8009a64:	d262      	bcs.n	8009b2c <rclc_executor_spin_some.part.0+0x1f4>
 8009a66:	2400      	movs	r4, #0
 8009a68:	686a      	ldr	r2, [r5, #4]
 8009a6a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009a6e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009a72:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d062      	beq.n	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009a7a:	7841      	ldrb	r1, [r0, #1]
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	d0e4      	beq.n	8009a4a <rclc_executor_spin_some.part.0+0x112>
 8009a80:	2901      	cmp	r1, #1
 8009a82:	d1ed      	bne.n	8009a60 <rclc_executor_spin_some.part.0+0x128>
 8009a84:	f7ff fcae 	bl	80093e4 <_rclc_execute.part.0>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f040 80b6 	bne.w	8009bfa <rclc_executor_spin_some.part.0+0x2c2>
 8009a8e:	68ab      	ldr	r3, [r5, #8]
 8009a90:	e7e6      	b.n	8009a60 <rclc_executor_spin_some.part.0+0x128>
 8009a92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009a96:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f008 fa52 	bl	8011f44 <rcl_wait_set_add_client>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	f43f af7a 	beq.w	800999a <rclc_executor_spin_some.part.0+0x62>
 8009aa6:	9001      	str	r0, [sp, #4]
 8009aa8:	f000 faee 	bl	800a088 <rcutils_reset_error>
 8009aac:	9801      	ldr	r0, [sp, #4]
 8009aae:	4607      	mov	r7, r0
 8009ab0:	e03c      	b.n	8009b2c <rclc_executor_spin_some.part.0+0x1f4>
 8009ab2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ab6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009aba:	4630      	mov	r0, r6
 8009abc:	f007 fefa 	bl	80118b4 <rcl_wait_set_add_subscription>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	f43f af6a 	beq.w	800999a <rclc_executor_spin_some.part.0+0x62>
 8009ac6:	e7ee      	b.n	8009aa6 <rclc_executor_spin_some.part.0+0x16e>
 8009ac8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009acc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f008 fa07 	bl	8011ee4 <rcl_wait_set_add_timer>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f af5f 	beq.w	800999a <rclc_executor_spin_some.part.0+0x62>
 8009adc:	e7e3      	b.n	8009aa6 <rclc_executor_spin_some.part.0+0x16e>
 8009ade:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ae2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f008 f9d0 	bl	8011e8c <rcl_wait_set_add_guard_condition>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	f43f af54 	beq.w	800999a <rclc_executor_spin_some.part.0+0x62>
 8009af2:	e7d8      	b.n	8009aa6 <rclc_executor_spin_some.part.0+0x16e>
 8009af4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009af8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009afc:	3110      	adds	r1, #16
 8009afe:	4630      	mov	r0, r6
 8009b00:	f008 ff52 	bl	80129a8 <rcl_action_wait_set_add_action_server>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	f43f af48 	beq.w	800999a <rclc_executor_spin_some.part.0+0x62>
 8009b0a:	e7cc      	b.n	8009aa6 <rclc_executor_spin_some.part.0+0x16e>
 8009b0c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009b10:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009b14:	3110      	adds	r1, #16
 8009b16:	2300      	movs	r3, #0
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f008 fd1d 	bl	8012558 <rcl_action_wait_set_add_action_client>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f43f af3b 	beq.w	800999a <rclc_executor_spin_some.part.0+0x62>
 8009b24:	e7bf      	b.n	8009aa6 <rclc_executor_spin_some.part.0+0x16e>
 8009b26:	f000 faaf 	bl	800a088 <rcutils_reset_error>
 8009b2a:	2701      	movs	r7, #1
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	b003      	add	sp, #12
 8009b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b34:	f000 faa8 	bl	800a088 <rcutils_reset_error>
 8009b38:	4638      	mov	r0, r7
 8009b3a:	b003      	add	sp, #12
 8009b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b40:	4627      	mov	r7, r4
 8009b42:	e7f3      	b.n	8009b2c <rclc_executor_spin_some.part.0+0x1f4>
 8009b44:	68ab      	ldr	r3, [r5, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 8092 	beq.w	8009c70 <rclc_executor_spin_some.part.0+0x338>
 8009b4c:	2400      	movs	r4, #0
 8009b4e:	46a0      	mov	r8, r4
 8009b50:	f240 1991 	movw	r9, #401	@ 0x191
 8009b54:	e008      	b.n	8009b68 <rclc_executor_spin_some.part.0+0x230>
 8009b56:	f7ff fa83 	bl	8009060 <_rclc_check_for_new_data>
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	b108      	cbz	r0, 8009b62 <rclc_executor_spin_some.part.0+0x22a>
 8009b5e:	4548      	cmp	r0, r9
 8009b60:	d1ee      	bne.n	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009b62:	68ab      	ldr	r3, [r5, #8]
 8009b64:	4598      	cmp	r8, r3
 8009b66:	d265      	bcs.n	8009c34 <rclc_executor_spin_some.part.0+0x2fc>
 8009b68:	686a      	ldr	r2, [r5, #4]
 8009b6a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009b6e:	4631      	mov	r1, r6
 8009b70:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009b74:	f108 0801 	add.w	r8, r8, #1
 8009b78:	f1bc 0f00 	cmp.w	ip, #0
 8009b7c:	d1eb      	bne.n	8009b56 <rclc_executor_spin_some.part.0+0x21e>
 8009b7e:	4619      	mov	r1, r3
 8009b80:	4610      	mov	r0, r2
 8009b82:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009b86:	4798      	blx	r3
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d0d9      	beq.n	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009b8c:	68ab      	ldr	r3, [r5, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0d6      	beq.n	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009b92:	f04f 0800 	mov.w	r8, #0
 8009b96:	f240 1991 	movw	r9, #401	@ 0x191
 8009b9a:	f240 2a59 	movw	sl, #601	@ 0x259
 8009b9e:	e00e      	b.n	8009bbe <rclc_executor_spin_some.part.0+0x286>
 8009ba0:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d033      	beq.n	8009c10 <rclc_executor_spin_some.part.0+0x2d8>
 8009ba8:	2b09      	cmp	r3, #9
 8009baa:	d028      	beq.n	8009bfe <rclc_executor_spin_some.part.0+0x2c6>
 8009bac:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8009bb0:	b9fb      	cbnz	r3, 8009bf2 <rclc_executor_spin_some.part.0+0x2ba>
 8009bb2:	68ab      	ldr	r3, [r5, #8]
 8009bb4:	f108 0801 	add.w	r8, r8, #1
 8009bb8:	4598      	cmp	r8, r3
 8009bba:	d2b7      	bcs.n	8009b2c <rclc_executor_spin_some.part.0+0x1f4>
 8009bbc:	2400      	movs	r4, #0
 8009bbe:	6868      	ldr	r0, [r5, #4]
 8009bc0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009bc4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009bc8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0b7      	beq.n	8009b40 <rclc_executor_spin_some.part.0+0x208>
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	f7ff fa93 	bl	80090fc <_rclc_take_new_data>
 8009bd6:	b118      	cbz	r0, 8009be0 <rclc_executor_spin_some.part.0+0x2a8>
 8009bd8:	4548      	cmp	r0, r9
 8009bda:	d001      	beq.n	8009be0 <rclc_executor_spin_some.part.0+0x2a8>
 8009bdc:	4550      	cmp	r0, sl
 8009bde:	d10c      	bne.n	8009bfa <rclc_executor_spin_some.part.0+0x2c2>
 8009be0:	686b      	ldr	r3, [r5, #4]
 8009be2:	eb13 000b 	adds.w	r0, r3, fp
 8009be6:	d021      	beq.n	8009c2c <rclc_executor_spin_some.part.0+0x2f4>
 8009be8:	7842      	ldrb	r2, [r0, #1]
 8009bea:	2a00      	cmp	r2, #0
 8009bec:	d0d8      	beq.n	8009ba0 <rclc_executor_spin_some.part.0+0x268>
 8009bee:	2a01      	cmp	r2, #1
 8009bf0:	d1df      	bne.n	8009bb2 <rclc_executor_spin_some.part.0+0x27a>
 8009bf2:	f7ff fbf7 	bl	80093e4 <_rclc_execute.part.0>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d0db      	beq.n	8009bb2 <rclc_executor_spin_some.part.0+0x27a>
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	e796      	b.n	8009b2c <rclc_executor_spin_some.part.0+0x1f4>
 8009bfe:	6843      	ldr	r3, [r0, #4]
 8009c00:	6a1a      	ldr	r2, [r3, #32]
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	d1f5      	bne.n	8009bf2 <rclc_executor_spin_some.part.0+0x2ba>
 8009c06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0d1      	beq.n	8009bb2 <rclc_executor_spin_some.part.0+0x27a>
 8009c0e:	e7f0      	b.n	8009bf2 <rclc_executor_spin_some.part.0+0x2ba>
 8009c10:	6843      	ldr	r3, [r0, #4]
 8009c12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c14:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8009c18:	d1eb      	bne.n	8009bf2 <rclc_executor_spin_some.part.0+0x2ba>
 8009c1a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	d1e7      	bne.n	8009bf2 <rclc_executor_spin_some.part.0+0x2ba>
 8009c22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0c3      	beq.n	8009bb2 <rclc_executor_spin_some.part.0+0x27a>
 8009c2a:	e7e2      	b.n	8009bf2 <rclc_executor_spin_some.part.0+0x2ba>
 8009c2c:	270b      	movs	r7, #11
 8009c2e:	e77d      	b.n	8009b2c <rclc_executor_spin_some.part.0+0x1f4>
 8009c30:	686a      	ldr	r2, [r5, #4]
 8009c32:	e6e2      	b.n	80099fa <rclc_executor_spin_some.part.0+0xc2>
 8009c34:	686a      	ldr	r2, [r5, #4]
 8009c36:	e7a2      	b.n	8009b7e <rclc_executor_spin_some.part.0+0x246>
 8009c38:	6842      	ldr	r2, [r0, #4]
 8009c3a:	6a11      	ldr	r1, [r2, #32]
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	f47f af21 	bne.w	8009a84 <rclc_executor_spin_some.part.0+0x14c>
 8009c42:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	f43f af0a 	beq.w	8009a60 <rclc_executor_spin_some.part.0+0x128>
 8009c4c:	e71a      	b.n	8009a84 <rclc_executor_spin_some.part.0+0x14c>
 8009c4e:	6842      	ldr	r2, [r0, #4]
 8009c50:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8009c52:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8009c56:	f47f af15 	bne.w	8009a84 <rclc_executor_spin_some.part.0+0x14c>
 8009c5a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8009c5e:	2900      	cmp	r1, #0
 8009c60:	f47f af10 	bne.w	8009a84 <rclc_executor_spin_some.part.0+0x14c>
 8009c64:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8009c68:	2a00      	cmp	r2, #0
 8009c6a:	f43f aef9 	beq.w	8009a60 <rclc_executor_spin_some.part.0+0x128>
 8009c6e:	e709      	b.n	8009a84 <rclc_executor_spin_some.part.0+0x14c>
 8009c70:	686a      	ldr	r2, [r5, #4]
 8009c72:	461c      	mov	r4, r3
 8009c74:	e783      	b.n	8009b7e <rclc_executor_spin_some.part.0+0x246>
 8009c76:	686a      	ldr	r2, [r5, #4]
 8009c78:	461c      	mov	r4, r3
 8009c7a:	e6be      	b.n	80099fa <rclc_executor_spin_some.part.0+0xc2>

08009c7c <rclc_executor_spin>:
 8009c7c:	b1d0      	cbz	r0, 8009cb4 <rclc_executor_spin+0x38>
 8009c7e:	b510      	push	{r4, lr}
 8009c80:	4604      	mov	r4, r0
 8009c82:	b082      	sub	sp, #8
 8009c84:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 8009c88:	6820      	ldr	r0, [r4, #0]
 8009c8a:	e9cd 2300 	strd	r2, r3, [sp]
 8009c8e:	f006 fc1f 	bl	80104d0 <rcl_context_is_valid>
 8009c92:	4601      	mov	r1, r0
 8009c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	b131      	cbz	r1, 8009caa <rclc_executor_spin+0x2e>
 8009c9c:	f7ff fe4c 	bl	8009938 <rclc_executor_spin_some.part.0>
 8009ca0:	f030 0302 	bics.w	r3, r0, #2
 8009ca4:	d0ee      	beq.n	8009c84 <rclc_executor_spin+0x8>
 8009ca6:	b002      	add	sp, #8
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	f000 f9ed 	bl	800a088 <rcutils_reset_error>
 8009cae:	2001      	movs	r0, #1
 8009cb0:	b002      	add	sp, #8
 8009cb2:	bd10      	pop	{r4, pc}
 8009cb4:	200b      	movs	r0, #11
 8009cb6:	4770      	bx	lr

08009cb8 <rclc_executor_handle_counters_zero_init>:
 8009cb8:	b130      	cbz	r0, 8009cc8 <rclc_executor_handle_counters_zero_init+0x10>
 8009cba:	b508      	push	{r3, lr}
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	f00b f90a 	bl	8014ed8 <memset>
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	bd08      	pop	{r3, pc}
 8009cc8:	200b      	movs	r0, #11
 8009cca:	4770      	bx	lr
 8009ccc:	0000      	movs	r0, r0
	...

08009cd0 <rclc_executor_handle_init>:
 8009cd0:	b168      	cbz	r0, 8009cee <rclc_executor_handle_init+0x1e>
 8009cd2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8009cf8 <rclc_executor_handle_init+0x28>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	220b      	movs	r2, #11
 8009cda:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8009cde:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009ce2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8009ce6:	8002      	strh	r2, [r0, #0]
 8009ce8:	8703      	strh	r3, [r0, #56]	@ 0x38
 8009cea:	4618      	mov	r0, r3
 8009cec:	4770      	bx	lr
 8009cee:	200b      	movs	r0, #11
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	f3af 8000 	nop.w
	...

08009d00 <rclc_support_init_with_options>:
 8009d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d04:	b083      	sub	sp, #12
 8009d06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009d08:	b340      	cbz	r0, 8009d5c <rclc_support_init_with_options+0x5c>
 8009d0a:	461d      	mov	r5, r3
 8009d0c:	b333      	cbz	r3, 8009d5c <rclc_support_init_with_options+0x5c>
 8009d0e:	b32e      	cbz	r6, 8009d5c <rclc_support_init_with_options+0x5c>
 8009d10:	46e9      	mov	r9, sp
 8009d12:	4604      	mov	r4, r0
 8009d14:	4648      	mov	r0, r9
 8009d16:	460f      	mov	r7, r1
 8009d18:	4690      	mov	r8, r2
 8009d1a:	f006 fbcf 	bl	80104bc <rcl_get_zero_initialized_context>
 8009d1e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009d22:	462a      	mov	r2, r5
 8009d24:	e884 0003 	stmia.w	r4, {r0, r1}
 8009d28:	4623      	mov	r3, r4
 8009d2a:	4641      	mov	r1, r8
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f006 fea7 	bl	8010a80 <rcl_init>
 8009d32:	4605      	mov	r5, r0
 8009d34:	b960      	cbnz	r0, 8009d50 <rclc_support_init_with_options+0x50>
 8009d36:	60a6      	str	r6, [r4, #8]
 8009d38:	4632      	mov	r2, r6
 8009d3a:	f104 010c 	add.w	r1, r4, #12
 8009d3e:	2003      	movs	r0, #3
 8009d40:	f007 f896 	bl	8010e70 <rcl_clock_init>
 8009d44:	4605      	mov	r5, r0
 8009d46:	b918      	cbnz	r0, 8009d50 <rclc_support_init_with_options+0x50>
 8009d48:	4628      	mov	r0, r5
 8009d4a:	b003      	add	sp, #12
 8009d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d50:	f000 f99a 	bl	800a088 <rcutils_reset_error>
 8009d54:	4628      	mov	r0, r5
 8009d56:	b003      	add	sp, #12
 8009d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d5c:	250b      	movs	r5, #11
 8009d5e:	4628      	mov	r0, r5
 8009d60:	b003      	add	sp, #12
 8009d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d66:	bf00      	nop

08009d68 <rclc_node_init_default>:
 8009d68:	b3b8      	cbz	r0, 8009dda <rclc_node_init_default+0x72>
 8009d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d6e:	460d      	mov	r5, r1
 8009d70:	b0a1      	sub	sp, #132	@ 0x84
 8009d72:	b329      	cbz	r1, 8009dc0 <rclc_node_init_default+0x58>
 8009d74:	4616      	mov	r6, r2
 8009d76:	b31a      	cbz	r2, 8009dc0 <rclc_node_init_default+0x58>
 8009d78:	461f      	mov	r7, r3
 8009d7a:	b30b      	cbz	r3, 8009dc0 <rclc_node_init_default+0x58>
 8009d7c:	f10d 0810 	add.w	r8, sp, #16
 8009d80:	4604      	mov	r4, r0
 8009d82:	4640      	mov	r0, r8
 8009d84:	f7fe feec 	bl	8008b60 <rcl_get_zero_initialized_node>
 8009d88:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009d8c:	f10d 0918 	add.w	r9, sp, #24
 8009d90:	e884 0003 	stmia.w	r4, {r0, r1}
 8009d94:	4648      	mov	r0, r9
 8009d96:	f7ff f85b 	bl	8008e50 <rcl_node_get_default_options>
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7fe fee0 	bl	8008b60 <rcl_get_zero_initialized_node>
 8009da0:	f8cd 9000 	str.w	r9, [sp]
 8009da4:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009da8:	463b      	mov	r3, r7
 8009daa:	e884 0003 	stmia.w	r4, {r0, r1}
 8009dae:	4632      	mov	r2, r6
 8009db0:	4629      	mov	r1, r5
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7fe fede 	bl	8008b74 <rcl_node_init>
 8009db8:	b930      	cbnz	r0, 8009dc8 <rclc_node_init_default+0x60>
 8009dba:	b021      	add	sp, #132	@ 0x84
 8009dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc0:	200b      	movs	r0, #11
 8009dc2:	b021      	add	sp, #132	@ 0x84
 8009dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc8:	9003      	str	r0, [sp, #12]
 8009dca:	f000 f95d 	bl	800a088 <rcutils_reset_error>
 8009dce:	f000 f95b 	bl	800a088 <rcutils_reset_error>
 8009dd2:	9803      	ldr	r0, [sp, #12]
 8009dd4:	b021      	add	sp, #132	@ 0x84
 8009dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dda:	200b      	movs	r0, #11
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop

08009de0 <rclc_timer_init_default>:
 8009de0:	b360      	cbz	r0, 8009e3c <rclc_timer_init_default+0x5c>
 8009de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de6:	460e      	mov	r6, r1
 8009de8:	b08a      	sub	sp, #40	@ 0x28
 8009dea:	b319      	cbz	r1, 8009e34 <rclc_timer_init_default+0x54>
 8009dec:	4690      	mov	r8, r2
 8009dee:	461f      	mov	r7, r3
 8009df0:	4605      	mov	r5, r0
 8009df2:	f007 fa1b 	bl	801122c <rcl_get_zero_initialized_timer>
 8009df6:	68b4      	ldr	r4, [r6, #8]
 8009df8:	6028      	str	r0, [r5, #0]
 8009dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009dfc:	f10d 0c0c 	add.w	ip, sp, #12
 8009e00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	f8cc 3000 	str.w	r3, [ip]
 8009e0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e0c:	9302      	str	r3, [sp, #8]
 8009e0e:	e9cd 8700 	strd	r8, r7, [sp]
 8009e12:	4628      	mov	r0, r5
 8009e14:	4632      	mov	r2, r6
 8009e16:	f106 010c 	add.w	r1, r6, #12
 8009e1a:	f007 fa0d 	bl	8011238 <rcl_timer_init>
 8009e1e:	b910      	cbnz	r0, 8009e26 <rclc_timer_init_default+0x46>
 8009e20:	b00a      	add	sp, #40	@ 0x28
 8009e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e26:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e28:	f000 f92e 	bl	800a088 <rcutils_reset_error>
 8009e2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e2e:	b00a      	add	sp, #40	@ 0x28
 8009e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e34:	200b      	movs	r0, #11
 8009e36:	b00a      	add	sp, #40	@ 0x28
 8009e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e3c:	200b      	movs	r0, #11
 8009e3e:	4770      	bx	lr

08009e40 <__default_zero_allocate>:
 8009e40:	f00a bb5a 	b.w	80144f8 <calloc>

08009e44 <__default_reallocate>:
 8009e44:	f00a bcf8 	b.w	8014838 <realloc>

08009e48 <__default_deallocate>:
 8009e48:	f00a bbd4 	b.w	80145f4 <free>

08009e4c <__default_allocate>:
 8009e4c:	f00a bbca 	b.w	80145e4 <malloc>

08009e50 <rcutils_get_zero_initialized_allocator>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	4c05      	ldr	r4, [pc, #20]	@ (8009e68 <rcutils_get_zero_initialized_allocator+0x18>)
 8009e54:	4686      	mov	lr, r0
 8009e56:	4684      	mov	ip, r0
 8009e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	f8cc 3000 	str.w	r3, [ip]
 8009e64:	4670      	mov	r0, lr
 8009e66:	bd10      	pop	{r4, pc}
 8009e68:	080166d8 	.word	0x080166d8

08009e6c <rcutils_set_default_allocator>:
 8009e6c:	b1a8      	cbz	r0, 8009e9a <rcutils_set_default_allocator+0x2e>
 8009e6e:	6802      	ldr	r2, [r0, #0]
 8009e70:	b1a2      	cbz	r2, 8009e9c <rcutils_set_default_allocator+0x30>
 8009e72:	6841      	ldr	r1, [r0, #4]
 8009e74:	b1a1      	cbz	r1, 8009ea0 <rcutils_set_default_allocator+0x34>
 8009e76:	b410      	push	{r4}
 8009e78:	68c4      	ldr	r4, [r0, #12]
 8009e7a:	b164      	cbz	r4, 8009e96 <rcutils_set_default_allocator+0x2a>
 8009e7c:	6880      	ldr	r0, [r0, #8]
 8009e7e:	b138      	cbz	r0, 8009e90 <rcutils_set_default_allocator+0x24>
 8009e80:	4b08      	ldr	r3, [pc, #32]	@ (8009ea4 <rcutils_set_default_allocator+0x38>)
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	2200      	movs	r2, #0
 8009e86:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8009e8a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8009e8e:	2001      	movs	r0, #1
 8009e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	4620      	mov	r0, r4
 8009e98:	e7fa      	b.n	8009e90 <rcutils_set_default_allocator+0x24>
 8009e9a:	4770      	bx	lr
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4770      	bx	lr
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	4770      	bx	lr
 8009ea4:	20000014 	.word	0x20000014

08009ea8 <rcutils_get_default_allocator>:
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	4c05      	ldr	r4, [pc, #20]	@ (8009ec0 <rcutils_get_default_allocator+0x18>)
 8009eac:	4686      	mov	lr, r0
 8009eae:	4684      	mov	ip, r0
 8009eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009eb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	f8cc 3000 	str.w	r3, [ip]
 8009ebc:	4670      	mov	r0, lr
 8009ebe:	bd10      	pop	{r4, pc}
 8009ec0:	20000014 	.word	0x20000014

08009ec4 <rcutils_allocator_is_valid>:
 8009ec4:	b158      	cbz	r0, 8009ede <rcutils_allocator_is_valid+0x1a>
 8009ec6:	6803      	ldr	r3, [r0, #0]
 8009ec8:	b143      	cbz	r3, 8009edc <rcutils_allocator_is_valid+0x18>
 8009eca:	6843      	ldr	r3, [r0, #4]
 8009ecc:	b133      	cbz	r3, 8009edc <rcutils_allocator_is_valid+0x18>
 8009ece:	68c3      	ldr	r3, [r0, #12]
 8009ed0:	b123      	cbz	r3, 8009edc <rcutils_allocator_is_valid+0x18>
 8009ed2:	6880      	ldr	r0, [r0, #8]
 8009ed4:	3800      	subs	r0, #0
 8009ed6:	bf18      	it	ne
 8009ed8:	2001      	movne	r0, #1
 8009eda:	4770      	bx	lr
 8009edc:	4618      	mov	r0, r3
 8009ede:	4770      	bx	lr

08009ee0 <__atomic_load_8>:
 8009ee0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8009ee4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8009ee8:	4a15      	ldr	r2, [pc, #84]	@ (8009f40 <__atomic_load_8+0x60>)
 8009eea:	4b16      	ldr	r3, [pc, #88]	@ (8009f44 <__atomic_load_8+0x64>)
 8009eec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009ef0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8009ef4:	fb02 f101 	mul.w	r1, r2, r1
 8009ef8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8009efc:	fba3 2301 	umull	r2, r3, r3, r1
 8009f00:	091b      	lsrs	r3, r3, #4
 8009f02:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009f06:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8009f0a:	b4d0      	push	{r4, r6, r7}
 8009f0c:	4c0e      	ldr	r4, [pc, #56]	@ (8009f48 <__atomic_load_8+0x68>)
 8009f0e:	1ac9      	subs	r1, r1, r3
 8009f10:	1862      	adds	r2, r4, r1
 8009f12:	f04f 0c01 	mov.w	ip, #1
 8009f16:	e8d2 3f4f 	ldrexb	r3, [r2]
 8009f1a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8009f1e:	2e00      	cmp	r6, #0
 8009f20:	d1f9      	bne.n	8009f16 <__atomic_load_8+0x36>
 8009f22:	f3bf 8f5b 	dmb	ish
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1f4      	bne.n	8009f16 <__atomic_load_8+0x36>
 8009f2c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8009f30:	f3bf 8f5b 	dmb	ish
 8009f34:	5463      	strb	r3, [r4, r1]
 8009f36:	4630      	mov	r0, r6
 8009f38:	4639      	mov	r1, r7
 8009f3a:	bcd0      	pop	{r4, r6, r7}
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	27d4eb2d 	.word	0x27d4eb2d
 8009f44:	b21642c9 	.word	0xb21642c9
 8009f48:	200061d0 	.word	0x200061d0

08009f4c <__atomic_store_8>:
 8009f4c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8009f50:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009f5a:	4c14      	ldr	r4, [pc, #80]	@ (8009fac <__atomic_store_8+0x60>)
 8009f5c:	4d14      	ldr	r5, [pc, #80]	@ (8009fb0 <__atomic_store_8+0x64>)
 8009f5e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8009f62:	fb04 f101 	mul.w	r1, r4, r1
 8009f66:	4c13      	ldr	r4, [pc, #76]	@ (8009fb4 <__atomic_store_8+0x68>)
 8009f68:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8009f6c:	fba4 4e01 	umull	r4, lr, r4, r1
 8009f70:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8009f74:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8009f78:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8009f7c:	eba1 0e0e 	sub.w	lr, r1, lr
 8009f80:	eb05 0c0e 	add.w	ip, r5, lr
 8009f84:	f04f 0401 	mov.w	r4, #1
 8009f88:	e8dc 1f4f 	ldrexb	r1, [ip]
 8009f8c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	d1f9      	bne.n	8009f88 <__atomic_store_8+0x3c>
 8009f94:	f3bf 8f5b 	dmb	ish
 8009f98:	b2c9      	uxtb	r1, r1
 8009f9a:	2900      	cmp	r1, #0
 8009f9c:	d1f4      	bne.n	8009f88 <__atomic_store_8+0x3c>
 8009f9e:	e9c0 2300 	strd	r2, r3, [r0]
 8009fa2:	f3bf 8f5b 	dmb	ish
 8009fa6:	f805 100e 	strb.w	r1, [r5, lr]
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	27d4eb2d 	.word	0x27d4eb2d
 8009fb0:	200061d0 	.word	0x200061d0
 8009fb4:	b21642c9 	.word	0xb21642c9

08009fb8 <__atomic_exchange_8>:
 8009fb8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8009fbc:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8009fc0:	4916      	ldr	r1, [pc, #88]	@ (800a01c <__atomic_exchange_8+0x64>)
 8009fc2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8009fc6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8009fca:	fb01 fc0c 	mul.w	ip, r1, ip
 8009fce:	4914      	ldr	r1, [pc, #80]	@ (800a020 <__atomic_exchange_8+0x68>)
 8009fd0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	fba1 010c 	umull	r0, r1, r1, ip
 8009fdc:	0909      	lsrs	r1, r1, #4
 8009fde:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8009fe2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8009fe6:	4e0f      	ldr	r6, [pc, #60]	@ (800a024 <__atomic_exchange_8+0x6c>)
 8009fe8:	ebac 0c01 	sub.w	ip, ip, r1
 8009fec:	eb06 010c 	add.w	r1, r6, ip
 8009ff0:	f04f 0e01 	mov.w	lr, #1
 8009ff4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8009ff8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d1f9      	bne.n	8009ff4 <__atomic_exchange_8+0x3c>
 800a000:	f3bf 8f5b 	dmb	ish
 800a004:	b2e4      	uxtb	r4, r4
 800a006:	2c00      	cmp	r4, #0
 800a008:	d1f4      	bne.n	8009ff4 <__atomic_exchange_8+0x3c>
 800a00a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a00e:	e9c5 2300 	strd	r2, r3, [r5]
 800a012:	f3bf 8f5b 	dmb	ish
 800a016:	f806 400c 	strb.w	r4, [r6, ip]
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	27d4eb2d 	.word	0x27d4eb2d
 800a020:	b21642c9 	.word	0xb21642c9
 800a024:	200061d0 	.word	0x200061d0

0800a028 <rcutils_get_env>:
 800a028:	b168      	cbz	r0, 800a046 <rcutils_get_env+0x1e>
 800a02a:	b510      	push	{r4, lr}
 800a02c:	460c      	mov	r4, r1
 800a02e:	b129      	cbz	r1, 800a03c <rcutils_get_env+0x14>
 800a030:	f00a fa90 	bl	8014554 <getenv>
 800a034:	b120      	cbz	r0, 800a040 <rcutils_get_env+0x18>
 800a036:	6020      	str	r0, [r4, #0]
 800a038:	2000      	movs	r0, #0
 800a03a:	bd10      	pop	{r4, pc}
 800a03c:	4803      	ldr	r0, [pc, #12]	@ (800a04c <rcutils_get_env+0x24>)
 800a03e:	bd10      	pop	{r4, pc}
 800a040:	4b03      	ldr	r3, [pc, #12]	@ (800a050 <rcutils_get_env+0x28>)
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	bd10      	pop	{r4, pc}
 800a046:	4803      	ldr	r0, [pc, #12]	@ (800a054 <rcutils_get_env+0x2c>)
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	08015e88 	.word	0x08015e88
 800a050:	08016528 	.word	0x08016528
 800a054:	08015e6c 	.word	0x08015e6c

0800a058 <rcutils_get_error_string>:
 800a058:	4b06      	ldr	r3, [pc, #24]	@ (800a074 <rcutils_get_error_string+0x1c>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	b13b      	cbz	r3, 800a06e <rcutils_get_error_string+0x16>
 800a05e:	4b06      	ldr	r3, [pc, #24]	@ (800a078 <rcutils_get_error_string+0x20>)
 800a060:	781a      	ldrb	r2, [r3, #0]
 800a062:	b90a      	cbnz	r2, 800a068 <rcutils_get_error_string+0x10>
 800a064:	2201      	movs	r2, #1
 800a066:	701a      	strb	r2, [r3, #0]
 800a068:	4b04      	ldr	r3, [pc, #16]	@ (800a07c <rcutils_get_error_string+0x24>)
 800a06a:	7818      	ldrb	r0, [r3, #0]
 800a06c:	4770      	bx	lr
 800a06e:	4b04      	ldr	r3, [pc, #16]	@ (800a080 <rcutils_get_error_string+0x28>)
 800a070:	7818      	ldrb	r0, [r3, #0]
 800a072:	4770      	bx	lr
 800a074:	200061e7 	.word	0x200061e7
 800a078:	200061f9 	.word	0x200061f9
 800a07c:	200061f8 	.word	0x200061f8
 800a080:	08016374 	.word	0x08016374
 800a084:	00000000 	.word	0x00000000

0800a088 <rcutils_reset_error>:
 800a088:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a0a8 <rcutils_reset_error+0x20>
 800a08c:	4a08      	ldr	r2, [pc, #32]	@ (800a0b0 <rcutils_reset_error+0x28>)
 800a08e:	4809      	ldr	r0, [pc, #36]	@ (800a0b4 <rcutils_reset_error+0x2c>)
 800a090:	4909      	ldr	r1, [pc, #36]	@ (800a0b8 <rcutils_reset_error+0x30>)
 800a092:	2300      	movs	r3, #0
 800a094:	8013      	strh	r3, [r2, #0]
 800a096:	ed82 7b02 	vstr	d7, [r2, #8]
 800a09a:	4a08      	ldr	r2, [pc, #32]	@ (800a0bc <rcutils_reset_error+0x34>)
 800a09c:	7003      	strb	r3, [r0, #0]
 800a09e:	700b      	strb	r3, [r1, #0]
 800a0a0:	7013      	strb	r3, [r2, #0]
 800a0a2:	4770      	bx	lr
 800a0a4:	f3af 8000 	nop.w
	...
 800a0b0:	200061e8 	.word	0x200061e8
 800a0b4:	200061f9 	.word	0x200061f9
 800a0b8:	200061f8 	.word	0x200061f8
 800a0bc:	200061e7 	.word	0x200061e7

0800a0c0 <rcutils_format_string_limit>:
 800a0c0:	b40f      	push	{r0, r1, r2, r3}
 800a0c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	ac08      	add	r4, sp, #32
 800a0c8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800a0ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a0ce:	b34e      	cbz	r6, 800a124 <rcutils_format_string_limit+0x64>
 800a0d0:	a808      	add	r0, sp, #32
 800a0d2:	f7ff fef7 	bl	8009ec4 <rcutils_allocator_is_valid>
 800a0d6:	b328      	cbz	r0, 800a124 <rcutils_format_string_limit+0x64>
 800a0d8:	2100      	movs	r1, #0
 800a0da:	ab0f      	add	r3, sp, #60	@ 0x3c
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4608      	mov	r0, r1
 800a0e0:	e9cd 3300 	strd	r3, r3, [sp]
 800a0e4:	f000 f8f4 	bl	800a2d0 <rcutils_vsnprintf>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	d01a      	beq.n	800a124 <rcutils_format_string_limit+0x64>
 800a0ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a0f2:	1c47      	adds	r7, r0, #1
 800a0f4:	429f      	cmp	r7, r3
 800a0f6:	bf84      	itt	hi
 800a0f8:	461f      	movhi	r7, r3
 800a0fa:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800a0fe:	4638      	mov	r0, r7
 800a100:	9b08      	ldr	r3, [sp, #32]
 800a102:	4798      	blx	r3
 800a104:	4604      	mov	r4, r0
 800a106:	b168      	cbz	r0, 800a124 <rcutils_format_string_limit+0x64>
 800a108:	9b01      	ldr	r3, [sp, #4]
 800a10a:	4632      	mov	r2, r6
 800a10c:	4639      	mov	r1, r7
 800a10e:	f000 f8df 	bl	800a2d0 <rcutils_vsnprintf>
 800a112:	2800      	cmp	r0, #0
 800a114:	db02      	blt.n	800a11c <rcutils_format_string_limit+0x5c>
 800a116:	2300      	movs	r3, #0
 800a118:	5563      	strb	r3, [r4, r5]
 800a11a:	e004      	b.n	800a126 <rcutils_format_string_limit+0x66>
 800a11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a11e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a120:	4620      	mov	r0, r4
 800a122:	4798      	blx	r3
 800a124:	2400      	movs	r4, #0
 800a126:	4620      	mov	r0, r4
 800a128:	b003      	add	sp, #12
 800a12a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a12e:	b004      	add	sp, #16
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop

0800a134 <rcutils_repl_str>:
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	ed2d 8b02 	vpush	{d8}
 800a13c:	b087      	sub	sp, #28
 800a13e:	4680      	mov	r8, r0
 800a140:	4608      	mov	r0, r1
 800a142:	f8cd 8004 	str.w	r8, [sp, #4]
 800a146:	ee08 2a10 	vmov	s16, r2
 800a14a:	468a      	mov	sl, r1
 800a14c:	4699      	mov	r9, r3
 800a14e:	f7f6 f871 	bl	8000234 <strlen>
 800a152:	2600      	movs	r6, #0
 800a154:	4647      	mov	r7, r8
 800a156:	9002      	str	r0, [sp, #8]
 800a158:	46b3      	mov	fp, r6
 800a15a:	2510      	movs	r5, #16
 800a15c:	46b0      	mov	r8, r6
 800a15e:	e01d      	b.n	800a19c <rcutils_repl_str+0x68>
 800a160:	f10b 0b01 	add.w	fp, fp, #1
 800a164:	455e      	cmp	r6, fp
 800a166:	d211      	bcs.n	800a18c <rcutils_repl_str+0x58>
 800a168:	442e      	add	r6, r5
 800a16a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a16e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a172:	00b1      	lsls	r1, r6, #2
 800a174:	4798      	blx	r3
 800a176:	2800      	cmp	r0, #0
 800a178:	f000 8088 	beq.w	800a28c <rcutils_repl_str+0x158>
 800a17c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a180:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800a184:	4680      	mov	r8, r0
 800a186:	bf28      	it	cs
 800a188:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800a18c:	9a01      	ldr	r2, [sp, #4]
 800a18e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800a192:	1aa2      	subs	r2, r4, r2
 800a194:	f843 2c04 	str.w	r2, [r3, #-4]
 800a198:	9b02      	ldr	r3, [sp, #8]
 800a19a:	18e7      	adds	r7, r4, r3
 800a19c:	4651      	mov	r1, sl
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f00a fec1 	bl	8014f26 <strstr>
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	2c00      	cmp	r4, #0
 800a1aa:	d1d9      	bne.n	800a160 <rcutils_repl_str+0x2c>
 800a1ac:	46b8      	mov	r8, r7
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	f7f6 f83f 	bl	8000234 <strlen>
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	eba8 0303 	sub.w	r3, r8, r3
 800a1bc:	181c      	adds	r4, r3, r0
 800a1be:	9404      	str	r4, [sp, #16]
 800a1c0:	f1bb 0f00 	cmp.w	fp, #0
 800a1c4:	d04a      	beq.n	800a25c <rcutils_repl_str+0x128>
 800a1c6:	ee18 0a10 	vmov	r0, s16
 800a1ca:	f7f6 f833 	bl	8000234 <strlen>
 800a1ce:	9b02      	ldr	r3, [sp, #8]
 800a1d0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800a1d4:	1ac3      	subs	r3, r0, r3
 800a1d6:	fb0b 4303 	mla	r3, fp, r3, r4
 800a1da:	461a      	mov	r2, r3
 800a1dc:	9305      	str	r3, [sp, #20]
 800a1de:	4606      	mov	r6, r0
 800a1e0:	f8d9 3000 	ldr.w	r3, [r9]
 800a1e4:	1c50      	adds	r0, r2, #1
 800a1e6:	4798      	blx	r3
 800a1e8:	9003      	str	r0, [sp, #12]
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d04f      	beq.n	800a28e <rcutils_repl_str+0x15a>
 800a1ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	f00a ff38 	bl	801506a <memcpy>
 800a1fa:	683d      	ldr	r5, [r7, #0]
 800a1fc:	9b03      	ldr	r3, [sp, #12]
 800a1fe:	9701      	str	r7, [sp, #4]
 800a200:	46ba      	mov	sl, r7
 800a202:	441d      	add	r5, r3
 800a204:	9f02      	ldr	r7, [sp, #8]
 800a206:	f8cd 9008 	str.w	r9, [sp, #8]
 800a20a:	2401      	movs	r4, #1
 800a20c:	46d1      	mov	r9, sl
 800a20e:	ee18 aa10 	vmov	sl, s16
 800a212:	e00a      	b.n	800a22a <rcutils_repl_str+0xf6>
 800a214:	f8d9 5000 	ldr.w	r5, [r9]
 800a218:	1aaa      	subs	r2, r5, r2
 800a21a:	1885      	adds	r5, r0, r2
 800a21c:	f00a ff25 	bl	801506a <memcpy>
 800a220:	45a3      	cmp	fp, r4
 800a222:	f104 0201 	add.w	r2, r4, #1
 800a226:	d935      	bls.n	800a294 <rcutils_repl_str+0x160>
 800a228:	4614      	mov	r4, r2
 800a22a:	4632      	mov	r2, r6
 800a22c:	4651      	mov	r1, sl
 800a22e:	4628      	mov	r0, r5
 800a230:	f00a ff1b 	bl	801506a <memcpy>
 800a234:	f859 2b04 	ldr.w	r2, [r9], #4
 800a238:	45a3      	cmp	fp, r4
 800a23a:	443a      	add	r2, r7
 800a23c:	eb05 0006 	add.w	r0, r5, r6
 800a240:	eb08 0102 	add.w	r1, r8, r2
 800a244:	d1e6      	bne.n	800a214 <rcutils_repl_str+0xe0>
 800a246:	9b04      	ldr	r3, [sp, #16]
 800a248:	1a9a      	subs	r2, r3, r2
 800a24a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800a24e:	f00a ff0c 	bl	801506a <memcpy>
 800a252:	9a03      	ldr	r2, [sp, #12]
 800a254:	9905      	ldr	r1, [sp, #20]
 800a256:	2300      	movs	r3, #0
 800a258:	5453      	strb	r3, [r2, r1]
 800a25a:	e00b      	b.n	800a274 <rcutils_repl_str+0x140>
 800a25c:	4620      	mov	r0, r4
 800a25e:	f8d9 3000 	ldr.w	r3, [r9]
 800a262:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800a266:	3001      	adds	r0, #1
 800a268:	4798      	blx	r3
 800a26a:	9003      	str	r0, [sp, #12]
 800a26c:	b110      	cbz	r0, 800a274 <rcutils_repl_str+0x140>
 800a26e:	9901      	ldr	r1, [sp, #4]
 800a270:	f00a fef3 	bl	801505a <strcpy>
 800a274:	4638      	mov	r0, r7
 800a276:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a27a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800a27e:	4798      	blx	r3
 800a280:	9803      	ldr	r0, [sp, #12]
 800a282:	b007      	add	sp, #28
 800a284:	ecbd 8b02 	vpop	{d8}
 800a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28c:	4647      	mov	r7, r8
 800a28e:	2300      	movs	r3, #0
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	e7ef      	b.n	800a274 <rcutils_repl_str+0x140>
 800a294:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800a298:	e7db      	b.n	800a252 <rcutils_repl_str+0x11e>
 800a29a:	bf00      	nop

0800a29c <rcutils_snprintf>:
 800a29c:	b40c      	push	{r2, r3}
 800a29e:	b530      	push	{r4, r5, lr}
 800a2a0:	b083      	sub	sp, #12
 800a2a2:	ab06      	add	r3, sp, #24
 800a2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	b152      	cbz	r2, 800a2c2 <rcutils_snprintf+0x26>
 800a2ac:	b138      	cbz	r0, 800a2be <rcutils_snprintf+0x22>
 800a2ae:	b141      	cbz	r1, 800a2c2 <rcutils_snprintf+0x26>
 800a2b0:	f00a fd46 	bl	8014d40 <vsniprintf>
 800a2b4:	b003      	add	sp, #12
 800a2b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2ba:	b002      	add	sp, #8
 800a2bc:	4770      	bx	lr
 800a2be:	2900      	cmp	r1, #0
 800a2c0:	d0f6      	beq.n	800a2b0 <rcutils_snprintf+0x14>
 800a2c2:	f00a fe9d 	bl	8015000 <__errno>
 800a2c6:	2316      	movs	r3, #22
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2ce:	e7f1      	b.n	800a2b4 <rcutils_snprintf+0x18>

0800a2d0 <rcutils_vsnprintf>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	b13a      	cbz	r2, 800a2e4 <rcutils_vsnprintf+0x14>
 800a2d4:	b120      	cbz	r0, 800a2e0 <rcutils_vsnprintf+0x10>
 800a2d6:	b129      	cbz	r1, 800a2e4 <rcutils_vsnprintf+0x14>
 800a2d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2dc:	f00a bd30 	b.w	8014d40 <vsniprintf>
 800a2e0:	2900      	cmp	r1, #0
 800a2e2:	d0f9      	beq.n	800a2d8 <rcutils_vsnprintf+0x8>
 800a2e4:	f00a fe8c 	bl	8015000 <__errno>
 800a2e8:	2316      	movs	r3, #22
 800a2ea:	6003      	str	r3, [r0, #0]
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	bf00      	nop

0800a2f4 <rcutils_strdup>:
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	b570      	push	{r4, r5, r6, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	ac07      	add	r4, sp, #28
 800a2fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800a300:	4605      	mov	r5, r0
 800a302:	b1b0      	cbz	r0, 800a332 <rcutils_strdup+0x3e>
 800a304:	f7f5 ff96 	bl	8000234 <strlen>
 800a308:	1c42      	adds	r2, r0, #1
 800a30a:	9b07      	ldr	r3, [sp, #28]
 800a30c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a30e:	9201      	str	r2, [sp, #4]
 800a310:	4606      	mov	r6, r0
 800a312:	4610      	mov	r0, r2
 800a314:	4798      	blx	r3
 800a316:	4604      	mov	r4, r0
 800a318:	b128      	cbz	r0, 800a326 <rcutils_strdup+0x32>
 800a31a:	9a01      	ldr	r2, [sp, #4]
 800a31c:	4629      	mov	r1, r5
 800a31e:	f00a fea4 	bl	801506a <memcpy>
 800a322:	2300      	movs	r3, #0
 800a324:	55a3      	strb	r3, [r4, r6]
 800a326:	4620      	mov	r0, r4
 800a328:	b002      	add	sp, #8
 800a32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a32e:	b004      	add	sp, #16
 800a330:	4770      	bx	lr
 800a332:	4604      	mov	r4, r0
 800a334:	e7f7      	b.n	800a326 <rcutils_strdup+0x32>
 800a336:	bf00      	nop

0800a338 <rcutils_strndup>:
 800a338:	b082      	sub	sp, #8
 800a33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33c:	ac06      	add	r4, sp, #24
 800a33e:	e884 000c 	stmia.w	r4, {r2, r3}
 800a342:	4605      	mov	r5, r0
 800a344:	b188      	cbz	r0, 800a36a <rcutils_strndup+0x32>
 800a346:	1c4f      	adds	r7, r1, #1
 800a348:	460e      	mov	r6, r1
 800a34a:	4638      	mov	r0, r7
 800a34c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a34e:	4790      	blx	r2
 800a350:	4604      	mov	r4, r0
 800a352:	b128      	cbz	r0, 800a360 <rcutils_strndup+0x28>
 800a354:	463a      	mov	r2, r7
 800a356:	4629      	mov	r1, r5
 800a358:	f00a fe87 	bl	801506a <memcpy>
 800a35c:	2300      	movs	r3, #0
 800a35e:	55a3      	strb	r3, [r4, r6]
 800a360:	4620      	mov	r0, r4
 800a362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a366:	b002      	add	sp, #8
 800a368:	4770      	bx	lr
 800a36a:	4604      	mov	r4, r0
 800a36c:	e7f8      	b.n	800a360 <rcutils_strndup+0x28>
 800a36e:	bf00      	nop

0800a370 <rcutils_get_zero_initialized_string_map>:
 800a370:	4b01      	ldr	r3, [pc, #4]	@ (800a378 <rcutils_get_zero_initialized_string_map+0x8>)
 800a372:	2000      	movs	r0, #0
 800a374:	6018      	str	r0, [r3, #0]
 800a376:	4770      	bx	lr
 800a378:	200061fc 	.word	0x200061fc

0800a37c <rcutils_string_map_reserve>:
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d05f      	beq.n	800a440 <rcutils_string_map_reserve+0xc4>
 800a380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a384:	460c      	mov	r4, r1
 800a386:	6801      	ldr	r1, [r0, #0]
 800a388:	b082      	sub	sp, #8
 800a38a:	4605      	mov	r5, r0
 800a38c:	b129      	cbz	r1, 800a39a <rcutils_string_map_reserve+0x1e>
 800a38e:	68cb      	ldr	r3, [r1, #12]
 800a390:	42a3      	cmp	r3, r4
 800a392:	d906      	bls.n	800a3a2 <rcutils_string_map_reserve+0x26>
 800a394:	461c      	mov	r4, r3
 800a396:	2900      	cmp	r1, #0
 800a398:	d1f9      	bne.n	800a38e <rcutils_string_map_reserve+0x12>
 800a39a:	201f      	movs	r0, #31
 800a39c:	b002      	add	sp, #8
 800a39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a2:	688b      	ldr	r3, [r1, #8]
 800a3a4:	42a3      	cmp	r3, r4
 800a3a6:	d047      	beq.n	800a438 <rcutils_string_map_reserve+0xbc>
 800a3a8:	6a0e      	ldr	r6, [r1, #32]
 800a3aa:	2c00      	cmp	r4, #0
 800a3ac:	d034      	beq.n	800a418 <rcutils_string_map_reserve+0x9c>
 800a3ae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800a3b2:	d243      	bcs.n	800a43c <rcutils_string_map_reserve+0xc0>
 800a3b4:	00a7      	lsls	r7, r4, #2
 800a3b6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800a3ba:	6808      	ldr	r0, [r1, #0]
 800a3bc:	4632      	mov	r2, r6
 800a3be:	4639      	mov	r1, r7
 800a3c0:	47c0      	blx	r8
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d03a      	beq.n	800a43c <rcutils_string_map_reserve+0xc0>
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	6018      	str	r0, [r3, #0]
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	6858      	ldr	r0, [r3, #4]
 800a3d0:	47c0      	blx	r8
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d032      	beq.n	800a43c <rcutils_string_map_reserve+0xc0>
 800a3d6:	682d      	ldr	r5, [r5, #0]
 800a3d8:	68ab      	ldr	r3, [r5, #8]
 800a3da:	6068      	str	r0, [r5, #4]
 800a3dc:	42a3      	cmp	r3, r4
 800a3de:	d226      	bcs.n	800a42e <rcutils_string_map_reserve+0xb2>
 800a3e0:	682a      	ldr	r2, [r5, #0]
 800a3e2:	eb00 0c07 	add.w	ip, r0, r7
 800a3e6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800a3ea:	45e6      	cmp	lr, ip
 800a3ec:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800a3f0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800a3f4:	d203      	bcs.n	800a3fe <rcutils_string_map_reserve+0x82>
 800a3f6:	eb02 0c07 	add.w	ip, r2, r7
 800a3fa:	4566      	cmp	r6, ip
 800a3fc:	d322      	bcc.n	800a444 <rcutils_string_map_reserve+0xc8>
 800a3fe:	1ae3      	subs	r3, r4, r3
 800a400:	009a      	lsls	r2, r3, #2
 800a402:	4670      	mov	r0, lr
 800a404:	2100      	movs	r1, #0
 800a406:	9201      	str	r2, [sp, #4]
 800a408:	f00a fd66 	bl	8014ed8 <memset>
 800a40c:	9a01      	ldr	r2, [sp, #4]
 800a40e:	2100      	movs	r1, #0
 800a410:	4630      	mov	r0, r6
 800a412:	f00a fd61 	bl	8014ed8 <memset>
 800a416:	e00a      	b.n	800a42e <rcutils_string_map_reserve+0xb2>
 800a418:	694f      	ldr	r7, [r1, #20]
 800a41a:	6808      	ldr	r0, [r1, #0]
 800a41c:	4631      	mov	r1, r6
 800a41e:	47b8      	blx	r7
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	4631      	mov	r1, r6
 800a424:	6858      	ldr	r0, [r3, #4]
 800a426:	601c      	str	r4, [r3, #0]
 800a428:	47b8      	blx	r7
 800a42a:	682d      	ldr	r5, [r5, #0]
 800a42c:	606c      	str	r4, [r5, #4]
 800a42e:	2000      	movs	r0, #0
 800a430:	60ac      	str	r4, [r5, #8]
 800a432:	b002      	add	sp, #8
 800a434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a438:	2000      	movs	r0, #0
 800a43a:	e7af      	b.n	800a39c <rcutils_string_map_reserve+0x20>
 800a43c:	200a      	movs	r0, #10
 800a43e:	e7ad      	b.n	800a39c <rcutils_string_map_reserve+0x20>
 800a440:	200b      	movs	r0, #11
 800a442:	4770      	bx	lr
 800a444:	1f0b      	subs	r3, r1, #4
 800a446:	4418      	add	r0, r3
 800a448:	4413      	add	r3, r2
 800a44a:	3a04      	subs	r2, #4
 800a44c:	4417      	add	r7, r2
 800a44e:	2200      	movs	r2, #0
 800a450:	f843 2f04 	str.w	r2, [r3, #4]!
 800a454:	42bb      	cmp	r3, r7
 800a456:	f840 2f04 	str.w	r2, [r0, #4]!
 800a45a:	d1f9      	bne.n	800a450 <rcutils_string_map_reserve+0xd4>
 800a45c:	e7e7      	b.n	800a42e <rcutils_string_map_reserve+0xb2>
 800a45e:	bf00      	nop

0800a460 <rcutils_string_map_init>:
 800a460:	b082      	sub	sp, #8
 800a462:	b570      	push	{r4, r5, r6, lr}
 800a464:	ac04      	add	r4, sp, #16
 800a466:	e884 000c 	stmia.w	r4, {r2, r3}
 800a46a:	b380      	cbz	r0, 800a4ce <rcutils_string_map_init+0x6e>
 800a46c:	6806      	ldr	r6, [r0, #0]
 800a46e:	4604      	mov	r4, r0
 800a470:	b12e      	cbz	r6, 800a47e <rcutils_string_map_init+0x1e>
 800a472:	251e      	movs	r5, #30
 800a474:	4628      	mov	r0, r5
 800a476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a47a:	b002      	add	sp, #8
 800a47c:	4770      	bx	lr
 800a47e:	a804      	add	r0, sp, #16
 800a480:	460d      	mov	r5, r1
 800a482:	f7ff fd1f 	bl	8009ec4 <rcutils_allocator_is_valid>
 800a486:	b310      	cbz	r0, 800a4ce <rcutils_string_map_init+0x6e>
 800a488:	9b04      	ldr	r3, [sp, #16]
 800a48a:	9908      	ldr	r1, [sp, #32]
 800a48c:	2024      	movs	r0, #36	@ 0x24
 800a48e:	4798      	blx	r3
 800a490:	6020      	str	r0, [r4, #0]
 800a492:	b310      	cbz	r0, 800a4da <rcutils_string_map_init+0x7a>
 800a494:	f10d 0e10 	add.w	lr, sp, #16
 800a498:	e9c0 6600 	strd	r6, r6, [r0]
 800a49c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800a4a0:	f100 0c10 	add.w	ip, r0, #16
 800a4a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a4a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a4ac:	f8de 3000 	ldr.w	r3, [lr]
 800a4b0:	f8cc 3000 	str.w	r3, [ip]
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f7ff ff60 	bl	800a37c <rcutils_string_map_reserve>
 800a4bc:	4605      	mov	r5, r0
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d0d8      	beq.n	800a474 <rcutils_string_map_init+0x14>
 800a4c2:	9b05      	ldr	r3, [sp, #20]
 800a4c4:	9908      	ldr	r1, [sp, #32]
 800a4c6:	6820      	ldr	r0, [r4, #0]
 800a4c8:	4798      	blx	r3
 800a4ca:	6026      	str	r6, [r4, #0]
 800a4cc:	e7d2      	b.n	800a474 <rcutils_string_map_init+0x14>
 800a4ce:	250b      	movs	r5, #11
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4d6:	b002      	add	sp, #8
 800a4d8:	4770      	bx	lr
 800a4da:	250a      	movs	r5, #10
 800a4dc:	e7ca      	b.n	800a474 <rcutils_string_map_init+0x14>
 800a4de:	bf00      	nop

0800a4e0 <rcutils_string_map_fini>:
 800a4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d03a      	beq.n	800a560 <rcutils_string_map_fini+0x80>
 800a4ea:	6804      	ldr	r4, [r0, #0]
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	2c00      	cmp	r4, #0
 800a4f0:	d032      	beq.n	800a558 <rcutils_string_map_fini+0x78>
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	b32b      	cbz	r3, 800a542 <rcutils_string_map_fini+0x62>
 800a4f6:	2500      	movs	r5, #0
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	462f      	mov	r7, r5
 800a4fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800a500:	b1e0      	cbz	r0, 800a53c <rcutils_string_map_fini+0x5c>
 800a502:	6a21      	ldr	r1, [r4, #32]
 800a504:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800a508:	9101      	str	r1, [sp, #4]
 800a50a:	47c0      	blx	r8
 800a50c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a510:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800a514:	9901      	ldr	r1, [sp, #4]
 800a516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a51a:	47c0      	blx	r8
 800a51c:	68e3      	ldr	r3, [r4, #12]
 800a51e:	6862      	ldr	r2, [r4, #4]
 800a520:	3b01      	subs	r3, #1
 800a522:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800a526:	60e3      	str	r3, [r4, #12]
 800a528:	6834      	ldr	r4, [r6, #0]
 800a52a:	68a3      	ldr	r3, [r4, #8]
 800a52c:	3501      	adds	r5, #1
 800a52e:	429d      	cmp	r5, r3
 800a530:	d207      	bcs.n	800a542 <rcutils_string_map_fini+0x62>
 800a532:	6822      	ldr	r2, [r4, #0]
 800a534:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800a538:	2800      	cmp	r0, #0
 800a53a:	d1e2      	bne.n	800a502 <rcutils_string_map_fini+0x22>
 800a53c:	3501      	adds	r5, #1
 800a53e:	429d      	cmp	r5, r3
 800a540:	d3dc      	bcc.n	800a4fc <rcutils_string_map_fini+0x1c>
 800a542:	2100      	movs	r1, #0
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff ff19 	bl	800a37c <rcutils_string_map_reserve>
 800a54a:	4604      	mov	r4, r0
 800a54c:	b920      	cbnz	r0, 800a558 <rcutils_string_map_fini+0x78>
 800a54e:	6830      	ldr	r0, [r6, #0]
 800a550:	6943      	ldr	r3, [r0, #20]
 800a552:	6a01      	ldr	r1, [r0, #32]
 800a554:	4798      	blx	r3
 800a556:	6034      	str	r4, [r6, #0]
 800a558:	4620      	mov	r0, r4
 800a55a:	b002      	add	sp, #8
 800a55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a560:	240b      	movs	r4, #11
 800a562:	4620      	mov	r0, r4
 800a564:	b002      	add	sp, #8
 800a566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a56a:	bf00      	nop

0800a56c <rcutils_string_map_getn>:
 800a56c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a570:	b300      	cbz	r0, 800a5b4 <rcutils_string_map_getn+0x48>
 800a572:	6807      	ldr	r7, [r0, #0]
 800a574:	b1ff      	cbz	r7, 800a5b6 <rcutils_string_map_getn+0x4a>
 800a576:	4688      	mov	r8, r1
 800a578:	b1e1      	cbz	r1, 800a5b4 <rcutils_string_map_getn+0x48>
 800a57a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800a57e:	683e      	ldr	r6, [r7, #0]
 800a580:	f1ba 0f00 	cmp.w	sl, #0
 800a584:	d016      	beq.n	800a5b4 <rcutils_string_map_getn+0x48>
 800a586:	4691      	mov	r9, r2
 800a588:	3e04      	subs	r6, #4
 800a58a:	2400      	movs	r4, #0
 800a58c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800a590:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a594:	4628      	mov	r0, r5
 800a596:	3401      	adds	r4, #1
 800a598:	b155      	cbz	r5, 800a5b0 <rcutils_string_map_getn+0x44>
 800a59a:	f7f5 fe4b 	bl	8000234 <strlen>
 800a59e:	4548      	cmp	r0, r9
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	bf38      	it	cc
 800a5a6:	464a      	movcc	r2, r9
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	f00a fcaa 	bl	8014f02 <strncmp>
 800a5ae:	b128      	cbz	r0, 800a5bc <rcutils_string_map_getn+0x50>
 800a5b0:	45a2      	cmp	sl, r4
 800a5b2:	d1eb      	bne.n	800a58c <rcutils_string_map_getn+0x20>
 800a5b4:	2700      	movs	r7, #0
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f853 700b 	ldr.w	r7, [r3, fp]
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5c8 <rcutils_system_time_now>:
 800a5c8:	b308      	cbz	r0, 800a60e <rcutils_system_time_now+0x46>
 800a5ca:	b570      	push	{r4, r5, r6, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4669      	mov	r1, sp
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	f7f6 fe68 	bl	80012a8 <clock_gettime>
 800a5d8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a5dc:	2d00      	cmp	r5, #0
 800a5de:	db13      	blt.n	800a608 <rcutils_system_time_now+0x40>
 800a5e0:	9902      	ldr	r1, [sp, #8]
 800a5e2:	2900      	cmp	r1, #0
 800a5e4:	db0d      	blt.n	800a602 <rcutils_system_time_now+0x3a>
 800a5e6:	4e0b      	ldr	r6, [pc, #44]	@ (800a614 <rcutils_system_time_now+0x4c>)
 800a5e8:	fba3 3206 	umull	r3, r2, r3, r6
 800a5ec:	185b      	adds	r3, r3, r1
 800a5ee:	fb06 2205 	mla	r2, r6, r5, r2
 800a5f2:	f04f 0000 	mov.w	r0, #0
 800a5f6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a5fa:	e9c4 3200 	strd	r3, r2, [r4]
 800a5fe:	b004      	add	sp, #16
 800a600:	bd70      	pop	{r4, r5, r6, pc}
 800a602:	ea53 0205 	orrs.w	r2, r3, r5
 800a606:	d1ee      	bne.n	800a5e6 <rcutils_system_time_now+0x1e>
 800a608:	2002      	movs	r0, #2
 800a60a:	b004      	add	sp, #16
 800a60c:	bd70      	pop	{r4, r5, r6, pc}
 800a60e:	200b      	movs	r0, #11
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	3b9aca00 	.word	0x3b9aca00

0800a618 <rcutils_steady_time_now>:
 800a618:	b308      	cbz	r0, 800a65e <rcutils_steady_time_now+0x46>
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	4604      	mov	r4, r0
 800a620:	4669      	mov	r1, sp
 800a622:	2000      	movs	r0, #0
 800a624:	f7f6 fe40 	bl	80012a8 <clock_gettime>
 800a628:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a62c:	2d00      	cmp	r5, #0
 800a62e:	db13      	blt.n	800a658 <rcutils_steady_time_now+0x40>
 800a630:	9902      	ldr	r1, [sp, #8]
 800a632:	2900      	cmp	r1, #0
 800a634:	db0d      	blt.n	800a652 <rcutils_steady_time_now+0x3a>
 800a636:	4e0b      	ldr	r6, [pc, #44]	@ (800a664 <rcutils_steady_time_now+0x4c>)
 800a638:	fba3 3206 	umull	r3, r2, r3, r6
 800a63c:	185b      	adds	r3, r3, r1
 800a63e:	fb06 2205 	mla	r2, r6, r5, r2
 800a642:	f04f 0000 	mov.w	r0, #0
 800a646:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a64a:	e9c4 3200 	strd	r3, r2, [r4]
 800a64e:	b004      	add	sp, #16
 800a650:	bd70      	pop	{r4, r5, r6, pc}
 800a652:	ea53 0205 	orrs.w	r2, r3, r5
 800a656:	d1ee      	bne.n	800a636 <rcutils_steady_time_now+0x1e>
 800a658:	2002      	movs	r0, #2
 800a65a:	b004      	add	sp, #16
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
 800a65e:	200b      	movs	r0, #11
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	3b9aca00 	.word	0x3b9aca00

0800a668 <rmw_get_zero_initialized_init_options>:
 800a668:	b510      	push	{r4, lr}
 800a66a:	2238      	movs	r2, #56	@ 0x38
 800a66c:	4604      	mov	r4, r0
 800a66e:	2100      	movs	r1, #0
 800a670:	f00a fc32 	bl	8014ed8 <memset>
 800a674:	f104 0010 	add.w	r0, r4, #16
 800a678:	f000 f806 	bl	800a688 <rmw_get_default_security_options>
 800a67c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a680:	60e3      	str	r3, [r4, #12]
 800a682:	4620      	mov	r0, r4
 800a684:	bd10      	pop	{r4, pc}
 800a686:	bf00      	nop

0800a688 <rmw_get_default_security_options>:
 800a688:	2200      	movs	r2, #0
 800a68a:	7002      	strb	r2, [r0, #0]
 800a68c:	6042      	str	r2, [r0, #4]
 800a68e:	4770      	bx	lr

0800a690 <rmw_validate_full_topic_name>:
 800a690:	2800      	cmp	r0, #0
 800a692:	d057      	beq.n	800a744 <rmw_validate_full_topic_name+0xb4>
 800a694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a698:	460d      	mov	r5, r1
 800a69a:	2900      	cmp	r1, #0
 800a69c:	d054      	beq.n	800a748 <rmw_validate_full_topic_name+0xb8>
 800a69e:	4616      	mov	r6, r2
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	f7f5 fdc7 	bl	8000234 <strlen>
 800a6a6:	b148      	cbz	r0, 800a6bc <rmw_validate_full_topic_name+0x2c>
 800a6a8:	7823      	ldrb	r3, [r4, #0]
 800a6aa:	2b2f      	cmp	r3, #47	@ 0x2f
 800a6ac:	d00d      	beq.n	800a6ca <rmw_validate_full_topic_name+0x3a>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	b13e      	cbz	r6, 800a6c4 <rmw_validate_full_topic_name+0x34>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	6030      	str	r0, [r6, #0]
 800a6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6bc:	2301      	movs	r3, #1
 800a6be:	602b      	str	r3, [r5, #0]
 800a6c0:	2e00      	cmp	r6, #0
 800a6c2:	d1f7      	bne.n	800a6b4 <rmw_validate_full_topic_name+0x24>
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ca:	1e43      	subs	r3, r0, #1
 800a6cc:	5ce2      	ldrb	r2, [r4, r3]
 800a6ce:	2a2f      	cmp	r2, #47	@ 0x2f
 800a6d0:	d03c      	beq.n	800a74c <rmw_validate_full_topic_name+0xbc>
 800a6d2:	1e63      	subs	r3, r4, #1
 800a6d4:	eb03 0800 	add.w	r8, r3, r0
 800a6d8:	f1c4 0e01 	rsb	lr, r4, #1
 800a6dc:	eb0e 0703 	add.w	r7, lr, r3
 800a6e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a6e4:	f021 0220 	bic.w	r2, r1, #32
 800a6e8:	3a41      	subs	r2, #65	@ 0x41
 800a6ea:	2a19      	cmp	r2, #25
 800a6ec:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800a6f0:	d90b      	bls.n	800a70a <rmw_validate_full_topic_name+0x7a>
 800a6f2:	295f      	cmp	r1, #95	@ 0x5f
 800a6f4:	d009      	beq.n	800a70a <rmw_validate_full_topic_name+0x7a>
 800a6f6:	f1bc 0f0a 	cmp.w	ip, #10
 800a6fa:	d906      	bls.n	800a70a <rmw_validate_full_topic_name+0x7a>
 800a6fc:	2304      	movs	r3, #4
 800a6fe:	602b      	str	r3, [r5, #0]
 800a700:	2e00      	cmp	r6, #0
 800a702:	d0df      	beq.n	800a6c4 <rmw_validate_full_topic_name+0x34>
 800a704:	6037      	str	r7, [r6, #0]
 800a706:	2000      	movs	r0, #0
 800a708:	e7d6      	b.n	800a6b8 <rmw_validate_full_topic_name+0x28>
 800a70a:	4543      	cmp	r3, r8
 800a70c:	d1e6      	bne.n	800a6dc <rmw_validate_full_topic_name+0x4c>
 800a70e:	4f1a      	ldr	r7, [pc, #104]	@ (800a778 <rmw_validate_full_topic_name+0xe8>)
 800a710:	2301      	movs	r3, #1
 800a712:	e004      	b.n	800a71e <rmw_validate_full_topic_name+0x8e>
 800a714:	4298      	cmp	r0, r3
 800a716:	f104 0401 	add.w	r4, r4, #1
 800a71a:	d91c      	bls.n	800a756 <rmw_validate_full_topic_name+0xc6>
 800a71c:	4613      	mov	r3, r2
 800a71e:	4298      	cmp	r0, r3
 800a720:	f103 0201 	add.w	r2, r3, #1
 800a724:	d0f6      	beq.n	800a714 <rmw_validate_full_topic_name+0x84>
 800a726:	7821      	ldrb	r1, [r4, #0]
 800a728:	292f      	cmp	r1, #47	@ 0x2f
 800a72a:	d1f3      	bne.n	800a714 <rmw_validate_full_topic_name+0x84>
 800a72c:	7861      	ldrb	r1, [r4, #1]
 800a72e:	292f      	cmp	r1, #47	@ 0x2f
 800a730:	d01c      	beq.n	800a76c <rmw_validate_full_topic_name+0xdc>
 800a732:	5dc9      	ldrb	r1, [r1, r7]
 800a734:	0749      	lsls	r1, r1, #29
 800a736:	d5ed      	bpl.n	800a714 <rmw_validate_full_topic_name+0x84>
 800a738:	2206      	movs	r2, #6
 800a73a:	602a      	str	r2, [r5, #0]
 800a73c:	2e00      	cmp	r6, #0
 800a73e:	d0c1      	beq.n	800a6c4 <rmw_validate_full_topic_name+0x34>
 800a740:	6033      	str	r3, [r6, #0]
 800a742:	e7bf      	b.n	800a6c4 <rmw_validate_full_topic_name+0x34>
 800a744:	200b      	movs	r0, #11
 800a746:	4770      	bx	lr
 800a748:	200b      	movs	r0, #11
 800a74a:	e7b5      	b.n	800a6b8 <rmw_validate_full_topic_name+0x28>
 800a74c:	2203      	movs	r2, #3
 800a74e:	602a      	str	r2, [r5, #0]
 800a750:	2e00      	cmp	r6, #0
 800a752:	d1f5      	bne.n	800a740 <rmw_validate_full_topic_name+0xb0>
 800a754:	e7b6      	b.n	800a6c4 <rmw_validate_full_topic_name+0x34>
 800a756:	28f7      	cmp	r0, #247	@ 0xf7
 800a758:	d802      	bhi.n	800a760 <rmw_validate_full_topic_name+0xd0>
 800a75a:	2000      	movs	r0, #0
 800a75c:	6028      	str	r0, [r5, #0]
 800a75e:	e7ab      	b.n	800a6b8 <rmw_validate_full_topic_name+0x28>
 800a760:	2307      	movs	r3, #7
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	2e00      	cmp	r6, #0
 800a766:	d0ad      	beq.n	800a6c4 <rmw_validate_full_topic_name+0x34>
 800a768:	23f6      	movs	r3, #246	@ 0xf6
 800a76a:	e7e9      	b.n	800a740 <rmw_validate_full_topic_name+0xb0>
 800a76c:	2205      	movs	r2, #5
 800a76e:	602a      	str	r2, [r5, #0]
 800a770:	2e00      	cmp	r6, #0
 800a772:	d1e5      	bne.n	800a740 <rmw_validate_full_topic_name+0xb0>
 800a774:	e7a6      	b.n	800a6c4 <rmw_validate_full_topic_name+0x34>
 800a776:	bf00      	nop
 800a778:	08016bb7 	.word	0x08016bb7

0800a77c <rmw_validate_namespace_with_size>:
 800a77c:	b340      	cbz	r0, 800a7d0 <rmw_validate_namespace_with_size+0x54>
 800a77e:	b570      	push	{r4, r5, r6, lr}
 800a780:	4614      	mov	r4, r2
 800a782:	b0c2      	sub	sp, #264	@ 0x108
 800a784:	b332      	cbz	r2, 800a7d4 <rmw_validate_namespace_with_size+0x58>
 800a786:	2901      	cmp	r1, #1
 800a788:	460d      	mov	r5, r1
 800a78a:	461e      	mov	r6, r3
 800a78c:	d102      	bne.n	800a794 <rmw_validate_namespace_with_size+0x18>
 800a78e:	7803      	ldrb	r3, [r0, #0]
 800a790:	2b2f      	cmp	r3, #47	@ 0x2f
 800a792:	d012      	beq.n	800a7ba <rmw_validate_namespace_with_size+0x3e>
 800a794:	aa01      	add	r2, sp, #4
 800a796:	4669      	mov	r1, sp
 800a798:	f7ff ff7a 	bl	800a690 <rmw_validate_full_topic_name>
 800a79c:	b978      	cbnz	r0, 800a7be <rmw_validate_namespace_with_size+0x42>
 800a79e:	9b00      	ldr	r3, [sp, #0]
 800a7a0:	b14b      	cbz	r3, 800a7b6 <rmw_validate_namespace_with_size+0x3a>
 800a7a2:	2b07      	cmp	r3, #7
 800a7a4:	d007      	beq.n	800a7b6 <rmw_validate_namespace_with_size+0x3a>
 800a7a6:	1e5a      	subs	r2, r3, #1
 800a7a8:	2a05      	cmp	r2, #5
 800a7aa:	d82b      	bhi.n	800a804 <rmw_validate_namespace_with_size+0x88>
 800a7ac:	e8df f002 	tbb	[pc, r2]
 800a7b0:	1e212427 	.word	0x1e212427
 800a7b4:	141b      	.short	0x141b
 800a7b6:	2df5      	cmp	r5, #245	@ 0xf5
 800a7b8:	d803      	bhi.n	800a7c2 <rmw_validate_namespace_with_size+0x46>
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	6020      	str	r0, [r4, #0]
 800a7be:	b042      	add	sp, #264	@ 0x108
 800a7c0:	bd70      	pop	{r4, r5, r6, pc}
 800a7c2:	2307      	movs	r3, #7
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	d0f9      	beq.n	800a7be <rmw_validate_namespace_with_size+0x42>
 800a7ca:	23f4      	movs	r3, #244	@ 0xf4
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	e7f6      	b.n	800a7be <rmw_validate_namespace_with_size+0x42>
 800a7d0:	200b      	movs	r0, #11
 800a7d2:	4770      	bx	lr
 800a7d4:	200b      	movs	r0, #11
 800a7d6:	e7f2      	b.n	800a7be <rmw_validate_namespace_with_size+0x42>
 800a7d8:	2306      	movs	r3, #6
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	2e00      	cmp	r6, #0
 800a7de:	d0ee      	beq.n	800a7be <rmw_validate_namespace_with_size+0x42>
 800a7e0:	9b01      	ldr	r3, [sp, #4]
 800a7e2:	6033      	str	r3, [r6, #0]
 800a7e4:	e7eb      	b.n	800a7be <rmw_validate_namespace_with_size+0x42>
 800a7e6:	2305      	movs	r3, #5
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	e7f7      	b.n	800a7dc <rmw_validate_namespace_with_size+0x60>
 800a7ec:	2304      	movs	r3, #4
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	e7f4      	b.n	800a7dc <rmw_validate_namespace_with_size+0x60>
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	e7f1      	b.n	800a7dc <rmw_validate_namespace_with_size+0x60>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	e7ee      	b.n	800a7dc <rmw_validate_namespace_with_size+0x60>
 800a7fe:	2301      	movs	r3, #1
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	e7eb      	b.n	800a7dc <rmw_validate_namespace_with_size+0x60>
 800a804:	4a03      	ldr	r2, [pc, #12]	@ (800a814 <rmw_validate_namespace_with_size+0x98>)
 800a806:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a80a:	a802      	add	r0, sp, #8
 800a80c:	f7ff fd46 	bl	800a29c <rcutils_snprintf>
 800a810:	2001      	movs	r0, #1
 800a812:	e7d4      	b.n	800a7be <rmw_validate_namespace_with_size+0x42>
 800a814:	08015ea4 	.word	0x08015ea4

0800a818 <rmw_validate_namespace>:
 800a818:	b168      	cbz	r0, 800a836 <rmw_validate_namespace+0x1e>
 800a81a:	b570      	push	{r4, r5, r6, lr}
 800a81c:	460d      	mov	r5, r1
 800a81e:	4616      	mov	r6, r2
 800a820:	4604      	mov	r4, r0
 800a822:	f7f5 fd07 	bl	8000234 <strlen>
 800a826:	4633      	mov	r3, r6
 800a828:	4601      	mov	r1, r0
 800a82a:	462a      	mov	r2, r5
 800a82c:	4620      	mov	r0, r4
 800a82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a832:	f7ff bfa3 	b.w	800a77c <rmw_validate_namespace_with_size>
 800a836:	200b      	movs	r0, #11
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop

0800a83c <rmw_namespace_validation_result_string>:
 800a83c:	2807      	cmp	r0, #7
 800a83e:	bf9a      	itte	ls
 800a840:	4b02      	ldrls	r3, [pc, #8]	@ (800a84c <rmw_namespace_validation_result_string+0x10>)
 800a842:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800a846:	4802      	ldrhi	r0, [pc, #8]	@ (800a850 <rmw_namespace_validation_result_string+0x14>)
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	080166ec 	.word	0x080166ec
 800a850:	08015ef4 	.word	0x08015ef4

0800a854 <rmw_validate_node_name>:
 800a854:	2800      	cmp	r0, #0
 800a856:	d03b      	beq.n	800a8d0 <rmw_validate_node_name+0x7c>
 800a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85c:	460d      	mov	r5, r1
 800a85e:	2900      	cmp	r1, #0
 800a860:	d038      	beq.n	800a8d4 <rmw_validate_node_name+0x80>
 800a862:	4616      	mov	r6, r2
 800a864:	4604      	mov	r4, r0
 800a866:	f7f5 fce5 	bl	8000234 <strlen>
 800a86a:	b1e0      	cbz	r0, 800a8a6 <rmw_validate_node_name+0x52>
 800a86c:	1e63      	subs	r3, r4, #1
 800a86e:	eb03 0800 	add.w	r8, r3, r0
 800a872:	f1c4 0101 	rsb	r1, r4, #1
 800a876:	18cf      	adds	r7, r1, r3
 800a878:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800a87c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800a880:	f02e 0c20 	bic.w	ip, lr, #32
 800a884:	2a09      	cmp	r2, #9
 800a886:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800a88a:	d914      	bls.n	800a8b6 <rmw_validate_node_name+0x62>
 800a88c:	f1bc 0f19 	cmp.w	ip, #25
 800a890:	d911      	bls.n	800a8b6 <rmw_validate_node_name+0x62>
 800a892:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800a896:	d00e      	beq.n	800a8b6 <rmw_validate_node_name+0x62>
 800a898:	2302      	movs	r3, #2
 800a89a:	602b      	str	r3, [r5, #0]
 800a89c:	b106      	cbz	r6, 800a8a0 <rmw_validate_node_name+0x4c>
 800a89e:	6037      	str	r7, [r6, #0]
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	602b      	str	r3, [r5, #0]
 800a8aa:	2e00      	cmp	r6, #0
 800a8ac:	d0f8      	beq.n	800a8a0 <rmw_validate_node_name+0x4c>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	6030      	str	r0, [r6, #0]
 800a8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b6:	4543      	cmp	r3, r8
 800a8b8:	d1dd      	bne.n	800a876 <rmw_validate_node_name+0x22>
 800a8ba:	7822      	ldrb	r2, [r4, #0]
 800a8bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f4 <rmw_validate_node_name+0xa0>)
 800a8be:	5cd3      	ldrb	r3, [r2, r3]
 800a8c0:	f013 0304 	ands.w	r3, r3, #4
 800a8c4:	d110      	bne.n	800a8e8 <rmw_validate_node_name+0x94>
 800a8c6:	28ff      	cmp	r0, #255	@ 0xff
 800a8c8:	d806      	bhi.n	800a8d8 <rmw_validate_node_name+0x84>
 800a8ca:	602b      	str	r3, [r5, #0]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	e7e8      	b.n	800a8a2 <rmw_validate_node_name+0x4e>
 800a8d0:	200b      	movs	r0, #11
 800a8d2:	4770      	bx	lr
 800a8d4:	200b      	movs	r0, #11
 800a8d6:	e7e4      	b.n	800a8a2 <rmw_validate_node_name+0x4e>
 800a8d8:	2204      	movs	r2, #4
 800a8da:	602a      	str	r2, [r5, #0]
 800a8dc:	2e00      	cmp	r6, #0
 800a8de:	d0df      	beq.n	800a8a0 <rmw_validate_node_name+0x4c>
 800a8e0:	22fe      	movs	r2, #254	@ 0xfe
 800a8e2:	6032      	str	r2, [r6, #0]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	e7dc      	b.n	800a8a2 <rmw_validate_node_name+0x4e>
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	2e00      	cmp	r6, #0
 800a8ee:	d1de      	bne.n	800a8ae <rmw_validate_node_name+0x5a>
 800a8f0:	e7d6      	b.n	800a8a0 <rmw_validate_node_name+0x4c>
 800a8f2:	bf00      	nop
 800a8f4:	08016bb7 	.word	0x08016bb7

0800a8f8 <rmw_node_name_validation_result_string>:
 800a8f8:	2804      	cmp	r0, #4
 800a8fa:	bf9a      	itte	ls
 800a8fc:	4b02      	ldrls	r3, [pc, #8]	@ (800a908 <rmw_node_name_validation_result_string+0x10>)
 800a8fe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800a902:	4802      	ldrhi	r0, [pc, #8]	@ (800a90c <rmw_node_name_validation_result_string+0x14>)
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	0801670c 	.word	0x0801670c
 800a90c:	0801609c 	.word	0x0801609c

0800a910 <rmw_uros_set_custom_transport>:
 800a910:	b470      	push	{r4, r5, r6}
 800a912:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a916:	b162      	cbz	r2, 800a932 <rmw_uros_set_custom_transport+0x22>
 800a918:	b15b      	cbz	r3, 800a932 <rmw_uros_set_custom_transport+0x22>
 800a91a:	b155      	cbz	r5, 800a932 <rmw_uros_set_custom_transport+0x22>
 800a91c:	b14e      	cbz	r6, 800a932 <rmw_uros_set_custom_transport+0x22>
 800a91e:	4c06      	ldr	r4, [pc, #24]	@ (800a938 <rmw_uros_set_custom_transport+0x28>)
 800a920:	7020      	strb	r0, [r4, #0]
 800a922:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a926:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a92a:	6166      	str	r6, [r4, #20]
 800a92c:	2000      	movs	r0, #0
 800a92e:	bc70      	pop	{r4, r5, r6}
 800a930:	4770      	bx	lr
 800a932:	200b      	movs	r0, #11
 800a934:	bc70      	pop	{r4, r5, r6}
 800a936:	4770      	bx	lr
 800a938:	20006200 	.word	0x20006200

0800a93c <rmw_create_client>:
 800a93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a940:	b091      	sub	sp, #68	@ 0x44
 800a942:	2800      	cmp	r0, #0
 800a944:	f000 80ba 	beq.w	800aabc <rmw_create_client+0x180>
 800a948:	4689      	mov	r9, r1
 800a94a:	2900      	cmp	r1, #0
 800a94c:	f000 80b6 	beq.w	800aabc <rmw_create_client+0x180>
 800a950:	4606      	mov	r6, r0
 800a952:	6800      	ldr	r0, [r0, #0]
 800a954:	4614      	mov	r4, r2
 800a956:	461d      	mov	r5, r3
 800a958:	f001 faf0 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	f000 80ad 	beq.w	800aabc <rmw_create_client+0x180>
 800a962:	2c00      	cmp	r4, #0
 800a964:	f000 80aa 	beq.w	800aabc <rmw_create_client+0x180>
 800a968:	7823      	ldrb	r3, [r4, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f000 80a6 	beq.w	800aabc <rmw_create_client+0x180>
 800a970:	2d00      	cmp	r5, #0
 800a972:	f000 80a3 	beq.w	800aabc <rmw_create_client+0x180>
 800a976:	4854      	ldr	r0, [pc, #336]	@ (800aac8 <rmw_create_client+0x18c>)
 800a978:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800a97c:	f008 fbb8 	bl	80130f0 <get_memory>
 800a980:	4606      	mov	r6, r0
 800a982:	2800      	cmp	r0, #0
 800a984:	f000 809b 	beq.w	800aabe <rmw_create_client+0x182>
 800a988:	6887      	ldr	r7, [r0, #8]
 800a98a:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800a98e:	f000 f90b 	bl	800aba8 <rmw_get_implementation_identifier>
 800a992:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800a996:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800a998:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800a99c:	4620      	mov	r0, r4
 800a99e:	f7f5 fc49 	bl	8000234 <strlen>
 800a9a2:	1c42      	adds	r2, r0, #1
 800a9a4:	2a3c      	cmp	r2, #60	@ 0x3c
 800a9a6:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800a9aa:	f200 8084 	bhi.w	800aab6 <rmw_create_client+0x17a>
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	f00a fb5a 	bl	801506a <memcpy>
 800a9b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800a9c0:	677b      	str	r3, [r7, #116]	@ 0x74
 800a9c2:	2250      	movs	r2, #80	@ 0x50
 800a9c4:	f107 0020 	add.w	r0, r7, #32
 800a9c8:	f00a fb4f 	bl	801506a <memcpy>
 800a9cc:	493f      	ldr	r1, [pc, #252]	@ (800aacc <rmw_create_client+0x190>)
 800a9ce:	4648      	mov	r0, r9
 800a9d0:	f001 facc 	bl	800bf6c <get_service_typesupport_handle>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d06e      	beq.n	800aab6 <rmw_create_client+0x17a>
 800a9d8:	6843      	ldr	r3, [r0, #4]
 800a9da:	617b      	str	r3, [r7, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d06a      	beq.n	800aab6 <rmw_create_client+0x17a>
 800a9e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a9e4:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800aad4 <rmw_create_client+0x198>
 800a9e8:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800aad8 <rmw_create_client+0x19c>
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9f0:	2107      	movs	r1, #7
 800a9f2:	f8b3 05a0 	ldrh.w	r0, [r3, #1440]	@ 0x5a0
 800a9f6:	1c42      	adds	r2, r0, #1
 800a9f8:	f8a3 25a0 	strh.w	r2, [r3, #1440]	@ 0x5a0
 800a9fc:	f002 fe06 	bl	800d60c <uxr_object_id>
 800aa00:	2364      	movs	r3, #100	@ 0x64
 800aa02:	6138      	str	r0, [r7, #16]
 800aa04:	4652      	mov	r2, sl
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	4649      	mov	r1, r9
 800aa0a:	f001 fa2f 	bl	800be6c <generate_service_types>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d051      	beq.n	800aab6 <rmw_create_client+0x17a>
 800aa12:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800aadc <rmw_create_client+0x1a0>
 800aa16:	4a2e      	ldr	r2, [pc, #184]	@ (800aad0 <rmw_create_client+0x194>)
 800aa18:	233c      	movs	r3, #60	@ 0x3c
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f001 f9f3 	bl	800be08 <generate_service_topics>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d047      	beq.n	800aab6 <rmw_create_client+0x17a>
 800aa26:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800aa2a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800aa2e:	a80c      	add	r0, sp, #48	@ 0x30
 800aa30:	4629      	mov	r1, r5
 800aa32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa36:	f001 f9cd 	bl	800bdd4 <convert_qos_profile>
 800aa3a:	4a25      	ldr	r2, [pc, #148]	@ (800aad0 <rmw_create_client+0x194>)
 800aa3c:	9400      	str	r4, [sp, #0]
 800aa3e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800aa42:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800aa46:	a80c      	add	r0, sp, #48	@ 0x30
 800aa48:	c803      	ldmia	r0, {r0, r1}
 800aa4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa4c:	9005      	str	r0, [sp, #20]
 800aa4e:	9a08      	ldr	r2, [sp, #32]
 800aa50:	f8ad 1018 	strh.w	r1, [sp, #24]
 800aa54:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800aa58:	2306      	movs	r3, #6
 800aa5a:	9307      	str	r3, [sp, #28]
 800aa5c:	6811      	ldr	r1, [r2, #0]
 800aa5e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	f002 fcd6 	bl	800d414 <uxr_buffer_create_requester_bin>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800aa6e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800aa72:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800aa76:	f001 f991 	bl	800bd9c <run_xrce_session>
 800aa7a:	b1e0      	cbz	r0, 800aab6 <rmw_create_client+0x17a>
 800aa7c:	7a2b      	ldrb	r3, [r5, #8]
 800aa7e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800aa82:	2200      	movs	r2, #0
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800aa8a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800aa8e:	bf0c      	ite	eq
 800aa90:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800aa94:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800aa98:	673a      	str	r2, [r7, #112]	@ 0x70
 800aa9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa9c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800aaa0:	ab0e      	add	r3, sp, #56	@ 0x38
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	6811      	ldr	r1, [r2, #0]
 800aaa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaa8:	693a      	ldr	r2, [r7, #16]
 800aaaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aaae:	f002 fddd 	bl	800d66c <uxr_buffer_request_data>
 800aab2:	8338      	strh	r0, [r7, #24]
 800aab4:	e003      	b.n	800aabe <rmw_create_client+0x182>
 800aab6:	4630      	mov	r0, r6
 800aab8:	f001 f85a 	bl	800bb70 <rmw_uxrce_fini_client_memory>
 800aabc:	2600      	movs	r6, #0
 800aabe:	4630      	mov	r0, r6
 800aac0:	b011      	add	sp, #68	@ 0x44
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	bf00      	nop
 800aac8:	20006398 	.word	0x20006398
 800aacc:	08016188 	.word	0x08016188
 800aad0:	200062bc 	.word	0x200062bc
 800aad4:	200062f8 	.word	0x200062f8
 800aad8:	20006258 	.word	0x20006258
 800aadc:	2000621c 	.word	0x2000621c

0800aae0 <rmw_destroy_client>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	b128      	cbz	r0, 800aaf0 <rmw_destroy_client+0x10>
 800aae4:	4604      	mov	r4, r0
 800aae6:	6800      	ldr	r0, [r0, #0]
 800aae8:	460d      	mov	r5, r1
 800aaea:	f001 fa27 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800aaee:	b910      	cbnz	r0, 800aaf6 <rmw_destroy_client+0x16>
 800aaf0:	2401      	movs	r4, #1
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	bd70      	pop	{r4, r5, r6, pc}
 800aaf6:	6863      	ldr	r3, [r4, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d0f9      	beq.n	800aaf0 <rmw_destroy_client+0x10>
 800aafc:	2d00      	cmp	r5, #0
 800aafe:	d0f7      	beq.n	800aaf0 <rmw_destroy_client+0x10>
 800ab00:	6828      	ldr	r0, [r5, #0]
 800ab02:	f001 fa1b 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d0f2      	beq.n	800aaf0 <rmw_destroy_client+0x10>
 800ab0a:	686e      	ldr	r6, [r5, #4]
 800ab0c:	2e00      	cmp	r6, #0
 800ab0e:	d0ef      	beq.n	800aaf0 <rmw_destroy_client+0x10>
 800ab10:	6864      	ldr	r4, [r4, #4]
 800ab12:	6932      	ldr	r2, [r6, #16]
 800ab14:	6920      	ldr	r0, [r4, #16]
 800ab16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ab1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab1e:	6819      	ldr	r1, [r3, #0]
 800ab20:	f002 fdde 	bl	800d6e0 <uxr_buffer_cancel_data>
 800ab24:	4602      	mov	r2, r0
 800ab26:	6920      	ldr	r0, [r4, #16]
 800ab28:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ab2c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ab30:	f001 f934 	bl	800bd9c <run_xrce_session>
 800ab34:	6920      	ldr	r0, [r4, #16]
 800ab36:	6932      	ldr	r2, [r6, #16]
 800ab38:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ab3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab40:	6819      	ldr	r1, [r3, #0]
 800ab42:	f002 fbe9 	bl	800d318 <uxr_buffer_delete_entity>
 800ab46:	4602      	mov	r2, r0
 800ab48:	6920      	ldr	r0, [r4, #16]
 800ab4a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ab4e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ab52:	f001 f923 	bl	800bd9c <run_xrce_session>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	4628      	mov	r0, r5
 800ab5a:	bf14      	ite	ne
 800ab5c:	2400      	movne	r4, #0
 800ab5e:	2402      	moveq	r4, #2
 800ab60:	f001 f806 	bl	800bb70 <rmw_uxrce_fini_client_memory>
 800ab64:	e7c5      	b.n	800aaf2 <rmw_destroy_client+0x12>
 800ab66:	bf00      	nop

0800ab68 <rmw_client_request_publisher_get_actual_qos>:
 800ab68:	b150      	cbz	r0, 800ab80 <rmw_client_request_publisher_get_actual_qos+0x18>
 800ab6a:	b508      	push	{r3, lr}
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	b149      	cbz	r1, 800ab84 <rmw_client_request_publisher_get_actual_qos+0x1c>
 800ab70:	6841      	ldr	r1, [r0, #4]
 800ab72:	2250      	movs	r2, #80	@ 0x50
 800ab74:	3120      	adds	r1, #32
 800ab76:	4618      	mov	r0, r3
 800ab78:	f00a fa77 	bl	801506a <memcpy>
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	bd08      	pop	{r3, pc}
 800ab80:	200b      	movs	r0, #11
 800ab82:	4770      	bx	lr
 800ab84:	200b      	movs	r0, #11
 800ab86:	bd08      	pop	{r3, pc}

0800ab88 <rmw_client_response_subscription_get_actual_qos>:
 800ab88:	b150      	cbz	r0, 800aba0 <rmw_client_response_subscription_get_actual_qos+0x18>
 800ab8a:	b508      	push	{r3, lr}
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	b149      	cbz	r1, 800aba4 <rmw_client_response_subscription_get_actual_qos+0x1c>
 800ab90:	6841      	ldr	r1, [r0, #4]
 800ab92:	2250      	movs	r2, #80	@ 0x50
 800ab94:	3120      	adds	r1, #32
 800ab96:	4618      	mov	r0, r3
 800ab98:	f00a fa67 	bl	801506a <memcpy>
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	bd08      	pop	{r3, pc}
 800aba0:	200b      	movs	r0, #11
 800aba2:	4770      	bx	lr
 800aba4:	200b      	movs	r0, #11
 800aba6:	bd08      	pop	{r3, pc}

0800aba8 <rmw_get_implementation_identifier>:
 800aba8:	4b01      	ldr	r3, [pc, #4]	@ (800abb0 <rmw_get_implementation_identifier+0x8>)
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	08016ad4 	.word	0x08016ad4

0800abb4 <rmw_init_options_init>:
 800abb4:	b084      	sub	sp, #16
 800abb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb8:	b083      	sub	sp, #12
 800abba:	ad09      	add	r5, sp, #36	@ 0x24
 800abbc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800abc0:	b130      	cbz	r0, 800abd0 <rmw_init_options_init+0x1c>
 800abc2:	4604      	mov	r4, r0
 800abc4:	4628      	mov	r0, r5
 800abc6:	f7ff f97d 	bl	8009ec4 <rcutils_allocator_is_valid>
 800abca:	b108      	cbz	r0, 800abd0 <rmw_init_options_init+0x1c>
 800abcc:	68a6      	ldr	r6, [r4, #8]
 800abce:	b12e      	cbz	r6, 800abdc <rmw_init_options_init+0x28>
 800abd0:	200b      	movs	r0, #11
 800abd2:	b003      	add	sp, #12
 800abd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800abd8:	b004      	add	sp, #16
 800abda:	4770      	bx	lr
 800abdc:	2200      	movs	r2, #0
 800abde:	2300      	movs	r3, #0
 800abe0:	e9c4 2300 	strd	r2, r3, [r4]
 800abe4:	4b20      	ldr	r3, [pc, #128]	@ (800ac68 <rmw_init_options_init+0xb4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60a3      	str	r3, [r4, #8]
 800abea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abec:	f104 0c20 	add.w	ip, r4, #32
 800abf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800abf4:	466f      	mov	r7, sp
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	f8cc 3000 	str.w	r3, [ip]
 800abfc:	4638      	mov	r0, r7
 800abfe:	61e6      	str	r6, [r4, #28]
 800ac00:	60e6      	str	r6, [r4, #12]
 800ac02:	f7ff fd41 	bl	800a688 <rmw_get_default_security_options>
 800ac06:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ac0a:	f104 0310 	add.w	r3, r4, #16
 800ac0e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ac12:	2203      	movs	r2, #3
 800ac14:	4815      	ldr	r0, [pc, #84]	@ (800ac6c <rmw_init_options_init+0xb8>)
 800ac16:	4916      	ldr	r1, [pc, #88]	@ (800ac70 <rmw_init_options_init+0xbc>)
 800ac18:	7626      	strb	r6, [r4, #24]
 800ac1a:	f000 fee9 	bl	800b9f0 <rmw_uxrce_init_init_options_impl_memory>
 800ac1e:	4813      	ldr	r0, [pc, #76]	@ (800ac6c <rmw_init_options_init+0xb8>)
 800ac20:	f008 fa66 	bl	80130f0 <get_memory>
 800ac24:	b1f0      	cbz	r0, 800ac64 <rmw_init_options_init+0xb0>
 800ac26:	4a13      	ldr	r2, [pc, #76]	@ (800ac74 <rmw_init_options_init+0xc0>)
 800ac28:	6883      	ldr	r3, [r0, #8]
 800ac2a:	6851      	ldr	r1, [r2, #4]
 800ac2c:	7810      	ldrb	r0, [r2, #0]
 800ac2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac30:	7418      	strb	r0, [r3, #16]
 800ac32:	6159      	str	r1, [r3, #20]
 800ac34:	68d1      	ldr	r1, [r2, #12]
 800ac36:	61d9      	str	r1, [r3, #28]
 800ac38:	6911      	ldr	r1, [r2, #16]
 800ac3a:	6219      	str	r1, [r3, #32]
 800ac3c:	6951      	ldr	r1, [r2, #20]
 800ac3e:	6892      	ldr	r2, [r2, #8]
 800ac40:	619a      	str	r2, [r3, #24]
 800ac42:	6259      	str	r1, [r3, #36]	@ 0x24
 800ac44:	f004 fd52 	bl	800f6ec <uxr_nanos>
 800ac48:	f009 fd8a 	bl	8014760 <srand>
 800ac4c:	f009 fdb6 	bl	80147bc <rand>
 800ac50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac52:	6298      	str	r0, [r3, #40]	@ 0x28
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d0f9      	beq.n	800ac4c <rmw_init_options_init+0x98>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	b003      	add	sp, #12
 800ac5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ac60:	b004      	add	sp, #16
 800ac62:	4770      	bx	lr
 800ac64:	2001      	movs	r0, #1
 800ac66:	e7b4      	b.n	800abd2 <rmw_init_options_init+0x1e>
 800ac68:	08016ad4 	.word	0x08016ad4
 800ac6c:	2000ac54 	.word	0x2000ac54
 800ac70:	200064f0 	.word	0x200064f0
 800ac74:	20006200 	.word	0x20006200

0800ac78 <rmw_init_options_copy>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	b160      	cbz	r0, 800ac98 <rmw_init_options_copy+0x20>
 800ac7e:	460d      	mov	r5, r1
 800ac80:	b151      	cbz	r1, 800ac98 <rmw_init_options_copy+0x20>
 800ac82:	4604      	mov	r4, r0
 800ac84:	6880      	ldr	r0, [r0, #8]
 800ac86:	b128      	cbz	r0, 800ac94 <rmw_init_options_copy+0x1c>
 800ac88:	4b33      	ldr	r3, [pc, #204]	@ (800ad58 <rmw_init_options_copy+0xe0>)
 800ac8a:	6819      	ldr	r1, [r3, #0]
 800ac8c:	f7f5 fac8 	bl	8000220 <strcmp>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d154      	bne.n	800ad3e <rmw_init_options_copy+0xc6>
 800ac94:	68ab      	ldr	r3, [r5, #8]
 800ac96:	b11b      	cbz	r3, 800aca0 <rmw_init_options_copy+0x28>
 800ac98:	240b      	movs	r4, #11
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	b008      	add	sp, #32
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	4623      	mov	r3, r4
 800aca2:	462a      	mov	r2, r5
 800aca4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800aca8:	f8d3 c000 	ldr.w	ip, [r3]
 800acac:	6858      	ldr	r0, [r3, #4]
 800acae:	6899      	ldr	r1, [r3, #8]
 800acb0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800acb4:	f8c2 e00c 	str.w	lr, [r2, #12]
 800acb8:	3310      	adds	r3, #16
 800acba:	42b3      	cmp	r3, r6
 800acbc:	f8c2 c000 	str.w	ip, [r2]
 800acc0:	6050      	str	r0, [r2, #4]
 800acc2:	6091      	str	r1, [r2, #8]
 800acc4:	f102 0210 	add.w	r2, r2, #16
 800acc8:	d1ee      	bne.n	800aca8 <rmw_init_options_copy+0x30>
 800acca:	6819      	ldr	r1, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	6053      	str	r3, [r2, #4]
 800acd0:	6011      	str	r1, [r2, #0]
 800acd2:	f104 0e20 	add.w	lr, r4, #32
 800acd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800acda:	f10d 0c0c 	add.w	ip, sp, #12
 800acde:	4666      	mov	r6, ip
 800ace0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ace4:	f8de 3000 	ldr.w	r3, [lr]
 800ace8:	f8cc 3000 	str.w	r3, [ip]
 800acec:	4630      	mov	r0, r6
 800acee:	f7ff f8e9 	bl	8009ec4 <rcutils_allocator_is_valid>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d0d0      	beq.n	800ac98 <rmw_init_options_copy+0x20>
 800acf6:	ab08      	add	r3, sp, #32
 800acf8:	e913 0003 	ldmdb	r3, {r0, r1}
 800acfc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ad00:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ad04:	69e0      	ldr	r0, [r4, #28]
 800ad06:	f7ff faf5 	bl	800a2f4 <rcutils_strdup>
 800ad0a:	61e8      	str	r0, [r5, #28]
 800ad0c:	69e3      	ldr	r3, [r4, #28]
 800ad0e:	b103      	cbz	r3, 800ad12 <rmw_init_options_copy+0x9a>
 800ad10:	b1f8      	cbz	r0, 800ad52 <rmw_init_options_copy+0xda>
 800ad12:	4812      	ldr	r0, [pc, #72]	@ (800ad5c <rmw_init_options_copy+0xe4>)
 800ad14:	f008 f9ec 	bl	80130f0 <get_memory>
 800ad18:	b1a8      	cbz	r0, 800ad46 <rmw_init_options_copy+0xce>
 800ad1a:	6883      	ldr	r3, [r0, #8]
 800ad1c:	636b      	str	r3, [r5, #52]	@ 0x34
 800ad1e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ad20:	f102 0c10 	add.w	ip, r2, #16
 800ad24:	f103 0510 	add.w	r5, r3, #16
 800ad28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ad2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad2e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800ad32:	2400      	movs	r4, #0
 800ad34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ad38:	4620      	mov	r0, r4
 800ad3a:	b008      	add	sp, #32
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
 800ad3e:	240c      	movs	r4, #12
 800ad40:	4620      	mov	r0, r4
 800ad42:	b008      	add	sp, #32
 800ad44:	bd70      	pop	{r4, r5, r6, pc}
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	9907      	ldr	r1, [sp, #28]
 800ad4a:	69e8      	ldr	r0, [r5, #28]
 800ad4c:	4798      	blx	r3
 800ad4e:	2401      	movs	r4, #1
 800ad50:	e7a3      	b.n	800ac9a <rmw_init_options_copy+0x22>
 800ad52:	240a      	movs	r4, #10
 800ad54:	e7a1      	b.n	800ac9a <rmw_init_options_copy+0x22>
 800ad56:	bf00      	nop
 800ad58:	08016ad4 	.word	0x08016ad4
 800ad5c:	2000ac54 	.word	0x2000ac54

0800ad60 <rmw_init_options_fini>:
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d041      	beq.n	800ade8 <rmw_init_options_fini+0x88>
 800ad64:	b510      	push	{r4, lr}
 800ad66:	4604      	mov	r4, r0
 800ad68:	b08e      	sub	sp, #56	@ 0x38
 800ad6a:	3020      	adds	r0, #32
 800ad6c:	f7ff f8aa 	bl	8009ec4 <rcutils_allocator_is_valid>
 800ad70:	b380      	cbz	r0, 800add4 <rmw_init_options_fini+0x74>
 800ad72:	68a0      	ldr	r0, [r4, #8]
 800ad74:	b120      	cbz	r0, 800ad80 <rmw_init_options_fini+0x20>
 800ad76:	4b1e      	ldr	r3, [pc, #120]	@ (800adf0 <rmw_init_options_fini+0x90>)
 800ad78:	6819      	ldr	r1, [r3, #0]
 800ad7a:	f7f5 fa51 	bl	8000220 <strcmp>
 800ad7e:	bb88      	cbnz	r0, 800ade4 <rmw_init_options_fini+0x84>
 800ad80:	4b1c      	ldr	r3, [pc, #112]	@ (800adf4 <rmw_init_options_fini+0x94>)
 800ad82:	6819      	ldr	r1, [r3, #0]
 800ad84:	b351      	cbz	r1, 800addc <rmw_init_options_fini+0x7c>
 800ad86:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ad88:	e001      	b.n	800ad8e <rmw_init_options_fini+0x2e>
 800ad8a:	6849      	ldr	r1, [r1, #4]
 800ad8c:	b331      	cbz	r1, 800addc <rmw_init_options_fini+0x7c>
 800ad8e:	688b      	ldr	r3, [r1, #8]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d1fa      	bne.n	800ad8a <rmw_init_options_fini+0x2a>
 800ad94:	4817      	ldr	r0, [pc, #92]	@ (800adf4 <rmw_init_options_fini+0x94>)
 800ad96:	f008 f9bb 	bl	8013110 <put_memory>
 800ad9a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ad9c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ad9e:	69e0      	ldr	r0, [r4, #28]
 800ada0:	4798      	blx	r3
 800ada2:	4668      	mov	r0, sp
 800ada4:	f7ff fc60 	bl	800a668 <rmw_get_zero_initialized_init_options>
 800ada8:	46ee      	mov	lr, sp
 800adaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800adae:	46a4      	mov	ip, r4
 800adb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800adb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800adb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800adbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800adc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800adc4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800adc8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800adcc:	2300      	movs	r3, #0
 800adce:	4618      	mov	r0, r3
 800add0:	b00e      	add	sp, #56	@ 0x38
 800add2:	bd10      	pop	{r4, pc}
 800add4:	230b      	movs	r3, #11
 800add6:	4618      	mov	r0, r3
 800add8:	b00e      	add	sp, #56	@ 0x38
 800adda:	bd10      	pop	{r4, pc}
 800addc:	2301      	movs	r3, #1
 800adde:	4618      	mov	r0, r3
 800ade0:	b00e      	add	sp, #56	@ 0x38
 800ade2:	bd10      	pop	{r4, pc}
 800ade4:	230c      	movs	r3, #12
 800ade6:	e7f2      	b.n	800adce <rmw_init_options_fini+0x6e>
 800ade8:	230b      	movs	r3, #11
 800adea:	4618      	mov	r0, r3
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	08016ad4 	.word	0x08016ad4
 800adf4:	2000ac54 	.word	0x2000ac54

0800adf8 <rmw_init>:
 800adf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adfc:	b083      	sub	sp, #12
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f000 80d3 	beq.w	800afaa <rmw_init+0x1b2>
 800ae04:	460e      	mov	r6, r1
 800ae06:	2900      	cmp	r1, #0
 800ae08:	f000 80cf 	beq.w	800afaa <rmw_init+0x1b2>
 800ae0c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ae0e:	4605      	mov	r5, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 80ca 	beq.w	800afaa <rmw_init+0x1b2>
 800ae16:	4b78      	ldr	r3, [pc, #480]	@ (800aff8 <rmw_init+0x200>)
 800ae18:	6880      	ldr	r0, [r0, #8]
 800ae1a:	681f      	ldr	r7, [r3, #0]
 800ae1c:	b128      	cbz	r0, 800ae2a <rmw_init+0x32>
 800ae1e:	4639      	mov	r1, r7
 800ae20:	f7f5 f9fe 	bl	8000220 <strcmp>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f040 80ca 	bne.w	800afbe <rmw_init+0x1c6>
 800ae2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae2e:	4c73      	ldr	r4, [pc, #460]	@ (800affc <rmw_init+0x204>)
 800ae30:	4973      	ldr	r1, [pc, #460]	@ (800b000 <rmw_init+0x208>)
 800ae32:	4874      	ldr	r0, [pc, #464]	@ (800b004 <rmw_init+0x20c>)
 800ae34:	60b7      	str	r7, [r6, #8]
 800ae36:	e9c6 2300 	strd	r2, r3, [r6]
 800ae3a:	68eb      	ldr	r3, [r5, #12]
 800ae3c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f000 fd76 	bl	800b930 <rmw_uxrce_init_session_memory>
 800ae44:	4620      	mov	r0, r4
 800ae46:	4970      	ldr	r1, [pc, #448]	@ (800b008 <rmw_init+0x210>)
 800ae48:	2204      	movs	r2, #4
 800ae4a:	f000 fdb1 	bl	800b9b0 <rmw_uxrce_init_static_input_buffer_memory>
 800ae4e:	f04f 0800 	mov.w	r8, #0
 800ae52:	486c      	ldr	r0, [pc, #432]	@ (800b004 <rmw_init+0x20c>)
 800ae54:	f884 800d 	strb.w	r8, [r4, #13]
 800ae58:	f008 f94a 	bl	80130f0 <get_memory>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	f000 80a9 	beq.w	800afb4 <rmw_init+0x1bc>
 800ae62:	6884      	ldr	r4, [r0, #8]
 800ae64:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ae66:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ae68:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ae6c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ae70:	9101      	str	r1, [sp, #4]
 800ae72:	6a00      	ldr	r0, [r0, #32]
 800ae74:	9000      	str	r0, [sp, #0]
 800ae76:	f104 0910 	add.w	r9, r4, #16
 800ae7a:	4661      	mov	r1, ip
 800ae7c:	4648      	mov	r0, r9
 800ae7e:	f002 fb7f 	bl	800d580 <uxr_set_custom_transport_callbacks>
 800ae82:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800ae86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ae8a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ae8e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ae92:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ae96:	495d      	ldr	r1, [pc, #372]	@ (800b00c <rmw_init+0x214>)
 800ae98:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800ae9c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800aea0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800aea4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800aea8:	4859      	ldr	r0, [pc, #356]	@ (800b010 <rmw_init+0x218>)
 800aeaa:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800aeae:	2201      	movs	r2, #1
 800aeb0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800aeb2:	f000 fd1d 	bl	800b8f0 <rmw_uxrce_init_node_memory>
 800aeb6:	4957      	ldr	r1, [pc, #348]	@ (800b014 <rmw_init+0x21c>)
 800aeb8:	4857      	ldr	r0, [pc, #348]	@ (800b018 <rmw_init+0x220>)
 800aeba:	2205      	movs	r2, #5
 800aebc:	f000 fcf8 	bl	800b8b0 <rmw_uxrce_init_subscription_memory>
 800aec0:	4956      	ldr	r1, [pc, #344]	@ (800b01c <rmw_init+0x224>)
 800aec2:	4857      	ldr	r0, [pc, #348]	@ (800b020 <rmw_init+0x228>)
 800aec4:	220a      	movs	r2, #10
 800aec6:	f000 fcd3 	bl	800b870 <rmw_uxrce_init_publisher_memory>
 800aeca:	4956      	ldr	r1, [pc, #344]	@ (800b024 <rmw_init+0x22c>)
 800aecc:	4856      	ldr	r0, [pc, #344]	@ (800b028 <rmw_init+0x230>)
 800aece:	2201      	movs	r2, #1
 800aed0:	f000 fc8e 	bl	800b7f0 <rmw_uxrce_init_service_memory>
 800aed4:	4955      	ldr	r1, [pc, #340]	@ (800b02c <rmw_init+0x234>)
 800aed6:	4856      	ldr	r0, [pc, #344]	@ (800b030 <rmw_init+0x238>)
 800aed8:	2201      	movs	r2, #1
 800aeda:	f000 fca9 	bl	800b830 <rmw_uxrce_init_client_memory>
 800aede:	4955      	ldr	r1, [pc, #340]	@ (800b034 <rmw_init+0x23c>)
 800aee0:	4855      	ldr	r0, [pc, #340]	@ (800b038 <rmw_init+0x240>)
 800aee2:	220f      	movs	r2, #15
 800aee4:	f000 fd44 	bl	800b970 <rmw_uxrce_init_topic_memory>
 800aee8:	4954      	ldr	r1, [pc, #336]	@ (800b03c <rmw_init+0x244>)
 800aeea:	4855      	ldr	r0, [pc, #340]	@ (800b040 <rmw_init+0x248>)
 800aeec:	2203      	movs	r2, #3
 800aeee:	f000 fd7f 	bl	800b9f0 <rmw_uxrce_init_init_options_impl_memory>
 800aef2:	4954      	ldr	r1, [pc, #336]	@ (800b044 <rmw_init+0x24c>)
 800aef4:	4854      	ldr	r0, [pc, #336]	@ (800b048 <rmw_init+0x250>)
 800aef6:	2204      	movs	r2, #4
 800aef8:	f000 fd9a 	bl	800ba30 <rmw_uxrce_init_wait_set_memory>
 800aefc:	4953      	ldr	r1, [pc, #332]	@ (800b04c <rmw_init+0x254>)
 800aefe:	4854      	ldr	r0, [pc, #336]	@ (800b050 <rmw_init+0x258>)
 800af00:	2204      	movs	r2, #4
 800af02:	f000 fdb5 	bl	800ba70 <rmw_uxrce_init_guard_condition_memory>
 800af06:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800af08:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800af0a:	4642      	mov	r2, r8
 800af0c:	f000 fc38 	bl	800b780 <rmw_uxrce_transport_init>
 800af10:	4607      	mov	r7, r0
 800af12:	2800      	cmp	r0, #0
 800af14:	d158      	bne.n	800afc8 <rmw_init+0x1d0>
 800af16:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800af18:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800af1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af1e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800af22:	4628      	mov	r0, r5
 800af24:	f002 fd60 	bl	800d9e8 <uxr_init_session>
 800af28:	494a      	ldr	r1, [pc, #296]	@ (800b054 <rmw_init+0x25c>)
 800af2a:	4622      	mov	r2, r4
 800af2c:	4628      	mov	r0, r5
 800af2e:	f002 fd7f 	bl	800da30 <uxr_set_topic_callback>
 800af32:	4949      	ldr	r1, [pc, #292]	@ (800b058 <rmw_init+0x260>)
 800af34:	463a      	mov	r2, r7
 800af36:	4628      	mov	r0, r5
 800af38:	f002 fd76 	bl	800da28 <uxr_set_status_callback>
 800af3c:	4947      	ldr	r1, [pc, #284]	@ (800b05c <rmw_init+0x264>)
 800af3e:	463a      	mov	r2, r7
 800af40:	4628      	mov	r0, r5
 800af42:	f002 fd79 	bl	800da38 <uxr_set_request_callback>
 800af46:	4946      	ldr	r1, [pc, #280]	@ (800b060 <rmw_init+0x268>)
 800af48:	463a      	mov	r2, r7
 800af4a:	4628      	mov	r0, r5
 800af4c:	f002 fd78 	bl	800da40 <uxr_set_reply_callback>
 800af50:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800af54:	2304      	movs	r3, #4
 800af56:	0092      	lsls	r2, r2, #2
 800af58:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800af5c:	4628      	mov	r0, r5
 800af5e:	f002 fdad 	bl	800dabc <uxr_create_input_reliable_stream>
 800af62:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800af66:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	2304      	movs	r3, #4
 800af6e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800af72:	4628      	mov	r0, r5
 800af74:	f002 fd7a 	bl	800da6c <uxr_create_output_reliable_stream>
 800af78:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800af7c:	4628      	mov	r0, r5
 800af7e:	f002 fd97 	bl	800dab0 <uxr_create_input_best_effort_stream>
 800af82:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800af86:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800af8a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800af8e:	3114      	adds	r1, #20
 800af90:	4628      	mov	r0, r5
 800af92:	f002 fd59 	bl	800da48 <uxr_create_output_best_effort_stream>
 800af96:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800af9a:	4628      	mov	r0, r5
 800af9c:	f003 fb38 	bl	800e610 <uxr_create_session>
 800afa0:	b1f8      	cbz	r0, 800afe2 <rmw_init+0x1ea>
 800afa2:	4638      	mov	r0, r7
 800afa4:	b003      	add	sp, #12
 800afa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afaa:	270b      	movs	r7, #11
 800afac:	4638      	mov	r0, r7
 800afae:	b003      	add	sp, #12
 800afb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afb4:	2701      	movs	r7, #1
 800afb6:	4638      	mov	r0, r7
 800afb8:	b003      	add	sp, #12
 800afba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afbe:	270c      	movs	r7, #12
 800afc0:	4638      	mov	r0, r7
 800afc2:	b003      	add	sp, #12
 800afc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afc8:	4648      	mov	r0, r9
 800afca:	f002 fb1b 	bl	800d604 <uxr_close_custom_transport>
 800afce:	480d      	ldr	r0, [pc, #52]	@ (800b004 <rmw_init+0x20c>)
 800afd0:	4621      	mov	r1, r4
 800afd2:	f008 f89d 	bl	8013110 <put_memory>
 800afd6:	4638      	mov	r0, r7
 800afd8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800afdc:	b003      	add	sp, #12
 800afde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afe2:	4648      	mov	r0, r9
 800afe4:	f002 fb0e 	bl	800d604 <uxr_close_custom_transport>
 800afe8:	4806      	ldr	r0, [pc, #24]	@ (800b004 <rmw_init+0x20c>)
 800afea:	4621      	mov	r1, r4
 800afec:	f008 f890 	bl	8013110 <put_memory>
 800aff0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800aff2:	2701      	movs	r7, #1
 800aff4:	e7d5      	b.n	800afa2 <rmw_init+0x1aa>
 800aff6:	bf00      	nop
 800aff8:	08016ad4 	.word	0x08016ad4
 800affc:	2000aca4 	.word	0x2000aca4
 800b000:	20006f50 	.word	0x20006f50
 800b004:	2000ac94 	.word	0x2000ac94
 800b008:	200084f8 	.word	0x200084f8
 800b00c:	20006574 	.word	0x20006574
 800b010:	2000ac64 	.word	0x2000ac64
 800b014:	2000a5f8 	.word	0x2000a5f8
 800b018:	2000acb4 	.word	0x2000acb4
 800b01c:	20006618 	.word	0x20006618
 800b020:	2000ac74 	.word	0x2000ac74
 800b024:	20006e88 	.word	0x20006e88
 800b028:	2000ac84 	.word	0x2000ac84
 800b02c:	200063a8 	.word	0x200063a8
 800b030:	20006398 	.word	0x20006398
 800b034:	2000aa30 	.word	0x2000aa30
 800b038:	2000acc4 	.word	0x2000acc4
 800b03c:	200064f0 	.word	0x200064f0
 800b040:	2000ac54 	.word	0x2000ac54
 800b044:	2000abd4 	.word	0x2000abd4
 800b048:	2000acd4 	.word	0x2000acd4
 800b04c:	20006470 	.word	0x20006470
 800b050:	2000ac44 	.word	0x2000ac44
 800b054:	08012f29 	.word	0x08012f29
 800b058:	08012f21 	.word	0x08012f21
 800b05c:	08012fc1 	.word	0x08012fc1
 800b060:	0801305d 	.word	0x0801305d

0800b064 <rmw_context_fini>:
 800b064:	4b17      	ldr	r3, [pc, #92]	@ (800b0c4 <rmw_context_fini+0x60>)
 800b066:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	681c      	ldr	r4, [r3, #0]
 800b06c:	4605      	mov	r5, r0
 800b06e:	b334      	cbz	r4, 800b0be <rmw_context_fini+0x5a>
 800b070:	2600      	movs	r6, #0
 800b072:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800b076:	6902      	ldr	r2, [r0, #16]
 800b078:	428a      	cmp	r2, r1
 800b07a:	d018      	beq.n	800b0ae <rmw_context_fini+0x4a>
 800b07c:	2c00      	cmp	r4, #0
 800b07e:	d1f8      	bne.n	800b072 <rmw_context_fini+0xe>
 800b080:	b189      	cbz	r1, 800b0a6 <rmw_context_fini+0x42>
 800b082:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800b086:	789b      	ldrb	r3, [r3, #2]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800b08e:	bf14      	ite	ne
 800b090:	210a      	movne	r1, #10
 800b092:	2100      	moveq	r1, #0
 800b094:	f003 fa94 	bl	800e5c0 <uxr_delete_session_retries>
 800b098:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b09a:	f000 fd09 	bl	800bab0 <rmw_uxrce_fini_session_memory>
 800b09e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b0a0:	3010      	adds	r0, #16
 800b0a2:	f002 faaf 	bl	800d604 <uxr_close_custom_transport>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	bd70      	pop	{r4, r5, r6, pc}
 800b0ae:	3018      	adds	r0, #24
 800b0b0:	f000 f89c 	bl	800b1ec <rmw_destroy_node>
 800b0b4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	2c00      	cmp	r4, #0
 800b0ba:	d1da      	bne.n	800b072 <rmw_context_fini+0xe>
 800b0bc:	e7e0      	b.n	800b080 <rmw_context_fini+0x1c>
 800b0be:	4626      	mov	r6, r4
 800b0c0:	e7de      	b.n	800b080 <rmw_context_fini+0x1c>
 800b0c2:	bf00      	nop
 800b0c4:	2000ac64 	.word	0x2000ac64

0800b0c8 <create_node>:
 800b0c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d05f      	beq.n	800b192 <create_node+0xca>
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	4835      	ldr	r0, [pc, #212]	@ (800b1ac <create_node+0xe4>)
 800b0d6:	460f      	mov	r7, r1
 800b0d8:	4690      	mov	r8, r2
 800b0da:	461d      	mov	r5, r3
 800b0dc:	f008 f808 	bl	80130f0 <get_memory>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d056      	beq.n	800b192 <create_node+0xca>
 800b0e4:	6884      	ldr	r4, [r0, #8]
 800b0e6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b0e8:	6123      	str	r3, [r4, #16]
 800b0ea:	f7ff fd5d 	bl	800aba8 <rmw_get_implementation_identifier>
 800b0ee:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800b0f2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b0f6:	f8c4 9020 	str.w	r9, [r4, #32]
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7f5 f89a 	bl	8000234 <strlen>
 800b100:	1c42      	adds	r2, r0, #1
 800b102:	2a3c      	cmp	r2, #60	@ 0x3c
 800b104:	f104 0518 	add.w	r5, r4, #24
 800b108:	d840      	bhi.n	800b18c <create_node+0xc4>
 800b10a:	4648      	mov	r0, r9
 800b10c:	4631      	mov	r1, r6
 800b10e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800b112:	f009 ffaa 	bl	801506a <memcpy>
 800b116:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800b11a:	4638      	mov	r0, r7
 800b11c:	f7f5 f88a 	bl	8000234 <strlen>
 800b120:	1c42      	adds	r2, r0, #1
 800b122:	2a3c      	cmp	r2, #60	@ 0x3c
 800b124:	d832      	bhi.n	800b18c <create_node+0xc4>
 800b126:	4639      	mov	r1, r7
 800b128:	4648      	mov	r0, r9
 800b12a:	f009 ff9e 	bl	801506a <memcpy>
 800b12e:	6923      	ldr	r3, [r4, #16]
 800b130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b134:	2101      	movs	r1, #1
 800b136:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800b13a:	1842      	adds	r2, r0, r1
 800b13c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800b140:	f002 fa64 	bl	800d60c <uxr_object_id>
 800b144:	6160      	str	r0, [r4, #20]
 800b146:	783b      	ldrb	r3, [r7, #0]
 800b148:	2b2f      	cmp	r3, #47	@ 0x2f
 800b14a:	d127      	bne.n	800b19c <create_node+0xd4>
 800b14c:	787b      	ldrb	r3, [r7, #1]
 800b14e:	bb2b      	cbnz	r3, 800b19c <create_node+0xd4>
 800b150:	4a17      	ldr	r2, [pc, #92]	@ (800b1b0 <create_node+0xe8>)
 800b152:	4818      	ldr	r0, [pc, #96]	@ (800b1b4 <create_node+0xec>)
 800b154:	4633      	mov	r3, r6
 800b156:	213c      	movs	r1, #60	@ 0x3c
 800b158:	f009 fd4a 	bl	8014bf0 <sniprintf>
 800b15c:	6920      	ldr	r0, [r4, #16]
 800b15e:	4915      	ldr	r1, [pc, #84]	@ (800b1b4 <create_node+0xec>)
 800b160:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800b164:	9100      	str	r1, [sp, #0]
 800b166:	2106      	movs	r1, #6
 800b168:	9101      	str	r1, [sp, #4]
 800b16a:	6811      	ldr	r1, [r2, #0]
 800b16c:	6962      	ldr	r2, [r4, #20]
 800b16e:	fa1f f388 	uxth.w	r3, r8
 800b172:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b176:	f002 f91b 	bl	800d3b0 <uxr_buffer_create_participant_bin>
 800b17a:	4602      	mov	r2, r0
 800b17c:	6920      	ldr	r0, [r4, #16]
 800b17e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b182:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b186:	f000 fe09 	bl	800bd9c <run_xrce_session>
 800b18a:	b918      	cbnz	r0, 800b194 <create_node+0xcc>
 800b18c:	4628      	mov	r0, r5
 800b18e:	f000 fc95 	bl	800babc <rmw_uxrce_fini_node_memory>
 800b192:	2500      	movs	r5, #0
 800b194:	4628      	mov	r0, r5
 800b196:	b003      	add	sp, #12
 800b198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b19c:	4a06      	ldr	r2, [pc, #24]	@ (800b1b8 <create_node+0xf0>)
 800b19e:	9600      	str	r6, [sp, #0]
 800b1a0:	463b      	mov	r3, r7
 800b1a2:	213c      	movs	r1, #60	@ 0x3c
 800b1a4:	4803      	ldr	r0, [pc, #12]	@ (800b1b4 <create_node+0xec>)
 800b1a6:	f009 fd23 	bl	8014bf0 <sniprintf>
 800b1aa:	e7d7      	b.n	800b15c <create_node+0x94>
 800b1ac:	2000ac64 	.word	0x2000ac64
 800b1b0:	080161bc 	.word	0x080161bc
 800b1b4:	2000635c 	.word	0x2000635c
 800b1b8:	08015e64 	.word	0x08015e64

0800b1bc <rmw_create_node>:
 800b1bc:	b199      	cbz	r1, 800b1e6 <rmw_create_node+0x2a>
 800b1be:	780b      	ldrb	r3, [r1, #0]
 800b1c0:	468c      	mov	ip, r1
 800b1c2:	b183      	cbz	r3, 800b1e6 <rmw_create_node+0x2a>
 800b1c4:	b410      	push	{r4}
 800b1c6:	4614      	mov	r4, r2
 800b1c8:	b14a      	cbz	r2, 800b1de <rmw_create_node+0x22>
 800b1ca:	7813      	ldrb	r3, [r2, #0]
 800b1cc:	b13b      	cbz	r3, 800b1de <rmw_create_node+0x22>
 800b1ce:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4660      	mov	r0, ip
 800b1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1da:	f7ff bf75 	b.w	800b0c8 <create_node>
 800b1de:	2000      	movs	r0, #0
 800b1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop

0800b1ec <rmw_destroy_node>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	b328      	cbz	r0, 800b23c <rmw_destroy_node+0x50>
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	6800      	ldr	r0, [r0, #0]
 800b1f4:	b120      	cbz	r0, 800b200 <rmw_destroy_node+0x14>
 800b1f6:	4b36      	ldr	r3, [pc, #216]	@ (800b2d0 <rmw_destroy_node+0xe4>)
 800b1f8:	6819      	ldr	r1, [r3, #0]
 800b1fa:	f7f5 f811 	bl	8000220 <strcmp>
 800b1fe:	b9e8      	cbnz	r0, 800b23c <rmw_destroy_node+0x50>
 800b200:	687d      	ldr	r5, [r7, #4]
 800b202:	b1dd      	cbz	r5, 800b23c <rmw_destroy_node+0x50>
 800b204:	4b33      	ldr	r3, [pc, #204]	@ (800b2d4 <rmw_destroy_node+0xe8>)
 800b206:	681c      	ldr	r4, [r3, #0]
 800b208:	2c00      	cmp	r4, #0
 800b20a:	d05f      	beq.n	800b2cc <rmw_destroy_node+0xe0>
 800b20c:	2600      	movs	r6, #0
 800b20e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b212:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800b216:	429d      	cmp	r5, r3
 800b218:	d013      	beq.n	800b242 <rmw_destroy_node+0x56>
 800b21a:	2c00      	cmp	r4, #0
 800b21c:	d1f7      	bne.n	800b20e <rmw_destroy_node+0x22>
 800b21e:	4b2e      	ldr	r3, [pc, #184]	@ (800b2d8 <rmw_destroy_node+0xec>)
 800b220:	681c      	ldr	r4, [r3, #0]
 800b222:	b1c4      	cbz	r4, 800b256 <rmw_destroy_node+0x6a>
 800b224:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b228:	6a0b      	ldr	r3, [r1, #32]
 800b22a:	429d      	cmp	r5, r3
 800b22c:	d1f9      	bne.n	800b222 <rmw_destroy_node+0x36>
 800b22e:	317c      	adds	r1, #124	@ 0x7c
 800b230:	4638      	mov	r0, r7
 800b232:	f000 fa45 	bl	800b6c0 <rmw_destroy_subscription>
 800b236:	2801      	cmp	r0, #1
 800b238:	4606      	mov	r6, r0
 800b23a:	d1f2      	bne.n	800b222 <rmw_destroy_node+0x36>
 800b23c:	2601      	movs	r6, #1
 800b23e:	4630      	mov	r0, r6
 800b240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b242:	3184      	adds	r1, #132	@ 0x84
 800b244:	4638      	mov	r0, r7
 800b246:	f000 f853 	bl	800b2f0 <rmw_destroy_publisher>
 800b24a:	2801      	cmp	r0, #1
 800b24c:	4606      	mov	r6, r0
 800b24e:	d0f5      	beq.n	800b23c <rmw_destroy_node+0x50>
 800b250:	2c00      	cmp	r4, #0
 800b252:	d1dc      	bne.n	800b20e <rmw_destroy_node+0x22>
 800b254:	e7e3      	b.n	800b21e <rmw_destroy_node+0x32>
 800b256:	4b21      	ldr	r3, [pc, #132]	@ (800b2dc <rmw_destroy_node+0xf0>)
 800b258:	681c      	ldr	r4, [r3, #0]
 800b25a:	b16c      	cbz	r4, 800b278 <rmw_destroy_node+0x8c>
 800b25c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b260:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b262:	429d      	cmp	r5, r3
 800b264:	d1f9      	bne.n	800b25a <rmw_destroy_node+0x6e>
 800b266:	317c      	adds	r1, #124	@ 0x7c
 800b268:	4638      	mov	r0, r7
 800b26a:	f000 f9e5 	bl	800b638 <rmw_destroy_service>
 800b26e:	2801      	cmp	r0, #1
 800b270:	4606      	mov	r6, r0
 800b272:	d0e3      	beq.n	800b23c <rmw_destroy_node+0x50>
 800b274:	2c00      	cmp	r4, #0
 800b276:	d1f1      	bne.n	800b25c <rmw_destroy_node+0x70>
 800b278:	4b19      	ldr	r3, [pc, #100]	@ (800b2e0 <rmw_destroy_node+0xf4>)
 800b27a:	681c      	ldr	r4, [r3, #0]
 800b27c:	b16c      	cbz	r4, 800b29a <rmw_destroy_node+0xae>
 800b27e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b282:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b284:	429d      	cmp	r5, r3
 800b286:	d1f9      	bne.n	800b27c <rmw_destroy_node+0x90>
 800b288:	317c      	adds	r1, #124	@ 0x7c
 800b28a:	4638      	mov	r0, r7
 800b28c:	f7ff fc28 	bl	800aae0 <rmw_destroy_client>
 800b290:	2801      	cmp	r0, #1
 800b292:	4606      	mov	r6, r0
 800b294:	d0d2      	beq.n	800b23c <rmw_destroy_node+0x50>
 800b296:	2c00      	cmp	r4, #0
 800b298:	d1f1      	bne.n	800b27e <rmw_destroy_node+0x92>
 800b29a:	6928      	ldr	r0, [r5, #16]
 800b29c:	696a      	ldr	r2, [r5, #20]
 800b29e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b2a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b2a6:	6819      	ldr	r1, [r3, #0]
 800b2a8:	f002 f836 	bl	800d318 <uxr_buffer_delete_entity>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	6928      	ldr	r0, [r5, #16]
 800b2b0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b2b4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b2b8:	f000 fd70 	bl	800bd9c <run_xrce_session>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	bf08      	it	eq
 800b2c0:	2602      	moveq	r6, #2
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f000 fbfa 	bl	800babc <rmw_uxrce_fini_node_memory>
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2cc:	4626      	mov	r6, r4
 800b2ce:	e7a6      	b.n	800b21e <rmw_destroy_node+0x32>
 800b2d0:	08016ad4 	.word	0x08016ad4
 800b2d4:	2000ac74 	.word	0x2000ac74
 800b2d8:	2000acb4 	.word	0x2000acb4
 800b2dc:	2000ac84 	.word	0x2000ac84
 800b2e0:	20006398 	.word	0x20006398

0800b2e4 <rmw_node_get_graph_guard_condition>:
 800b2e4:	6843      	ldr	r3, [r0, #4]
 800b2e6:	6918      	ldr	r0, [r3, #16]
 800b2e8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop

0800b2f0 <rmw_destroy_publisher>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	b128      	cbz	r0, 800b300 <rmw_destroy_publisher+0x10>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	6800      	ldr	r0, [r0, #0]
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	f000 fe1f 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800b2fe:	b910      	cbnz	r0, 800b306 <rmw_destroy_publisher+0x16>
 800b300:	2401      	movs	r4, #1
 800b302:	4620      	mov	r0, r4
 800b304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b306:	6863      	ldr	r3, [r4, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0f9      	beq.n	800b300 <rmw_destroy_publisher+0x10>
 800b30c:	2d00      	cmp	r5, #0
 800b30e:	d0f7      	beq.n	800b300 <rmw_destroy_publisher+0x10>
 800b310:	6828      	ldr	r0, [r5, #0]
 800b312:	f000 fe13 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800b316:	2800      	cmp	r0, #0
 800b318:	d0f2      	beq.n	800b300 <rmw_destroy_publisher+0x10>
 800b31a:	686c      	ldr	r4, [r5, #4]
 800b31c:	2c00      	cmp	r4, #0
 800b31e:	d0ef      	beq.n	800b300 <rmw_destroy_publisher+0x10>
 800b320:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b322:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b326:	f007 ff2f 	bl	8013188 <destroy_topic>
 800b32a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b32e:	6962      	ldr	r2, [r4, #20]
 800b330:	6918      	ldr	r0, [r3, #16]
 800b332:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b336:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b33a:	6819      	ldr	r1, [r3, #0]
 800b33c:	f001 ffec 	bl	800d318 <uxr_buffer_delete_entity>
 800b340:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b344:	6922      	ldr	r2, [r4, #16]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b34c:	4604      	mov	r4, r0
 800b34e:	6809      	ldr	r1, [r1, #0]
 800b350:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b354:	f001 ffe0 	bl	800d318 <uxr_buffer_delete_entity>
 800b358:	693e      	ldr	r6, [r7, #16]
 800b35a:	4622      	mov	r2, r4
 800b35c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b360:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b364:	4604      	mov	r4, r0
 800b366:	4630      	mov	r0, r6
 800b368:	f000 fd18 	bl	800bd9c <run_xrce_session>
 800b36c:	693e      	ldr	r6, [r7, #16]
 800b36e:	4622      	mov	r2, r4
 800b370:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b374:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b378:	4604      	mov	r4, r0
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 fd0e 	bl	800bd9c <run_xrce_session>
 800b380:	b12c      	cbz	r4, 800b38e <rmw_destroy_publisher+0x9e>
 800b382:	b120      	cbz	r0, 800b38e <rmw_destroy_publisher+0x9e>
 800b384:	2400      	movs	r4, #0
 800b386:	4628      	mov	r0, r5
 800b388:	f000 fbb0 	bl	800baec <rmw_uxrce_fini_publisher_memory>
 800b38c:	e7b9      	b.n	800b302 <rmw_destroy_publisher+0x12>
 800b38e:	2402      	movs	r4, #2
 800b390:	e7f9      	b.n	800b386 <rmw_destroy_publisher+0x96>
 800b392:	bf00      	nop

0800b394 <rmw_send_request>:
 800b394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b398:	4604      	mov	r4, r0
 800b39a:	6800      	ldr	r0, [r0, #0]
 800b39c:	b08b      	sub	sp, #44	@ 0x2c
 800b39e:	460e      	mov	r6, r1
 800b3a0:	4615      	mov	r5, r2
 800b3a2:	b128      	cbz	r0, 800b3b0 <rmw_send_request+0x1c>
 800b3a4:	4b21      	ldr	r3, [pc, #132]	@ (800b42c <rmw_send_request+0x98>)
 800b3a6:	6819      	ldr	r1, [r3, #0]
 800b3a8:	f7f4 ff3a 	bl	8000220 <strcmp>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d139      	bne.n	800b424 <rmw_send_request+0x90>
 800b3b0:	6864      	ldr	r4, [r4, #4]
 800b3b2:	6963      	ldr	r3, [r4, #20]
 800b3b4:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	4798      	blx	r3
 800b3bc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3c6:	4798      	blx	r3
 800b3c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b3cc:	9000      	str	r0, [sp, #0]
 800b3ce:	6922      	ldr	r2, [r4, #16]
 800b3d0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800b3d2:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b3d6:	ab02      	add	r3, sp, #8
 800b3d8:	f004 f99e 	bl	800f718 <uxr_prepare_output_stream>
 800b3dc:	2700      	movs	r7, #0
 800b3de:	6028      	str	r0, [r5, #0]
 800b3e0:	606f      	str	r7, [r5, #4]
 800b3e2:	b198      	cbz	r0, 800b40c <rmw_send_request+0x78>
 800b3e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b3e8:	a902      	add	r1, sp, #8
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	4798      	blx	r3
 800b3ee:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800b3f2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d00c      	beq.n	800b414 <rmw_send_request+0x80>
 800b3fa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800b3fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b400:	f002 ff42 	bl	800e288 <uxr_run_session_until_confirm_delivery>
 800b404:	4638      	mov	r0, r7
 800b406:	b00b      	add	sp, #44	@ 0x2c
 800b408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b40c:	2001      	movs	r0, #1
 800b40e:	b00b      	add	sp, #44	@ 0x2c
 800b410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b414:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b418:	f002 fb76 	bl	800db08 <uxr_flash_output_streams>
 800b41c:	4638      	mov	r0, r7
 800b41e:	b00b      	add	sp, #44	@ 0x2c
 800b420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b424:	200c      	movs	r0, #12
 800b426:	b00b      	add	sp, #44	@ 0x2c
 800b428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b42c:	08016ad4 	.word	0x08016ad4

0800b430 <rmw_take_request>:
 800b430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b434:	4605      	mov	r5, r0
 800b436:	6800      	ldr	r0, [r0, #0]
 800b438:	b089      	sub	sp, #36	@ 0x24
 800b43a:	460c      	mov	r4, r1
 800b43c:	4690      	mov	r8, r2
 800b43e:	461e      	mov	r6, r3
 800b440:	b128      	cbz	r0, 800b44e <rmw_take_request+0x1e>
 800b442:	4b28      	ldr	r3, [pc, #160]	@ (800b4e4 <rmw_take_request+0xb4>)
 800b444:	6819      	ldr	r1, [r3, #0]
 800b446:	f7f4 feeb 	bl	8000220 <strcmp>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d146      	bne.n	800b4dc <rmw_take_request+0xac>
 800b44e:	b10e      	cbz	r6, 800b454 <rmw_take_request+0x24>
 800b450:	2300      	movs	r3, #0
 800b452:	7033      	strb	r3, [r6, #0]
 800b454:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800b458:	f000 fc22 	bl	800bca0 <rmw_uxrce_clean_expired_static_input_buffer>
 800b45c:	4648      	mov	r0, r9
 800b45e:	f000 fbf9 	bl	800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>
 800b462:	4607      	mov	r7, r0
 800b464:	b3b0      	cbz	r0, 800b4d4 <rmw_take_request+0xa4>
 800b466:	6885      	ldr	r5, [r0, #8]
 800b468:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800b46c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800b470:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b474:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800b478:	7423      	strb	r3, [r4, #16]
 800b47a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800b47e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800b482:	74e2      	strb	r2, [r4, #19]
 800b484:	f8a4 3011 	strh.w	r3, [r4, #17]
 800b488:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800b48c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800b490:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800b494:	61e1      	str	r1, [r4, #28]
 800b496:	6162      	str	r2, [r4, #20]
 800b498:	61a3      	str	r3, [r4, #24]
 800b49a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	4798      	blx	r3
 800b4a2:	6844      	ldr	r4, [r0, #4]
 800b4a4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800b4a8:	f105 0110 	add.w	r1, r5, #16
 800b4ac:	4668      	mov	r0, sp
 800b4ae:	f001 fe6b 	bl	800d188 <ucdr_init_buffer>
 800b4b2:	68e3      	ldr	r3, [r4, #12]
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	4668      	mov	r0, sp
 800b4b8:	4798      	blx	r3
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	4604      	mov	r4, r0
 800b4be:	480a      	ldr	r0, [pc, #40]	@ (800b4e8 <rmw_take_request+0xb8>)
 800b4c0:	f007 fe26 	bl	8013110 <put_memory>
 800b4c4:	b106      	cbz	r6, 800b4c8 <rmw_take_request+0x98>
 800b4c6:	7034      	strb	r4, [r6, #0]
 800b4c8:	f084 0001 	eor.w	r0, r4, #1
 800b4cc:	b2c0      	uxtb	r0, r0
 800b4ce:	b009      	add	sp, #36	@ 0x24
 800b4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4d4:	2001      	movs	r0, #1
 800b4d6:	b009      	add	sp, #36	@ 0x24
 800b4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4dc:	200c      	movs	r0, #12
 800b4de:	b009      	add	sp, #36	@ 0x24
 800b4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4e4:	08016ad4 	.word	0x08016ad4
 800b4e8:	2000aca4 	.word	0x2000aca4

0800b4ec <rmw_send_response>:
 800b4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	6800      	ldr	r0, [r0, #0]
 800b4f2:	b091      	sub	sp, #68	@ 0x44
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	4616      	mov	r6, r2
 800b4f8:	b128      	cbz	r0, 800b506 <rmw_send_response+0x1a>
 800b4fa:	4b29      	ldr	r3, [pc, #164]	@ (800b5a0 <rmw_send_response+0xb4>)
 800b4fc:	6819      	ldr	r1, [r3, #0]
 800b4fe:	f7f4 fe8f 	bl	8000220 <strcmp>
 800b502:	2800      	cmp	r0, #0
 800b504:	d141      	bne.n	800b58a <rmw_send_response+0x9e>
 800b506:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800b50a:	9306      	str	r3, [sp, #24]
 800b50c:	4623      	mov	r3, r4
 800b50e:	9207      	str	r2, [sp, #28]
 800b510:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b514:	686d      	ldr	r5, [r5, #4]
 800b516:	789b      	ldrb	r3, [r3, #2]
 800b518:	68a1      	ldr	r1, [r4, #8]
 800b51a:	f88d 2017 	strb.w	r2, [sp, #23]
 800b51e:	f88d 3016 	strb.w	r3, [sp, #22]
 800b522:	68e2      	ldr	r2, [r4, #12]
 800b524:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800b528:	6860      	ldr	r0, [r4, #4]
 800b52a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b52e:	ab02      	add	r3, sp, #8
 800b530:	c307      	stmia	r3!, {r0, r1, r2}
 800b532:	696b      	ldr	r3, [r5, #20]
 800b534:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	4798      	blx	r3
 800b53a:	6844      	ldr	r4, [r0, #4]
 800b53c:	4630      	mov	r0, r6
 800b53e:	6923      	ldr	r3, [r4, #16]
 800b540:	4798      	blx	r3
 800b542:	f100 0318 	add.w	r3, r0, #24
 800b546:	6938      	ldr	r0, [r7, #16]
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	692a      	ldr	r2, [r5, #16]
 800b54c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800b54e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b552:	ab08      	add	r3, sp, #32
 800b554:	f004 f8e0 	bl	800f718 <uxr_prepare_output_stream>
 800b558:	b910      	cbnz	r0, 800b560 <rmw_send_response+0x74>
 800b55a:	2001      	movs	r0, #1
 800b55c:	b011      	add	sp, #68	@ 0x44
 800b55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b560:	a902      	add	r1, sp, #8
 800b562:	a808      	add	r0, sp, #32
 800b564:	f004 ff46 	bl	80103f4 <uxr_serialize_SampleIdentity>
 800b568:	68a3      	ldr	r3, [r4, #8]
 800b56a:	a908      	add	r1, sp, #32
 800b56c:	4630      	mov	r0, r6
 800b56e:	4798      	blx	r3
 800b570:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800b574:	6938      	ldr	r0, [r7, #16]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d00a      	beq.n	800b590 <rmw_send_response+0xa4>
 800b57a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800b57c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b580:	f002 fe82 	bl	800e288 <uxr_run_session_until_confirm_delivery>
 800b584:	2000      	movs	r0, #0
 800b586:	b011      	add	sp, #68	@ 0x44
 800b588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b58a:	200c      	movs	r0, #12
 800b58c:	b011      	add	sp, #68	@ 0x44
 800b58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b590:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b594:	f002 fab8 	bl	800db08 <uxr_flash_output_streams>
 800b598:	2000      	movs	r0, #0
 800b59a:	b011      	add	sp, #68	@ 0x44
 800b59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	08016ad4 	.word	0x08016ad4

0800b5a4 <rmw_take_response>:
 800b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	6800      	ldr	r0, [r0, #0]
 800b5ac:	b088      	sub	sp, #32
 800b5ae:	4688      	mov	r8, r1
 800b5b0:	4617      	mov	r7, r2
 800b5b2:	461d      	mov	r5, r3
 800b5b4:	b120      	cbz	r0, 800b5c0 <rmw_take_response+0x1c>
 800b5b6:	4b1e      	ldr	r3, [pc, #120]	@ (800b630 <rmw_take_response+0x8c>)
 800b5b8:	6819      	ldr	r1, [r3, #0]
 800b5ba:	f7f4 fe31 	bl	8000220 <strcmp>
 800b5be:	bb78      	cbnz	r0, 800b620 <rmw_take_response+0x7c>
 800b5c0:	b10d      	cbz	r5, 800b5c6 <rmw_take_response+0x22>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	702b      	strb	r3, [r5, #0]
 800b5c6:	6864      	ldr	r4, [r4, #4]
 800b5c8:	f000 fb6a 	bl	800bca0 <rmw_uxrce_clean_expired_static_input_buffer>
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f000 fb41 	bl	800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	b340      	cbz	r0, 800b628 <rmw_take_response+0x84>
 800b5d6:	6963      	ldr	r3, [r4, #20]
 800b5d8:	6884      	ldr	r4, [r0, #8]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800b5e0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800b5e4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800b5e8:	4798      	blx	r3
 800b5ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b5ee:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800b5f2:	f104 0110 	add.w	r1, r4, #16
 800b5f6:	4668      	mov	r0, sp
 800b5f8:	f001 fdc6 	bl	800d188 <ucdr_init_buffer>
 800b5fc:	4639      	mov	r1, r7
 800b5fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b602:	4668      	mov	r0, sp
 800b604:	4798      	blx	r3
 800b606:	4631      	mov	r1, r6
 800b608:	4604      	mov	r4, r0
 800b60a:	480a      	ldr	r0, [pc, #40]	@ (800b634 <rmw_take_response+0x90>)
 800b60c:	f007 fd80 	bl	8013110 <put_memory>
 800b610:	b105      	cbz	r5, 800b614 <rmw_take_response+0x70>
 800b612:	702c      	strb	r4, [r5, #0]
 800b614:	f084 0001 	eor.w	r0, r4, #1
 800b618:	b2c0      	uxtb	r0, r0
 800b61a:	b008      	add	sp, #32
 800b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b620:	200c      	movs	r0, #12
 800b622:	b008      	add	sp, #32
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	2001      	movs	r0, #1
 800b62a:	b008      	add	sp, #32
 800b62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b630:	08016ad4 	.word	0x08016ad4
 800b634:	2000aca4 	.word	0x2000aca4

0800b638 <rmw_destroy_service>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	b128      	cbz	r0, 800b648 <rmw_destroy_service+0x10>
 800b63c:	4604      	mov	r4, r0
 800b63e:	6800      	ldr	r0, [r0, #0]
 800b640:	460d      	mov	r5, r1
 800b642:	f000 fc7b 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800b646:	b910      	cbnz	r0, 800b64e <rmw_destroy_service+0x16>
 800b648:	2401      	movs	r4, #1
 800b64a:	4620      	mov	r0, r4
 800b64c:	bd70      	pop	{r4, r5, r6, pc}
 800b64e:	6863      	ldr	r3, [r4, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d0f9      	beq.n	800b648 <rmw_destroy_service+0x10>
 800b654:	2d00      	cmp	r5, #0
 800b656:	d0f7      	beq.n	800b648 <rmw_destroy_service+0x10>
 800b658:	6828      	ldr	r0, [r5, #0]
 800b65a:	f000 fc6f 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d0f2      	beq.n	800b648 <rmw_destroy_service+0x10>
 800b662:	686e      	ldr	r6, [r5, #4]
 800b664:	2e00      	cmp	r6, #0
 800b666:	d0ef      	beq.n	800b648 <rmw_destroy_service+0x10>
 800b668:	6864      	ldr	r4, [r4, #4]
 800b66a:	6932      	ldr	r2, [r6, #16]
 800b66c:	6920      	ldr	r0, [r4, #16]
 800b66e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b672:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b676:	6819      	ldr	r1, [r3, #0]
 800b678:	f002 f832 	bl	800d6e0 <uxr_buffer_cancel_data>
 800b67c:	4602      	mov	r2, r0
 800b67e:	6920      	ldr	r0, [r4, #16]
 800b680:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b684:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b688:	f000 fb88 	bl	800bd9c <run_xrce_session>
 800b68c:	6920      	ldr	r0, [r4, #16]
 800b68e:	6932      	ldr	r2, [r6, #16]
 800b690:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b694:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b698:	6819      	ldr	r1, [r3, #0]
 800b69a:	f001 fe3d 	bl	800d318 <uxr_buffer_delete_entity>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	6920      	ldr	r0, [r4, #16]
 800b6a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b6a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b6aa:	f000 fb77 	bl	800bd9c <run_xrce_session>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	bf14      	ite	ne
 800b6b4:	2400      	movne	r4, #0
 800b6b6:	2402      	moveq	r4, #2
 800b6b8:	f000 fa44 	bl	800bb44 <rmw_uxrce_fini_service_memory>
 800b6bc:	e7c5      	b.n	800b64a <rmw_destroy_service+0x12>
 800b6be:	bf00      	nop

0800b6c0 <rmw_destroy_subscription>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	b128      	cbz	r0, 800b6d0 <rmw_destroy_subscription+0x10>
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	6800      	ldr	r0, [r0, #0]
 800b6c8:	460d      	mov	r5, r1
 800b6ca:	f000 fc37 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800b6ce:	b910      	cbnz	r0, 800b6d6 <rmw_destroy_subscription+0x16>
 800b6d0:	2401      	movs	r4, #1
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d6:	6863      	ldr	r3, [r4, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d0f9      	beq.n	800b6d0 <rmw_destroy_subscription+0x10>
 800b6dc:	2d00      	cmp	r5, #0
 800b6de:	d0f7      	beq.n	800b6d0 <rmw_destroy_subscription+0x10>
 800b6e0:	6828      	ldr	r0, [r5, #0]
 800b6e2:	f000 fc2b 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d0f2      	beq.n	800b6d0 <rmw_destroy_subscription+0x10>
 800b6ea:	686c      	ldr	r4, [r5, #4]
 800b6ec:	2c00      	cmp	r4, #0
 800b6ee:	d0ef      	beq.n	800b6d0 <rmw_destroy_subscription+0x10>
 800b6f0:	6a26      	ldr	r6, [r4, #32]
 800b6f2:	6962      	ldr	r2, [r4, #20]
 800b6f4:	6930      	ldr	r0, [r6, #16]
 800b6f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b6fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b6fe:	6819      	ldr	r1, [r3, #0]
 800b700:	f001 ffee 	bl	800d6e0 <uxr_buffer_cancel_data>
 800b704:	4602      	mov	r2, r0
 800b706:	6930      	ldr	r0, [r6, #16]
 800b708:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b70c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b710:	f000 fb44 	bl	800bd9c <run_xrce_session>
 800b714:	69e0      	ldr	r0, [r4, #28]
 800b716:	f007 fd37 	bl	8013188 <destroy_topic>
 800b71a:	6a23      	ldr	r3, [r4, #32]
 800b71c:	6962      	ldr	r2, [r4, #20]
 800b71e:	6918      	ldr	r0, [r3, #16]
 800b720:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b724:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b728:	6819      	ldr	r1, [r3, #0]
 800b72a:	f001 fdf5 	bl	800d318 <uxr_buffer_delete_entity>
 800b72e:	6a23      	ldr	r3, [r4, #32]
 800b730:	6922      	ldr	r2, [r4, #16]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b738:	4604      	mov	r4, r0
 800b73a:	6809      	ldr	r1, [r1, #0]
 800b73c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b740:	f001 fdea 	bl	800d318 <uxr_buffer_delete_entity>
 800b744:	6937      	ldr	r7, [r6, #16]
 800b746:	4622      	mov	r2, r4
 800b748:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800b74c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800b750:	4604      	mov	r4, r0
 800b752:	4638      	mov	r0, r7
 800b754:	f000 fb22 	bl	800bd9c <run_xrce_session>
 800b758:	6936      	ldr	r6, [r6, #16]
 800b75a:	4622      	mov	r2, r4
 800b75c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b760:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b764:	4604      	mov	r4, r0
 800b766:	4630      	mov	r0, r6
 800b768:	f000 fb18 	bl	800bd9c <run_xrce_session>
 800b76c:	b12c      	cbz	r4, 800b77a <rmw_destroy_subscription+0xba>
 800b76e:	b120      	cbz	r0, 800b77a <rmw_destroy_subscription+0xba>
 800b770:	2400      	movs	r4, #0
 800b772:	4628      	mov	r0, r5
 800b774:	f000 f9d0 	bl	800bb18 <rmw_uxrce_fini_subscription_memory>
 800b778:	e7ab      	b.n	800b6d2 <rmw_destroy_subscription+0x12>
 800b77a:	2402      	movs	r4, #2
 800b77c:	e7f9      	b.n	800b772 <rmw_destroy_subscription+0xb2>
 800b77e:	bf00      	nop

0800b780 <rmw_uxrce_transport_init>:
 800b780:	b508      	push	{r3, lr}
 800b782:	b108      	cbz	r0, 800b788 <rmw_uxrce_transport_init+0x8>
 800b784:	f100 0210 	add.w	r2, r0, #16
 800b788:	b139      	cbz	r1, 800b79a <rmw_uxrce_transport_init+0x1a>
 800b78a:	6949      	ldr	r1, [r1, #20]
 800b78c:	4610      	mov	r0, r2
 800b78e:	f001 ff05 	bl	800d59c <uxr_init_custom_transport>
 800b792:	f080 0001 	eor.w	r0, r0, #1
 800b796:	b2c0      	uxtb	r0, r0
 800b798:	bd08      	pop	{r3, pc}
 800b79a:	4b04      	ldr	r3, [pc, #16]	@ (800b7ac <rmw_uxrce_transport_init+0x2c>)
 800b79c:	4610      	mov	r0, r2
 800b79e:	6859      	ldr	r1, [r3, #4]
 800b7a0:	f001 fefc 	bl	800d59c <uxr_init_custom_transport>
 800b7a4:	f080 0001 	eor.w	r0, r0, #1
 800b7a8:	b2c0      	uxtb	r0, r0
 800b7aa:	bd08      	pop	{r3, pc}
 800b7ac:	20006200 	.word	0x20006200

0800b7b0 <rmw_uros_epoch_nanos>:
 800b7b0:	4b05      	ldr	r3, [pc, #20]	@ (800b7c8 <rmw_uros_epoch_nanos+0x18>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	b123      	cbz	r3, 800b7c0 <rmw_uros_epoch_nanos+0x10>
 800b7b6:	6898      	ldr	r0, [r3, #8]
 800b7b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b7bc:	f002 b99a 	b.w	800daf4 <uxr_epoch_nanos>
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	2000ac94 	.word	0x2000ac94

0800b7cc <rmw_uros_sync_session>:
 800b7cc:	b508      	push	{r3, lr}
 800b7ce:	4b07      	ldr	r3, [pc, #28]	@ (800b7ec <rmw_uros_sync_session+0x20>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	b14b      	cbz	r3, 800b7e8 <rmw_uros_sync_session+0x1c>
 800b7d4:	4601      	mov	r1, r0
 800b7d6:	6898      	ldr	r0, [r3, #8]
 800b7d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b7dc:	f002 fdcc 	bl	800e378 <uxr_sync_session>
 800b7e0:	f080 0001 	eor.w	r0, r0, #1
 800b7e4:	b2c0      	uxtb	r0, r0
 800b7e6:	bd08      	pop	{r3, pc}
 800b7e8:	2001      	movs	r0, #1
 800b7ea:	bd08      	pop	{r3, pc}
 800b7ec:	2000ac94 	.word	0x2000ac94

0800b7f0 <rmw_uxrce_init_service_memory>:
 800b7f0:	b1e2      	cbz	r2, 800b82c <rmw_uxrce_init_service_memory+0x3c>
 800b7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f6:	7b05      	ldrb	r5, [r0, #12]
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	b9ad      	cbnz	r5, 800b828 <rmw_uxrce_init_service_memory+0x38>
 800b7fc:	23c8      	movs	r3, #200	@ 0xc8
 800b7fe:	e9c0 5500 	strd	r5, r5, [r0]
 800b802:	6083      	str	r3, [r0, #8]
 800b804:	f240 1301 	movw	r3, #257	@ 0x101
 800b808:	4617      	mov	r7, r2
 800b80a:	8183      	strh	r3, [r0, #12]
 800b80c:	460c      	mov	r4, r1
 800b80e:	46a8      	mov	r8, r5
 800b810:	4621      	mov	r1, r4
 800b812:	4630      	mov	r0, r6
 800b814:	3501      	adds	r5, #1
 800b816:	f007 fc7b 	bl	8013110 <put_memory>
 800b81a:	42af      	cmp	r7, r5
 800b81c:	60a4      	str	r4, [r4, #8]
 800b81e:	f884 800c 	strb.w	r8, [r4, #12]
 800b822:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b826:	d1f3      	bne.n	800b810 <rmw_uxrce_init_service_memory+0x20>
 800b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop

0800b830 <rmw_uxrce_init_client_memory>:
 800b830:	b1e2      	cbz	r2, 800b86c <rmw_uxrce_init_client_memory+0x3c>
 800b832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b836:	7b05      	ldrb	r5, [r0, #12]
 800b838:	4606      	mov	r6, r0
 800b83a:	b9ad      	cbnz	r5, 800b868 <rmw_uxrce_init_client_memory+0x38>
 800b83c:	23c8      	movs	r3, #200	@ 0xc8
 800b83e:	e9c0 5500 	strd	r5, r5, [r0]
 800b842:	6083      	str	r3, [r0, #8]
 800b844:	f240 1301 	movw	r3, #257	@ 0x101
 800b848:	4617      	mov	r7, r2
 800b84a:	8183      	strh	r3, [r0, #12]
 800b84c:	460c      	mov	r4, r1
 800b84e:	46a8      	mov	r8, r5
 800b850:	4621      	mov	r1, r4
 800b852:	4630      	mov	r0, r6
 800b854:	3501      	adds	r5, #1
 800b856:	f007 fc5b 	bl	8013110 <put_memory>
 800b85a:	42af      	cmp	r7, r5
 800b85c:	60a4      	str	r4, [r4, #8]
 800b85e:	f884 800c 	strb.w	r8, [r4, #12]
 800b862:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b866:	d1f3      	bne.n	800b850 <rmw_uxrce_init_client_memory+0x20>
 800b868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop

0800b870 <rmw_uxrce_init_publisher_memory>:
 800b870:	b1e2      	cbz	r2, 800b8ac <rmw_uxrce_init_publisher_memory+0x3c>
 800b872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b876:	7b05      	ldrb	r5, [r0, #12]
 800b878:	4606      	mov	r6, r0
 800b87a:	b9ad      	cbnz	r5, 800b8a8 <rmw_uxrce_init_publisher_memory+0x38>
 800b87c:	23d8      	movs	r3, #216	@ 0xd8
 800b87e:	e9c0 5500 	strd	r5, r5, [r0]
 800b882:	6083      	str	r3, [r0, #8]
 800b884:	f240 1301 	movw	r3, #257	@ 0x101
 800b888:	4617      	mov	r7, r2
 800b88a:	8183      	strh	r3, [r0, #12]
 800b88c:	460c      	mov	r4, r1
 800b88e:	46a8      	mov	r8, r5
 800b890:	4621      	mov	r1, r4
 800b892:	4630      	mov	r0, r6
 800b894:	3501      	adds	r5, #1
 800b896:	f007 fc3b 	bl	8013110 <put_memory>
 800b89a:	42af      	cmp	r7, r5
 800b89c:	60a4      	str	r4, [r4, #8]
 800b89e:	f884 800c 	strb.w	r8, [r4, #12]
 800b8a2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b8a6:	d1f3      	bne.n	800b890 <rmw_uxrce_init_publisher_memory+0x20>
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop

0800b8b0 <rmw_uxrce_init_subscription_memory>:
 800b8b0:	b1e2      	cbz	r2, 800b8ec <rmw_uxrce_init_subscription_memory+0x3c>
 800b8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b6:	7b05      	ldrb	r5, [r0, #12]
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	b9ad      	cbnz	r5, 800b8e8 <rmw_uxrce_init_subscription_memory+0x38>
 800b8bc:	23d8      	movs	r3, #216	@ 0xd8
 800b8be:	e9c0 5500 	strd	r5, r5, [r0]
 800b8c2:	6083      	str	r3, [r0, #8]
 800b8c4:	f240 1301 	movw	r3, #257	@ 0x101
 800b8c8:	4617      	mov	r7, r2
 800b8ca:	8183      	strh	r3, [r0, #12]
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	46a8      	mov	r8, r5
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	3501      	adds	r5, #1
 800b8d6:	f007 fc1b 	bl	8013110 <put_memory>
 800b8da:	42af      	cmp	r7, r5
 800b8dc:	60a4      	str	r4, [r4, #8]
 800b8de:	f884 800c 	strb.w	r8, [r4, #12]
 800b8e2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b8e6:	d1f3      	bne.n	800b8d0 <rmw_uxrce_init_subscription_memory+0x20>
 800b8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop

0800b8f0 <rmw_uxrce_init_node_memory>:
 800b8f0:	b1e2      	cbz	r2, 800b92c <rmw_uxrce_init_node_memory+0x3c>
 800b8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f6:	7b05      	ldrb	r5, [r0, #12]
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	b9ad      	cbnz	r5, 800b928 <rmw_uxrce_init_node_memory+0x38>
 800b8fc:	23a4      	movs	r3, #164	@ 0xa4
 800b8fe:	e9c0 5500 	strd	r5, r5, [r0]
 800b902:	6083      	str	r3, [r0, #8]
 800b904:	f240 1301 	movw	r3, #257	@ 0x101
 800b908:	4617      	mov	r7, r2
 800b90a:	8183      	strh	r3, [r0, #12]
 800b90c:	460c      	mov	r4, r1
 800b90e:	46a8      	mov	r8, r5
 800b910:	4621      	mov	r1, r4
 800b912:	4630      	mov	r0, r6
 800b914:	3501      	adds	r5, #1
 800b916:	f007 fbfb 	bl	8013110 <put_memory>
 800b91a:	42af      	cmp	r7, r5
 800b91c:	60a4      	str	r4, [r4, #8]
 800b91e:	f884 800c 	strb.w	r8, [r4, #12]
 800b922:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800b926:	d1f3      	bne.n	800b910 <rmw_uxrce_init_node_memory+0x20>
 800b928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop

0800b930 <rmw_uxrce_init_session_memory>:
 800b930:	b1ea      	cbz	r2, 800b96e <rmw_uxrce_init_session_memory+0x3e>
 800b932:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b936:	7b05      	ldrb	r5, [r0, #12]
 800b938:	4606      	mov	r6, r0
 800b93a:	b9b5      	cbnz	r5, 800b96a <rmw_uxrce_init_session_memory+0x3a>
 800b93c:	e9c0 5500 	strd	r5, r5, [r0]
 800b940:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800b944:	f240 1301 	movw	r3, #257	@ 0x101
 800b948:	4617      	mov	r7, r2
 800b94a:	f8c0 8008 	str.w	r8, [r0, #8]
 800b94e:	460c      	mov	r4, r1
 800b950:	8183      	strh	r3, [r0, #12]
 800b952:	46a9      	mov	r9, r5
 800b954:	4621      	mov	r1, r4
 800b956:	4630      	mov	r0, r6
 800b958:	3501      	adds	r5, #1
 800b95a:	f007 fbd9 	bl	8013110 <put_memory>
 800b95e:	42af      	cmp	r7, r5
 800b960:	60a4      	str	r4, [r4, #8]
 800b962:	f884 900c 	strb.w	r9, [r4, #12]
 800b966:	4444      	add	r4, r8
 800b968:	d1f4      	bne.n	800b954 <rmw_uxrce_init_session_memory+0x24>
 800b96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b96e:	4770      	bx	lr

0800b970 <rmw_uxrce_init_topic_memory>:
 800b970:	b1e2      	cbz	r2, 800b9ac <rmw_uxrce_init_topic_memory+0x3c>
 800b972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b976:	7b05      	ldrb	r5, [r0, #12]
 800b978:	4606      	mov	r6, r0
 800b97a:	b9ad      	cbnz	r5, 800b9a8 <rmw_uxrce_init_topic_memory+0x38>
 800b97c:	231c      	movs	r3, #28
 800b97e:	e9c0 5500 	strd	r5, r5, [r0]
 800b982:	6083      	str	r3, [r0, #8]
 800b984:	f240 1301 	movw	r3, #257	@ 0x101
 800b988:	4617      	mov	r7, r2
 800b98a:	8183      	strh	r3, [r0, #12]
 800b98c:	460c      	mov	r4, r1
 800b98e:	46a8      	mov	r8, r5
 800b990:	4621      	mov	r1, r4
 800b992:	4630      	mov	r0, r6
 800b994:	3501      	adds	r5, #1
 800b996:	f007 fbbb 	bl	8013110 <put_memory>
 800b99a:	42af      	cmp	r7, r5
 800b99c:	60a4      	str	r4, [r4, #8]
 800b99e:	f884 800c 	strb.w	r8, [r4, #12]
 800b9a2:	f104 041c 	add.w	r4, r4, #28
 800b9a6:	d1f3      	bne.n	800b990 <rmw_uxrce_init_topic_memory+0x20>
 800b9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop

0800b9b0 <rmw_uxrce_init_static_input_buffer_memory>:
 800b9b0:	b1ea      	cbz	r2, 800b9ee <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b6:	7b05      	ldrb	r5, [r0, #12]
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	b9b5      	cbnz	r5, 800b9ea <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b9bc:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800b9c0:	e9c0 5500 	strd	r5, r5, [r0]
 800b9c4:	6083      	str	r3, [r0, #8]
 800b9c6:	f240 1301 	movw	r3, #257	@ 0x101
 800b9ca:	4617      	mov	r7, r2
 800b9cc:	8183      	strh	r3, [r0, #12]
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	46a8      	mov	r8, r5
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	3501      	adds	r5, #1
 800b9d8:	f007 fb9a 	bl	8013110 <put_memory>
 800b9dc:	42af      	cmp	r7, r5
 800b9de:	60a4      	str	r4, [r4, #8]
 800b9e0:	f884 800c 	strb.w	r8, [r4, #12]
 800b9e4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800b9e8:	d1f3      	bne.n	800b9d2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ee:	4770      	bx	lr

0800b9f0 <rmw_uxrce_init_init_options_impl_memory>:
 800b9f0:	b1e2      	cbz	r2, 800ba2c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	7b05      	ldrb	r5, [r0, #12]
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	b9ad      	cbnz	r5, 800ba28 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b9fc:	232c      	movs	r3, #44	@ 0x2c
 800b9fe:	e9c0 5500 	strd	r5, r5, [r0]
 800ba02:	6083      	str	r3, [r0, #8]
 800ba04:	f240 1301 	movw	r3, #257	@ 0x101
 800ba08:	4617      	mov	r7, r2
 800ba0a:	8183      	strh	r3, [r0, #12]
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	46a8      	mov	r8, r5
 800ba10:	4621      	mov	r1, r4
 800ba12:	4630      	mov	r0, r6
 800ba14:	3501      	adds	r5, #1
 800ba16:	f007 fb7b 	bl	8013110 <put_memory>
 800ba1a:	42af      	cmp	r7, r5
 800ba1c:	60a4      	str	r4, [r4, #8]
 800ba1e:	f884 800c 	strb.w	r8, [r4, #12]
 800ba22:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ba26:	d1f3      	bne.n	800ba10 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ba28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop

0800ba30 <rmw_uxrce_init_wait_set_memory>:
 800ba30:	b1e2      	cbz	r2, 800ba6c <rmw_uxrce_init_wait_set_memory+0x3c>
 800ba32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba36:	7b05      	ldrb	r5, [r0, #12]
 800ba38:	4606      	mov	r6, r0
 800ba3a:	b9ad      	cbnz	r5, 800ba68 <rmw_uxrce_init_wait_set_memory+0x38>
 800ba3c:	231c      	movs	r3, #28
 800ba3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ba42:	6083      	str	r3, [r0, #8]
 800ba44:	f240 1301 	movw	r3, #257	@ 0x101
 800ba48:	4617      	mov	r7, r2
 800ba4a:	8183      	strh	r3, [r0, #12]
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	46a8      	mov	r8, r5
 800ba50:	4621      	mov	r1, r4
 800ba52:	4630      	mov	r0, r6
 800ba54:	3501      	adds	r5, #1
 800ba56:	f007 fb5b 	bl	8013110 <put_memory>
 800ba5a:	42af      	cmp	r7, r5
 800ba5c:	60a4      	str	r4, [r4, #8]
 800ba5e:	f884 800c 	strb.w	r8, [r4, #12]
 800ba62:	f104 041c 	add.w	r4, r4, #28
 800ba66:	d1f3      	bne.n	800ba50 <rmw_uxrce_init_wait_set_memory+0x20>
 800ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop

0800ba70 <rmw_uxrce_init_guard_condition_memory>:
 800ba70:	b1e2      	cbz	r2, 800baac <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ba72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba76:	7b05      	ldrb	r5, [r0, #12]
 800ba78:	4606      	mov	r6, r0
 800ba7a:	b9ad      	cbnz	r5, 800baa8 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ba7c:	2320      	movs	r3, #32
 800ba7e:	e9c0 5500 	strd	r5, r5, [r0]
 800ba82:	6083      	str	r3, [r0, #8]
 800ba84:	f240 1301 	movw	r3, #257	@ 0x101
 800ba88:	4617      	mov	r7, r2
 800ba8a:	8183      	strh	r3, [r0, #12]
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	46a8      	mov	r8, r5
 800ba90:	4621      	mov	r1, r4
 800ba92:	4630      	mov	r0, r6
 800ba94:	3501      	adds	r5, #1
 800ba96:	f007 fb3b 	bl	8013110 <put_memory>
 800ba9a:	42af      	cmp	r7, r5
 800ba9c:	60a4      	str	r4, [r4, #8]
 800ba9e:	f884 800c 	strb.w	r8, [r4, #12]
 800baa2:	f104 0420 	add.w	r4, r4, #32
 800baa6:	d1f3      	bne.n	800ba90 <rmw_uxrce_init_guard_condition_memory+0x20>
 800baa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop

0800bab0 <rmw_uxrce_fini_session_memory>:
 800bab0:	4601      	mov	r1, r0
 800bab2:	4801      	ldr	r0, [pc, #4]	@ (800bab8 <rmw_uxrce_fini_session_memory+0x8>)
 800bab4:	f007 bb2c 	b.w	8013110 <put_memory>
 800bab8:	2000ac94 	.word	0x2000ac94

0800babc <rmw_uxrce_fini_node_memory>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4604      	mov	r4, r0
 800bac0:	6800      	ldr	r0, [r0, #0]
 800bac2:	b128      	cbz	r0, 800bad0 <rmw_uxrce_fini_node_memory+0x14>
 800bac4:	4b07      	ldr	r3, [pc, #28]	@ (800bae4 <rmw_uxrce_fini_node_memory+0x28>)
 800bac6:	6819      	ldr	r1, [r3, #0]
 800bac8:	f7f4 fbaa 	bl	8000220 <strcmp>
 800bacc:	b940      	cbnz	r0, 800bae0 <rmw_uxrce_fini_node_memory+0x24>
 800bace:	6020      	str	r0, [r4, #0]
 800bad0:	6861      	ldr	r1, [r4, #4]
 800bad2:	b129      	cbz	r1, 800bae0 <rmw_uxrce_fini_node_memory+0x24>
 800bad4:	2500      	movs	r5, #0
 800bad6:	4804      	ldr	r0, [pc, #16]	@ (800bae8 <rmw_uxrce_fini_node_memory+0x2c>)
 800bad8:	610d      	str	r5, [r1, #16]
 800bada:	f007 fb19 	bl	8013110 <put_memory>
 800bade:	6065      	str	r5, [r4, #4]
 800bae0:	bd38      	pop	{r3, r4, r5, pc}
 800bae2:	bf00      	nop
 800bae4:	08016ad4 	.word	0x08016ad4
 800bae8:	2000ac64 	.word	0x2000ac64

0800baec <rmw_uxrce_fini_publisher_memory>:
 800baec:	b510      	push	{r4, lr}
 800baee:	4604      	mov	r4, r0
 800baf0:	6800      	ldr	r0, [r0, #0]
 800baf2:	b128      	cbz	r0, 800bb00 <rmw_uxrce_fini_publisher_memory+0x14>
 800baf4:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <rmw_uxrce_fini_publisher_memory+0x24>)
 800baf6:	6819      	ldr	r1, [r3, #0]
 800baf8:	f7f4 fb92 	bl	8000220 <strcmp>
 800bafc:	b938      	cbnz	r0, 800bb0e <rmw_uxrce_fini_publisher_memory+0x22>
 800bafe:	6020      	str	r0, [r4, #0]
 800bb00:	6861      	ldr	r1, [r4, #4]
 800bb02:	b121      	cbz	r1, 800bb0e <rmw_uxrce_fini_publisher_memory+0x22>
 800bb04:	4803      	ldr	r0, [pc, #12]	@ (800bb14 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bb06:	f007 fb03 	bl	8013110 <put_memory>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	6063      	str	r3, [r4, #4]
 800bb0e:	bd10      	pop	{r4, pc}
 800bb10:	08016ad4 	.word	0x08016ad4
 800bb14:	2000ac74 	.word	0x2000ac74

0800bb18 <rmw_uxrce_fini_subscription_memory>:
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	6800      	ldr	r0, [r0, #0]
 800bb1e:	b128      	cbz	r0, 800bb2c <rmw_uxrce_fini_subscription_memory+0x14>
 800bb20:	4b06      	ldr	r3, [pc, #24]	@ (800bb3c <rmw_uxrce_fini_subscription_memory+0x24>)
 800bb22:	6819      	ldr	r1, [r3, #0]
 800bb24:	f7f4 fb7c 	bl	8000220 <strcmp>
 800bb28:	b938      	cbnz	r0, 800bb3a <rmw_uxrce_fini_subscription_memory+0x22>
 800bb2a:	6020      	str	r0, [r4, #0]
 800bb2c:	6861      	ldr	r1, [r4, #4]
 800bb2e:	b121      	cbz	r1, 800bb3a <rmw_uxrce_fini_subscription_memory+0x22>
 800bb30:	4803      	ldr	r0, [pc, #12]	@ (800bb40 <rmw_uxrce_fini_subscription_memory+0x28>)
 800bb32:	f007 faed 	bl	8013110 <put_memory>
 800bb36:	2300      	movs	r3, #0
 800bb38:	6063      	str	r3, [r4, #4]
 800bb3a:	bd10      	pop	{r4, pc}
 800bb3c:	08016ad4 	.word	0x08016ad4
 800bb40:	2000acb4 	.word	0x2000acb4

0800bb44 <rmw_uxrce_fini_service_memory>:
 800bb44:	b510      	push	{r4, lr}
 800bb46:	4604      	mov	r4, r0
 800bb48:	6800      	ldr	r0, [r0, #0]
 800bb4a:	b128      	cbz	r0, 800bb58 <rmw_uxrce_fini_service_memory+0x14>
 800bb4c:	4b06      	ldr	r3, [pc, #24]	@ (800bb68 <rmw_uxrce_fini_service_memory+0x24>)
 800bb4e:	6819      	ldr	r1, [r3, #0]
 800bb50:	f7f4 fb66 	bl	8000220 <strcmp>
 800bb54:	b938      	cbnz	r0, 800bb66 <rmw_uxrce_fini_service_memory+0x22>
 800bb56:	6020      	str	r0, [r4, #0]
 800bb58:	6861      	ldr	r1, [r4, #4]
 800bb5a:	b121      	cbz	r1, 800bb66 <rmw_uxrce_fini_service_memory+0x22>
 800bb5c:	4803      	ldr	r0, [pc, #12]	@ (800bb6c <rmw_uxrce_fini_service_memory+0x28>)
 800bb5e:	f007 fad7 	bl	8013110 <put_memory>
 800bb62:	2300      	movs	r3, #0
 800bb64:	6063      	str	r3, [r4, #4]
 800bb66:	bd10      	pop	{r4, pc}
 800bb68:	08016ad4 	.word	0x08016ad4
 800bb6c:	2000ac84 	.word	0x2000ac84

0800bb70 <rmw_uxrce_fini_client_memory>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	4604      	mov	r4, r0
 800bb74:	6800      	ldr	r0, [r0, #0]
 800bb76:	b128      	cbz	r0, 800bb84 <rmw_uxrce_fini_client_memory+0x14>
 800bb78:	4b06      	ldr	r3, [pc, #24]	@ (800bb94 <rmw_uxrce_fini_client_memory+0x24>)
 800bb7a:	6819      	ldr	r1, [r3, #0]
 800bb7c:	f7f4 fb50 	bl	8000220 <strcmp>
 800bb80:	b938      	cbnz	r0, 800bb92 <rmw_uxrce_fini_client_memory+0x22>
 800bb82:	6020      	str	r0, [r4, #0]
 800bb84:	6861      	ldr	r1, [r4, #4]
 800bb86:	b121      	cbz	r1, 800bb92 <rmw_uxrce_fini_client_memory+0x22>
 800bb88:	4803      	ldr	r0, [pc, #12]	@ (800bb98 <rmw_uxrce_fini_client_memory+0x28>)
 800bb8a:	f007 fac1 	bl	8013110 <put_memory>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	6063      	str	r3, [r4, #4]
 800bb92:	bd10      	pop	{r4, pc}
 800bb94:	08016ad4 	.word	0x08016ad4
 800bb98:	20006398 	.word	0x20006398

0800bb9c <rmw_uxrce_fini_topic_memory>:
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4621      	mov	r1, r4
 800bba2:	4803      	ldr	r0, [pc, #12]	@ (800bbb0 <rmw_uxrce_fini_topic_memory+0x14>)
 800bba4:	f007 fab4 	bl	8013110 <put_memory>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	61a3      	str	r3, [r4, #24]
 800bbac:	bd10      	pop	{r4, pc}
 800bbae:	bf00      	nop
 800bbb0:	2000acc4 	.word	0x2000acc4

0800bbb4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	b530      	push	{r4, r5, lr}
 800bbb8:	4925      	ldr	r1, [pc, #148]	@ (800bc50 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bbba:	680d      	ldr	r5, [r1, #0]
 800bbbc:	ac03      	add	r4, sp, #12
 800bbbe:	e884 000c 	stmia.w	r4, {r2, r3}
 800bbc2:	461c      	mov	r4, r3
 800bbc4:	2d00      	cmp	r5, #0
 800bbc6:	d041      	beq.n	800bc4c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800bbc8:	462b      	mov	r3, r5
 800bbca:	2100      	movs	r1, #0
 800bbcc:	689a      	ldr	r2, [r3, #8]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800bbd4:	4290      	cmp	r0, r2
 800bbd6:	bf08      	it	eq
 800bbd8:	3101      	addeq	r1, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1f6      	bne.n	800bbcc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800bbde:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d029      	beq.n	800bc3a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800bbe6:	d907      	bls.n	800bbf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d005      	beq.n	800bbf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bbec:	2100      	movs	r1, #0
 800bbee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbf2:	4608      	mov	r0, r1
 800bbf4:	b002      	add	sp, #8
 800bbf6:	4770      	bx	lr
 800bbf8:	b314      	cbz	r4, 800bc40 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bbfa:	428c      	cmp	r4, r1
 800bbfc:	d820      	bhi.n	800bc40 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bbfe:	2d00      	cmp	r5, #0
 800bc00:	d0f4      	beq.n	800bbec <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bc02:	2100      	movs	r1, #0
 800bc04:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800bc08:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800bc0c:	e002      	b.n	800bc14 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800bc0e:	686d      	ldr	r5, [r5, #4]
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	d0ec      	beq.n	800bbee <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bc14:	68ab      	ldr	r3, [r5, #8]
 800bc16:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800bc1a:	4290      	cmp	r0, r2
 800bc1c:	d1f7      	bne.n	800bc0e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bc1e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bc22:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800bc26:	4562      	cmp	r2, ip
 800bc28:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bc2c:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bc30:	daed      	bge.n	800bc0e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bc32:	4694      	mov	ip, r2
 800bc34:	461c      	mov	r4, r3
 800bc36:	4629      	mov	r1, r5
 800bc38:	e7e9      	b.n	800bc0e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bc3a:	b10c      	cbz	r4, 800bc40 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bc3c:	428c      	cmp	r4, r1
 800bc3e:	d9d5      	bls.n	800bbec <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bc40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc44:	4802      	ldr	r0, [pc, #8]	@ (800bc50 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bc46:	b002      	add	sp, #8
 800bc48:	f007 ba52 	b.w	80130f0 <get_memory>
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	e7c6      	b.n	800bbde <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800bc50:	2000aca4 	.word	0x2000aca4

0800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800bc54:	4b11      	ldr	r3, [pc, #68]	@ (800bc9c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	b530      	push	{r4, r5, lr}
 800bc5a:	b1e3      	cbz	r3, 800bc96 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800bc5c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800bc60:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800bc64:	2400      	movs	r4, #0
 800bc66:	e001      	b.n	800bc6c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	b193      	cbz	r3, 800bc92 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800bc6c:	689a      	ldr	r2, [r3, #8]
 800bc6e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800bc72:	4288      	cmp	r0, r1
 800bc74:	d1f8      	bne.n	800bc68 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bc76:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800bc7a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800bc7e:	4571      	cmp	r1, lr
 800bc80:	eb72 050c 	sbcs.w	r5, r2, ip
 800bc84:	daf0      	bge.n	800bc68 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bc86:	461c      	mov	r4, r3
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	468e      	mov	lr, r1
 800bc8c:	4694      	mov	ip, r2
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1ec      	bne.n	800bc6c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bc92:	4620      	mov	r0, r4
 800bc94:	bd30      	pop	{r4, r5, pc}
 800bc96:	461c      	mov	r4, r3
 800bc98:	4620      	mov	r0, r4
 800bc9a:	bd30      	pop	{r4, r5, pc}
 800bc9c:	2000aca4 	.word	0x2000aca4

0800bca0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	4b3c      	ldr	r3, [pc, #240]	@ (800bd98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bca6:	ed2d 8b06 	vpush	{d8-d10}
 800bcaa:	681f      	ldr	r7, [r3, #0]
 800bcac:	b08d      	sub	sp, #52	@ 0x34
 800bcae:	f7ff fd7f 	bl	800b7b0 <rmw_uros_epoch_nanos>
 800bcb2:	2f00      	cmp	r7, #0
 800bcb4:	d05d      	beq.n	800bd72 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bcb6:	46b8      	mov	r8, r7
 800bcb8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800bd80 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800bcbc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bcc0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800bd88 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800bcca:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800bd90 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800bcce:	4681      	mov	r9, r0
 800bcd0:	468a      	mov	sl, r1
 800bcd2:	ac04      	add	r4, sp, #16
 800bcd4:	d03f      	beq.n	800bd56 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bcd6:	2b05      	cmp	r3, #5
 800bcd8:	d044      	beq.n	800bd64 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	d03b      	beq.n	800bd56 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bcde:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bce2:	ed8d ab06 	vstr	d10, [sp, #24]
 800bce6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800bcea:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800bcee:	ab08      	add	r3, sp, #32
 800bcf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bcf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bcf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bcfa:	f007 f885 	bl	8012e08 <rmw_time_equal>
 800bcfe:	b118      	cbz	r0, 800bd08 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800bd00:	ed8d 9b04 	vstr	d9, [sp, #16]
 800bd04:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bd08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bd0c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800bd10:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800bd14:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800bd18:	f007 f8ca 	bl	8012eb0 <rmw_time_total_nsec>
 800bd1c:	1830      	adds	r0, r6, r0
 800bd1e:	eb47 0101 	adc.w	r1, r7, r1
 800bd22:	4548      	cmp	r0, r9
 800bd24:	eb71 030a 	sbcs.w	r3, r1, sl
 800bd28:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800bd2c:	db05      	blt.n	800bd3a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800bd2e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800bd32:	4591      	cmp	r9, r2
 800bd34:	eb7a 0303 	sbcs.w	r3, sl, r3
 800bd38:	da03      	bge.n	800bd42 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800bd3a:	4817      	ldr	r0, [pc, #92]	@ (800bd98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bd3c:	4641      	mov	r1, r8
 800bd3e:	f007 f9e7 	bl	8013110 <put_memory>
 800bd42:	f1bb 0f00 	cmp.w	fp, #0
 800bd46:	d014      	beq.n	800bd72 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bd48:	46d8      	mov	r8, fp
 800bd4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bd4e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800bd52:	2b04      	cmp	r3, #4
 800bd54:	d1bf      	bne.n	800bcd6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800bd56:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bd5a:	3340      	adds	r3, #64	@ 0x40
 800bd5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd62:	e7c0      	b.n	800bce6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bd64:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bd68:	3348      	adds	r3, #72	@ 0x48
 800bd6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd70:	e7b9      	b.n	800bce6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bd72:	b00d      	add	sp, #52	@ 0x34
 800bd74:	ecbd 8b06 	vpop	{d8-d10}
 800bd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7c:	f3af 8000 	nop.w
	...
 800bd88:	00000001 	.word	0x00000001
 800bd8c:	00000000 	.word	0x00000000
 800bd90:	0000001e 	.word	0x0000001e
 800bd94:	00000000 	.word	0x00000000
 800bd98:	2000aca4 	.word	0x2000aca4

0800bd9c <run_xrce_session>:
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	788c      	ldrb	r4, [r1, #2]
 800bda0:	b086      	sub	sp, #24
 800bda2:	2c01      	cmp	r4, #1
 800bda4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bda8:	d00c      	beq.n	800bdc4 <run_xrce_session+0x28>
 800bdaa:	4619      	mov	r1, r3
 800bdac:	2301      	movs	r3, #1
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	f10d 020e 	add.w	r2, sp, #14
 800bdb4:	f10d 0317 	add.w	r3, sp, #23
 800bdb8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bdbc:	f002 fa8a 	bl	800e2d4 <uxr_run_session_until_all_status>
 800bdc0:	b006      	add	sp, #24
 800bdc2:	bd10      	pop	{r4, pc}
 800bdc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bdc8:	f001 fe9e 	bl	800db08 <uxr_flash_output_streams>
 800bdcc:	4620      	mov	r0, r4
 800bdce:	b006      	add	sp, #24
 800bdd0:	bd10      	pop	{r4, pc}
 800bdd2:	bf00      	nop

0800bdd4 <convert_qos_profile>:
 800bdd4:	7a4a      	ldrb	r2, [r1, #9]
 800bdd6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bdda:	2a02      	cmp	r2, #2
 800bddc:	bf18      	it	ne
 800bdde:	2200      	movne	r2, #0
 800bde0:	7002      	strb	r2, [r0, #0]
 800bde2:	780a      	ldrb	r2, [r1, #0]
 800bde4:	8889      	ldrh	r1, [r1, #4]
 800bde6:	8081      	strh	r1, [r0, #4]
 800bde8:	f1ac 0c02 	sub.w	ip, ip, #2
 800bdec:	f1a2 0202 	sub.w	r2, r2, #2
 800bdf0:	fabc fc8c 	clz	ip, ip
 800bdf4:	fab2 f282 	clz	r2, r2
 800bdf8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bdfc:	0952      	lsrs	r2, r2, #5
 800bdfe:	f880 c001 	strb.w	ip, [r0, #1]
 800be02:	7082      	strb	r2, [r0, #2]
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop

0800be08 <generate_service_topics>:
 800be08:	b570      	push	{r4, r5, r6, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	461c      	mov	r4, r3
 800be0e:	4b12      	ldr	r3, [pc, #72]	@ (800be58 <generate_service_topics+0x50>)
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	4605      	mov	r5, r0
 800be14:	4b11      	ldr	r3, [pc, #68]	@ (800be5c <generate_service_topics+0x54>)
 800be16:	9000      	str	r0, [sp, #0]
 800be18:	4616      	mov	r6, r2
 800be1a:	4608      	mov	r0, r1
 800be1c:	4a10      	ldr	r2, [pc, #64]	@ (800be60 <generate_service_topics+0x58>)
 800be1e:	4621      	mov	r1, r4
 800be20:	f008 fee6 	bl	8014bf0 <sniprintf>
 800be24:	4b0f      	ldr	r3, [pc, #60]	@ (800be64 <generate_service_topics+0x5c>)
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	4601      	mov	r1, r0
 800be2a:	9500      	str	r5, [sp, #0]
 800be2c:	4b0e      	ldr	r3, [pc, #56]	@ (800be68 <generate_service_topics+0x60>)
 800be2e:	4a0c      	ldr	r2, [pc, #48]	@ (800be60 <generate_service_topics+0x58>)
 800be30:	460d      	mov	r5, r1
 800be32:	4630      	mov	r0, r6
 800be34:	4621      	mov	r1, r4
 800be36:	f008 fedb 	bl	8014bf0 <sniprintf>
 800be3a:	2d00      	cmp	r5, #0
 800be3c:	db01      	blt.n	800be42 <generate_service_topics+0x3a>
 800be3e:	42ac      	cmp	r4, r5
 800be40:	dc02      	bgt.n	800be48 <generate_service_topics+0x40>
 800be42:	2000      	movs	r0, #0
 800be44:	b002      	add	sp, #8
 800be46:	bd70      	pop	{r4, r5, r6, pc}
 800be48:	2800      	cmp	r0, #0
 800be4a:	dbfa      	blt.n	800be42 <generate_service_topics+0x3a>
 800be4c:	4284      	cmp	r4, r0
 800be4e:	bfd4      	ite	le
 800be50:	2000      	movle	r0, #0
 800be52:	2001      	movgt	r0, #1
 800be54:	b002      	add	sp, #8
 800be56:	bd70      	pop	{r4, r5, r6, pc}
 800be58:	08016730 	.word	0x08016730
 800be5c:	0801672c 	.word	0x0801672c
 800be60:	080161b8 	.word	0x080161b8
 800be64:	08016724 	.word	0x08016724
 800be68:	08016720 	.word	0x08016720

0800be6c <generate_service_types>:
 800be6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	4605      	mov	r5, r0
 800be72:	b086      	sub	sp, #24
 800be74:	6880      	ldr	r0, [r0, #8]
 800be76:	460c      	mov	r4, r1
 800be78:	4617      	mov	r7, r2
 800be7a:	461e      	mov	r6, r3
 800be7c:	4780      	blx	r0
 800be7e:	68eb      	ldr	r3, [r5, #12]
 800be80:	4680      	mov	r8, r0
 800be82:	4798      	blx	r3
 800be84:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800be88:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800be8c:	2300      	movs	r3, #0
 800be8e:	7023      	strb	r3, [r4, #0]
 800be90:	6813      	ldr	r3, [r2, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d042      	beq.n	800bf1c <generate_service_types+0xb0>
 800be96:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800bf30 <generate_service_types+0xc4>
 800be9a:	4641      	mov	r1, r8
 800be9c:	4620      	mov	r0, r4
 800be9e:	4c22      	ldr	r4, [pc, #136]	@ (800bf28 <generate_service_types+0xbc>)
 800bea0:	9405      	str	r4, [sp, #20]
 800bea2:	6852      	ldr	r2, [r2, #4]
 800bea4:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800bf38 <generate_service_types+0xcc>
 800bea8:	9204      	str	r2, [sp, #16]
 800beaa:	9100      	str	r1, [sp, #0]
 800beac:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800beb0:	4a1e      	ldr	r2, [pc, #120]	@ (800bf2c <generate_service_types+0xc0>)
 800beb2:	f8cd a004 	str.w	sl, [sp, #4]
 800beb6:	4631      	mov	r1, r6
 800beb8:	f008 fe9a 	bl	8014bf0 <sniprintf>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	db1f      	blt.n	800bf00 <generate_service_types+0x94>
 800bec0:	2300      	movs	r3, #0
 800bec2:	703b      	strb	r3, [r7, #0]
 800bec4:	f8d9 3000 	ldr.w	r3, [r9]
 800bec8:	42b0      	cmp	r0, r6
 800beca:	bfac      	ite	ge
 800becc:	2500      	movge	r5, #0
 800bece:	2501      	movlt	r5, #1
 800bed0:	b1eb      	cbz	r3, 800bf0e <generate_service_types+0xa2>
 800bed2:	4a17      	ldr	r2, [pc, #92]	@ (800bf30 <generate_service_types+0xc4>)
 800bed4:	9405      	str	r4, [sp, #20]
 800bed6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800beda:	9200      	str	r2, [sp, #0]
 800bedc:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800bee0:	e9cd a401 	strd	sl, r4, [sp, #4]
 800bee4:	4a11      	ldr	r2, [pc, #68]	@ (800bf2c <generate_service_types+0xc0>)
 800bee6:	4638      	mov	r0, r7
 800bee8:	4631      	mov	r1, r6
 800beea:	f008 fe81 	bl	8014bf0 <sniprintf>
 800beee:	2800      	cmp	r0, #0
 800bef0:	db10      	blt.n	800bf14 <generate_service_types+0xa8>
 800bef2:	42b0      	cmp	r0, r6
 800bef4:	bfb4      	ite	lt
 800bef6:	4628      	movlt	r0, r5
 800bef8:	2000      	movge	r0, #0
 800befa:	b006      	add	sp, #24
 800befc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf00:	2300      	movs	r3, #0
 800bf02:	703b      	strb	r3, [r7, #0]
 800bf04:	f8d9 3000 	ldr.w	r3, [r9]
 800bf08:	2500      	movs	r5, #0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e1      	bne.n	800bed2 <generate_service_types+0x66>
 800bf0e:	4b09      	ldr	r3, [pc, #36]	@ (800bf34 <generate_service_types+0xc8>)
 800bf10:	461a      	mov	r2, r3
 800bf12:	e7df      	b.n	800bed4 <generate_service_types+0x68>
 800bf14:	2000      	movs	r0, #0
 800bf16:	b006      	add	sp, #24
 800bf18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1c:	4b05      	ldr	r3, [pc, #20]	@ (800bf34 <generate_service_types+0xc8>)
 800bf1e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800bf30 <generate_service_types+0xc4>
 800bf22:	4619      	mov	r1, r3
 800bf24:	e7ba      	b.n	800be9c <generate_service_types+0x30>
 800bf26:	bf00      	nop
 800bf28:	080161c0 	.word	0x080161c0
 800bf2c:	080161b0 	.word	0x080161b0
 800bf30:	080161ac 	.word	0x080161ac
 800bf34:	08016528 	.word	0x08016528
 800bf38:	080161c4 	.word	0x080161c4

0800bf3c <is_uxrce_rmw_identifier_valid>:
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	4604      	mov	r4, r0
 800bf40:	b140      	cbz	r0, 800bf54 <is_uxrce_rmw_identifier_valid+0x18>
 800bf42:	f7fe fe31 	bl	800aba8 <rmw_get_implementation_identifier>
 800bf46:	4601      	mov	r1, r0
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f7f4 f969 	bl	8000220 <strcmp>
 800bf4e:	fab0 f080 	clz	r0, r0
 800bf52:	0940      	lsrs	r0, r0, #5
 800bf54:	bd10      	pop	{r4, pc}
 800bf56:	bf00      	nop

0800bf58 <get_message_typesupport_handle_function>:
 800bf58:	b510      	push	{r4, lr}
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	6800      	ldr	r0, [r0, #0]
 800bf5e:	f7f4 f95f 	bl	8000220 <strcmp>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	bf0c      	ite	eq
 800bf66:	4620      	moveq	r0, r4
 800bf68:	2000      	movne	r0, #0
 800bf6a:	bd10      	pop	{r4, pc}

0800bf6c <get_service_typesupport_handle>:
 800bf6c:	6883      	ldr	r3, [r0, #8]
 800bf6e:	4718      	bx	r3

0800bf70 <get_service_typesupport_handle_function>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	4604      	mov	r4, r0
 800bf74:	6800      	ldr	r0, [r0, #0]
 800bf76:	f7f4 f953 	bl	8000220 <strcmp>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	bf0c      	ite	eq
 800bf7e:	4620      	moveq	r0, r4
 800bf80:	2000      	movne	r0, #0
 800bf82:	bd10      	pop	{r4, pc}

0800bf84 <turtlesim__srv__Kill_Request__init>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4604      	mov	r4, r0
 800bf88:	b128      	cbz	r0, 800bf96 <turtlesim__srv__Kill_Request__init+0x12>
 800bf8a:	f007 fb19 	bl	80135c0 <rosidl_runtime_c__String__init>
 800bf8e:	4605      	mov	r5, r0
 800bf90:	b120      	cbz	r0, 800bf9c <turtlesim__srv__Kill_Request__init+0x18>
 800bf92:	4628      	mov	r0, r5
 800bf94:	bd38      	pop	{r3, r4, r5, pc}
 800bf96:	4605      	mov	r5, r0
 800bf98:	4628      	mov	r0, r5
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f007 fb25 	bl	80135ec <rosidl_runtime_c__String__fini>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	bd38      	pop	{r3, r4, r5, pc}
 800bfa6:	bf00      	nop

0800bfa8 <turtlesim__srv__Kill_Request__fini>:
 800bfa8:	b108      	cbz	r0, 800bfae <turtlesim__srv__Kill_Request__fini+0x6>
 800bfaa:	f007 bb1f 	b.w	80135ec <rosidl_runtime_c__String__fini>
 800bfae:	4770      	bx	lr

0800bfb0 <turtlesim__srv__Kill_Response__init>:
 800bfb0:	3800      	subs	r0, #0
 800bfb2:	bf18      	it	ne
 800bfb4:	2001      	movne	r0, #1
 800bfb6:	4770      	bx	lr

0800bfb8 <turtlesim__srv__Kill_Response__fini>:
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop

0800bfbc <rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__Kill>:
 800bfbc:	4b04      	ldr	r3, [pc, #16]	@ (800bfd0 <rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__Kill+0x14>)
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	b10a      	cbz	r2, 800bfc6 <rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__Kill+0xa>
 800bfc2:	4803      	ldr	r0, [pc, #12]	@ (800bfd0 <rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__Kill+0x14>)
 800bfc4:	4770      	bx	lr
 800bfc6:	4a03      	ldr	r2, [pc, #12]	@ (800bfd4 <rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__Kill+0x18>)
 800bfc8:	4801      	ldr	r0, [pc, #4]	@ (800bfd0 <rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__Kill+0x14>)
 800bfca:	6812      	ldr	r2, [r2, #0]
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	4770      	bx	lr
 800bfd0:	20000030 	.word	0x20000030
 800bfd4:	2000017c 	.word	0x2000017c

0800bfd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__turtlesim__srv__Kill_Request>:
 800bfd8:	4b04      	ldr	r3, [pc, #16]	@ (800bfec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x14>)
 800bfda:	4805      	ldr	r0, [pc, #20]	@ (800bff0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x18>)
 800bfdc:	4905      	ldr	r1, [pc, #20]	@ (800bff4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x1c>)
 800bfde:	4a06      	ldr	r2, [pc, #24]	@ (800bff8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x20>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	6003      	str	r3, [r0, #0]
 800bfe4:	600b      	str	r3, [r1, #0]
 800bfe6:	6013      	str	r3, [r2, #0]
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	2000017c 	.word	0x2000017c
 800bff0:	2000004c 	.word	0x2000004c
 800bff4:	20000058 	.word	0x20000058
 800bff8:	20000030 	.word	0x20000030

0800bffc <turtlesim__srv__Kill_Request__rosidl_typesupport_introspection_c__Kill_Request_init_function>:
 800bffc:	f7ff bfc2 	b.w	800bf84 <turtlesim__srv__Kill_Request__init>

0800c000 <turtlesim__srv__Kill_Request__rosidl_typesupport_introspection_c__Kill_Request_fini_function>:
 800c000:	f7ff bfd2 	b.w	800bfa8 <turtlesim__srv__Kill_Request__fini>

0800c004 <turtlesim__srv__Kill_Response__rosidl_typesupport_introspection_c__Kill_Response_init_function>:
 800c004:	f7ff bfd4 	b.w	800bfb0 <turtlesim__srv__Kill_Response__init>

0800c008 <turtlesim__srv__Kill_Response__rosidl_typesupport_introspection_c__Kill_Response_fini_function>:
 800c008:	f7ff bfd6 	b.w	800bfb8 <turtlesim__srv__Kill_Response__fini>

0800c00c <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Request>:
 800c00c:	4b04      	ldr	r3, [pc, #16]	@ (800c020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x14>)
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	b10a      	cbz	r2, 800c016 <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0xa>
 800c012:	4803      	ldr	r0, [pc, #12]	@ (800c020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x14>)
 800c014:	4770      	bx	lr
 800c016:	4a03      	ldr	r2, [pc, #12]	@ (800c024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x18>)
 800c018:	4801      	ldr	r0, [pc, #4]	@ (800c020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x14>)
 800c01a:	6812      	ldr	r2, [r2, #0]
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	4770      	bx	lr
 800c020:	200000a0 	.word	0x200000a0
 800c024:	20000180 	.word	0x20000180

0800c028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Response>:
 800c028:	4b04      	ldr	r3, [pc, #16]	@ (800c03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Response+0x14>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	b10a      	cbz	r2, 800c032 <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Response+0xa>
 800c02e:	4803      	ldr	r0, [pc, #12]	@ (800c03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Response+0x14>)
 800c030:	4770      	bx	lr
 800c032:	4a03      	ldr	r2, [pc, #12]	@ (800c040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Response+0x18>)
 800c034:	4801      	ldr	r0, [pc, #4]	@ (800c03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__turtlesim__srv__Kill_Response+0x14>)
 800c036:	6812      	ldr	r2, [r2, #0]
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	4770      	bx	lr
 800c03c:	200000e8 	.word	0x200000e8
 800c040:	20000180 	.word	0x20000180

0800c044 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill>:
 800c044:	4b13      	ldr	r3, [pc, #76]	@ (800c094 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x50>)
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	b132      	cbz	r2, 800c058 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x14>
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	689a      	ldr	r2, [r3, #8]
 800c04e:	b152      	cbz	r2, 800c066 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x22>
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	b182      	cbz	r2, 800c076 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x32>
 800c054:	480f      	ldr	r0, [pc, #60]	@ (800c094 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x50>)
 800c056:	4770      	bx	lr
 800c058:	4a0f      	ldr	r2, [pc, #60]	@ (800c098 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x54>)
 800c05a:	6812      	ldr	r2, [r2, #0]
 800c05c:	601a      	str	r2, [r3, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	689a      	ldr	r2, [r3, #8]
 800c062:	2a00      	cmp	r2, #0
 800c064:	d1f4      	bne.n	800c050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0xc>
 800c066:	4a0d      	ldr	r2, [pc, #52]	@ (800c09c <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x58>)
 800c068:	6811      	ldr	r1, [r2, #0]
 800c06a:	b179      	cbz	r1, 800c08c <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x48>
 800c06c:	6852      	ldr	r2, [r2, #4]
 800c06e:	609a      	str	r2, [r3, #8]
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	2a00      	cmp	r2, #0
 800c074:	d1ee      	bne.n	800c054 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x10>
 800c076:	4a0a      	ldr	r2, [pc, #40]	@ (800c0a0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x5c>)
 800c078:	6811      	ldr	r1, [r2, #0]
 800c07a:	b119      	cbz	r1, 800c084 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x40>
 800c07c:	6852      	ldr	r2, [r2, #4]
 800c07e:	4805      	ldr	r0, [pc, #20]	@ (800c094 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x50>)
 800c080:	60da      	str	r2, [r3, #12]
 800c082:	4770      	bx	lr
 800c084:	4904      	ldr	r1, [pc, #16]	@ (800c098 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x54>)
 800c086:	6809      	ldr	r1, [r1, #0]
 800c088:	6011      	str	r1, [r2, #0]
 800c08a:	e7f7      	b.n	800c07c <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x38>
 800c08c:	4902      	ldr	r1, [pc, #8]	@ (800c098 <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x54>)
 800c08e:	6809      	ldr	r1, [r1, #0]
 800c090:	6011      	str	r1, [r2, #0]
 800c092:	e7eb      	b.n	800c06c <rosidl_typesupport_introspection_c__get_service_type_support_handle__turtlesim__srv__Kill+0x28>
 800c094:	20000104 	.word	0x20000104
 800c098:	20000180 	.word	0x20000180
 800c09c:	200000a0 	.word	0x200000a0
 800c0a0:	200000e8 	.word	0x200000e8

0800c0a4 <_Kill_Request__max_serialized_size>:
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	4770      	bx	lr

0800c0a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__turtlesim__srv__Kill_Request>:
 800c0a8:	4800      	ldr	r0, [pc, #0]	@ (800c0ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__turtlesim__srv__Kill_Request+0x4>)
 800c0aa:	4770      	bx	lr
 800c0ac:	2000012c 	.word	0x2000012c

0800c0b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__turtlesim__srv__Kill_Response>:
 800c0b0:	4800      	ldr	r0, [pc, #0]	@ (800c0b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__turtlesim__srv__Kill_Response+0x4>)
 800c0b2:	4770      	bx	lr
 800c0b4:	20000138 	.word	0x20000138

0800c0b8 <_Kill_Response__max_serialized_size>:
 800c0b8:	b508      	push	{r3, lr}
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	2000      	movs	r0, #0
 800c0be:	f001 f867 	bl	800d190 <ucdr_alignment>
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	bd08      	pop	{r3, pc}
 800c0c6:	bf00      	nop

0800c0c8 <_Kill_Request__cdr_serialize>:
 800c0c8:	b1c0      	cbz	r0, 800c0fc <_Kill_Request__cdr_serialize+0x34>
 800c0ca:	b570      	push	{r4, r5, r6, lr}
 800c0cc:	6806      	ldr	r6, [r0, #0]
 800c0ce:	460d      	mov	r5, r1
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	b156      	cbz	r6, 800c0ea <_Kill_Request__cdr_serialize+0x22>
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f7f4 f8ad 	bl	8000234 <strlen>
 800c0da:	4631      	mov	r1, r6
 800c0dc:	6060      	str	r0, [r4, #4]
 800c0de:	1c42      	adds	r2, r0, #1
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0e6:	f001 b8bf 	b.w	800d268 <ucdr_serialize_sequence_char>
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	6060      	str	r0, [r4, #4]
 800c0ee:	4632      	mov	r2, r6
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0f8:	f001 b8b6 	b.w	800d268 <ucdr_serialize_sequence_char>
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop

0800c100 <_Kill_Response__cdr_deserialize>:
 800c100:	b109      	cbz	r1, 800c106 <_Kill_Response__cdr_deserialize+0x6>
 800c102:	f000 b8ab 	b.w	800c25c <ucdr_deserialize_uint8_t>
 800c106:	4608      	mov	r0, r1
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop

0800c10c <get_serialized_size_turtlesim__srv__Kill_Request>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4604      	mov	r4, r0
 800c110:	b138      	cbz	r0, 800c122 <get_serialized_size_turtlesim__srv__Kill_Request+0x16>
 800c112:	460b      	mov	r3, r1
 800c114:	4618      	mov	r0, r3
 800c116:	2104      	movs	r1, #4
 800c118:	f001 f83a 	bl	800d190 <ucdr_alignment>
 800c11c:	6863      	ldr	r3, [r4, #4]
 800c11e:	3305      	adds	r3, #5
 800c120:	4418      	add	r0, r3
 800c122:	bd10      	pop	{r4, pc}

0800c124 <get_serialized_size_turtlesim__srv__Kill_Response>:
 800c124:	b138      	cbz	r0, 800c136 <get_serialized_size_turtlesim__srv__Kill_Response+0x12>
 800c126:	b508      	push	{r3, lr}
 800c128:	460b      	mov	r3, r1
 800c12a:	4618      	mov	r0, r3
 800c12c:	2101      	movs	r1, #1
 800c12e:	f001 f82f 	bl	800d190 <ucdr_alignment>
 800c132:	3001      	adds	r0, #1
 800c134:	bd08      	pop	{r3, pc}
 800c136:	4770      	bx	lr

0800c138 <_Kill_Request__cdr_deserialize>:
 800c138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c13a:	460c      	mov	r4, r1
 800c13c:	b083      	sub	sp, #12
 800c13e:	b1a1      	cbz	r1, 800c16a <_Kill_Request__cdr_deserialize+0x32>
 800c140:	688f      	ldr	r7, [r1, #8]
 800c142:	6809      	ldr	r1, [r1, #0]
 800c144:	ab01      	add	r3, sp, #4
 800c146:	463a      	mov	r2, r7
 800c148:	4606      	mov	r6, r0
 800c14a:	f001 f89f 	bl	800d28c <ucdr_deserialize_sequence_char>
 800c14e:	9b01      	ldr	r3, [sp, #4]
 800c150:	4605      	mov	r5, r0
 800c152:	b920      	cbnz	r0, 800c15e <_Kill_Request__cdr_deserialize+0x26>
 800c154:	429f      	cmp	r7, r3
 800c156:	d30c      	bcc.n	800c172 <_Kill_Request__cdr_deserialize+0x3a>
 800c158:	4628      	mov	r0, r5
 800c15a:	b003      	add	sp, #12
 800c15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c15e:	b103      	cbz	r3, 800c162 <_Kill_Request__cdr_deserialize+0x2a>
 800c160:	3b01      	subs	r3, #1
 800c162:	4628      	mov	r0, r5
 800c164:	6063      	str	r3, [r4, #4]
 800c166:	b003      	add	sp, #12
 800c168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c16a:	460d      	mov	r5, r1
 800c16c:	4628      	mov	r0, r5
 800c16e:	b003      	add	sp, #12
 800c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c172:	2101      	movs	r1, #1
 800c174:	75b0      	strb	r0, [r6, #22]
 800c176:	7571      	strb	r1, [r6, #21]
 800c178:	4630      	mov	r0, r6
 800c17a:	6065      	str	r5, [r4, #4]
 800c17c:	f001 f81e 	bl	800d1bc <ucdr_align_to>
 800c180:	4630      	mov	r0, r6
 800c182:	9901      	ldr	r1, [sp, #4]
 800c184:	f001 f850 	bl	800d228 <ucdr_advance_buffer>
 800c188:	4628      	mov	r0, r5
 800c18a:	b003      	add	sp, #12
 800c18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18e:	bf00      	nop

0800c190 <_Kill_Response__cdr_serialize>:
 800c190:	460a      	mov	r2, r1
 800c192:	b118      	cbz	r0, 800c19c <_Kill_Response__cdr_serialize+0xc>
 800c194:	7801      	ldrb	r1, [r0, #0]
 800c196:	4610      	mov	r0, r2
 800c198:	f000 b84a 	b.w	800c230 <ucdr_serialize_uint8_t>
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop

0800c1a0 <_Kill_Response__get_serialized_size>:
 800c1a0:	b130      	cbz	r0, 800c1b0 <_Kill_Response__get_serialized_size+0x10>
 800c1a2:	b508      	push	{r3, lr}
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	f000 fff2 	bl	800d190 <ucdr_alignment>
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	bd08      	pop	{r3, pc}
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop

0800c1b4 <_Kill_Request__get_serialized_size>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	b130      	cbz	r0, 800c1c8 <_Kill_Request__get_serialized_size+0x14>
 800c1ba:	2104      	movs	r1, #4
 800c1bc:	2000      	movs	r0, #0
 800c1be:	f000 ffe7 	bl	800d190 <ucdr_alignment>
 800c1c2:	6863      	ldr	r3, [r4, #4]
 800c1c4:	3305      	adds	r3, #5
 800c1c6:	4418      	add	r0, r3
 800c1c8:	bd10      	pop	{r4, pc}
 800c1ca:	bf00      	nop

0800c1cc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__turtlesim__srv__Kill>:
 800c1cc:	4800      	ldr	r0, [pc, #0]	@ (800c1d0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__turtlesim__srv__Kill+0x4>)
 800c1ce:	4770      	bx	lr
 800c1d0:	20000120 	.word	0x20000120

0800c1d4 <ucdr_serialize_bool>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	2101      	movs	r1, #1
 800c1da:	4604      	mov	r4, r0
 800c1dc:	f000 ff8c 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c1e0:	b148      	cbz	r0, 800c1f6 <ucdr_serialize_bool+0x22>
 800c1e2:	68a3      	ldr	r3, [r4, #8]
 800c1e4:	701d      	strb	r5, [r3, #0]
 800c1e6:	68a2      	ldr	r2, [r4, #8]
 800c1e8:	6923      	ldr	r3, [r4, #16]
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	440a      	add	r2, r1
 800c1ee:	440b      	add	r3, r1
 800c1f0:	60a2      	str	r2, [r4, #8]
 800c1f2:	6123      	str	r3, [r4, #16]
 800c1f4:	7561      	strb	r1, [r4, #21]
 800c1f6:	7da0      	ldrb	r0, [r4, #22]
 800c1f8:	f080 0001 	eor.w	r0, r0, #1
 800c1fc:	bd38      	pop	{r3, r4, r5, pc}
 800c1fe:	bf00      	nop

0800c200 <ucdr_deserialize_bool>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	460d      	mov	r5, r1
 800c204:	2101      	movs	r1, #1
 800c206:	4604      	mov	r4, r0
 800c208:	f000 ff76 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c20c:	b160      	cbz	r0, 800c228 <ucdr_deserialize_bool+0x28>
 800c20e:	68a2      	ldr	r2, [r4, #8]
 800c210:	6923      	ldr	r3, [r4, #16]
 800c212:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c216:	3900      	subs	r1, #0
 800c218:	bf18      	it	ne
 800c21a:	2101      	movne	r1, #1
 800c21c:	7029      	strb	r1, [r5, #0]
 800c21e:	3301      	adds	r3, #1
 800c220:	2101      	movs	r1, #1
 800c222:	60a2      	str	r2, [r4, #8]
 800c224:	6123      	str	r3, [r4, #16]
 800c226:	7561      	strb	r1, [r4, #21]
 800c228:	7da0      	ldrb	r0, [r4, #22]
 800c22a:	f080 0001 	eor.w	r0, r0, #1
 800c22e:	bd38      	pop	{r3, r4, r5, pc}

0800c230 <ucdr_serialize_uint8_t>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	460d      	mov	r5, r1
 800c234:	2101      	movs	r1, #1
 800c236:	4604      	mov	r4, r0
 800c238:	f000 ff5e 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c23c:	b148      	cbz	r0, 800c252 <ucdr_serialize_uint8_t+0x22>
 800c23e:	68a3      	ldr	r3, [r4, #8]
 800c240:	701d      	strb	r5, [r3, #0]
 800c242:	68a2      	ldr	r2, [r4, #8]
 800c244:	6923      	ldr	r3, [r4, #16]
 800c246:	2101      	movs	r1, #1
 800c248:	440a      	add	r2, r1
 800c24a:	440b      	add	r3, r1
 800c24c:	60a2      	str	r2, [r4, #8]
 800c24e:	6123      	str	r3, [r4, #16]
 800c250:	7561      	strb	r1, [r4, #21]
 800c252:	7da0      	ldrb	r0, [r4, #22]
 800c254:	f080 0001 	eor.w	r0, r0, #1
 800c258:	bd38      	pop	{r3, r4, r5, pc}
 800c25a:	bf00      	nop

0800c25c <ucdr_deserialize_uint8_t>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	460d      	mov	r5, r1
 800c260:	2101      	movs	r1, #1
 800c262:	4604      	mov	r4, r0
 800c264:	f000 ff48 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c268:	b150      	cbz	r0, 800c280 <ucdr_deserialize_uint8_t+0x24>
 800c26a:	68a3      	ldr	r3, [r4, #8]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	702b      	strb	r3, [r5, #0]
 800c270:	68a2      	ldr	r2, [r4, #8]
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	2101      	movs	r1, #1
 800c276:	440a      	add	r2, r1
 800c278:	440b      	add	r3, r1
 800c27a:	60a2      	str	r2, [r4, #8]
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	7561      	strb	r1, [r4, #21]
 800c280:	7da0      	ldrb	r0, [r4, #22]
 800c282:	f080 0001 	eor.w	r0, r0, #1
 800c286:	bd38      	pop	{r3, r4, r5, pc}

0800c288 <ucdr_serialize_uint16_t>:
 800c288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28c:	b082      	sub	sp, #8
 800c28e:	460b      	mov	r3, r1
 800c290:	2102      	movs	r1, #2
 800c292:	4604      	mov	r4, r0
 800c294:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c298:	f000 ff82 	bl	800d1a0 <ucdr_buffer_alignment>
 800c29c:	4601      	mov	r1, r0
 800c29e:	4620      	mov	r0, r4
 800c2a0:	7d67      	ldrb	r7, [r4, #21]
 800c2a2:	f000 ffc1 	bl	800d228 <ucdr_advance_buffer>
 800c2a6:	2102      	movs	r1, #2
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f000 ff19 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800c2ae:	bb78      	cbnz	r0, 800c310 <ucdr_serialize_uint16_t+0x88>
 800c2b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c2b4:	42ab      	cmp	r3, r5
 800c2b6:	d926      	bls.n	800c306 <ucdr_serialize_uint16_t+0x7e>
 800c2b8:	1b5e      	subs	r6, r3, r5
 800c2ba:	60a3      	str	r3, [r4, #8]
 800c2bc:	6923      	ldr	r3, [r4, #16]
 800c2be:	f1c6 0802 	rsb	r8, r6, #2
 800c2c2:	4433      	add	r3, r6
 800c2c4:	6123      	str	r3, [r4, #16]
 800c2c6:	4641      	mov	r1, r8
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f000 ff15 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d03b      	beq.n	800c34a <ucdr_serialize_uint16_t+0xc2>
 800c2d2:	7d23      	ldrb	r3, [r4, #20]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d04a      	beq.n	800c36e <ucdr_serialize_uint16_t+0xe6>
 800c2d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c2dc:	702b      	strb	r3, [r5, #0]
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	d040      	beq.n	800c364 <ucdr_serialize_uint16_t+0xdc>
 800c2e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c2e6:	706b      	strb	r3, [r5, #1]
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	68a2      	ldr	r2, [r4, #8]
 800c2ec:	7da0      	ldrb	r0, [r4, #22]
 800c2ee:	3302      	adds	r3, #2
 800c2f0:	1b9e      	subs	r6, r3, r6
 800c2f2:	4442      	add	r2, r8
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	f080 0001 	eor.w	r0, r0, #1
 800c2fa:	60a2      	str	r2, [r4, #8]
 800c2fc:	6126      	str	r6, [r4, #16]
 800c2fe:	7563      	strb	r3, [r4, #21]
 800c300:	b002      	add	sp, #8
 800c302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c306:	2102      	movs	r1, #2
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 fef5 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c30e:	b190      	cbz	r0, 800c336 <ucdr_serialize_uint16_t+0xae>
 800c310:	7d23      	ldrb	r3, [r4, #20]
 800c312:	2b01      	cmp	r3, #1
 800c314:	68a3      	ldr	r3, [r4, #8]
 800c316:	d014      	beq.n	800c342 <ucdr_serialize_uint16_t+0xba>
 800c318:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c31c:	701a      	strb	r2, [r3, #0]
 800c31e:	68a3      	ldr	r3, [r4, #8]
 800c320:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c324:	705a      	strb	r2, [r3, #1]
 800c326:	68a2      	ldr	r2, [r4, #8]
 800c328:	6923      	ldr	r3, [r4, #16]
 800c32a:	3202      	adds	r2, #2
 800c32c:	3302      	adds	r3, #2
 800c32e:	2102      	movs	r1, #2
 800c330:	60a2      	str	r2, [r4, #8]
 800c332:	6123      	str	r3, [r4, #16]
 800c334:	7561      	strb	r1, [r4, #21]
 800c336:	7da0      	ldrb	r0, [r4, #22]
 800c338:	f080 0001 	eor.w	r0, r0, #1
 800c33c:	b002      	add	sp, #8
 800c33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c342:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c346:	801a      	strh	r2, [r3, #0]
 800c348:	e7ed      	b.n	800c326 <ucdr_serialize_uint16_t+0x9e>
 800c34a:	68a2      	ldr	r2, [r4, #8]
 800c34c:	6923      	ldr	r3, [r4, #16]
 800c34e:	7da0      	ldrb	r0, [r4, #22]
 800c350:	7567      	strb	r7, [r4, #21]
 800c352:	1b92      	subs	r2, r2, r6
 800c354:	1b9b      	subs	r3, r3, r6
 800c356:	f080 0001 	eor.w	r0, r0, #1
 800c35a:	60a2      	str	r2, [r4, #8]
 800c35c:	6123      	str	r3, [r4, #16]
 800c35e:	b002      	add	sp, #8
 800c360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c364:	68a3      	ldr	r3, [r4, #8]
 800c366:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	e7bc      	b.n	800c2e8 <ucdr_serialize_uint16_t+0x60>
 800c36e:	4628      	mov	r0, r5
 800c370:	f10d 0506 	add.w	r5, sp, #6
 800c374:	4629      	mov	r1, r5
 800c376:	4632      	mov	r2, r6
 800c378:	f008 fe77 	bl	801506a <memcpy>
 800c37c:	68a0      	ldr	r0, [r4, #8]
 800c37e:	4642      	mov	r2, r8
 800c380:	19a9      	adds	r1, r5, r6
 800c382:	f008 fe72 	bl	801506a <memcpy>
 800c386:	e7af      	b.n	800c2e8 <ucdr_serialize_uint16_t+0x60>

0800c388 <ucdr_serialize_endian_uint16_t>:
 800c388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c38c:	b083      	sub	sp, #12
 800c38e:	460d      	mov	r5, r1
 800c390:	2102      	movs	r1, #2
 800c392:	4604      	mov	r4, r0
 800c394:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c398:	f000 ff02 	bl	800d1a0 <ucdr_buffer_alignment>
 800c39c:	4601      	mov	r1, r0
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c3a4:	f000 ff40 	bl	800d228 <ucdr_advance_buffer>
 800c3a8:	2102      	movs	r1, #2
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f000 fe98 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800c3b0:	bb70      	cbnz	r0, 800c410 <ucdr_serialize_endian_uint16_t+0x88>
 800c3b2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c3b6:	42be      	cmp	r6, r7
 800c3b8:	d925      	bls.n	800c406 <ucdr_serialize_endian_uint16_t+0x7e>
 800c3ba:	6923      	ldr	r3, [r4, #16]
 800c3bc:	60a6      	str	r6, [r4, #8]
 800c3be:	1bf6      	subs	r6, r6, r7
 800c3c0:	4433      	add	r3, r6
 800c3c2:	f1c6 0902 	rsb	r9, r6, #2
 800c3c6:	6123      	str	r3, [r4, #16]
 800c3c8:	4649      	mov	r1, r9
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 fe94 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d039      	beq.n	800c448 <ucdr_serialize_endian_uint16_t+0xc0>
 800c3d4:	2d01      	cmp	r5, #1
 800c3d6:	d04a      	beq.n	800c46e <ucdr_serialize_endian_uint16_t+0xe6>
 800c3d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3dc:	703b      	strb	r3, [r7, #0]
 800c3de:	2e00      	cmp	r6, #0
 800c3e0:	d040      	beq.n	800c464 <ucdr_serialize_endian_uint16_t+0xdc>
 800c3e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c3e6:	707b      	strb	r3, [r7, #1]
 800c3e8:	6923      	ldr	r3, [r4, #16]
 800c3ea:	68a2      	ldr	r2, [r4, #8]
 800c3ec:	7da0      	ldrb	r0, [r4, #22]
 800c3ee:	3302      	adds	r3, #2
 800c3f0:	444a      	add	r2, r9
 800c3f2:	1b9b      	subs	r3, r3, r6
 800c3f4:	2102      	movs	r1, #2
 800c3f6:	f080 0001 	eor.w	r0, r0, #1
 800c3fa:	60a2      	str	r2, [r4, #8]
 800c3fc:	6123      	str	r3, [r4, #16]
 800c3fe:	7561      	strb	r1, [r4, #21]
 800c400:	b003      	add	sp, #12
 800c402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c406:	2102      	movs	r1, #2
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 fe75 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c40e:	b188      	cbz	r0, 800c434 <ucdr_serialize_endian_uint16_t+0xac>
 800c410:	2d01      	cmp	r5, #1
 800c412:	68a3      	ldr	r3, [r4, #8]
 800c414:	d014      	beq.n	800c440 <ucdr_serialize_endian_uint16_t+0xb8>
 800c416:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c41a:	701a      	strb	r2, [r3, #0]
 800c41c:	68a3      	ldr	r3, [r4, #8]
 800c41e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c422:	705a      	strb	r2, [r3, #1]
 800c424:	68a2      	ldr	r2, [r4, #8]
 800c426:	6923      	ldr	r3, [r4, #16]
 800c428:	3202      	adds	r2, #2
 800c42a:	3302      	adds	r3, #2
 800c42c:	2102      	movs	r1, #2
 800c42e:	60a2      	str	r2, [r4, #8]
 800c430:	6123      	str	r3, [r4, #16]
 800c432:	7561      	strb	r1, [r4, #21]
 800c434:	7da0      	ldrb	r0, [r4, #22]
 800c436:	f080 0001 	eor.w	r0, r0, #1
 800c43a:	b003      	add	sp, #12
 800c43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c440:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c444:	801a      	strh	r2, [r3, #0]
 800c446:	e7ed      	b.n	800c424 <ucdr_serialize_endian_uint16_t+0x9c>
 800c448:	68a2      	ldr	r2, [r4, #8]
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	7da0      	ldrb	r0, [r4, #22]
 800c44e:	f884 8015 	strb.w	r8, [r4, #21]
 800c452:	1b92      	subs	r2, r2, r6
 800c454:	1b9b      	subs	r3, r3, r6
 800c456:	f080 0001 	eor.w	r0, r0, #1
 800c45a:	60a2      	str	r2, [r4, #8]
 800c45c:	6123      	str	r3, [r4, #16]
 800c45e:	b003      	add	sp, #12
 800c460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c464:	68a3      	ldr	r3, [r4, #8]
 800c466:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c46a:	701a      	strb	r2, [r3, #0]
 800c46c:	e7bc      	b.n	800c3e8 <ucdr_serialize_endian_uint16_t+0x60>
 800c46e:	f10d 0506 	add.w	r5, sp, #6
 800c472:	4629      	mov	r1, r5
 800c474:	4632      	mov	r2, r6
 800c476:	4638      	mov	r0, r7
 800c478:	f008 fdf7 	bl	801506a <memcpy>
 800c47c:	68a0      	ldr	r0, [r4, #8]
 800c47e:	464a      	mov	r2, r9
 800c480:	19a9      	adds	r1, r5, r6
 800c482:	f008 fdf2 	bl	801506a <memcpy>
 800c486:	e7af      	b.n	800c3e8 <ucdr_serialize_endian_uint16_t+0x60>

0800c488 <ucdr_deserialize_uint16_t>:
 800c488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c48c:	460d      	mov	r5, r1
 800c48e:	2102      	movs	r1, #2
 800c490:	4604      	mov	r4, r0
 800c492:	f000 fe85 	bl	800d1a0 <ucdr_buffer_alignment>
 800c496:	4601      	mov	r1, r0
 800c498:	4620      	mov	r0, r4
 800c49a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c49e:	f000 fec3 	bl	800d228 <ucdr_advance_buffer>
 800c4a2:	2102      	movs	r1, #2
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f000 fe1b 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800c4aa:	bb60      	cbnz	r0, 800c506 <ucdr_deserialize_uint16_t+0x7e>
 800c4ac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c4b0:	42be      	cmp	r6, r7
 800c4b2:	d923      	bls.n	800c4fc <ucdr_deserialize_uint16_t+0x74>
 800c4b4:	6923      	ldr	r3, [r4, #16]
 800c4b6:	60a6      	str	r6, [r4, #8]
 800c4b8:	1bf6      	subs	r6, r6, r7
 800c4ba:	4433      	add	r3, r6
 800c4bc:	f1c6 0902 	rsb	r9, r6, #2
 800c4c0:	6123      	str	r3, [r4, #16]
 800c4c2:	4649      	mov	r1, r9
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f000 fe17 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d034      	beq.n	800c538 <ucdr_deserialize_uint16_t+0xb0>
 800c4ce:	7d23      	ldrb	r3, [r4, #20]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d042      	beq.n	800c55a <ucdr_deserialize_uint16_t+0xd2>
 800c4d4:	787b      	ldrb	r3, [r7, #1]
 800c4d6:	702b      	strb	r3, [r5, #0]
 800c4d8:	2e00      	cmp	r6, #0
 800c4da:	d03a      	beq.n	800c552 <ucdr_deserialize_uint16_t+0xca>
 800c4dc:	783b      	ldrb	r3, [r7, #0]
 800c4de:	706b      	strb	r3, [r5, #1]
 800c4e0:	6923      	ldr	r3, [r4, #16]
 800c4e2:	68a2      	ldr	r2, [r4, #8]
 800c4e4:	7da0      	ldrb	r0, [r4, #22]
 800c4e6:	2102      	movs	r1, #2
 800c4e8:	3302      	adds	r3, #2
 800c4ea:	444a      	add	r2, r9
 800c4ec:	1b9b      	subs	r3, r3, r6
 800c4ee:	7561      	strb	r1, [r4, #21]
 800c4f0:	60a2      	str	r2, [r4, #8]
 800c4f2:	6123      	str	r3, [r4, #16]
 800c4f4:	f080 0001 	eor.w	r0, r0, #1
 800c4f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4fc:	2102      	movs	r1, #2
 800c4fe:	4620      	mov	r0, r4
 800c500:	f000 fdfa 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c504:	b180      	cbz	r0, 800c528 <ucdr_deserialize_uint16_t+0xa0>
 800c506:	7d23      	ldrb	r3, [r4, #20]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	68a3      	ldr	r3, [r4, #8]
 800c50c:	d011      	beq.n	800c532 <ucdr_deserialize_uint16_t+0xaa>
 800c50e:	785b      	ldrb	r3, [r3, #1]
 800c510:	702b      	strb	r3, [r5, #0]
 800c512:	68a3      	ldr	r3, [r4, #8]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	706b      	strb	r3, [r5, #1]
 800c518:	68a2      	ldr	r2, [r4, #8]
 800c51a:	6923      	ldr	r3, [r4, #16]
 800c51c:	3202      	adds	r2, #2
 800c51e:	3302      	adds	r3, #2
 800c520:	2102      	movs	r1, #2
 800c522:	60a2      	str	r2, [r4, #8]
 800c524:	6123      	str	r3, [r4, #16]
 800c526:	7561      	strb	r1, [r4, #21]
 800c528:	7da0      	ldrb	r0, [r4, #22]
 800c52a:	f080 0001 	eor.w	r0, r0, #1
 800c52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	802b      	strh	r3, [r5, #0]
 800c536:	e7ef      	b.n	800c518 <ucdr_deserialize_uint16_t+0x90>
 800c538:	68a2      	ldr	r2, [r4, #8]
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	7da0      	ldrb	r0, [r4, #22]
 800c53e:	f884 8015 	strb.w	r8, [r4, #21]
 800c542:	1b92      	subs	r2, r2, r6
 800c544:	1b9b      	subs	r3, r3, r6
 800c546:	60a2      	str	r2, [r4, #8]
 800c548:	6123      	str	r3, [r4, #16]
 800c54a:	f080 0001 	eor.w	r0, r0, #1
 800c54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c552:	68a3      	ldr	r3, [r4, #8]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	706b      	strb	r3, [r5, #1]
 800c558:	e7c2      	b.n	800c4e0 <ucdr_deserialize_uint16_t+0x58>
 800c55a:	4639      	mov	r1, r7
 800c55c:	4632      	mov	r2, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	f008 fd83 	bl	801506a <memcpy>
 800c564:	68a1      	ldr	r1, [r4, #8]
 800c566:	464a      	mov	r2, r9
 800c568:	19a8      	adds	r0, r5, r6
 800c56a:	f008 fd7e 	bl	801506a <memcpy>
 800c56e:	e7b7      	b.n	800c4e0 <ucdr_deserialize_uint16_t+0x58>

0800c570 <ucdr_deserialize_endian_uint16_t>:
 800c570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c574:	460e      	mov	r6, r1
 800c576:	2102      	movs	r1, #2
 800c578:	4604      	mov	r4, r0
 800c57a:	4615      	mov	r5, r2
 800c57c:	f000 fe10 	bl	800d1a0 <ucdr_buffer_alignment>
 800c580:	4601      	mov	r1, r0
 800c582:	4620      	mov	r0, r4
 800c584:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c588:	f000 fe4e 	bl	800d228 <ucdr_advance_buffer>
 800c58c:	2102      	movs	r1, #2
 800c58e:	4620      	mov	r0, r4
 800c590:	f000 fda6 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800c594:	bb70      	cbnz	r0, 800c5f4 <ucdr_deserialize_endian_uint16_t+0x84>
 800c596:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c59a:	4547      	cmp	r7, r8
 800c59c:	d925      	bls.n	800c5ea <ucdr_deserialize_endian_uint16_t+0x7a>
 800c59e:	6923      	ldr	r3, [r4, #16]
 800c5a0:	60a7      	str	r7, [r4, #8]
 800c5a2:	eba7 0708 	sub.w	r7, r7, r8
 800c5a6:	443b      	add	r3, r7
 800c5a8:	f1c7 0a02 	rsb	sl, r7, #2
 800c5ac:	6123      	str	r3, [r4, #16]
 800c5ae:	4651      	mov	r1, sl
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f000 fda1 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d034      	beq.n	800c624 <ucdr_deserialize_endian_uint16_t+0xb4>
 800c5ba:	2e01      	cmp	r6, #1
 800c5bc:	d043      	beq.n	800c646 <ucdr_deserialize_endian_uint16_t+0xd6>
 800c5be:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c5c2:	702b      	strb	r3, [r5, #0]
 800c5c4:	2f00      	cmp	r7, #0
 800c5c6:	d03a      	beq.n	800c63e <ucdr_deserialize_endian_uint16_t+0xce>
 800c5c8:	f898 3000 	ldrb.w	r3, [r8]
 800c5cc:	706b      	strb	r3, [r5, #1]
 800c5ce:	6923      	ldr	r3, [r4, #16]
 800c5d0:	68a2      	ldr	r2, [r4, #8]
 800c5d2:	7da0      	ldrb	r0, [r4, #22]
 800c5d4:	2102      	movs	r1, #2
 800c5d6:	3302      	adds	r3, #2
 800c5d8:	4452      	add	r2, sl
 800c5da:	1bdb      	subs	r3, r3, r7
 800c5dc:	7561      	strb	r1, [r4, #21]
 800c5de:	60a2      	str	r2, [r4, #8]
 800c5e0:	6123      	str	r3, [r4, #16]
 800c5e2:	f080 0001 	eor.w	r0, r0, #1
 800c5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ea:	2102      	movs	r1, #2
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f000 fd83 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c5f2:	b178      	cbz	r0, 800c614 <ucdr_deserialize_endian_uint16_t+0xa4>
 800c5f4:	2e01      	cmp	r6, #1
 800c5f6:	68a3      	ldr	r3, [r4, #8]
 800c5f8:	d011      	beq.n	800c61e <ucdr_deserialize_endian_uint16_t+0xae>
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	702b      	strb	r3, [r5, #0]
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	706b      	strb	r3, [r5, #1]
 800c604:	68a2      	ldr	r2, [r4, #8]
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	3202      	adds	r2, #2
 800c60a:	3302      	adds	r3, #2
 800c60c:	2102      	movs	r1, #2
 800c60e:	60a2      	str	r2, [r4, #8]
 800c610:	6123      	str	r3, [r4, #16]
 800c612:	7561      	strb	r1, [r4, #21]
 800c614:	7da0      	ldrb	r0, [r4, #22]
 800c616:	f080 0001 	eor.w	r0, r0, #1
 800c61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61e:	881b      	ldrh	r3, [r3, #0]
 800c620:	802b      	strh	r3, [r5, #0]
 800c622:	e7ef      	b.n	800c604 <ucdr_deserialize_endian_uint16_t+0x94>
 800c624:	68a2      	ldr	r2, [r4, #8]
 800c626:	6923      	ldr	r3, [r4, #16]
 800c628:	7da0      	ldrb	r0, [r4, #22]
 800c62a:	f884 9015 	strb.w	r9, [r4, #21]
 800c62e:	1bd2      	subs	r2, r2, r7
 800c630:	1bdb      	subs	r3, r3, r7
 800c632:	60a2      	str	r2, [r4, #8]
 800c634:	6123      	str	r3, [r4, #16]
 800c636:	f080 0001 	eor.w	r0, r0, #1
 800c63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c63e:	68a3      	ldr	r3, [r4, #8]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	706b      	strb	r3, [r5, #1]
 800c644:	e7c3      	b.n	800c5ce <ucdr_deserialize_endian_uint16_t+0x5e>
 800c646:	4641      	mov	r1, r8
 800c648:	463a      	mov	r2, r7
 800c64a:	4628      	mov	r0, r5
 800c64c:	f008 fd0d 	bl	801506a <memcpy>
 800c650:	68a1      	ldr	r1, [r4, #8]
 800c652:	4652      	mov	r2, sl
 800c654:	19e8      	adds	r0, r5, r7
 800c656:	f008 fd08 	bl	801506a <memcpy>
 800c65a:	e7b8      	b.n	800c5ce <ucdr_deserialize_endian_uint16_t+0x5e>

0800c65c <ucdr_serialize_uint32_t>:
 800c65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c660:	b082      	sub	sp, #8
 800c662:	4604      	mov	r4, r0
 800c664:	9101      	str	r1, [sp, #4]
 800c666:	2104      	movs	r1, #4
 800c668:	f000 fd9a 	bl	800d1a0 <ucdr_buffer_alignment>
 800c66c:	4601      	mov	r1, r0
 800c66e:	4620      	mov	r0, r4
 800c670:	7d67      	ldrb	r7, [r4, #21]
 800c672:	f000 fdd9 	bl	800d228 <ucdr_advance_buffer>
 800c676:	2104      	movs	r1, #4
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 fd31 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800c67e:	2800      	cmp	r0, #0
 800c680:	d139      	bne.n	800c6f6 <ucdr_serialize_uint32_t+0x9a>
 800c682:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c686:	42ab      	cmp	r3, r5
 800c688:	d930      	bls.n	800c6ec <ucdr_serialize_uint32_t+0x90>
 800c68a:	1b5e      	subs	r6, r3, r5
 800c68c:	60a3      	str	r3, [r4, #8]
 800c68e:	6923      	ldr	r3, [r4, #16]
 800c690:	f1c6 0804 	rsb	r8, r6, #4
 800c694:	4433      	add	r3, r6
 800c696:	6123      	str	r3, [r4, #16]
 800c698:	4641      	mov	r1, r8
 800c69a:	4620      	mov	r0, r4
 800c69c:	f000 fd2c 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d04c      	beq.n	800c73e <ucdr_serialize_uint32_t+0xe2>
 800c6a4:	7d23      	ldrb	r3, [r4, #20]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d063      	beq.n	800c772 <ucdr_serialize_uint32_t+0x116>
 800c6aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c6ae:	702b      	strb	r3, [r5, #0]
 800c6b0:	2e00      	cmp	r6, #0
 800c6b2:	d051      	beq.n	800c758 <ucdr_serialize_uint32_t+0xfc>
 800c6b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c6b8:	706b      	strb	r3, [r5, #1]
 800c6ba:	2e01      	cmp	r6, #1
 800c6bc:	d050      	beq.n	800c760 <ucdr_serialize_uint32_t+0x104>
 800c6be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c6c2:	70ab      	strb	r3, [r5, #2]
 800c6c4:	2e02      	cmp	r6, #2
 800c6c6:	d04f      	beq.n	800c768 <ucdr_serialize_uint32_t+0x10c>
 800c6c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c6cc:	70eb      	strb	r3, [r5, #3]
 800c6ce:	6923      	ldr	r3, [r4, #16]
 800c6d0:	68a2      	ldr	r2, [r4, #8]
 800c6d2:	7da0      	ldrb	r0, [r4, #22]
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	1b9e      	subs	r6, r3, r6
 800c6d8:	4442      	add	r2, r8
 800c6da:	2304      	movs	r3, #4
 800c6dc:	f080 0001 	eor.w	r0, r0, #1
 800c6e0:	60a2      	str	r2, [r4, #8]
 800c6e2:	6126      	str	r6, [r4, #16]
 800c6e4:	7563      	strb	r3, [r4, #21]
 800c6e6:	b002      	add	sp, #8
 800c6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ec:	2104      	movs	r1, #4
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f000 fd02 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c6f4:	b1d0      	cbz	r0, 800c72c <ucdr_serialize_uint32_t+0xd0>
 800c6f6:	7d23      	ldrb	r3, [r4, #20]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	d01c      	beq.n	800c738 <ucdr_serialize_uint32_t+0xdc>
 800c6fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c702:	701a      	strb	r2, [r3, #0]
 800c704:	68a3      	ldr	r3, [r4, #8]
 800c706:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c70a:	705a      	strb	r2, [r3, #1]
 800c70c:	68a3      	ldr	r3, [r4, #8]
 800c70e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c712:	709a      	strb	r2, [r3, #2]
 800c714:	68a3      	ldr	r3, [r4, #8]
 800c716:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c71a:	70da      	strb	r2, [r3, #3]
 800c71c:	68a2      	ldr	r2, [r4, #8]
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	3204      	adds	r2, #4
 800c722:	3304      	adds	r3, #4
 800c724:	2104      	movs	r1, #4
 800c726:	60a2      	str	r2, [r4, #8]
 800c728:	6123      	str	r3, [r4, #16]
 800c72a:	7561      	strb	r1, [r4, #21]
 800c72c:	7da0      	ldrb	r0, [r4, #22]
 800c72e:	f080 0001 	eor.w	r0, r0, #1
 800c732:	b002      	add	sp, #8
 800c734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c738:	9a01      	ldr	r2, [sp, #4]
 800c73a:	601a      	str	r2, [r3, #0]
 800c73c:	e7ee      	b.n	800c71c <ucdr_serialize_uint32_t+0xc0>
 800c73e:	68a2      	ldr	r2, [r4, #8]
 800c740:	6923      	ldr	r3, [r4, #16]
 800c742:	7da0      	ldrb	r0, [r4, #22]
 800c744:	7567      	strb	r7, [r4, #21]
 800c746:	1b92      	subs	r2, r2, r6
 800c748:	1b9b      	subs	r3, r3, r6
 800c74a:	f080 0001 	eor.w	r0, r0, #1
 800c74e:	60a2      	str	r2, [r4, #8]
 800c750:	6123      	str	r3, [r4, #16]
 800c752:	b002      	add	sp, #8
 800c754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c758:	68a3      	ldr	r3, [r4, #8]
 800c75a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c75e:	701a      	strb	r2, [r3, #0]
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c766:	701a      	strb	r2, [r3, #0]
 800c768:	68a3      	ldr	r3, [r4, #8]
 800c76a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c76e:	701a      	strb	r2, [r3, #0]
 800c770:	e7ad      	b.n	800c6ce <ucdr_serialize_uint32_t+0x72>
 800c772:	4628      	mov	r0, r5
 800c774:	ad01      	add	r5, sp, #4
 800c776:	4629      	mov	r1, r5
 800c778:	4632      	mov	r2, r6
 800c77a:	f008 fc76 	bl	801506a <memcpy>
 800c77e:	68a0      	ldr	r0, [r4, #8]
 800c780:	4642      	mov	r2, r8
 800c782:	19a9      	adds	r1, r5, r6
 800c784:	f008 fc71 	bl	801506a <memcpy>
 800c788:	e7a1      	b.n	800c6ce <ucdr_serialize_uint32_t+0x72>
 800c78a:	bf00      	nop

0800c78c <ucdr_serialize_endian_uint32_t>:
 800c78c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c790:	b083      	sub	sp, #12
 800c792:	460d      	mov	r5, r1
 800c794:	2104      	movs	r1, #4
 800c796:	4604      	mov	r4, r0
 800c798:	9201      	str	r2, [sp, #4]
 800c79a:	f000 fd01 	bl	800d1a0 <ucdr_buffer_alignment>
 800c79e:	4601      	mov	r1, r0
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c7a6:	f000 fd3f 	bl	800d228 <ucdr_advance_buffer>
 800c7aa:	2104      	movs	r1, #4
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f000 fc97 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d138      	bne.n	800c828 <ucdr_serialize_endian_uint32_t+0x9c>
 800c7b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c7ba:	42b7      	cmp	r7, r6
 800c7bc:	d92f      	bls.n	800c81e <ucdr_serialize_endian_uint32_t+0x92>
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	60a7      	str	r7, [r4, #8]
 800c7c2:	1bbf      	subs	r7, r7, r6
 800c7c4:	443b      	add	r3, r7
 800c7c6:	f1c7 0904 	rsb	r9, r7, #4
 800c7ca:	6123      	str	r3, [r4, #16]
 800c7cc:	4649      	mov	r1, r9
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 fc92 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d04a      	beq.n	800c86e <ucdr_serialize_endian_uint32_t+0xe2>
 800c7d8:	2d01      	cmp	r5, #1
 800c7da:	d063      	beq.n	800c8a4 <ucdr_serialize_endian_uint32_t+0x118>
 800c7dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c7e0:	7033      	strb	r3, [r6, #0]
 800c7e2:	2f00      	cmp	r7, #0
 800c7e4:	d051      	beq.n	800c88a <ucdr_serialize_endian_uint32_t+0xfe>
 800c7e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c7ea:	7073      	strb	r3, [r6, #1]
 800c7ec:	2f01      	cmp	r7, #1
 800c7ee:	d050      	beq.n	800c892 <ucdr_serialize_endian_uint32_t+0x106>
 800c7f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c7f4:	70b3      	strb	r3, [r6, #2]
 800c7f6:	2f02      	cmp	r7, #2
 800c7f8:	d04f      	beq.n	800c89a <ucdr_serialize_endian_uint32_t+0x10e>
 800c7fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c7fe:	70f3      	strb	r3, [r6, #3]
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	68a2      	ldr	r2, [r4, #8]
 800c804:	7da0      	ldrb	r0, [r4, #22]
 800c806:	3304      	adds	r3, #4
 800c808:	444a      	add	r2, r9
 800c80a:	1bdb      	subs	r3, r3, r7
 800c80c:	2104      	movs	r1, #4
 800c80e:	f080 0001 	eor.w	r0, r0, #1
 800c812:	60a2      	str	r2, [r4, #8]
 800c814:	6123      	str	r3, [r4, #16]
 800c816:	7561      	strb	r1, [r4, #21]
 800c818:	b003      	add	sp, #12
 800c81a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c81e:	2104      	movs	r1, #4
 800c820:	4620      	mov	r0, r4
 800c822:	f000 fc69 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c826:	b1c8      	cbz	r0, 800c85c <ucdr_serialize_endian_uint32_t+0xd0>
 800c828:	2d01      	cmp	r5, #1
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	d01c      	beq.n	800c868 <ucdr_serialize_endian_uint32_t+0xdc>
 800c82e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	68a3      	ldr	r3, [r4, #8]
 800c836:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c83a:	705a      	strb	r2, [r3, #1]
 800c83c:	68a3      	ldr	r3, [r4, #8]
 800c83e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c842:	709a      	strb	r2, [r3, #2]
 800c844:	68a3      	ldr	r3, [r4, #8]
 800c846:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c84a:	70da      	strb	r2, [r3, #3]
 800c84c:	68a2      	ldr	r2, [r4, #8]
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	3204      	adds	r2, #4
 800c852:	3304      	adds	r3, #4
 800c854:	2104      	movs	r1, #4
 800c856:	60a2      	str	r2, [r4, #8]
 800c858:	6123      	str	r3, [r4, #16]
 800c85a:	7561      	strb	r1, [r4, #21]
 800c85c:	7da0      	ldrb	r0, [r4, #22]
 800c85e:	f080 0001 	eor.w	r0, r0, #1
 800c862:	b003      	add	sp, #12
 800c864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c868:	9a01      	ldr	r2, [sp, #4]
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	e7ee      	b.n	800c84c <ucdr_serialize_endian_uint32_t+0xc0>
 800c86e:	68a2      	ldr	r2, [r4, #8]
 800c870:	6923      	ldr	r3, [r4, #16]
 800c872:	7da0      	ldrb	r0, [r4, #22]
 800c874:	f884 8015 	strb.w	r8, [r4, #21]
 800c878:	1bd2      	subs	r2, r2, r7
 800c87a:	1bdb      	subs	r3, r3, r7
 800c87c:	f080 0001 	eor.w	r0, r0, #1
 800c880:	60a2      	str	r2, [r4, #8]
 800c882:	6123      	str	r3, [r4, #16]
 800c884:	b003      	add	sp, #12
 800c886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c88a:	68a3      	ldr	r3, [r4, #8]
 800c88c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c890:	701a      	strb	r2, [r3, #0]
 800c892:	68a3      	ldr	r3, [r4, #8]
 800c894:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	68a3      	ldr	r3, [r4, #8]
 800c89c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c8a0:	701a      	strb	r2, [r3, #0]
 800c8a2:	e7ad      	b.n	800c800 <ucdr_serialize_endian_uint32_t+0x74>
 800c8a4:	ad01      	add	r5, sp, #4
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	463a      	mov	r2, r7
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f008 fbdd 	bl	801506a <memcpy>
 800c8b0:	68a0      	ldr	r0, [r4, #8]
 800c8b2:	464a      	mov	r2, r9
 800c8b4:	19e9      	adds	r1, r5, r7
 800c8b6:	f008 fbd8 	bl	801506a <memcpy>
 800c8ba:	e7a1      	b.n	800c800 <ucdr_serialize_endian_uint32_t+0x74>

0800c8bc <ucdr_deserialize_uint32_t>:
 800c8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	2104      	movs	r1, #4
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	f000 fc6b 	bl	800d1a0 <ucdr_buffer_alignment>
 800c8ca:	4601      	mov	r1, r0
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c8d2:	f000 fca9 	bl	800d228 <ucdr_advance_buffer>
 800c8d6:	2104      	movs	r1, #4
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fc01 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d138      	bne.n	800c954 <ucdr_deserialize_uint32_t+0x98>
 800c8e2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c8e6:	42b7      	cmp	r7, r6
 800c8e8:	d92f      	bls.n	800c94a <ucdr_deserialize_uint32_t+0x8e>
 800c8ea:	6923      	ldr	r3, [r4, #16]
 800c8ec:	60a7      	str	r7, [r4, #8]
 800c8ee:	1bbf      	subs	r7, r7, r6
 800c8f0:	443b      	add	r3, r7
 800c8f2:	f1c7 0904 	rsb	r9, r7, #4
 800c8f6:	6123      	str	r3, [r4, #16]
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f000 fbfc 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c900:	2800      	cmp	r0, #0
 800c902:	d046      	beq.n	800c992 <ucdr_deserialize_uint32_t+0xd6>
 800c904:	7d23      	ldrb	r3, [r4, #20]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d05c      	beq.n	800c9c4 <ucdr_deserialize_uint32_t+0x108>
 800c90a:	78f3      	ldrb	r3, [r6, #3]
 800c90c:	702b      	strb	r3, [r5, #0]
 800c90e:	2f00      	cmp	r7, #0
 800c910:	d04c      	beq.n	800c9ac <ucdr_deserialize_uint32_t+0xf0>
 800c912:	78b3      	ldrb	r3, [r6, #2]
 800c914:	706b      	strb	r3, [r5, #1]
 800c916:	2f01      	cmp	r7, #1
 800c918:	f105 0302 	add.w	r3, r5, #2
 800c91c:	d04a      	beq.n	800c9b4 <ucdr_deserialize_uint32_t+0xf8>
 800c91e:	7873      	ldrb	r3, [r6, #1]
 800c920:	70ab      	strb	r3, [r5, #2]
 800c922:	2f02      	cmp	r7, #2
 800c924:	f105 0303 	add.w	r3, r5, #3
 800c928:	d048      	beq.n	800c9bc <ucdr_deserialize_uint32_t+0x100>
 800c92a:	7833      	ldrb	r3, [r6, #0]
 800c92c:	70eb      	strb	r3, [r5, #3]
 800c92e:	6923      	ldr	r3, [r4, #16]
 800c930:	68a2      	ldr	r2, [r4, #8]
 800c932:	7da0      	ldrb	r0, [r4, #22]
 800c934:	2104      	movs	r1, #4
 800c936:	3304      	adds	r3, #4
 800c938:	444a      	add	r2, r9
 800c93a:	1bdb      	subs	r3, r3, r7
 800c93c:	7561      	strb	r1, [r4, #21]
 800c93e:	60a2      	str	r2, [r4, #8]
 800c940:	6123      	str	r3, [r4, #16]
 800c942:	f080 0001 	eor.w	r0, r0, #1
 800c946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c94a:	2104      	movs	r1, #4
 800c94c:	4620      	mov	r0, r4
 800c94e:	f000 fbd3 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800c952:	b1b0      	cbz	r0, 800c982 <ucdr_deserialize_uint32_t+0xc6>
 800c954:	7d23      	ldrb	r3, [r4, #20]
 800c956:	2b01      	cmp	r3, #1
 800c958:	68a3      	ldr	r3, [r4, #8]
 800c95a:	d017      	beq.n	800c98c <ucdr_deserialize_uint32_t+0xd0>
 800c95c:	78db      	ldrb	r3, [r3, #3]
 800c95e:	702b      	strb	r3, [r5, #0]
 800c960:	68a3      	ldr	r3, [r4, #8]
 800c962:	789b      	ldrb	r3, [r3, #2]
 800c964:	706b      	strb	r3, [r5, #1]
 800c966:	68a3      	ldr	r3, [r4, #8]
 800c968:	785b      	ldrb	r3, [r3, #1]
 800c96a:	70ab      	strb	r3, [r5, #2]
 800c96c:	68a3      	ldr	r3, [r4, #8]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	70eb      	strb	r3, [r5, #3]
 800c972:	68a2      	ldr	r2, [r4, #8]
 800c974:	6923      	ldr	r3, [r4, #16]
 800c976:	3204      	adds	r2, #4
 800c978:	3304      	adds	r3, #4
 800c97a:	2104      	movs	r1, #4
 800c97c:	60a2      	str	r2, [r4, #8]
 800c97e:	6123      	str	r3, [r4, #16]
 800c980:	7561      	strb	r1, [r4, #21]
 800c982:	7da0      	ldrb	r0, [r4, #22]
 800c984:	f080 0001 	eor.w	r0, r0, #1
 800c988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	602b      	str	r3, [r5, #0]
 800c990:	e7ef      	b.n	800c972 <ucdr_deserialize_uint32_t+0xb6>
 800c992:	68a2      	ldr	r2, [r4, #8]
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	7da0      	ldrb	r0, [r4, #22]
 800c998:	f884 8015 	strb.w	r8, [r4, #21]
 800c99c:	1bd2      	subs	r2, r2, r7
 800c99e:	1bdb      	subs	r3, r3, r7
 800c9a0:	60a2      	str	r2, [r4, #8]
 800c9a2:	6123      	str	r3, [r4, #16]
 800c9a4:	f080 0001 	eor.w	r0, r0, #1
 800c9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ac:	68a3      	ldr	r3, [r4, #8]
 800c9ae:	789b      	ldrb	r3, [r3, #2]
 800c9b0:	706b      	strb	r3, [r5, #1]
 800c9b2:	1cab      	adds	r3, r5, #2
 800c9b4:	68a2      	ldr	r2, [r4, #8]
 800c9b6:	7852      	ldrb	r2, [r2, #1]
 800c9b8:	f803 2b01 	strb.w	r2, [r3], #1
 800c9bc:	68a2      	ldr	r2, [r4, #8]
 800c9be:	7812      	ldrb	r2, [r2, #0]
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	e7b4      	b.n	800c92e <ucdr_deserialize_uint32_t+0x72>
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	463a      	mov	r2, r7
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f008 fb4e 	bl	801506a <memcpy>
 800c9ce:	68a1      	ldr	r1, [r4, #8]
 800c9d0:	464a      	mov	r2, r9
 800c9d2:	19e8      	adds	r0, r5, r7
 800c9d4:	f008 fb49 	bl	801506a <memcpy>
 800c9d8:	e7a9      	b.n	800c92e <ucdr_deserialize_uint32_t+0x72>
 800c9da:	bf00      	nop

0800c9dc <ucdr_deserialize_endian_uint32_t>:
 800c9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e0:	460e      	mov	r6, r1
 800c9e2:	2104      	movs	r1, #4
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	4615      	mov	r5, r2
 800c9e8:	f000 fbda 	bl	800d1a0 <ucdr_buffer_alignment>
 800c9ec:	4601      	mov	r1, r0
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c9f4:	f000 fc18 	bl	800d228 <ucdr_advance_buffer>
 800c9f8:	2104      	movs	r1, #4
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f000 fb70 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d13c      	bne.n	800ca7e <ucdr_deserialize_endian_uint32_t+0xa2>
 800ca04:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ca08:	42bb      	cmp	r3, r7
 800ca0a:	d933      	bls.n	800ca74 <ucdr_deserialize_endian_uint32_t+0x98>
 800ca0c:	eba3 0807 	sub.w	r8, r3, r7
 800ca10:	60a3      	str	r3, [r4, #8]
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	f1c8 0a04 	rsb	sl, r8, #4
 800ca18:	4443      	add	r3, r8
 800ca1a:	6123      	str	r3, [r4, #16]
 800ca1c:	4651      	mov	r1, sl
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f000 fb6a 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d048      	beq.n	800caba <ucdr_deserialize_endian_uint32_t+0xde>
 800ca28:	2e01      	cmp	r6, #1
 800ca2a:	d061      	beq.n	800caf0 <ucdr_deserialize_endian_uint32_t+0x114>
 800ca2c:	78fb      	ldrb	r3, [r7, #3]
 800ca2e:	702b      	strb	r3, [r5, #0]
 800ca30:	f1b8 0f00 	cmp.w	r8, #0
 800ca34:	d050      	beq.n	800cad8 <ucdr_deserialize_endian_uint32_t+0xfc>
 800ca36:	78bb      	ldrb	r3, [r7, #2]
 800ca38:	706b      	strb	r3, [r5, #1]
 800ca3a:	f1b8 0f01 	cmp.w	r8, #1
 800ca3e:	f105 0302 	add.w	r3, r5, #2
 800ca42:	d04d      	beq.n	800cae0 <ucdr_deserialize_endian_uint32_t+0x104>
 800ca44:	787b      	ldrb	r3, [r7, #1]
 800ca46:	70ab      	strb	r3, [r5, #2]
 800ca48:	f1b8 0f02 	cmp.w	r8, #2
 800ca4c:	f105 0303 	add.w	r3, r5, #3
 800ca50:	d04a      	beq.n	800cae8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800ca52:	783b      	ldrb	r3, [r7, #0]
 800ca54:	70eb      	strb	r3, [r5, #3]
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	68a2      	ldr	r2, [r4, #8]
 800ca5a:	7da0      	ldrb	r0, [r4, #22]
 800ca5c:	2104      	movs	r1, #4
 800ca5e:	3304      	adds	r3, #4
 800ca60:	4452      	add	r2, sl
 800ca62:	eba3 0308 	sub.w	r3, r3, r8
 800ca66:	7561      	strb	r1, [r4, #21]
 800ca68:	60a2      	str	r2, [r4, #8]
 800ca6a:	6123      	str	r3, [r4, #16]
 800ca6c:	f080 0001 	eor.w	r0, r0, #1
 800ca70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca74:	2104      	movs	r1, #4
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 fb3e 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800ca7c:	b1a8      	cbz	r0, 800caaa <ucdr_deserialize_endian_uint32_t+0xce>
 800ca7e:	2e01      	cmp	r6, #1
 800ca80:	68a3      	ldr	r3, [r4, #8]
 800ca82:	d017      	beq.n	800cab4 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ca84:	78db      	ldrb	r3, [r3, #3]
 800ca86:	702b      	strb	r3, [r5, #0]
 800ca88:	68a3      	ldr	r3, [r4, #8]
 800ca8a:	789b      	ldrb	r3, [r3, #2]
 800ca8c:	706b      	strb	r3, [r5, #1]
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	785b      	ldrb	r3, [r3, #1]
 800ca92:	70ab      	strb	r3, [r5, #2]
 800ca94:	68a3      	ldr	r3, [r4, #8]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	70eb      	strb	r3, [r5, #3]
 800ca9a:	68a2      	ldr	r2, [r4, #8]
 800ca9c:	6923      	ldr	r3, [r4, #16]
 800ca9e:	3204      	adds	r2, #4
 800caa0:	3304      	adds	r3, #4
 800caa2:	2104      	movs	r1, #4
 800caa4:	60a2      	str	r2, [r4, #8]
 800caa6:	6123      	str	r3, [r4, #16]
 800caa8:	7561      	strb	r1, [r4, #21]
 800caaa:	7da0      	ldrb	r0, [r4, #22]
 800caac:	f080 0001 	eor.w	r0, r0, #1
 800cab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	e7ef      	b.n	800ca9a <ucdr_deserialize_endian_uint32_t+0xbe>
 800caba:	68a2      	ldr	r2, [r4, #8]
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	7da0      	ldrb	r0, [r4, #22]
 800cac0:	f884 9015 	strb.w	r9, [r4, #21]
 800cac4:	eba2 0208 	sub.w	r2, r2, r8
 800cac8:	eba3 0308 	sub.w	r3, r3, r8
 800cacc:	60a2      	str	r2, [r4, #8]
 800cace:	6123      	str	r3, [r4, #16]
 800cad0:	f080 0001 	eor.w	r0, r0, #1
 800cad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad8:	68a3      	ldr	r3, [r4, #8]
 800cada:	789b      	ldrb	r3, [r3, #2]
 800cadc:	706b      	strb	r3, [r5, #1]
 800cade:	1cab      	adds	r3, r5, #2
 800cae0:	68a2      	ldr	r2, [r4, #8]
 800cae2:	7852      	ldrb	r2, [r2, #1]
 800cae4:	f803 2b01 	strb.w	r2, [r3], #1
 800cae8:	68a2      	ldr	r2, [r4, #8]
 800caea:	7812      	ldrb	r2, [r2, #0]
 800caec:	701a      	strb	r2, [r3, #0]
 800caee:	e7b2      	b.n	800ca56 <ucdr_deserialize_endian_uint32_t+0x7a>
 800caf0:	4639      	mov	r1, r7
 800caf2:	4642      	mov	r2, r8
 800caf4:	4628      	mov	r0, r5
 800caf6:	f008 fab8 	bl	801506a <memcpy>
 800cafa:	68a1      	ldr	r1, [r4, #8]
 800cafc:	4652      	mov	r2, sl
 800cafe:	eb05 0008 	add.w	r0, r5, r8
 800cb02:	f008 fab2 	bl	801506a <memcpy>
 800cb06:	e7a6      	b.n	800ca56 <ucdr_deserialize_endian_uint32_t+0x7a>

0800cb08 <ucdr_serialize_uint64_t>:
 800cb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0c:	2108      	movs	r1, #8
 800cb0e:	b082      	sub	sp, #8
 800cb10:	4604      	mov	r4, r0
 800cb12:	e9cd 2300 	strd	r2, r3, [sp]
 800cb16:	f000 fb43 	bl	800d1a0 <ucdr_buffer_alignment>
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	7d67      	ldrb	r7, [r4, #21]
 800cb20:	f000 fb82 	bl	800d228 <ucdr_advance_buffer>
 800cb24:	2108      	movs	r1, #8
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 fada 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d14e      	bne.n	800cbce <ucdr_serialize_uint64_t+0xc6>
 800cb30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cb34:	42ab      	cmp	r3, r5
 800cb36:	d945      	bls.n	800cbc4 <ucdr_serialize_uint64_t+0xbc>
 800cb38:	1b5e      	subs	r6, r3, r5
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	f1c6 0808 	rsb	r8, r6, #8
 800cb42:	4433      	add	r3, r6
 800cb44:	6123      	str	r3, [r4, #16]
 800cb46:	4641      	mov	r1, r8
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 fad5 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d074      	beq.n	800cc3c <ucdr_serialize_uint64_t+0x134>
 800cb52:	7d23      	ldrb	r3, [r4, #20]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	f000 809b 	beq.w	800cc90 <ucdr_serialize_uint64_t+0x188>
 800cb5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb5e:	702b      	strb	r3, [r5, #0]
 800cb60:	2e00      	cmp	r6, #0
 800cb62:	d078      	beq.n	800cc56 <ucdr_serialize_uint64_t+0x14e>
 800cb64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb68:	706b      	strb	r3, [r5, #1]
 800cb6a:	2e01      	cmp	r6, #1
 800cb6c:	d077      	beq.n	800cc5e <ucdr_serialize_uint64_t+0x156>
 800cb6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cb72:	70ab      	strb	r3, [r5, #2]
 800cb74:	2e02      	cmp	r6, #2
 800cb76:	d076      	beq.n	800cc66 <ucdr_serialize_uint64_t+0x15e>
 800cb78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cb7c:	70eb      	strb	r3, [r5, #3]
 800cb7e:	2e03      	cmp	r6, #3
 800cb80:	d075      	beq.n	800cc6e <ucdr_serialize_uint64_t+0x166>
 800cb82:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cb86:	712b      	strb	r3, [r5, #4]
 800cb88:	2e04      	cmp	r6, #4
 800cb8a:	d074      	beq.n	800cc76 <ucdr_serialize_uint64_t+0x16e>
 800cb8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cb90:	716b      	strb	r3, [r5, #5]
 800cb92:	2e05      	cmp	r6, #5
 800cb94:	d073      	beq.n	800cc7e <ucdr_serialize_uint64_t+0x176>
 800cb96:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800cb9a:	71ab      	strb	r3, [r5, #6]
 800cb9c:	2e06      	cmp	r6, #6
 800cb9e:	d072      	beq.n	800cc86 <ucdr_serialize_uint64_t+0x17e>
 800cba0:	f89d 3000 	ldrb.w	r3, [sp]
 800cba4:	71eb      	strb	r3, [r5, #7]
 800cba6:	6923      	ldr	r3, [r4, #16]
 800cba8:	68a2      	ldr	r2, [r4, #8]
 800cbaa:	7da0      	ldrb	r0, [r4, #22]
 800cbac:	3308      	adds	r3, #8
 800cbae:	1b9e      	subs	r6, r3, r6
 800cbb0:	4442      	add	r2, r8
 800cbb2:	2308      	movs	r3, #8
 800cbb4:	f080 0001 	eor.w	r0, r0, #1
 800cbb8:	60a2      	str	r2, [r4, #8]
 800cbba:	6126      	str	r6, [r4, #16]
 800cbbc:	7563      	strb	r3, [r4, #21]
 800cbbe:	b002      	add	sp, #8
 800cbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc4:	2108      	movs	r1, #8
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f000 fa96 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800cbcc:	b350      	cbz	r0, 800cc24 <ucdr_serialize_uint64_t+0x11c>
 800cbce:	7d23      	ldrb	r3, [r4, #20]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d02d      	beq.n	800cc30 <ucdr_serialize_uint64_t+0x128>
 800cbd4:	68a3      	ldr	r3, [r4, #8]
 800cbd6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cbda:	701a      	strb	r2, [r3, #0]
 800cbdc:	68a3      	ldr	r3, [r4, #8]
 800cbde:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbe2:	705a      	strb	r2, [r3, #1]
 800cbe4:	68a3      	ldr	r3, [r4, #8]
 800cbe6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cbea:	709a      	strb	r2, [r3, #2]
 800cbec:	68a3      	ldr	r3, [r4, #8]
 800cbee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cbf2:	70da      	strb	r2, [r3, #3]
 800cbf4:	68a3      	ldr	r3, [r4, #8]
 800cbf6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cbfa:	711a      	strb	r2, [r3, #4]
 800cbfc:	68a3      	ldr	r3, [r4, #8]
 800cbfe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cc02:	715a      	strb	r2, [r3, #5]
 800cc04:	68a3      	ldr	r3, [r4, #8]
 800cc06:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cc0a:	719a      	strb	r2, [r3, #6]
 800cc0c:	68a3      	ldr	r3, [r4, #8]
 800cc0e:	f89d 2000 	ldrb.w	r2, [sp]
 800cc12:	71da      	strb	r2, [r3, #7]
 800cc14:	68a2      	ldr	r2, [r4, #8]
 800cc16:	6923      	ldr	r3, [r4, #16]
 800cc18:	3208      	adds	r2, #8
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	2108      	movs	r1, #8
 800cc1e:	60a2      	str	r2, [r4, #8]
 800cc20:	6123      	str	r3, [r4, #16]
 800cc22:	7561      	strb	r1, [r4, #21]
 800cc24:	7da0      	ldrb	r0, [r4, #22]
 800cc26:	f080 0001 	eor.w	r0, r0, #1
 800cc2a:	b002      	add	sp, #8
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	466b      	mov	r3, sp
 800cc32:	cb03      	ldmia	r3!, {r0, r1}
 800cc34:	68a3      	ldr	r3, [r4, #8]
 800cc36:	6018      	str	r0, [r3, #0]
 800cc38:	6059      	str	r1, [r3, #4]
 800cc3a:	e7eb      	b.n	800cc14 <ucdr_serialize_uint64_t+0x10c>
 800cc3c:	68a2      	ldr	r2, [r4, #8]
 800cc3e:	6923      	ldr	r3, [r4, #16]
 800cc40:	7da0      	ldrb	r0, [r4, #22]
 800cc42:	7567      	strb	r7, [r4, #21]
 800cc44:	1b92      	subs	r2, r2, r6
 800cc46:	1b9b      	subs	r3, r3, r6
 800cc48:	f080 0001 	eor.w	r0, r0, #1
 800cc4c:	60a2      	str	r2, [r4, #8]
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	b002      	add	sp, #8
 800cc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc56:	68a3      	ldr	r3, [r4, #8]
 800cc58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc5c:	701a      	strb	r2, [r3, #0]
 800cc5e:	68a3      	ldr	r3, [r4, #8]
 800cc60:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cc64:	701a      	strb	r2, [r3, #0]
 800cc66:	68a3      	ldr	r3, [r4, #8]
 800cc68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cc6c:	701a      	strb	r2, [r3, #0]
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cc74:	701a      	strb	r2, [r3, #0]
 800cc76:	68a3      	ldr	r3, [r4, #8]
 800cc78:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cc7c:	701a      	strb	r2, [r3, #0]
 800cc7e:	68a3      	ldr	r3, [r4, #8]
 800cc80:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cc84:	701a      	strb	r2, [r3, #0]
 800cc86:	68a3      	ldr	r3, [r4, #8]
 800cc88:	f89d 2000 	ldrb.w	r2, [sp]
 800cc8c:	701a      	strb	r2, [r3, #0]
 800cc8e:	e78a      	b.n	800cba6 <ucdr_serialize_uint64_t+0x9e>
 800cc90:	4628      	mov	r0, r5
 800cc92:	466d      	mov	r5, sp
 800cc94:	4629      	mov	r1, r5
 800cc96:	4632      	mov	r2, r6
 800cc98:	f008 f9e7 	bl	801506a <memcpy>
 800cc9c:	68a0      	ldr	r0, [r4, #8]
 800cc9e:	4642      	mov	r2, r8
 800cca0:	19a9      	adds	r1, r5, r6
 800cca2:	f008 f9e2 	bl	801506a <memcpy>
 800cca6:	e77e      	b.n	800cba6 <ucdr_serialize_uint64_t+0x9e>

0800cca8 <ucdr_serialize_int16_t>:
 800cca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccac:	b082      	sub	sp, #8
 800ccae:	460b      	mov	r3, r1
 800ccb0:	2102      	movs	r1, #2
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ccb8:	f000 fa72 	bl	800d1a0 <ucdr_buffer_alignment>
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	7d67      	ldrb	r7, [r4, #21]
 800ccc2:	f000 fab1 	bl	800d228 <ucdr_advance_buffer>
 800ccc6:	2102      	movs	r1, #2
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f000 fa09 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800ccce:	bb78      	cbnz	r0, 800cd30 <ucdr_serialize_int16_t+0x88>
 800ccd0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ccd4:	42ab      	cmp	r3, r5
 800ccd6:	d926      	bls.n	800cd26 <ucdr_serialize_int16_t+0x7e>
 800ccd8:	1b5e      	subs	r6, r3, r5
 800ccda:	60a3      	str	r3, [r4, #8]
 800ccdc:	6923      	ldr	r3, [r4, #16]
 800ccde:	f1c6 0802 	rsb	r8, r6, #2
 800cce2:	4433      	add	r3, r6
 800cce4:	6123      	str	r3, [r4, #16]
 800cce6:	4641      	mov	r1, r8
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 fa05 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d03b      	beq.n	800cd6a <ucdr_serialize_int16_t+0xc2>
 800ccf2:	7d23      	ldrb	r3, [r4, #20]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d04a      	beq.n	800cd8e <ucdr_serialize_int16_t+0xe6>
 800ccf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ccfc:	702b      	strb	r3, [r5, #0]
 800ccfe:	2e00      	cmp	r6, #0
 800cd00:	d040      	beq.n	800cd84 <ucdr_serialize_int16_t+0xdc>
 800cd02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd06:	706b      	strb	r3, [r5, #1]
 800cd08:	6923      	ldr	r3, [r4, #16]
 800cd0a:	68a2      	ldr	r2, [r4, #8]
 800cd0c:	7da0      	ldrb	r0, [r4, #22]
 800cd0e:	3302      	adds	r3, #2
 800cd10:	1b9e      	subs	r6, r3, r6
 800cd12:	4442      	add	r2, r8
 800cd14:	2302      	movs	r3, #2
 800cd16:	f080 0001 	eor.w	r0, r0, #1
 800cd1a:	60a2      	str	r2, [r4, #8]
 800cd1c:	6126      	str	r6, [r4, #16]
 800cd1e:	7563      	strb	r3, [r4, #21]
 800cd20:	b002      	add	sp, #8
 800cd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd26:	2102      	movs	r1, #2
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f000 f9e5 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800cd2e:	b190      	cbz	r0, 800cd56 <ucdr_serialize_int16_t+0xae>
 800cd30:	7d23      	ldrb	r3, [r4, #20]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	68a3      	ldr	r3, [r4, #8]
 800cd36:	d014      	beq.n	800cd62 <ucdr_serialize_int16_t+0xba>
 800cd38:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd44:	705a      	strb	r2, [r3, #1]
 800cd46:	68a2      	ldr	r2, [r4, #8]
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	3202      	adds	r2, #2
 800cd4c:	3302      	adds	r3, #2
 800cd4e:	2102      	movs	r1, #2
 800cd50:	60a2      	str	r2, [r4, #8]
 800cd52:	6123      	str	r3, [r4, #16]
 800cd54:	7561      	strb	r1, [r4, #21]
 800cd56:	7da0      	ldrb	r0, [r4, #22]
 800cd58:	f080 0001 	eor.w	r0, r0, #1
 800cd5c:	b002      	add	sp, #8
 800cd5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cd66:	801a      	strh	r2, [r3, #0]
 800cd68:	e7ed      	b.n	800cd46 <ucdr_serialize_int16_t+0x9e>
 800cd6a:	68a2      	ldr	r2, [r4, #8]
 800cd6c:	6923      	ldr	r3, [r4, #16]
 800cd6e:	7da0      	ldrb	r0, [r4, #22]
 800cd70:	7567      	strb	r7, [r4, #21]
 800cd72:	1b92      	subs	r2, r2, r6
 800cd74:	1b9b      	subs	r3, r3, r6
 800cd76:	f080 0001 	eor.w	r0, r0, #1
 800cd7a:	60a2      	str	r2, [r4, #8]
 800cd7c:	6123      	str	r3, [r4, #16]
 800cd7e:	b002      	add	sp, #8
 800cd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd84:	68a3      	ldr	r3, [r4, #8]
 800cd86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd8a:	701a      	strb	r2, [r3, #0]
 800cd8c:	e7bc      	b.n	800cd08 <ucdr_serialize_int16_t+0x60>
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f10d 0506 	add.w	r5, sp, #6
 800cd94:	4629      	mov	r1, r5
 800cd96:	4632      	mov	r2, r6
 800cd98:	f008 f967 	bl	801506a <memcpy>
 800cd9c:	68a0      	ldr	r0, [r4, #8]
 800cd9e:	4642      	mov	r2, r8
 800cda0:	19a9      	adds	r1, r5, r6
 800cda2:	f008 f962 	bl	801506a <memcpy>
 800cda6:	e7af      	b.n	800cd08 <ucdr_serialize_int16_t+0x60>

0800cda8 <ucdr_deserialize_int16_t>:
 800cda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdac:	460d      	mov	r5, r1
 800cdae:	2102      	movs	r1, #2
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	f000 f9f5 	bl	800d1a0 <ucdr_buffer_alignment>
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cdbe:	f000 fa33 	bl	800d228 <ucdr_advance_buffer>
 800cdc2:	2102      	movs	r1, #2
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 f98b 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800cdca:	bb60      	cbnz	r0, 800ce26 <ucdr_deserialize_int16_t+0x7e>
 800cdcc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cdd0:	42be      	cmp	r6, r7
 800cdd2:	d923      	bls.n	800ce1c <ucdr_deserialize_int16_t+0x74>
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	60a6      	str	r6, [r4, #8]
 800cdd8:	1bf6      	subs	r6, r6, r7
 800cdda:	4433      	add	r3, r6
 800cddc:	f1c6 0902 	rsb	r9, r6, #2
 800cde0:	6123      	str	r3, [r4, #16]
 800cde2:	4649      	mov	r1, r9
 800cde4:	4620      	mov	r0, r4
 800cde6:	f000 f987 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d034      	beq.n	800ce58 <ucdr_deserialize_int16_t+0xb0>
 800cdee:	7d23      	ldrb	r3, [r4, #20]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d042      	beq.n	800ce7a <ucdr_deserialize_int16_t+0xd2>
 800cdf4:	787b      	ldrb	r3, [r7, #1]
 800cdf6:	702b      	strb	r3, [r5, #0]
 800cdf8:	2e00      	cmp	r6, #0
 800cdfa:	d03a      	beq.n	800ce72 <ucdr_deserialize_int16_t+0xca>
 800cdfc:	783b      	ldrb	r3, [r7, #0]
 800cdfe:	706b      	strb	r3, [r5, #1]
 800ce00:	6923      	ldr	r3, [r4, #16]
 800ce02:	68a2      	ldr	r2, [r4, #8]
 800ce04:	7da0      	ldrb	r0, [r4, #22]
 800ce06:	2102      	movs	r1, #2
 800ce08:	3302      	adds	r3, #2
 800ce0a:	444a      	add	r2, r9
 800ce0c:	1b9b      	subs	r3, r3, r6
 800ce0e:	7561      	strb	r1, [r4, #21]
 800ce10:	60a2      	str	r2, [r4, #8]
 800ce12:	6123      	str	r3, [r4, #16]
 800ce14:	f080 0001 	eor.w	r0, r0, #1
 800ce18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce1c:	2102      	movs	r1, #2
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 f96a 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800ce24:	b180      	cbz	r0, 800ce48 <ucdr_deserialize_int16_t+0xa0>
 800ce26:	7d23      	ldrb	r3, [r4, #20]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	68a3      	ldr	r3, [r4, #8]
 800ce2c:	d011      	beq.n	800ce52 <ucdr_deserialize_int16_t+0xaa>
 800ce2e:	785b      	ldrb	r3, [r3, #1]
 800ce30:	702b      	strb	r3, [r5, #0]
 800ce32:	68a3      	ldr	r3, [r4, #8]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	706b      	strb	r3, [r5, #1]
 800ce38:	68a2      	ldr	r2, [r4, #8]
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	3202      	adds	r2, #2
 800ce3e:	3302      	adds	r3, #2
 800ce40:	2102      	movs	r1, #2
 800ce42:	60a2      	str	r2, [r4, #8]
 800ce44:	6123      	str	r3, [r4, #16]
 800ce46:	7561      	strb	r1, [r4, #21]
 800ce48:	7da0      	ldrb	r0, [r4, #22]
 800ce4a:	f080 0001 	eor.w	r0, r0, #1
 800ce4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	802b      	strh	r3, [r5, #0]
 800ce56:	e7ef      	b.n	800ce38 <ucdr_deserialize_int16_t+0x90>
 800ce58:	68a2      	ldr	r2, [r4, #8]
 800ce5a:	6923      	ldr	r3, [r4, #16]
 800ce5c:	7da0      	ldrb	r0, [r4, #22]
 800ce5e:	f884 8015 	strb.w	r8, [r4, #21]
 800ce62:	1b92      	subs	r2, r2, r6
 800ce64:	1b9b      	subs	r3, r3, r6
 800ce66:	60a2      	str	r2, [r4, #8]
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	f080 0001 	eor.w	r0, r0, #1
 800ce6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce72:	68a3      	ldr	r3, [r4, #8]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	706b      	strb	r3, [r5, #1]
 800ce78:	e7c2      	b.n	800ce00 <ucdr_deserialize_int16_t+0x58>
 800ce7a:	4639      	mov	r1, r7
 800ce7c:	4632      	mov	r2, r6
 800ce7e:	4628      	mov	r0, r5
 800ce80:	f008 f8f3 	bl	801506a <memcpy>
 800ce84:	68a1      	ldr	r1, [r4, #8]
 800ce86:	464a      	mov	r2, r9
 800ce88:	19a8      	adds	r0, r5, r6
 800ce8a:	f008 f8ee 	bl	801506a <memcpy>
 800ce8e:	e7b7      	b.n	800ce00 <ucdr_deserialize_int16_t+0x58>

0800ce90 <ucdr_serialize_int32_t>:
 800ce90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce94:	b082      	sub	sp, #8
 800ce96:	4604      	mov	r4, r0
 800ce98:	9101      	str	r1, [sp, #4]
 800ce9a:	2104      	movs	r1, #4
 800ce9c:	f000 f980 	bl	800d1a0 <ucdr_buffer_alignment>
 800cea0:	4601      	mov	r1, r0
 800cea2:	4620      	mov	r0, r4
 800cea4:	7d67      	ldrb	r7, [r4, #21]
 800cea6:	f000 f9bf 	bl	800d228 <ucdr_advance_buffer>
 800ceaa:	2104      	movs	r1, #4
 800ceac:	4620      	mov	r0, r4
 800ceae:	f000 f917 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d139      	bne.n	800cf2a <ucdr_serialize_int32_t+0x9a>
 800ceb6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ceba:	42ab      	cmp	r3, r5
 800cebc:	d930      	bls.n	800cf20 <ucdr_serialize_int32_t+0x90>
 800cebe:	1b5e      	subs	r6, r3, r5
 800cec0:	60a3      	str	r3, [r4, #8]
 800cec2:	6923      	ldr	r3, [r4, #16]
 800cec4:	f1c6 0804 	rsb	r8, r6, #4
 800cec8:	4433      	add	r3, r6
 800ceca:	6123      	str	r3, [r4, #16]
 800cecc:	4641      	mov	r1, r8
 800cece:	4620      	mov	r0, r4
 800ced0:	f000 f912 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d04c      	beq.n	800cf72 <ucdr_serialize_int32_t+0xe2>
 800ced8:	7d23      	ldrb	r3, [r4, #20]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d063      	beq.n	800cfa6 <ucdr_serialize_int32_t+0x116>
 800cede:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cee2:	702b      	strb	r3, [r5, #0]
 800cee4:	2e00      	cmp	r6, #0
 800cee6:	d051      	beq.n	800cf8c <ucdr_serialize_int32_t+0xfc>
 800cee8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ceec:	706b      	strb	r3, [r5, #1]
 800ceee:	2e01      	cmp	r6, #1
 800cef0:	d050      	beq.n	800cf94 <ucdr_serialize_int32_t+0x104>
 800cef2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cef6:	70ab      	strb	r3, [r5, #2]
 800cef8:	2e02      	cmp	r6, #2
 800cefa:	d04f      	beq.n	800cf9c <ucdr_serialize_int32_t+0x10c>
 800cefc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf00:	70eb      	strb	r3, [r5, #3]
 800cf02:	6923      	ldr	r3, [r4, #16]
 800cf04:	68a2      	ldr	r2, [r4, #8]
 800cf06:	7da0      	ldrb	r0, [r4, #22]
 800cf08:	3304      	adds	r3, #4
 800cf0a:	1b9e      	subs	r6, r3, r6
 800cf0c:	4442      	add	r2, r8
 800cf0e:	2304      	movs	r3, #4
 800cf10:	f080 0001 	eor.w	r0, r0, #1
 800cf14:	60a2      	str	r2, [r4, #8]
 800cf16:	6126      	str	r6, [r4, #16]
 800cf18:	7563      	strb	r3, [r4, #21]
 800cf1a:	b002      	add	sp, #8
 800cf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf20:	2104      	movs	r1, #4
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 f8e8 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800cf28:	b1d0      	cbz	r0, 800cf60 <ucdr_serialize_int32_t+0xd0>
 800cf2a:	7d23      	ldrb	r3, [r4, #20]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	d01c      	beq.n	800cf6c <ucdr_serialize_int32_t+0xdc>
 800cf32:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cf36:	701a      	strb	r2, [r3, #0]
 800cf38:	68a3      	ldr	r3, [r4, #8]
 800cf3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf3e:	705a      	strb	r2, [r3, #1]
 800cf40:	68a3      	ldr	r3, [r4, #8]
 800cf42:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf46:	709a      	strb	r2, [r3, #2]
 800cf48:	68a3      	ldr	r3, [r4, #8]
 800cf4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf4e:	70da      	strb	r2, [r3, #3]
 800cf50:	68a2      	ldr	r2, [r4, #8]
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	3204      	adds	r2, #4
 800cf56:	3304      	adds	r3, #4
 800cf58:	2104      	movs	r1, #4
 800cf5a:	60a2      	str	r2, [r4, #8]
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	7561      	strb	r1, [r4, #21]
 800cf60:	7da0      	ldrb	r0, [r4, #22]
 800cf62:	f080 0001 	eor.w	r0, r0, #1
 800cf66:	b002      	add	sp, #8
 800cf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf6c:	9a01      	ldr	r2, [sp, #4]
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	e7ee      	b.n	800cf50 <ucdr_serialize_int32_t+0xc0>
 800cf72:	68a2      	ldr	r2, [r4, #8]
 800cf74:	6923      	ldr	r3, [r4, #16]
 800cf76:	7da0      	ldrb	r0, [r4, #22]
 800cf78:	7567      	strb	r7, [r4, #21]
 800cf7a:	1b92      	subs	r2, r2, r6
 800cf7c:	1b9b      	subs	r3, r3, r6
 800cf7e:	f080 0001 	eor.w	r0, r0, #1
 800cf82:	60a2      	str	r2, [r4, #8]
 800cf84:	6123      	str	r3, [r4, #16]
 800cf86:	b002      	add	sp, #8
 800cf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf8c:	68a3      	ldr	r3, [r4, #8]
 800cf8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf92:	701a      	strb	r2, [r3, #0]
 800cf94:	68a3      	ldr	r3, [r4, #8]
 800cf96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cfa2:	701a      	strb	r2, [r3, #0]
 800cfa4:	e7ad      	b.n	800cf02 <ucdr_serialize_int32_t+0x72>
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	ad01      	add	r5, sp, #4
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4632      	mov	r2, r6
 800cfae:	f008 f85c 	bl	801506a <memcpy>
 800cfb2:	68a0      	ldr	r0, [r4, #8]
 800cfb4:	4642      	mov	r2, r8
 800cfb6:	19a9      	adds	r1, r5, r6
 800cfb8:	f008 f857 	bl	801506a <memcpy>
 800cfbc:	e7a1      	b.n	800cf02 <ucdr_serialize_int32_t+0x72>
 800cfbe:	bf00      	nop

0800cfc0 <ucdr_deserialize_int32_t>:
 800cfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc4:	460d      	mov	r5, r1
 800cfc6:	2104      	movs	r1, #4
 800cfc8:	4604      	mov	r4, r0
 800cfca:	f000 f8e9 	bl	800d1a0 <ucdr_buffer_alignment>
 800cfce:	4601      	mov	r1, r0
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cfd6:	f000 f927 	bl	800d228 <ucdr_advance_buffer>
 800cfda:	2104      	movs	r1, #4
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f000 f87f 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d138      	bne.n	800d058 <ucdr_deserialize_int32_t+0x98>
 800cfe6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cfea:	42b7      	cmp	r7, r6
 800cfec:	d92f      	bls.n	800d04e <ucdr_deserialize_int32_t+0x8e>
 800cfee:	6923      	ldr	r3, [r4, #16]
 800cff0:	60a7      	str	r7, [r4, #8]
 800cff2:	1bbf      	subs	r7, r7, r6
 800cff4:	443b      	add	r3, r7
 800cff6:	f1c7 0904 	rsb	r9, r7, #4
 800cffa:	6123      	str	r3, [r4, #16]
 800cffc:	4649      	mov	r1, r9
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 f87a 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800d004:	2800      	cmp	r0, #0
 800d006:	d046      	beq.n	800d096 <ucdr_deserialize_int32_t+0xd6>
 800d008:	7d23      	ldrb	r3, [r4, #20]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d05c      	beq.n	800d0c8 <ucdr_deserialize_int32_t+0x108>
 800d00e:	78f3      	ldrb	r3, [r6, #3]
 800d010:	702b      	strb	r3, [r5, #0]
 800d012:	2f00      	cmp	r7, #0
 800d014:	d04c      	beq.n	800d0b0 <ucdr_deserialize_int32_t+0xf0>
 800d016:	78b3      	ldrb	r3, [r6, #2]
 800d018:	706b      	strb	r3, [r5, #1]
 800d01a:	2f01      	cmp	r7, #1
 800d01c:	f105 0302 	add.w	r3, r5, #2
 800d020:	d04a      	beq.n	800d0b8 <ucdr_deserialize_int32_t+0xf8>
 800d022:	7873      	ldrb	r3, [r6, #1]
 800d024:	70ab      	strb	r3, [r5, #2]
 800d026:	2f02      	cmp	r7, #2
 800d028:	f105 0303 	add.w	r3, r5, #3
 800d02c:	d048      	beq.n	800d0c0 <ucdr_deserialize_int32_t+0x100>
 800d02e:	7833      	ldrb	r3, [r6, #0]
 800d030:	70eb      	strb	r3, [r5, #3]
 800d032:	6923      	ldr	r3, [r4, #16]
 800d034:	68a2      	ldr	r2, [r4, #8]
 800d036:	7da0      	ldrb	r0, [r4, #22]
 800d038:	2104      	movs	r1, #4
 800d03a:	3304      	adds	r3, #4
 800d03c:	444a      	add	r2, r9
 800d03e:	1bdb      	subs	r3, r3, r7
 800d040:	7561      	strb	r1, [r4, #21]
 800d042:	60a2      	str	r2, [r4, #8]
 800d044:	6123      	str	r3, [r4, #16]
 800d046:	f080 0001 	eor.w	r0, r0, #1
 800d04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04e:	2104      	movs	r1, #4
 800d050:	4620      	mov	r0, r4
 800d052:	f000 f851 	bl	800d0f8 <ucdr_check_final_buffer_behavior>
 800d056:	b1b0      	cbz	r0, 800d086 <ucdr_deserialize_int32_t+0xc6>
 800d058:	7d23      	ldrb	r3, [r4, #20]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	68a3      	ldr	r3, [r4, #8]
 800d05e:	d017      	beq.n	800d090 <ucdr_deserialize_int32_t+0xd0>
 800d060:	78db      	ldrb	r3, [r3, #3]
 800d062:	702b      	strb	r3, [r5, #0]
 800d064:	68a3      	ldr	r3, [r4, #8]
 800d066:	789b      	ldrb	r3, [r3, #2]
 800d068:	706b      	strb	r3, [r5, #1]
 800d06a:	68a3      	ldr	r3, [r4, #8]
 800d06c:	785b      	ldrb	r3, [r3, #1]
 800d06e:	70ab      	strb	r3, [r5, #2]
 800d070:	68a3      	ldr	r3, [r4, #8]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	70eb      	strb	r3, [r5, #3]
 800d076:	68a2      	ldr	r2, [r4, #8]
 800d078:	6923      	ldr	r3, [r4, #16]
 800d07a:	3204      	adds	r2, #4
 800d07c:	3304      	adds	r3, #4
 800d07e:	2104      	movs	r1, #4
 800d080:	60a2      	str	r2, [r4, #8]
 800d082:	6123      	str	r3, [r4, #16]
 800d084:	7561      	strb	r1, [r4, #21]
 800d086:	7da0      	ldrb	r0, [r4, #22]
 800d088:	f080 0001 	eor.w	r0, r0, #1
 800d08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	602b      	str	r3, [r5, #0]
 800d094:	e7ef      	b.n	800d076 <ucdr_deserialize_int32_t+0xb6>
 800d096:	68a2      	ldr	r2, [r4, #8]
 800d098:	6923      	ldr	r3, [r4, #16]
 800d09a:	7da0      	ldrb	r0, [r4, #22]
 800d09c:	f884 8015 	strb.w	r8, [r4, #21]
 800d0a0:	1bd2      	subs	r2, r2, r7
 800d0a2:	1bdb      	subs	r3, r3, r7
 800d0a4:	60a2      	str	r2, [r4, #8]
 800d0a6:	6123      	str	r3, [r4, #16]
 800d0a8:	f080 0001 	eor.w	r0, r0, #1
 800d0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0b0:	68a3      	ldr	r3, [r4, #8]
 800d0b2:	789b      	ldrb	r3, [r3, #2]
 800d0b4:	706b      	strb	r3, [r5, #1]
 800d0b6:	1cab      	adds	r3, r5, #2
 800d0b8:	68a2      	ldr	r2, [r4, #8]
 800d0ba:	7852      	ldrb	r2, [r2, #1]
 800d0bc:	f803 2b01 	strb.w	r2, [r3], #1
 800d0c0:	68a2      	ldr	r2, [r4, #8]
 800d0c2:	7812      	ldrb	r2, [r2, #0]
 800d0c4:	701a      	strb	r2, [r3, #0]
 800d0c6:	e7b4      	b.n	800d032 <ucdr_deserialize_int32_t+0x72>
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	463a      	mov	r2, r7
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f007 ffcc 	bl	801506a <memcpy>
 800d0d2:	68a1      	ldr	r1, [r4, #8]
 800d0d4:	464a      	mov	r2, r9
 800d0d6:	19e8      	adds	r0, r5, r7
 800d0d8:	f007 ffc7 	bl	801506a <memcpy>
 800d0dc:	e7a9      	b.n	800d032 <ucdr_deserialize_int32_t+0x72>
 800d0de:	bf00      	nop

0800d0e0 <ucdr_check_buffer_available_for>:
 800d0e0:	7d83      	ldrb	r3, [r0, #22]
 800d0e2:	b93b      	cbnz	r3, 800d0f4 <ucdr_check_buffer_available_for+0x14>
 800d0e4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d0e8:	4419      	add	r1, r3
 800d0ea:	4288      	cmp	r0, r1
 800d0ec:	bf34      	ite	cc
 800d0ee:	2000      	movcc	r0, #0
 800d0f0:	2001      	movcs	r0, #1
 800d0f2:	4770      	bx	lr
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	4770      	bx	lr

0800d0f8 <ucdr_check_final_buffer_behavior>:
 800d0f8:	7d83      	ldrb	r3, [r0, #22]
 800d0fa:	b943      	cbnz	r3, 800d10e <ucdr_check_final_buffer_behavior+0x16>
 800d0fc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d100:	4291      	cmp	r1, r2
 800d102:	b510      	push	{r4, lr}
 800d104:	4604      	mov	r4, r0
 800d106:	d205      	bcs.n	800d114 <ucdr_check_final_buffer_behavior+0x1c>
 800d108:	2301      	movs	r3, #1
 800d10a:	4618      	mov	r0, r3
 800d10c:	bd10      	pop	{r4, pc}
 800d10e:	2300      	movs	r3, #0
 800d110:	4618      	mov	r0, r3
 800d112:	4770      	bx	lr
 800d114:	6982      	ldr	r2, [r0, #24]
 800d116:	b13a      	cbz	r2, 800d128 <ucdr_check_final_buffer_behavior+0x30>
 800d118:	69c1      	ldr	r1, [r0, #28]
 800d11a:	4790      	blx	r2
 800d11c:	f080 0301 	eor.w	r3, r0, #1
 800d120:	b2db      	uxtb	r3, r3
 800d122:	75a0      	strb	r0, [r4, #22]
 800d124:	4618      	mov	r0, r3
 800d126:	bd10      	pop	{r4, pc}
 800d128:	2001      	movs	r0, #1
 800d12a:	75a0      	strb	r0, [r4, #22]
 800d12c:	e7fa      	b.n	800d124 <ucdr_check_final_buffer_behavior+0x2c>
 800d12e:	bf00      	nop

0800d130 <ucdr_set_on_full_buffer_callback>:
 800d130:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop

0800d138 <ucdr_init_buffer_origin_offset_endian>:
 800d138:	b410      	push	{r4}
 800d13a:	9c01      	ldr	r4, [sp, #4]
 800d13c:	6001      	str	r1, [r0, #0]
 800d13e:	440a      	add	r2, r1
 800d140:	6042      	str	r2, [r0, #4]
 800d142:	190a      	adds	r2, r1, r4
 800d144:	441c      	add	r4, r3
 800d146:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d14a:	6082      	str	r2, [r0, #8]
 800d14c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d150:	7503      	strb	r3, [r0, #20]
 800d152:	2200      	movs	r2, #0
 800d154:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d15c:	7542      	strb	r2, [r0, #21]
 800d15e:	7582      	strb	r2, [r0, #22]
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop

0800d164 <ucdr_init_buffer_origin_offset>:
 800d164:	b510      	push	{r4, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	9c04      	ldr	r4, [sp, #16]
 800d16a:	9400      	str	r4, [sp, #0]
 800d16c:	2401      	movs	r4, #1
 800d16e:	9401      	str	r4, [sp, #4]
 800d170:	f7ff ffe2 	bl	800d138 <ucdr_init_buffer_origin_offset_endian>
 800d174:	b002      	add	sp, #8
 800d176:	bd10      	pop	{r4, pc}

0800d178 <ucdr_init_buffer_origin>:
 800d178:	b510      	push	{r4, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	2400      	movs	r4, #0
 800d17e:	9400      	str	r4, [sp, #0]
 800d180:	f7ff fff0 	bl	800d164 <ucdr_init_buffer_origin_offset>
 800d184:	b002      	add	sp, #8
 800d186:	bd10      	pop	{r4, pc}

0800d188 <ucdr_init_buffer>:
 800d188:	2300      	movs	r3, #0
 800d18a:	f7ff bff5 	b.w	800d178 <ucdr_init_buffer_origin>
 800d18e:	bf00      	nop

0800d190 <ucdr_alignment>:
 800d190:	fbb0 f3f1 	udiv	r3, r0, r1
 800d194:	fb03 0011 	mls	r0, r3, r1, r0
 800d198:	1a08      	subs	r0, r1, r0
 800d19a:	3901      	subs	r1, #1
 800d19c:	4008      	ands	r0, r1
 800d19e:	4770      	bx	lr

0800d1a0 <ucdr_buffer_alignment>:
 800d1a0:	7d43      	ldrb	r3, [r0, #21]
 800d1a2:	428b      	cmp	r3, r1
 800d1a4:	d208      	bcs.n	800d1b8 <ucdr_buffer_alignment+0x18>
 800d1a6:	6900      	ldr	r0, [r0, #16]
 800d1a8:	fbb0 f3f1 	udiv	r3, r0, r1
 800d1ac:	fb01 0013 	mls	r0, r1, r3, r0
 800d1b0:	1a08      	subs	r0, r1, r0
 800d1b2:	3901      	subs	r1, #1
 800d1b4:	4008      	ands	r0, r1
 800d1b6:	4770      	bx	lr
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	4770      	bx	lr

0800d1bc <ucdr_align_to>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f7ff ffed 	bl	800d1a0 <ucdr_buffer_alignment>
 800d1c6:	68a3      	ldr	r3, [r4, #8]
 800d1c8:	6921      	ldr	r1, [r4, #16]
 800d1ca:	7565      	strb	r5, [r4, #21]
 800d1cc:	181a      	adds	r2, r3, r0
 800d1ce:	6863      	ldr	r3, [r4, #4]
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	4408      	add	r0, r1
 800d1d4:	bf28      	it	cs
 800d1d6:	4613      	movcs	r3, r2
 800d1d8:	6120      	str	r0, [r4, #16]
 800d1da:	60a3      	str	r3, [r4, #8]
 800d1dc:	bd38      	pop	{r3, r4, r5, pc}
 800d1de:	bf00      	nop

0800d1e0 <ucdr_buffer_length>:
 800d1e0:	6882      	ldr	r2, [r0, #8]
 800d1e2:	6800      	ldr	r0, [r0, #0]
 800d1e4:	1a10      	subs	r0, r2, r0
 800d1e6:	4770      	bx	lr

0800d1e8 <ucdr_buffer_remaining>:
 800d1e8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d1ec:	1a10      	subs	r0, r2, r0
 800d1ee:	4770      	bx	lr

0800d1f0 <ucdr_check_final_buffer_behavior_array>:
 800d1f0:	b538      	push	{r3, r4, r5, lr}
 800d1f2:	7d83      	ldrb	r3, [r0, #22]
 800d1f4:	b963      	cbnz	r3, 800d210 <ucdr_check_final_buffer_behavior_array+0x20>
 800d1f6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	460d      	mov	r5, r1
 800d200:	d308      	bcc.n	800d214 <ucdr_check_final_buffer_behavior_array+0x24>
 800d202:	b139      	cbz	r1, 800d214 <ucdr_check_final_buffer_behavior_array+0x24>
 800d204:	6983      	ldr	r3, [r0, #24]
 800d206:	b163      	cbz	r3, 800d222 <ucdr_check_final_buffer_behavior_array+0x32>
 800d208:	69c1      	ldr	r1, [r0, #28]
 800d20a:	4798      	blx	r3
 800d20c:	75a0      	strb	r0, [r4, #22]
 800d20e:	b108      	cbz	r0, 800d214 <ucdr_check_final_buffer_behavior_array+0x24>
 800d210:	2000      	movs	r0, #0
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	4620      	mov	r0, r4
 800d216:	f7ff ffe7 	bl	800d1e8 <ucdr_buffer_remaining>
 800d21a:	42a8      	cmp	r0, r5
 800d21c:	bf28      	it	cs
 800d21e:	4628      	movcs	r0, r5
 800d220:	bd38      	pop	{r3, r4, r5, pc}
 800d222:	2301      	movs	r3, #1
 800d224:	7583      	strb	r3, [r0, #22]
 800d226:	e7f3      	b.n	800d210 <ucdr_check_final_buffer_behavior_array+0x20>

0800d228 <ucdr_advance_buffer>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4604      	mov	r4, r0
 800d22c:	460d      	mov	r5, r1
 800d22e:	f7ff ff57 	bl	800d0e0 <ucdr_check_buffer_available_for>
 800d232:	b178      	cbz	r0, 800d254 <ucdr_advance_buffer+0x2c>
 800d234:	6923      	ldr	r3, [r4, #16]
 800d236:	68a2      	ldr	r2, [r4, #8]
 800d238:	442b      	add	r3, r5
 800d23a:	6123      	str	r3, [r4, #16]
 800d23c:	2301      	movs	r3, #1
 800d23e:	442a      	add	r2, r5
 800d240:	7563      	strb	r3, [r4, #21]
 800d242:	60a2      	str	r2, [r4, #8]
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	68a2      	ldr	r2, [r4, #8]
 800d248:	6923      	ldr	r3, [r4, #16]
 800d24a:	4402      	add	r2, r0
 800d24c:	4403      	add	r3, r0
 800d24e:	1a2d      	subs	r5, r5, r0
 800d250:	60a2      	str	r2, [r4, #8]
 800d252:	6123      	str	r3, [r4, #16]
 800d254:	4629      	mov	r1, r5
 800d256:	2201      	movs	r2, #1
 800d258:	4620      	mov	r0, r4
 800d25a:	f7ff ffc9 	bl	800d1f0 <ucdr_check_final_buffer_behavior_array>
 800d25e:	2800      	cmp	r0, #0
 800d260:	d1f1      	bne.n	800d246 <ucdr_advance_buffer+0x1e>
 800d262:	2301      	movs	r3, #1
 800d264:	7563      	strb	r3, [r4, #21]
 800d266:	bd38      	pop	{r3, r4, r5, pc}

0800d268 <ucdr_serialize_sequence_char>:
 800d268:	b570      	push	{r4, r5, r6, lr}
 800d26a:	4615      	mov	r5, r2
 800d26c:	460e      	mov	r6, r1
 800d26e:	7d01      	ldrb	r1, [r0, #20]
 800d270:	4604      	mov	r4, r0
 800d272:	f7ff fa8b 	bl	800c78c <ucdr_serialize_endian_uint32_t>
 800d276:	b90d      	cbnz	r5, 800d27c <ucdr_serialize_sequence_char+0x14>
 800d278:	2001      	movs	r0, #1
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	7d21      	ldrb	r1, [r4, #20]
 800d27e:	462b      	mov	r3, r5
 800d280:	4632      	mov	r2, r6
 800d282:	4620      	mov	r0, r4
 800d284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d288:	f006 ba54 	b.w	8013734 <ucdr_serialize_endian_array_char>

0800d28c <ucdr_deserialize_sequence_char>:
 800d28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d290:	461d      	mov	r5, r3
 800d292:	4616      	mov	r6, r2
 800d294:	460f      	mov	r7, r1
 800d296:	461a      	mov	r2, r3
 800d298:	7d01      	ldrb	r1, [r0, #20]
 800d29a:	4604      	mov	r4, r0
 800d29c:	f7ff fb9e 	bl	800c9dc <ucdr_deserialize_endian_uint32_t>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	429e      	cmp	r6, r3
 800d2a4:	bf3c      	itt	cc
 800d2a6:	2201      	movcc	r2, #1
 800d2a8:	75a2      	strbcc	r2, [r4, #22]
 800d2aa:	b913      	cbnz	r3, 800d2b2 <ucdr_deserialize_sequence_char+0x26>
 800d2ac:	2001      	movs	r0, #1
 800d2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b2:	7d21      	ldrb	r1, [r4, #20]
 800d2b4:	463a      	mov	r2, r7
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2bc:	f006 ba6c 	b.w	8013798 <ucdr_deserialize_endian_array_char>

0800d2c0 <ucdr_serialize_sequence_uint8_t>:
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	4615      	mov	r5, r2
 800d2c4:	460e      	mov	r6, r1
 800d2c6:	7d01      	ldrb	r1, [r0, #20]
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	f7ff fa5f 	bl	800c78c <ucdr_serialize_endian_uint32_t>
 800d2ce:	b90d      	cbnz	r5, 800d2d4 <ucdr_serialize_sequence_uint8_t+0x14>
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	bd70      	pop	{r4, r5, r6, pc}
 800d2d4:	7d21      	ldrb	r1, [r4, #20]
 800d2d6:	462b      	mov	r3, r5
 800d2d8:	4632      	mov	r2, r6
 800d2da:	4620      	mov	r0, r4
 800d2dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2e0:	f006 babe 	b.w	8013860 <ucdr_serialize_endian_array_uint8_t>

0800d2e4 <ucdr_deserialize_sequence_uint8_t>:
 800d2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e8:	461d      	mov	r5, r3
 800d2ea:	4616      	mov	r6, r2
 800d2ec:	460f      	mov	r7, r1
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	7d01      	ldrb	r1, [r0, #20]
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	f7ff fb72 	bl	800c9dc <ucdr_deserialize_endian_uint32_t>
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	429e      	cmp	r6, r3
 800d2fc:	bf3c      	itt	cc
 800d2fe:	2201      	movcc	r2, #1
 800d300:	75a2      	strbcc	r2, [r4, #22]
 800d302:	b913      	cbnz	r3, 800d30a <ucdr_deserialize_sequence_uint8_t+0x26>
 800d304:	2001      	movs	r0, #1
 800d306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d30a:	7d21      	ldrb	r1, [r4, #20]
 800d30c:	463a      	mov	r2, r7
 800d30e:	4620      	mov	r0, r4
 800d310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d314:	f006 bb08 	b.w	8013928 <ucdr_deserialize_endian_array_uint8_t>

0800d318 <uxr_buffer_delete_entity>:
 800d318:	b510      	push	{r4, lr}
 800d31a:	2300      	movs	r3, #0
 800d31c:	b08e      	sub	sp, #56	@ 0x38
 800d31e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d322:	2303      	movs	r3, #3
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	2204      	movs	r2, #4
 800d328:	ab06      	add	r3, sp, #24
 800d32a:	4604      	mov	r4, r0
 800d32c:	9103      	str	r1, [sp, #12]
 800d32e:	f001 fa4d 	bl	800e7cc <uxr_prepare_stream_to_write_submessage>
 800d332:	b918      	cbnz	r0, 800d33c <uxr_buffer_delete_entity+0x24>
 800d334:	4604      	mov	r4, r0
 800d336:	4620      	mov	r0, r4
 800d338:	b00e      	add	sp, #56	@ 0x38
 800d33a:	bd10      	pop	{r4, pc}
 800d33c:	9902      	ldr	r1, [sp, #8]
 800d33e:	aa05      	add	r2, sp, #20
 800d340:	4620      	mov	r0, r4
 800d342:	f001 fb79 	bl	800ea38 <uxr_init_base_object_request>
 800d346:	a905      	add	r1, sp, #20
 800d348:	4604      	mov	r4, r0
 800d34a:	a806      	add	r0, sp, #24
 800d34c:	f002 fefa 	bl	8010144 <uxr_serialize_DELETE_Payload>
 800d350:	4620      	mov	r0, r4
 800d352:	b00e      	add	sp, #56	@ 0x38
 800d354:	bd10      	pop	{r4, pc}
 800d356:	bf00      	nop

0800d358 <uxr_common_create_entity>:
 800d358:	b510      	push	{r4, lr}
 800d35a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d35e:	b08c      	sub	sp, #48	@ 0x30
 800d360:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d364:	f1bc 0f01 	cmp.w	ip, #1
 800d368:	bf0c      	ite	eq
 800d36a:	f003 0201 	andeq.w	r2, r3, #1
 800d36e:	2200      	movne	r2, #0
 800d370:	330e      	adds	r3, #14
 800d372:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d376:	9101      	str	r1, [sp, #4]
 800d378:	441a      	add	r2, r3
 800d37a:	2301      	movs	r3, #1
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	9903      	ldr	r1, [sp, #12]
 800d380:	ab04      	add	r3, sp, #16
 800d382:	b292      	uxth	r2, r2
 800d384:	4604      	mov	r4, r0
 800d386:	f001 fa21 	bl	800e7cc <uxr_prepare_stream_to_write_submessage>
 800d38a:	b918      	cbnz	r0, 800d394 <uxr_common_create_entity+0x3c>
 800d38c:	4604      	mov	r4, r0
 800d38e:	4620      	mov	r0, r4
 800d390:	b00c      	add	sp, #48	@ 0x30
 800d392:	bd10      	pop	{r4, pc}
 800d394:	9902      	ldr	r1, [sp, #8]
 800d396:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d398:	4620      	mov	r0, r4
 800d39a:	f001 fb4d 	bl	800ea38 <uxr_init_base_object_request>
 800d39e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	a804      	add	r0, sp, #16
 800d3a4:	f002 fe2a 	bl	800fffc <uxr_serialize_CREATE_Payload>
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	b00c      	add	sp, #48	@ 0x30
 800d3ac:	bd10      	pop	{r4, pc}
 800d3ae:	bf00      	nop

0800d3b0 <uxr_buffer_create_participant_bin>:
 800d3b0:	b570      	push	{r4, r5, r6, lr}
 800d3b2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d3b6:	ac11      	add	r4, sp, #68	@ 0x44
 800d3b8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d3c2:	7223      	strb	r3, [r4, #8]
 800d3c4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d3c6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	7122      	strb	r2, [r4, #4]
 800d3d2:	f88d 1014 	strb.w	r1, [sp, #20]
 800d3d6:	b1cb      	cbz	r3, 800d40c <uxr_buffer_create_participant_bin+0x5c>
 800d3d8:	f88d 201c 	strb.w	r2, [sp, #28]
 800d3dc:	9308      	str	r3, [sp, #32]
 800d3de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3e2:	a915      	add	r1, sp, #84	@ 0x54
 800d3e4:	a809      	add	r0, sp, #36	@ 0x24
 800d3e6:	f7ff fecf 	bl	800d188 <ucdr_init_buffer>
 800d3ea:	a905      	add	r1, sp, #20
 800d3ec:	a809      	add	r0, sp, #36	@ 0x24
 800d3ee:	f002 fbf5 	bl	800fbdc <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d3f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3f4:	9600      	str	r6, [sp, #0]
 800d3f6:	9401      	str	r4, [sp, #4]
 800d3f8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d3fc:	60e3      	str	r3, [r4, #12]
 800d3fe:	4628      	mov	r0, r5
 800d400:	b29b      	uxth	r3, r3
 800d402:	f7ff ffa9 	bl	800d358 <uxr_common_create_entity>
 800d406:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	f88d 301c 	strb.w	r3, [sp, #28]
 800d410:	e7e5      	b.n	800d3de <uxr_buffer_create_participant_bin+0x2e>
 800d412:	bf00      	nop

0800d414 <uxr_buffer_create_requester_bin>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800d41a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d41e:	9105      	str	r1, [sp, #20]
 800d420:	4605      	mov	r5, r0
 800d422:	a999      	add	r1, sp, #612	@ 0x264
 800d424:	4618      	mov	r0, r3
 800d426:	2307      	movs	r3, #7
 800d428:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 800d42c:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 800d430:	f000 f90e 	bl	800d650 <uxr_object_id_to_raw>
 800d434:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 800d436:	9306      	str	r3, [sp, #24]
 800d438:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 800d43a:	9307      	str	r3, [sp, #28]
 800d43c:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 800d43e:	9308      	str	r3, [sp, #32]
 800d440:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800d442:	930c      	str	r3, [sp, #48]	@ 0x30
 800d444:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d446:	930a      	str	r3, [sp, #40]	@ 0x28
 800d448:	2301      	movs	r3, #1
 800d44a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d44e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d452:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d456:	a919      	add	r1, sp, #100	@ 0x64
 800d458:	2303      	movs	r3, #3
 800d45a:	a80d      	add	r0, sp, #52	@ 0x34
 800d45c:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800d460:	f7ff fe92 	bl	800d188 <ucdr_init_buffer>
 800d464:	a906      	add	r1, sp, #24
 800d466:	a80d      	add	r0, sp, #52	@ 0x34
 800d468:	f002 fbda 	bl	800fc20 <uxr_serialize_OBJK_Requester_Binary>
 800d46c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d46e:	9318      	str	r3, [sp, #96]	@ 0x60
 800d470:	ac15      	add	r4, sp, #84	@ 0x54
 800d472:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d476:	9600      	str	r6, [sp, #0]
 800d478:	9401      	str	r4, [sp, #4]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	4628      	mov	r0, r5
 800d47e:	f7ff ff6b 	bl	800d358 <uxr_common_create_entity>
 800d482:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 800d486:	bd70      	pop	{r4, r5, r6, pc}

0800d488 <get_custom_error>:
 800d488:	4b01      	ldr	r3, [pc, #4]	@ (800d490 <get_custom_error+0x8>)
 800d48a:	7818      	ldrb	r0, [r3, #0]
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	2000ace4 	.word	0x2000ace4

0800d494 <recv_custom_msg>:
 800d494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d498:	4693      	mov	fp, r2
 800d49a:	b089      	sub	sp, #36	@ 0x24
 800d49c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800d4a0:	9305      	str	r3, [sp, #20]
 800d4a2:	468a      	mov	sl, r1
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	f88d 101e 	strb.w	r1, [sp, #30]
 800d4ac:	b322      	cbz	r2, 800d4f8 <recv_custom_msg+0x64>
 800d4ae:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800d4b2:	f10d 081f 	add.w	r8, sp, #31
 800d4b6:	af05      	add	r7, sp, #20
 800d4b8:	f10d 061e 	add.w	r6, sp, #30
 800d4bc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800d4c0:	e002      	b.n	800d4c8 <recv_custom_msg+0x34>
 800d4c2:	9b05      	ldr	r3, [sp, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dd0f      	ble.n	800d4e8 <recv_custom_msg+0x54>
 800d4c8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800d4cc:	4623      	mov	r3, r4
 800d4ce:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d4d2:	e9cd 5600 	strd	r5, r6, [sp]
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	4648      	mov	r0, r9
 800d4da:	f001 fcdb 	bl	800ee94 <uxr_read_framed_msg>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d0ef      	beq.n	800d4c2 <recv_custom_msg+0x2e>
 800d4e2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d4e6:	b1b3      	cbz	r3, 800d516 <recv_custom_msg+0x82>
 800d4e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d528 <recv_custom_msg+0x94>)
 800d4ea:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d4ee:	701a      	strb	r2, [r3, #0]
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	b009      	add	sp, #36	@ 0x24
 800d4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f8:	f10d 021f 	add.w	r2, sp, #31
 800d4fc:	9200      	str	r2, [sp, #0]
 800d4fe:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800d502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d506:	4601      	mov	r1, r0
 800d508:	47a8      	blx	r5
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d0ec      	beq.n	800d4e8 <recv_custom_msg+0x54>
 800d50e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1e8      	bne.n	800d4e8 <recv_custom_msg+0x54>
 800d516:	f8cb 0000 	str.w	r0, [fp]
 800d51a:	2001      	movs	r0, #1
 800d51c:	f8ca 4000 	str.w	r4, [sl]
 800d520:	b009      	add	sp, #36	@ 0x24
 800d522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d526:	bf00      	nop
 800d528:	2000ace4 	.word	0x2000ace4

0800d52c <send_custom_msg>:
 800d52c:	b530      	push	{r4, r5, lr}
 800d52e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800d532:	b087      	sub	sp, #28
 800d534:	4615      	mov	r5, r2
 800d536:	b974      	cbnz	r4, 800d556 <send_custom_msg+0x2a>
 800d538:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800d53c:	f10d 0317 	add.w	r3, sp, #23
 800d540:	47a0      	blx	r4
 800d542:	b108      	cbz	r0, 800d548 <send_custom_msg+0x1c>
 800d544:	42a8      	cmp	r0, r5
 800d546:	d015      	beq.n	800d574 <send_custom_msg+0x48>
 800d548:	4b0c      	ldr	r3, [pc, #48]	@ (800d57c <send_custom_msg+0x50>)
 800d54a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	2000      	movs	r0, #0
 800d552:	b007      	add	sp, #28
 800d554:	bd30      	pop	{r4, r5, pc}
 800d556:	460b      	mov	r3, r1
 800d558:	2200      	movs	r2, #0
 800d55a:	f10d 0117 	add.w	r1, sp, #23
 800d55e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d562:	4602      	mov	r2, r0
 800d564:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800d568:	9500      	str	r5, [sp, #0]
 800d56a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800d56e:	f001 fa99 	bl	800eaa4 <uxr_write_framed_msg>
 800d572:	e7e6      	b.n	800d542 <send_custom_msg+0x16>
 800d574:	2001      	movs	r0, #1
 800d576:	b007      	add	sp, #28
 800d578:	bd30      	pop	{r4, r5, pc}
 800d57a:	bf00      	nop
 800d57c:	2000ace4 	.word	0x2000ace4

0800d580 <uxr_set_custom_transport_callbacks>:
 800d580:	b410      	push	{r4}
 800d582:	9c01      	ldr	r4, [sp, #4]
 800d584:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800d588:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800d58c:	9b02      	ldr	r3, [sp, #8]
 800d58e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800d592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d596:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800d59a:	4770      	bx	lr

0800d59c <uxr_init_custom_transport>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800d5a2:	b303      	cbz	r3, 800d5e6 <uxr_init_custom_transport+0x4a>
 800d5a4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	b1e2      	cbz	r2, 800d5e6 <uxr_init_custom_transport+0x4a>
 800d5ac:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800d5b0:	b1ca      	cbz	r2, 800d5e6 <uxr_init_custom_transport+0x4a>
 800d5b2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800d5b6:	b1b2      	cbz	r2, 800d5e6 <uxr_init_custom_transport+0x4a>
 800d5b8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800d5bc:	4798      	blx	r3
 800d5be:	4605      	mov	r5, r0
 800d5c0:	b188      	cbz	r0, 800d5e6 <uxr_init_custom_transport+0x4a>
 800d5c2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800d5c6:	b98b      	cbnz	r3, 800d5ec <uxr_init_custom_transport+0x50>
 800d5c8:	490b      	ldr	r1, [pc, #44]	@ (800d5f8 <uxr_init_custom_transport+0x5c>)
 800d5ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d5fc <uxr_init_custom_transport+0x60>)
 800d5cc:	4a0c      	ldr	r2, [pc, #48]	@ (800d600 <uxr_init_custom_transport+0x64>)
 800d5ce:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800d5d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5d6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800d5da:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800d5de:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	bd38      	pop	{r3, r4, r5, pc}
 800d5e6:	2500      	movs	r5, #0
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	bd38      	pop	{r3, r4, r5, pc}
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800d5f2:	f001 fa51 	bl	800ea98 <uxr_init_framing_io>
 800d5f6:	e7e7      	b.n	800d5c8 <uxr_init_custom_transport+0x2c>
 800d5f8:	0800d52d 	.word	0x0800d52d
 800d5fc:	0800d495 	.word	0x0800d495
 800d600:	0800d489 	.word	0x0800d489

0800d604 <uxr_close_custom_transport>:
 800d604:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800d608:	4718      	bx	r3
 800d60a:	bf00      	nop

0800d60c <uxr_object_id>:
 800d60c:	b082      	sub	sp, #8
 800d60e:	2300      	movs	r3, #0
 800d610:	f88d 1006 	strb.w	r1, [sp, #6]
 800d614:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d618:	f360 030f 	bfi	r3, r0, #0, #16
 800d61c:	f362 431f 	bfi	r3, r2, #16, #16
 800d620:	4618      	mov	r0, r3
 800d622:	b002      	add	sp, #8
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop

0800d628 <uxr_object_id_from_raw>:
 800d628:	7843      	ldrb	r3, [r0, #1]
 800d62a:	7801      	ldrb	r1, [r0, #0]
 800d62c:	b082      	sub	sp, #8
 800d62e:	f003 020f 	and.w	r2, r3, #15
 800d632:	f88d 2006 	strb.w	r2, [sp, #6]
 800d636:	091b      	lsrs	r3, r3, #4
 800d638:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d63c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d640:	2000      	movs	r0, #0
 800d642:	f363 000f 	bfi	r0, r3, #0, #16
 800d646:	f362 401f 	bfi	r0, r2, #16, #16
 800d64a:	b002      	add	sp, #8
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop

0800d650 <uxr_object_id_to_raw>:
 800d650:	4602      	mov	r2, r0
 800d652:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d656:	b082      	sub	sp, #8
 800d658:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d65c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d660:	f881 c000 	strb.w	ip, [r1]
 800d664:	7048      	strb	r0, [r1, #1]
 800d666:	b002      	add	sp, #8
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop

0800d66c <uxr_buffer_request_data>:
 800d66c:	b530      	push	{r4, r5, lr}
 800d66e:	b095      	sub	sp, #84	@ 0x54
 800d670:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d674:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800d676:	9303      	str	r3, [sp, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	2d00      	cmp	r5, #0
 800d67c:	bf14      	ite	ne
 800d67e:	2101      	movne	r1, #1
 800d680:	4611      	moveq	r1, r2
 800d682:	4604      	mov	r4, r0
 800d684:	f88d 301c 	strb.w	r3, [sp, #28]
 800d688:	f88d 201d 	strb.w	r2, [sp, #29]
 800d68c:	f88d 201e 	strb.w	r2, [sp, #30]
 800d690:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d694:	d021      	beq.n	800d6da <uxr_buffer_request_data+0x6e>
 800d696:	682a      	ldr	r2, [r5, #0]
 800d698:	686b      	ldr	r3, [r5, #4]
 800d69a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800d69e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d6a2:	2210      	movs	r2, #16
 800d6a4:	2308      	movs	r3, #8
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	e9cd 3100 	strd	r3, r1, [sp]
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	9905      	ldr	r1, [sp, #20]
 800d6b0:	ab0c      	add	r3, sp, #48	@ 0x30
 800d6b2:	f001 f88b 	bl	800e7cc <uxr_prepare_stream_to_write_submessage>
 800d6b6:	b918      	cbnz	r0, 800d6c0 <uxr_buffer_request_data+0x54>
 800d6b8:	4604      	mov	r4, r0
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	b015      	add	sp, #84	@ 0x54
 800d6be:	bd30      	pop	{r4, r5, pc}
 800d6c0:	9904      	ldr	r1, [sp, #16]
 800d6c2:	aa06      	add	r2, sp, #24
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f001 f9b7 	bl	800ea38 <uxr_init_base_object_request>
 800d6ca:	a906      	add	r1, sp, #24
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	a80c      	add	r0, sp, #48	@ 0x30
 800d6d0:	f002 fde2 	bl	8010298 <uxr_serialize_READ_DATA_Payload>
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	b015      	add	sp, #84	@ 0x54
 800d6d8:	bd30      	pop	{r4, r5, pc}
 800d6da:	2208      	movs	r2, #8
 800d6dc:	e7e2      	b.n	800d6a4 <uxr_buffer_request_data+0x38>
 800d6de:	bf00      	nop

0800d6e0 <uxr_buffer_cancel_data>:
 800d6e0:	b510      	push	{r4, lr}
 800d6e2:	b094      	sub	sp, #80	@ 0x50
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	9202      	str	r2, [sp, #8]
 800d6e8:	9205      	str	r2, [sp, #20]
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d6f2:	f88d 301e 	strb.w	r3, [sp, #30]
 800d6f6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800d6fa:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d6fe:	2308      	movs	r3, #8
 800d700:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	2210      	movs	r2, #16
 800d708:	ab0c      	add	r3, sp, #48	@ 0x30
 800d70a:	4604      	mov	r4, r0
 800d70c:	9103      	str	r1, [sp, #12]
 800d70e:	f001 f85d 	bl	800e7cc <uxr_prepare_stream_to_write_submessage>
 800d712:	b918      	cbnz	r0, 800d71c <uxr_buffer_cancel_data+0x3c>
 800d714:	4604      	mov	r4, r0
 800d716:	4620      	mov	r0, r4
 800d718:	b014      	add	sp, #80	@ 0x50
 800d71a:	bd10      	pop	{r4, pc}
 800d71c:	9905      	ldr	r1, [sp, #20]
 800d71e:	aa06      	add	r2, sp, #24
 800d720:	4620      	mov	r0, r4
 800d722:	f001 f989 	bl	800ea38 <uxr_init_base_object_request>
 800d726:	a906      	add	r1, sp, #24
 800d728:	4604      	mov	r4, r0
 800d72a:	a80c      	add	r0, sp, #48	@ 0x30
 800d72c:	f002 fdb4 	bl	8010298 <uxr_serialize_READ_DATA_Payload>
 800d730:	4620      	mov	r0, r4
 800d732:	b014      	add	sp, #80	@ 0x50
 800d734:	bd10      	pop	{r4, pc}
 800d736:	bf00      	nop

0800d738 <read_submessage_format>:
 800d738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d73c:	b095      	sub	sp, #84	@ 0x54
 800d73e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800d742:	b113      	cbz	r3, 800d74a <read_submessage_format+0x12>
 800d744:	b015      	add	sp, #84	@ 0x54
 800d746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d74a:	460c      	mov	r4, r1
 800d74c:	4615      	mov	r5, r2
 800d74e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d752:	4607      	mov	r7, r0
 800d754:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800d756:	9004      	str	r0, [sp, #16]
 800d758:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d75a:	9005      	str	r0, [sp, #20]
 800d75c:	1a52      	subs	r2, r2, r1
 800d75e:	a80c      	add	r0, sp, #48	@ 0x30
 800d760:	4699      	mov	r9, r3
 800d762:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800d766:	f7ff fd0f 	bl	800d188 <ucdr_init_buffer>
 800d76a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d76e:	a80c      	add	r0, sp, #48	@ 0x30
 800d770:	f7ff fcde 	bl	800d130 <ucdr_set_on_full_buffer_callback>
 800d774:	69e2      	ldr	r2, [r4, #28]
 800d776:	b19a      	cbz	r2, 800d7a0 <read_submessage_format+0x68>
 800d778:	f1b8 0f07 	cmp.w	r8, #7
 800d77c:	f882 9014 	strb.w	r9, [r2, #20]
 800d780:	d040      	beq.n	800d804 <read_submessage_format+0xcc>
 800d782:	f1b8 0f08 	cmp.w	r8, #8
 800d786:	d02e      	beq.n	800d7e6 <read_submessage_format+0xae>
 800d788:	f1b8 0f06 	cmp.w	r8, #6
 800d78c:	d011      	beq.n	800d7b2 <read_submessage_format+0x7a>
 800d78e:	2301      	movs	r3, #1
 800d790:	7513      	strb	r3, [r2, #20]
 800d792:	4629      	mov	r1, r5
 800d794:	4620      	mov	r0, r4
 800d796:	f7ff fd47 	bl	800d228 <ucdr_advance_buffer>
 800d79a:	b015      	add	sp, #84	@ 0x54
 800d79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7a0:	f1b8 0f07 	cmp.w	r8, #7
 800d7a4:	d02e      	beq.n	800d804 <read_submessage_format+0xcc>
 800d7a6:	f1b8 0f08 	cmp.w	r8, #8
 800d7aa:	d01c      	beq.n	800d7e6 <read_submessage_format+0xae>
 800d7ac:	f1b8 0f06 	cmp.w	r8, #6
 800d7b0:	d1ef      	bne.n	800d792 <read_submessage_format+0x5a>
 800d7b2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800d7b6:	f1b8 0f00 	cmp.w	r8, #0
 800d7ba:	d011      	beq.n	800d7e0 <read_submessage_format+0xa8>
 800d7bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7be:	e9cd 3500 	strd	r3, r5, [sp]
 800d7c2:	2306      	movs	r3, #6
 800d7c4:	f88d 3016 	strb.w	r3, [sp, #22]
 800d7c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7cc:	9302      	str	r3, [sp, #8]
 800d7ce:	4632      	mov	r2, r6
 800d7d0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	47c0      	blx	r8
 800d7d8:	2301      	movs	r3, #1
 800d7da:	69e2      	ldr	r2, [r4, #28]
 800d7dc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d7e0:	2a00      	cmp	r2, #0
 800d7e2:	d1d4      	bne.n	800d78e <read_submessage_format+0x56>
 800d7e4:	e7d5      	b.n	800d792 <read_submessage_format+0x5a>
 800d7e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d0f8      	beq.n	800d7e0 <read_submessage_format+0xa8>
 800d7ee:	a906      	add	r1, sp, #24
 800d7f0:	a80c      	add	r0, sp, #48	@ 0x30
 800d7f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d7f6:	f002 fe23 	bl	8010440 <uxr_deserialize_SampleIdentity>
 800d7fa:	b9a0      	cbnz	r0, 800d826 <read_submessage_format+0xee>
 800d7fc:	69e2      	ldr	r2, [r4, #28]
 800d7fe:	2a00      	cmp	r2, #0
 800d800:	d1c5      	bne.n	800d78e <read_submessage_format+0x56>
 800d802:	e7c6      	b.n	800d792 <read_submessage_format+0x5a>
 800d804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d808:	b13b      	cbz	r3, 800d81a <read_submessage_format+0xe2>
 800d80a:	a906      	add	r1, sp, #24
 800d80c:	a80c      	add	r0, sp, #48	@ 0x30
 800d80e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d812:	f002 fadb 	bl	800fdcc <uxr_deserialize_BaseObjectRequest>
 800d816:	bb60      	cbnz	r0, 800d872 <read_submessage_format+0x13a>
 800d818:	69e2      	ldr	r2, [r4, #28]
 800d81a:	68a3      	ldr	r3, [r4, #8]
 800d81c:	442b      	add	r3, r5
 800d81e:	60a3      	str	r3, [r4, #8]
 800d820:	2a00      	cmp	r2, #0
 800d822:	d1b4      	bne.n	800d78e <read_submessage_format+0x56>
 800d824:	e7b5      	b.n	800d792 <read_submessage_format+0x5a>
 800d826:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d82a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d82c:	1a52      	subs	r2, r2, r1
 800d82e:	eba8 0803 	sub.w	r8, r8, r3
 800d832:	a80c      	add	r0, sp, #48	@ 0x30
 800d834:	f7ff fca8 	bl	800d188 <ucdr_init_buffer>
 800d838:	44a8      	add	r8, r5
 800d83a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d83e:	a80c      	add	r0, sp, #48	@ 0x30
 800d840:	f7ff fc76 	bl	800d130 <ucdr_set_on_full_buffer_callback>
 800d844:	fa1f f888 	uxth.w	r8, r8
 800d848:	ab0c      	add	r3, sp, #48	@ 0x30
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d850:	2108      	movs	r1, #8
 800d852:	f88d 1016 	strb.w	r1, [sp, #22]
 800d856:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800d85a:	9102      	str	r1, [sp, #8]
 800d85c:	ab06      	add	r3, sp, #24
 800d85e:	4632      	mov	r2, r6
 800d860:	9905      	ldr	r1, [sp, #20]
 800d862:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800d866:	4638      	mov	r0, r7
 800d868:	47b0      	blx	r6
 800d86a:	2301      	movs	r3, #1
 800d86c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d870:	e7c4      	b.n	800d7fc <read_submessage_format+0xc4>
 800d872:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d876:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d878:	1a52      	subs	r2, r2, r1
 800d87a:	a80c      	add	r0, sp, #48	@ 0x30
 800d87c:	eba8 0803 	sub.w	r8, r8, r3
 800d880:	f7ff fc82 	bl	800d188 <ucdr_init_buffer>
 800d884:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d888:	a80c      	add	r0, sp, #48	@ 0x30
 800d88a:	f7ff fc51 	bl	800d130 <ucdr_set_on_full_buffer_callback>
 800d88e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d896:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d89a:	44a8      	add	r8, r5
 800d89c:	fa1f f888 	uxth.w	r8, r8
 800d8a0:	f8cd 8004 	str.w	r8, [sp, #4]
 800d8a4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d8a8:	2107      	movs	r1, #7
 800d8aa:	f88d 1016 	strb.w	r1, [sp, #22]
 800d8ae:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800d8b2:	9102      	str	r1, [sp, #8]
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800d8bc:	9905      	ldr	r1, [sp, #20]
 800d8be:	4638      	mov	r0, r7
 800d8c0:	47b0      	blx	r6
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d8c8:	e7a6      	b.n	800d818 <read_submessage_format+0xe0>
 800d8ca:	bf00      	nop

0800d8cc <on_get_fragmentation_info>:
 800d8cc:	b500      	push	{lr}
 800d8ce:	b08b      	sub	sp, #44	@ 0x2c
 800d8d0:	4601      	mov	r1, r0
 800d8d2:	2204      	movs	r2, #4
 800d8d4:	a802      	add	r0, sp, #8
 800d8d6:	f7ff fc57 	bl	800d188 <ucdr_init_buffer>
 800d8da:	f10d 0305 	add.w	r3, sp, #5
 800d8de:	f10d 0206 	add.w	r2, sp, #6
 800d8e2:	a901      	add	r1, sp, #4
 800d8e4:	a802      	add	r0, sp, #8
 800d8e6:	f001 febb 	bl	800f660 <uxr_read_submessage_header>
 800d8ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8ee:	2b0d      	cmp	r3, #13
 800d8f0:	d003      	beq.n	800d8fa <on_get_fragmentation_info+0x2e>
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	b00b      	add	sp, #44	@ 0x2c
 800d8f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8fe:	f013 0f02 	tst.w	r3, #2
 800d902:	bf14      	ite	ne
 800d904:	2002      	movne	r0, #2
 800d906:	2001      	moveq	r0, #1
 800d908:	b00b      	add	sp, #44	@ 0x2c
 800d90a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d90e:	bf00      	nop

0800d910 <read_submessage_get_info>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	2500      	movs	r5, #0
 800d914:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d918:	4604      	mov	r4, r0
 800d91a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d91e:	460e      	mov	r6, r1
 800d920:	a810      	add	r0, sp, #64	@ 0x40
 800d922:	4629      	mov	r1, r5
 800d924:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d928:	f007 fad6 	bl	8014ed8 <memset>
 800d92c:	a903      	add	r1, sp, #12
 800d92e:	4630      	mov	r0, r6
 800d930:	f002 fbf4 	bl	801011c <uxr_deserialize_GET_INFO_Payload>
 800d934:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d938:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d93c:	4620      	mov	r0, r4
 800d93e:	f001 f873 	bl	800ea28 <uxr_session_header_offset>
 800d942:	462b      	mov	r3, r5
 800d944:	9000      	str	r0, [sp, #0]
 800d946:	220c      	movs	r2, #12
 800d948:	a905      	add	r1, sp, #20
 800d94a:	a808      	add	r0, sp, #32
 800d94c:	f7ff fc0a 	bl	800d164 <ucdr_init_buffer_origin_offset>
 800d950:	a910      	add	r1, sp, #64	@ 0x40
 800d952:	a808      	add	r0, sp, #32
 800d954:	f002 fc54 	bl	8010200 <uxr_serialize_INFO_Payload>
 800d958:	9b08      	ldr	r3, [sp, #32]
 800d95a:	462a      	mov	r2, r5
 800d95c:	4629      	mov	r1, r5
 800d95e:	4620      	mov	r0, r4
 800d960:	f001 f80c 	bl	800e97c <uxr_stamp_session_header>
 800d964:	a808      	add	r0, sp, #32
 800d966:	f7ff fc3b 	bl	800d1e0 <ucdr_buffer_length>
 800d96a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d96c:	4602      	mov	r2, r0
 800d96e:	a905      	add	r1, sp, #20
 800d970:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d974:	47a0      	blx	r4
 800d976:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d97a:	bd70      	pop	{r4, r5, r6, pc}

0800d97c <write_submessage_acknack.isra.0>:
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	b092      	sub	sp, #72	@ 0x48
 800d980:	4605      	mov	r5, r0
 800d982:	460e      	mov	r6, r1
 800d984:	4614      	mov	r4, r2
 800d986:	f001 f84f 	bl	800ea28 <uxr_session_header_offset>
 800d98a:	a905      	add	r1, sp, #20
 800d98c:	9000      	str	r0, [sp, #0]
 800d98e:	2300      	movs	r3, #0
 800d990:	a80a      	add	r0, sp, #40	@ 0x28
 800d992:	2211      	movs	r2, #17
 800d994:	f7ff fbe6 	bl	800d164 <ucdr_init_buffer_origin_offset>
 800d998:	2218      	movs	r2, #24
 800d99a:	fb02 5404 	mla	r4, r2, r4, r5
 800d99e:	2300      	movs	r3, #0
 800d9a0:	2205      	movs	r2, #5
 800d9a2:	3450      	adds	r4, #80	@ 0x50
 800d9a4:	210a      	movs	r1, #10
 800d9a6:	a80a      	add	r0, sp, #40	@ 0x28
 800d9a8:	f001 fe40 	bl	800f62c <uxr_buffer_submessage_header>
 800d9ac:	a903      	add	r1, sp, #12
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f006 f9a6 	bl	8013d00 <uxr_compute_acknack>
 800d9b4:	ba40      	rev16	r0, r0
 800d9b6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d9ba:	a903      	add	r1, sp, #12
 800d9bc:	a80a      	add	r0, sp, #40	@ 0x28
 800d9be:	f88d 6010 	strb.w	r6, [sp, #16]
 800d9c2:	f002 fc8d 	bl	80102e0 <uxr_serialize_ACKNACK_Payload>
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	f000 ffd5 	bl	800e97c <uxr_stamp_session_header>
 800d9d2:	a80a      	add	r0, sp, #40	@ 0x28
 800d9d4:	f7ff fc04 	bl	800d1e0 <ucdr_buffer_length>
 800d9d8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d9da:	4602      	mov	r2, r0
 800d9dc:	a905      	add	r1, sp, #20
 800d9de:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d9e2:	47a0      	blx	r4
 800d9e4:	b012      	add	sp, #72	@ 0x48
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}

0800d9e8 <uxr_init_session>:
 800d9e8:	b510      	push	{r4, lr}
 800d9ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800da20 <uxr_init_session+0x38>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d9fa:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d9fe:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800da02:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800da06:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800da0a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800da0e:	2181      	movs	r1, #129	@ 0x81
 800da10:	f000 ff20 	bl	800e854 <uxr_init_session_info>
 800da14:	f104 0008 	add.w	r0, r4, #8
 800da18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da1c:	f001 bd22 	b.w	800f464 <uxr_init_stream_storage>
	...

0800da28 <uxr_set_status_callback>:
 800da28:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop

0800da30 <uxr_set_topic_callback>:
 800da30:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop

0800da38 <uxr_set_request_callback>:
 800da38:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop

0800da40 <uxr_set_reply_callback>:
 800da40:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop

0800da48 <uxr_create_output_best_effort_stream>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	e9cd 2100 	strd	r2, r1, [sp]
 800da50:	4604      	mov	r4, r0
 800da52:	f000 ffe9 	bl	800ea28 <uxr_session_header_offset>
 800da56:	e9dd 2100 	ldrd	r2, r1, [sp]
 800da5a:	4603      	mov	r3, r0
 800da5c:	f104 0008 	add.w	r0, r4, #8
 800da60:	b004      	add	sp, #16
 800da62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da66:	f001 bd47 	b.w	800f4f8 <uxr_add_output_best_effort_buffer>
 800da6a:	bf00      	nop

0800da6c <uxr_create_output_reliable_stream>:
 800da6c:	b510      	push	{r4, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800da74:	4604      	mov	r4, r0
 800da76:	9303      	str	r3, [sp, #12]
 800da78:	f000 ffd6 	bl	800ea28 <uxr_session_header_offset>
 800da7c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800da80:	9000      	str	r0, [sp, #0]
 800da82:	9905      	ldr	r1, [sp, #20]
 800da84:	f104 0008 	add.w	r0, r4, #8
 800da88:	f001 fd4a 	bl	800f520 <uxr_add_output_reliable_buffer>
 800da8c:	2200      	movs	r2, #0
 800da8e:	b2c3      	uxtb	r3, r0
 800da90:	f363 0207 	bfi	r2, r3, #0, #8
 800da94:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800da98:	f363 220f 	bfi	r2, r3, #8, #8
 800da9c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800daa0:	f363 4217 	bfi	r2, r3, #16, #8
 800daa4:	0e03      	lsrs	r3, r0, #24
 800daa6:	f363 621f 	bfi	r2, r3, #24, #8
 800daaa:	4610      	mov	r0, r2
 800daac:	b008      	add	sp, #32
 800daae:	bd10      	pop	{r4, pc}

0800dab0 <uxr_create_input_best_effort_stream>:
 800dab0:	b082      	sub	sp, #8
 800dab2:	3008      	adds	r0, #8
 800dab4:	b002      	add	sp, #8
 800dab6:	f001 bd4d 	b.w	800f554 <uxr_add_input_best_effort_buffer>
 800daba:	bf00      	nop

0800dabc <uxr_create_input_reliable_stream>:
 800dabc:	b510      	push	{r4, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	4c0b      	ldr	r4, [pc, #44]	@ (800daf0 <uxr_create_input_reliable_stream+0x34>)
 800dac2:	9400      	str	r4, [sp, #0]
 800dac4:	3008      	adds	r0, #8
 800dac6:	f001 fd5b 	bl	800f580 <uxr_add_input_reliable_buffer>
 800daca:	2200      	movs	r2, #0
 800dacc:	b2c3      	uxtb	r3, r0
 800dace:	f363 0207 	bfi	r2, r3, #0, #8
 800dad2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800dad6:	f363 220f 	bfi	r2, r3, #8, #8
 800dada:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dade:	f363 4217 	bfi	r2, r3, #16, #8
 800dae2:	0e03      	lsrs	r3, r0, #24
 800dae4:	f363 621f 	bfi	r2, r3, #24, #8
 800dae8:	4610      	mov	r0, r2
 800daea:	b004      	add	sp, #16
 800daec:	bd10      	pop	{r4, pc}
 800daee:	bf00      	nop
 800daf0:	0800d8cd 	.word	0x0800d8cd

0800daf4 <uxr_epoch_nanos>:
 800daf4:	b510      	push	{r4, lr}
 800daf6:	4604      	mov	r4, r0
 800daf8:	f001 fdf8 	bl	800f6ec <uxr_nanos>
 800dafc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800db00:	1ac0      	subs	r0, r0, r3
 800db02:	eb61 0102 	sbc.w	r1, r1, r2
 800db06:	bd10      	pop	{r4, pc}

0800db08 <uxr_flash_output_streams>:
 800db08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db0c:	7e03      	ldrb	r3, [r0, #24]
 800db0e:	b084      	sub	sp, #16
 800db10:	4604      	mov	r4, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d035      	beq.n	800db82 <uxr_flash_output_streams+0x7a>
 800db16:	f04f 0900 	mov.w	r9, #0
 800db1a:	4648      	mov	r0, r9
 800db1c:	f10d 0802 	add.w	r8, sp, #2
 800db20:	af03      	add	r7, sp, #12
 800db22:	ae02      	add	r6, sp, #8
 800db24:	e006      	b.n	800db34 <uxr_flash_output_streams+0x2c>
 800db26:	7e23      	ldrb	r3, [r4, #24]
 800db28:	f109 0901 	add.w	r9, r9, #1
 800db2c:	fa5f f089 	uxtb.w	r0, r9
 800db30:	4283      	cmp	r3, r0
 800db32:	d926      	bls.n	800db82 <uxr_flash_output_streams+0x7a>
 800db34:	2201      	movs	r2, #1
 800db36:	4611      	mov	r1, r2
 800db38:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800db3c:	f001 fc3e 	bl	800f3bc <uxr_stream_id>
 800db40:	3508      	adds	r5, #8
 800db42:	4684      	mov	ip, r0
 800db44:	4643      	mov	r3, r8
 800db46:	463a      	mov	r2, r7
 800db48:	4631      	mov	r1, r6
 800db4a:	4628      	mov	r0, r5
 800db4c:	f8cd c004 	str.w	ip, [sp, #4]
 800db50:	f006 f95c 	bl	8013e0c <uxr_prepare_best_effort_buffer_to_send>
 800db54:	2800      	cmp	r0, #0
 800db56:	d0e6      	beq.n	800db26 <uxr_flash_output_streams+0x1e>
 800db58:	9b02      	ldr	r3, [sp, #8]
 800db5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800db5e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800db62:	4620      	mov	r0, r4
 800db64:	f000 ff0a 	bl	800e97c <uxr_stamp_session_header>
 800db68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800db6a:	9a03      	ldr	r2, [sp, #12]
 800db6c:	685d      	ldr	r5, [r3, #4]
 800db6e:	6818      	ldr	r0, [r3, #0]
 800db70:	9902      	ldr	r1, [sp, #8]
 800db72:	47a8      	blx	r5
 800db74:	f109 0901 	add.w	r9, r9, #1
 800db78:	7e23      	ldrb	r3, [r4, #24]
 800db7a:	fa5f f089 	uxtb.w	r0, r9
 800db7e:	4283      	cmp	r3, r0
 800db80:	d8d8      	bhi.n	800db34 <uxr_flash_output_streams+0x2c>
 800db82:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800db86:	b38b      	cbz	r3, 800dbec <uxr_flash_output_streams+0xe4>
 800db88:	f04f 0900 	mov.w	r9, #0
 800db8c:	f10d 0802 	add.w	r8, sp, #2
 800db90:	af03      	add	r7, sp, #12
 800db92:	ae02      	add	r6, sp, #8
 800db94:	4648      	mov	r0, r9
 800db96:	2201      	movs	r2, #1
 800db98:	2102      	movs	r1, #2
 800db9a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800db9e:	f001 fc0d 	bl	800f3bc <uxr_stream_id>
 800dba2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800dba6:	3520      	adds	r5, #32
 800dba8:	9001      	str	r0, [sp, #4]
 800dbaa:	e00d      	b.n	800dbc8 <uxr_flash_output_streams+0xc0>
 800dbac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dbb0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dbb4:	9b02      	ldr	r3, [sp, #8]
 800dbb6:	f000 fee1 	bl	800e97c <uxr_stamp_session_header>
 800dbba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dbbc:	9a03      	ldr	r2, [sp, #12]
 800dbbe:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800dbc2:	9902      	ldr	r1, [sp, #8]
 800dbc4:	6818      	ldr	r0, [r3, #0]
 800dbc6:	47d0      	blx	sl
 800dbc8:	4643      	mov	r3, r8
 800dbca:	463a      	mov	r2, r7
 800dbcc:	4631      	mov	r1, r6
 800dbce:	4628      	mov	r0, r5
 800dbd0:	f006 fb3a 	bl	8014248 <uxr_prepare_next_reliable_buffer_to_send>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1e7      	bne.n	800dbac <uxr_flash_output_streams+0xa4>
 800dbdc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dbe0:	f109 0901 	add.w	r9, r9, #1
 800dbe4:	fa5f f089 	uxtb.w	r0, r9
 800dbe8:	4283      	cmp	r3, r0
 800dbea:	d8d4      	bhi.n	800db96 <uxr_flash_output_streams+0x8e>
 800dbec:	b004      	add	sp, #16
 800dbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf2:	bf00      	nop

0800dbf4 <read_submessage_info>:
 800dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dbfe:	4669      	mov	r1, sp
 800dc00:	4607      	mov	r7, r0
 800dc02:	4628      	mov	r0, r5
 800dc04:	f002 f998 	bl	800ff38 <uxr_deserialize_BaseObjectReply>
 800dc08:	a902      	add	r1, sp, #8
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dc12:	f7fe faf5 	bl	800c200 <ucdr_deserialize_bool>
 800dc16:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dc1a:	4004      	ands	r4, r0
 800dc1c:	b2e4      	uxtb	r4, r4
 800dc1e:	b95b      	cbnz	r3, 800dc38 <read_submessage_info+0x44>
 800dc20:	a987      	add	r1, sp, #540	@ 0x21c
 800dc22:	4628      	mov	r0, r5
 800dc24:	f7fe faec 	bl	800c200 <ucdr_deserialize_bool>
 800dc28:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	b94b      	cbnz	r3, 800dc44 <read_submessage_info+0x50>
 800dc30:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc38:	a903      	add	r1, sp, #12
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	f002 f824 	bl	800fc88 <uxr_deserialize_ObjectVariant>
 800dc40:	4004      	ands	r4, r0
 800dc42:	e7ed      	b.n	800dc20 <read_submessage_info+0x2c>
 800dc44:	a988      	add	r1, sp, #544	@ 0x220
 800dc46:	4628      	mov	r0, r5
 800dc48:	f7fe fb08 	bl	800c25c <ucdr_deserialize_uint8_t>
 800dc4c:	4234      	tst	r4, r6
 800dc4e:	d0ef      	beq.n	800dc30 <read_submessage_info+0x3c>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d0ed      	beq.n	800dc30 <read_submessage_info+0x3c>
 800dc54:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800dc58:	2b0d      	cmp	r3, #13
 800dc5a:	d1e9      	bne.n	800dc30 <read_submessage_info+0x3c>
 800dc5c:	a98a      	add	r1, sp, #552	@ 0x228
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f7ff f8a2 	bl	800cda8 <ucdr_deserialize_int16_t>
 800dc64:	b140      	cbz	r0, 800dc78 <read_submessage_info+0x84>
 800dc66:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	dd07      	ble.n	800dc7e <read_submessage_info+0x8a>
 800dc6e:	f1b8 0f00 	cmp.w	r8, #0
 800dc72:	bf14      	ite	ne
 800dc74:	2001      	movne	r0, #1
 800dc76:	2002      	moveq	r0, #2
 800dc78:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800dc7c:	e7d8      	b.n	800dc30 <read_submessage_info+0x3c>
 800dc7e:	2000      	movs	r0, #0
 800dc80:	e7fa      	b.n	800dc78 <read_submessage_info+0x84>
 800dc82:	bf00      	nop

0800dc84 <read_submessage_list>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	b097      	sub	sp, #92	@ 0x5c
 800dc8a:	4ec1      	ldr	r6, [pc, #772]	@ (800df90 <read_submessage_list+0x30c>)
 800dc8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc8e:	4604      	mov	r4, r0
 800dc90:	460d      	mov	r5, r1
 800dc92:	f04f 0801 	mov.w	r8, #1
 800dc96:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800dc9a:	aa0c      	add	r2, sp, #48	@ 0x30
 800dc9c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800dca0:	4628      	mov	r0, r5
 800dca2:	f001 fcdd 	bl	800f660 <uxr_read_submessage_header>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	f000 813e 	beq.w	800df28 <read_submessage_list+0x2a4>
 800dcac:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800dcb0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800dcb4:	3b02      	subs	r3, #2
 800dcb6:	2b0d      	cmp	r3, #13
 800dcb8:	d8ed      	bhi.n	800dc96 <read_submessage_list+0x12>
 800dcba:	a101      	add	r1, pc, #4	@ (adr r1, 800dcc0 <read_submessage_list+0x3c>)
 800dcbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcc0:	0800df1f 	.word	0x0800df1f
 800dcc4:	0800dc97 	.word	0x0800dc97
 800dcc8:	0800df0f 	.word	0x0800df0f
 800dccc:	0800dead 	.word	0x0800dead
 800dcd0:	0800dea3 	.word	0x0800dea3
 800dcd4:	0800dc97 	.word	0x0800dc97
 800dcd8:	0800dc97 	.word	0x0800dc97
 800dcdc:	0800de03 	.word	0x0800de03
 800dce0:	0800dd93 	.word	0x0800dd93
 800dce4:	0800dd53 	.word	0x0800dd53
 800dce8:	0800dc97 	.word	0x0800dc97
 800dcec:	0800dc97 	.word	0x0800dc97
 800dcf0:	0800dc97 	.word	0x0800dc97
 800dcf4:	0800dcf9 	.word	0x0800dcf9
 800dcf8:	a910      	add	r1, sp, #64	@ 0x40
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f002 fb4e 	bl	801039c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800dd00:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800dd04:	f1b9 0f00 	cmp.w	r9, #0
 800dd08:	f000 8116 	beq.w	800df38 <read_submessage_list+0x2b4>
 800dd0c:	f001 fcee 	bl	800f6ec <uxr_nanos>
 800dd10:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800dd18:	2100      	movs	r1, #0
 800dd1a:	468c      	mov	ip, r1
 800dd1c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800dd20:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800dd24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dd26:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800dd28:	468c      	mov	ip, r1
 800dd2a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800dd2e:	46e2      	mov	sl, ip
 800dd30:	46bc      	mov	ip, r7
 800dd32:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800dd36:	fbc0 7106 	smlal	r7, r1, r0, r6
 800dd3a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800dd3e:	e9cd 7100 	strd	r7, r1, [sp]
 800dd42:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800dd46:	9106      	str	r1, [sp, #24]
 800dd48:	4620      	mov	r0, r4
 800dd4a:	47c8      	blx	r9
 800dd4c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800dd50:	e7a1      	b.n	800dc96 <read_submessage_list+0x12>
 800dd52:	a910      	add	r1, sp, #64	@ 0x40
 800dd54:	4628      	mov	r0, r5
 800dd56:	f002 fb01 	bl	801035c <uxr_deserialize_HEARTBEAT_Payload>
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800dd60:	f001 fb56 	bl	800f410 <uxr_stream_id_from_raw>
 800dd64:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800dd68:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dd6a:	4639      	mov	r1, r7
 800dd6c:	f104 0008 	add.w	r0, r4, #8
 800dd70:	f001 fc3c 	bl	800f5ec <uxr_get_input_reliable_stream>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d08e      	beq.n	800dc96 <read_submessage_list+0x12>
 800dd78:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800dd7c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800dd80:	f005 ffb2 	bl	8013ce8 <uxr_process_heartbeat>
 800dd84:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800dd88:	463a      	mov	r2, r7
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f7ff fdf6 	bl	800d97c <write_submessage_acknack.isra.0>
 800dd90:	e781      	b.n	800dc96 <read_submessage_list+0x12>
 800dd92:	a910      	add	r1, sp, #64	@ 0x40
 800dd94:	4628      	mov	r0, r5
 800dd96:	f002 fab9 	bl	801030c <uxr_deserialize_ACKNACK_Payload>
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800dda0:	f001 fb36 	bl	800f410 <uxr_stream_id_from_raw>
 800dda4:	900d      	str	r0, [sp, #52]	@ 0x34
 800dda6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ddaa:	f104 0008 	add.w	r0, r4, #8
 800ddae:	f001 fc09 	bl	800f5c4 <uxr_get_output_reliable_stream>
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	f43f af6e 	beq.w	800dc96 <read_submessage_list+0x12>
 800ddba:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ddbe:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ddc2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ddc6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ddca:	b289      	uxth	r1, r1
 800ddcc:	f006 fae6 	bl	801439c <uxr_process_acknack>
 800ddd0:	4638      	mov	r0, r7
 800ddd2:	f006 faa3 	bl	801431c <uxr_begin_output_nack_buffer_it>
 800ddd6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ddda:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ddde:	e006      	b.n	800ddee <read_submessage_list+0x16a>
 800dde0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dde2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dde4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800dde8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	47c8      	blx	r9
 800ddee:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ddf2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ddf4:	4651      	mov	r1, sl
 800ddf6:	4638      	mov	r0, r7
 800ddf8:	f006 fa92 	bl	8014320 <uxr_next_reliable_nack_buffer_to_send>
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	d1ef      	bne.n	800dde0 <read_submessage_list+0x15c>
 800de00:	e749      	b.n	800dc96 <read_submessage_list+0x12>
 800de02:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800de06:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800de0a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800de0e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800de12:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800de16:	4651      	mov	r1, sl
 800de18:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800de1c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800de20:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800de24:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800de28:	4628      	mov	r0, r5
 800de2a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800de2e:	f001 ffcd 	bl	800fdcc <uxr_deserialize_BaseObjectRequest>
 800de32:	4650      	mov	r0, sl
 800de34:	a90f      	add	r1, sp, #60	@ 0x3c
 800de36:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800de3a:	f000 fe1b 	bl	800ea74 <uxr_parse_base_object_request>
 800de3e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800de42:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800de44:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800de48:	9110      	str	r1, [sp, #64]	@ 0x40
 800de4a:	3f04      	subs	r7, #4
 800de4c:	f009 090e 	and.w	r9, r9, #14
 800de50:	b2bf      	uxth	r7, r7
 800de52:	f1bb 0f00 	cmp.w	fp, #0
 800de56:	d006      	beq.n	800de66 <read_submessage_list+0x1e2>
 800de58:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	4652      	mov	r2, sl
 800de60:	2300      	movs	r3, #0
 800de62:	4620      	mov	r0, r4
 800de64:	47d8      	blx	fp
 800de66:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800de68:	b16a      	cbz	r2, 800de86 <read_submessage_list+0x202>
 800de6a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800de6c:	2100      	movs	r1, #0
 800de6e:	3802      	subs	r0, #2
 800de70:	e002      	b.n	800de78 <read_submessage_list+0x1f4>
 800de72:	3101      	adds	r1, #1
 800de74:	4291      	cmp	r1, r2
 800de76:	d006      	beq.n	800de86 <read_submessage_list+0x202>
 800de78:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800de7c:	4553      	cmp	r3, sl
 800de7e:	d1f8      	bne.n	800de72 <read_submessage_list+0x1ee>
 800de80:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800de82:	2200      	movs	r2, #0
 800de84:	545a      	strb	r2, [r3, r1]
 800de86:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800de8a:	9102      	str	r1, [sp, #8]
 800de8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800de8e:	9101      	str	r1, [sp, #4]
 800de90:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800de92:	9100      	str	r1, [sp, #0]
 800de94:	464b      	mov	r3, r9
 800de96:	463a      	mov	r2, r7
 800de98:	4629      	mov	r1, r5
 800de9a:	4620      	mov	r0, r4
 800de9c:	f7ff fc4c 	bl	800d738 <read_submessage_format>
 800dea0:	e6f9      	b.n	800dc96 <read_submessage_list+0x12>
 800dea2:	4629      	mov	r1, r5
 800dea4:	4620      	mov	r0, r4
 800dea6:	f7ff fea5 	bl	800dbf4 <read_submessage_info>
 800deaa:	e6f4      	b.n	800dc96 <read_submessage_list+0x12>
 800deac:	2a00      	cmp	r2, #0
 800deae:	d03e      	beq.n	800df2e <read_submessage_list+0x2aa>
 800deb0:	a910      	add	r1, sp, #64	@ 0x40
 800deb2:	4628      	mov	r0, r5
 800deb4:	f002 f986 	bl	80101c4 <uxr_deserialize_STATUS_Payload>
 800deb8:	a90e      	add	r1, sp, #56	@ 0x38
 800deba:	aa0d      	add	r2, sp, #52	@ 0x34
 800debc:	a810      	add	r0, sp, #64	@ 0x40
 800debe:	f000 fdd9 	bl	800ea74 <uxr_parse_base_object_request>
 800dec2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800dec6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dec8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800decc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ded0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ded2:	f1ba 0f00 	cmp.w	sl, #0
 800ded6:	d006      	beq.n	800dee6 <read_submessage_list+0x262>
 800ded8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	463a      	mov	r2, r7
 800dee0:	464b      	mov	r3, r9
 800dee2:	4620      	mov	r0, r4
 800dee4:	47d0      	blx	sl
 800dee6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800dee8:	2a00      	cmp	r2, #0
 800deea:	f43f aed4 	beq.w	800dc96 <read_submessage_list+0x12>
 800deee:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800def0:	2100      	movs	r1, #0
 800def2:	3802      	subs	r0, #2
 800def4:	e003      	b.n	800defe <read_submessage_list+0x27a>
 800def6:	3101      	adds	r1, #1
 800def8:	4291      	cmp	r1, r2
 800defa:	f43f aecc 	beq.w	800dc96 <read_submessage_list+0x12>
 800defe:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800df02:	42bb      	cmp	r3, r7
 800df04:	d1f7      	bne.n	800def6 <read_submessage_list+0x272>
 800df06:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800df08:	f803 9001 	strb.w	r9, [r3, r1]
 800df0c:	e6c3      	b.n	800dc96 <read_submessage_list+0x12>
 800df0e:	2a00      	cmp	r2, #0
 800df10:	f47f aec1 	bne.w	800dc96 <read_submessage_list+0x12>
 800df14:	4629      	mov	r1, r5
 800df16:	4620      	mov	r0, r4
 800df18:	f000 fcf2 	bl	800e900 <uxr_read_create_session_status>
 800df1c:	e6bb      	b.n	800dc96 <read_submessage_list+0x12>
 800df1e:	4629      	mov	r1, r5
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff fcf5 	bl	800d910 <read_submessage_get_info>
 800df26:	e6b6      	b.n	800dc96 <read_submessage_list+0x12>
 800df28:	b017      	add	sp, #92	@ 0x5c
 800df2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2e:	4629      	mov	r1, r5
 800df30:	4620      	mov	r0, r4
 800df32:	f000 fcf1 	bl	800e918 <uxr_read_delete_session_status>
 800df36:	e6ae      	b.n	800dc96 <read_submessage_list+0x12>
 800df38:	f001 fbd8 	bl	800f6ec <uxr_nanos>
 800df3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800df3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800df40:	464f      	mov	r7, r9
 800df42:	fbc3 2706 	smlal	r2, r7, r3, r6
 800df46:	1812      	adds	r2, r2, r0
 800df48:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df4a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800df4c:	eb47 0101 	adc.w	r1, r7, r1
 800df50:	464f      	mov	r7, r9
 800df52:	fbc3 0706 	smlal	r0, r7, r3, r6
 800df56:	463b      	mov	r3, r7
 800df58:	4684      	mov	ip, r0
 800df5a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800df5e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800df62:	eb1c 0c00 	adds.w	ip, ip, r0
 800df66:	464f      	mov	r7, r9
 800df68:	eb43 0307 	adc.w	r3, r3, r7
 800df6c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800df70:	eb61 0303 	sbc.w	r3, r1, r3
 800df74:	0fda      	lsrs	r2, r3, #31
 800df76:	eb12 020c 	adds.w	r2, r2, ip
 800df7a:	f143 0300 	adc.w	r3, r3, #0
 800df7e:	0852      	lsrs	r2, r2, #1
 800df80:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800df84:	105b      	asrs	r3, r3, #1
 800df86:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800df8a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800df8e:	e6dd      	b.n	800dd4c <read_submessage_list+0xc8>
 800df90:	3b9aca00 	.word	0x3b9aca00

0800df94 <listen_message_reliably>:
 800df94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df98:	1e0b      	subs	r3, r1, #0
 800df9a:	b09d      	sub	sp, #116	@ 0x74
 800df9c:	bfb8      	it	lt
 800df9e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800dfa2:	4680      	mov	r8, r0
 800dfa4:	9305      	str	r3, [sp, #20]
 800dfa6:	f001 fb87 	bl	800f6b8 <uxr_millis>
 800dfaa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800dfae:	4681      	mov	r9, r0
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	f000 80a1 	beq.w	800e0f8 <listen_message_reliably+0x164>
 800dfb6:	2600      	movs	r6, #0
 800dfb8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dfbc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800dfc0:	9303      	str	r3, [sp, #12]
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	460f      	mov	r7, r1
 800dfc6:	e00f      	b.n	800dfe8 <listen_message_reliably+0x54>
 800dfc8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dfcc:	9903      	ldr	r1, [sp, #12]
 800dfce:	455a      	cmp	r2, fp
 800dfd0:	f106 0601 	add.w	r6, r6, #1
 800dfd4:	eb73 0101 	sbcs.w	r1, r3, r1
 800dfd8:	b2f0      	uxtb	r0, r6
 800dfda:	da01      	bge.n	800dfe0 <listen_message_reliably+0x4c>
 800dfdc:	4693      	mov	fp, r2
 800dfde:	9303      	str	r3, [sp, #12]
 800dfe0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800dfe4:	4283      	cmp	r3, r0
 800dfe6:	d960      	bls.n	800e0aa <listen_message_reliably+0x116>
 800dfe8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800dfec:	2102      	movs	r1, #2
 800dfee:	2201      	movs	r2, #1
 800dff0:	f001 f9e4 	bl	800f3bc <uxr_stream_id>
 800dff4:	00e4      	lsls	r4, r4, #3
 800dff6:	f104 0520 	add.w	r5, r4, #32
 800dffa:	4445      	add	r5, r8
 800dffc:	4601      	mov	r1, r0
 800dffe:	463b      	mov	r3, r7
 800e000:	464a      	mov	r2, r9
 800e002:	4628      	mov	r0, r5
 800e004:	9109      	str	r1, [sp, #36]	@ 0x24
 800e006:	f006 f95f 	bl	80142c8 <uxr_update_output_stream_heartbeat_timestamp>
 800e00a:	eb08 0304 	add.w	r3, r8, r4
 800e00e:	2800      	cmp	r0, #0
 800e010:	d0da      	beq.n	800dfc8 <listen_message_reliably+0x34>
 800e012:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e016:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e01a:	9304      	str	r3, [sp, #16]
 800e01c:	4640      	mov	r0, r8
 800e01e:	f000 fd03 	bl	800ea28 <uxr_session_header_offset>
 800e022:	3501      	adds	r5, #1
 800e024:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e028:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e02c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e030:	2300      	movs	r3, #0
 800e032:	2211      	movs	r2, #17
 800e034:	9000      	str	r0, [sp, #0]
 800e036:	a90c      	add	r1, sp, #48	@ 0x30
 800e038:	4650      	mov	r0, sl
 800e03a:	f7ff f893 	bl	800d164 <ucdr_init_buffer_origin_offset>
 800e03e:	2300      	movs	r3, #0
 800e040:	2205      	movs	r2, #5
 800e042:	210b      	movs	r1, #11
 800e044:	4650      	mov	r0, sl
 800e046:	f001 faf1 	bl	800f62c <uxr_buffer_submessage_header>
 800e04a:	8968      	ldrh	r0, [r5, #10]
 800e04c:	2101      	movs	r1, #1
 800e04e:	f006 f9dd 	bl	801440c <uxr_seq_num_add>
 800e052:	892b      	ldrh	r3, [r5, #8]
 800e054:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e058:	4602      	mov	r2, r0
 800e05a:	9b04      	ldr	r3, [sp, #16]
 800e05c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e060:	a90a      	add	r1, sp, #40	@ 0x28
 800e062:	4650      	mov	r0, sl
 800e064:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e068:	f002 f964 	bl	8010334 <uxr_serialize_HEARTBEAT_Payload>
 800e06c:	2200      	movs	r2, #0
 800e06e:	4611      	mov	r1, r2
 800e070:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e072:	4640      	mov	r0, r8
 800e074:	f000 fc82 	bl	800e97c <uxr_stamp_session_header>
 800e078:	4650      	mov	r0, sl
 800e07a:	f7ff f8b1 	bl	800d1e0 <ucdr_buffer_length>
 800e07e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e082:	4602      	mov	r2, r0
 800e084:	a90c      	add	r1, sp, #48	@ 0x30
 800e086:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e08a:	4444      	add	r4, r8
 800e08c:	47a8      	blx	r5
 800e08e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e092:	9903      	ldr	r1, [sp, #12]
 800e094:	455a      	cmp	r2, fp
 800e096:	f106 0601 	add.w	r6, r6, #1
 800e09a:	eb73 0101 	sbcs.w	r1, r3, r1
 800e09e:	b2f0      	uxtb	r0, r6
 800e0a0:	db9c      	blt.n	800dfdc <listen_message_reliably+0x48>
 800e0a2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e0a6:	4283      	cmp	r3, r0
 800e0a8:	d89e      	bhi.n	800dfe8 <listen_message_reliably+0x54>
 800e0aa:	9a03      	ldr	r2, [sp, #12]
 800e0ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	bf08      	it	eq
 800e0b4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e0b8:	d01e      	beq.n	800e0f8 <listen_message_reliably+0x164>
 800e0ba:	ebab 0309 	sub.w	r3, fp, r9
 800e0be:	9905      	ldr	r1, [sp, #20]
 800e0c0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	bf08      	it	eq
 800e0c8:	2301      	moveq	r3, #1
 800e0ca:	4299      	cmp	r1, r3
 800e0cc:	bfa8      	it	ge
 800e0ce:	4619      	movge	r1, r3
 800e0d0:	6894      	ldr	r4, [r2, #8]
 800e0d2:	6810      	ldr	r0, [r2, #0]
 800e0d4:	4689      	mov	r9, r1
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	aa08      	add	r2, sp, #32
 800e0da:	a907      	add	r1, sp, #28
 800e0dc:	47a0      	blx	r4
 800e0de:	b968      	cbnz	r0, 800e0fc <listen_message_reliably+0x168>
 800e0e0:	9b05      	ldr	r3, [sp, #20]
 800e0e2:	eba3 0309 	sub.w	r3, r3, r9
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	9305      	str	r3, [sp, #20]
 800e0ea:	f73f af5c 	bgt.w	800dfa6 <listen_message_reliably+0x12>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	b01d      	add	sp, #116	@ 0x74
 800e0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f8:	9b05      	ldr	r3, [sp, #20]
 800e0fa:	e7e0      	b.n	800e0be <listen_message_reliably+0x12a>
 800e0fc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e100:	4604      	mov	r4, r0
 800e102:	a80c      	add	r0, sp, #48	@ 0x30
 800e104:	f7ff f840 	bl	800d188 <ucdr_init_buffer>
 800e108:	2500      	movs	r5, #0
 800e10a:	f10d 031a 	add.w	r3, sp, #26
 800e10e:	aa06      	add	r2, sp, #24
 800e110:	a90c      	add	r1, sp, #48	@ 0x30
 800e112:	4640      	mov	r0, r8
 800e114:	f88d 5018 	strb.w	r5, [sp, #24]
 800e118:	f000 fc44 	bl	800e9a4 <uxr_read_session_header>
 800e11c:	b918      	cbnz	r0, 800e126 <listen_message_reliably+0x192>
 800e11e:	4620      	mov	r0, r4
 800e120:	b01d      	add	sp, #116	@ 0x74
 800e122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e126:	4629      	mov	r1, r5
 800e128:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e12c:	f001 f970 	bl	800f410 <uxr_stream_id_from_raw>
 800e130:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e134:	2d01      	cmp	r5, #1
 800e136:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e13a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e13e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e142:	d04b      	beq.n	800e1dc <listen_message_reliably+0x248>
 800e144:	2d02      	cmp	r5, #2
 800e146:	d00f      	beq.n	800e168 <listen_message_reliably+0x1d4>
 800e148:	2d00      	cmp	r5, #0
 800e14a:	d1e8      	bne.n	800e11e <listen_message_reliably+0x18a>
 800e14c:	4629      	mov	r1, r5
 800e14e:	4628      	mov	r0, r5
 800e150:	f001 f95e 	bl	800f410 <uxr_stream_id_from_raw>
 800e154:	a90c      	add	r1, sp, #48	@ 0x30
 800e156:	4602      	mov	r2, r0
 800e158:	4640      	mov	r0, r8
 800e15a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e15c:	f7ff fd92 	bl	800dc84 <read_submessage_list>
 800e160:	4620      	mov	r0, r4
 800e162:	b01d      	add	sp, #116	@ 0x74
 800e164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e168:	4631      	mov	r1, r6
 800e16a:	f108 0008 	add.w	r0, r8, #8
 800e16e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e172:	f001 fa3b 	bl	800f5ec <uxr_get_input_reliable_stream>
 800e176:	4607      	mov	r7, r0
 800e178:	b338      	cbz	r0, 800e1ca <listen_message_reliably+0x236>
 800e17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e17c:	9203      	str	r2, [sp, #12]
 800e17e:	a80c      	add	r0, sp, #48	@ 0x30
 800e180:	f7ff f832 	bl	800d1e8 <ucdr_buffer_remaining>
 800e184:	4603      	mov	r3, r0
 800e186:	f10d 0019 	add.w	r0, sp, #25
 800e18a:	9000      	str	r0, [sp, #0]
 800e18c:	9a03      	ldr	r2, [sp, #12]
 800e18e:	4651      	mov	r1, sl
 800e190:	4638      	mov	r0, r7
 800e192:	f005 fcaf 	bl	8013af4 <uxr_receive_reliable_message>
 800e196:	b1c0      	cbz	r0, 800e1ca <listen_message_reliably+0x236>
 800e198:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e19c:	b393      	cbz	r3, 800e204 <listen_message_reliably+0x270>
 800e19e:	ad14      	add	r5, sp, #80	@ 0x50
 800e1a0:	f04f 0a02 	mov.w	sl, #2
 800e1a4:	e00a      	b.n	800e1bc <listen_message_reliably+0x228>
 800e1a6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e1aa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e1ae:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e1b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	4640      	mov	r0, r8
 800e1b8:	f7ff fd64 	bl	800dc84 <read_submessage_list>
 800e1bc:	2204      	movs	r2, #4
 800e1be:	4629      	mov	r1, r5
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	f005 fd17 	bl	8013bf4 <uxr_next_input_reliable_buffer_available>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d1ed      	bne.n	800e1a6 <listen_message_reliably+0x212>
 800e1ca:	4640      	mov	r0, r8
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	4649      	mov	r1, r9
 800e1d0:	f7ff fbd4 	bl	800d97c <write_submessage_acknack.isra.0>
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	b01d      	add	sp, #116	@ 0x74
 800e1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1dc:	4631      	mov	r1, r6
 800e1de:	f108 0008 	add.w	r0, r8, #8
 800e1e2:	f001 f9f9 	bl	800f5d8 <uxr_get_input_best_effort_stream>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d099      	beq.n	800e11e <listen_message_reliably+0x18a>
 800e1ea:	4651      	mov	r1, sl
 800e1ec:	f005 fbee 	bl	80139cc <uxr_receive_best_effort_message>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d094      	beq.n	800e11e <listen_message_reliably+0x18a>
 800e1f4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e1f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1fa:	a90c      	add	r1, sp, #48	@ 0x30
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	f7ff fd41 	bl	800dc84 <read_submessage_list>
 800e202:	e78c      	b.n	800e11e <listen_message_reliably+0x18a>
 800e204:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e208:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e20a:	a90c      	add	r1, sp, #48	@ 0x30
 800e20c:	4640      	mov	r0, r8
 800e20e:	f7ff fd39 	bl	800dc84 <read_submessage_list>
 800e212:	e7c4      	b.n	800e19e <listen_message_reliably+0x20a>

0800e214 <uxr_run_session_timeout>:
 800e214:	b570      	push	{r4, r5, r6, lr}
 800e216:	4604      	mov	r4, r0
 800e218:	460d      	mov	r5, r1
 800e21a:	f001 fa4d 	bl	800f6b8 <uxr_millis>
 800e21e:	4606      	mov	r6, r0
 800e220:	4620      	mov	r0, r4
 800e222:	f7ff fc71 	bl	800db08 <uxr_flash_output_streams>
 800e226:	4629      	mov	r1, r5
 800e228:	4620      	mov	r0, r4
 800e22a:	f7ff feb3 	bl	800df94 <listen_message_reliably>
 800e22e:	f001 fa43 	bl	800f6b8 <uxr_millis>
 800e232:	1b83      	subs	r3, r0, r6
 800e234:	1ae9      	subs	r1, r5, r3
 800e236:	2900      	cmp	r1, #0
 800e238:	dcf6      	bgt.n	800e228 <uxr_run_session_timeout+0x14>
 800e23a:	f104 0008 	add.w	r0, r4, #8
 800e23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e242:	f001 b9dd 	b.w	800f600 <uxr_output_streams_confirmed>
 800e246:	bf00      	nop

0800e248 <uxr_run_session_until_data>:
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	4604      	mov	r4, r0
 800e24c:	460d      	mov	r5, r1
 800e24e:	f001 fa33 	bl	800f6b8 <uxr_millis>
 800e252:	4606      	mov	r6, r0
 800e254:	4620      	mov	r0, r4
 800e256:	f7ff fc57 	bl	800db08 <uxr_flash_output_streams>
 800e25a:	2300      	movs	r3, #0
 800e25c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e260:	4629      	mov	r1, r5
 800e262:	e005      	b.n	800e270 <uxr_run_session_until_data+0x28>
 800e264:	f001 fa28 	bl	800f6b8 <uxr_millis>
 800e268:	1b83      	subs	r3, r0, r6
 800e26a:	1ae9      	subs	r1, r5, r3
 800e26c:	2900      	cmp	r1, #0
 800e26e:	dd07      	ble.n	800e280 <uxr_run_session_until_data+0x38>
 800e270:	4620      	mov	r0, r4
 800e272:	f7ff fe8f 	bl	800df94 <listen_message_reliably>
 800e276:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d0f2      	beq.n	800e264 <uxr_run_session_until_data+0x1c>
 800e27e:	bd70      	pop	{r4, r5, r6, pc}
 800e280:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e284:	bd70      	pop	{r4, r5, r6, pc}
 800e286:	bf00      	nop

0800e288 <uxr_run_session_until_confirm_delivery>:
 800e288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28c:	4606      	mov	r6, r0
 800e28e:	460d      	mov	r5, r1
 800e290:	f001 fa12 	bl	800f6b8 <uxr_millis>
 800e294:	4607      	mov	r7, r0
 800e296:	4630      	mov	r0, r6
 800e298:	f7ff fc36 	bl	800db08 <uxr_flash_output_streams>
 800e29c:	2d00      	cmp	r5, #0
 800e29e:	f106 0808 	add.w	r8, r6, #8
 800e2a2:	bfa8      	it	ge
 800e2a4:	462c      	movge	r4, r5
 800e2a6:	da07      	bge.n	800e2b8 <uxr_run_session_until_confirm_delivery+0x30>
 800e2a8:	e00e      	b.n	800e2c8 <uxr_run_session_until_confirm_delivery+0x40>
 800e2aa:	f7ff fe73 	bl	800df94 <listen_message_reliably>
 800e2ae:	f001 fa03 	bl	800f6b8 <uxr_millis>
 800e2b2:	1bc3      	subs	r3, r0, r7
 800e2b4:	1aec      	subs	r4, r5, r3
 800e2b6:	d407      	bmi.n	800e2c8 <uxr_run_session_until_confirm_delivery+0x40>
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	f001 f9a1 	bl	800f600 <uxr_output_streams_confirmed>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d0f0      	beq.n	800e2aa <uxr_run_session_until_confirm_delivery+0x22>
 800e2c8:	4640      	mov	r0, r8
 800e2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ce:	f001 b997 	b.w	800f600 <uxr_output_streams_confirmed>
 800e2d2:	bf00      	nop

0800e2d4 <uxr_run_session_until_all_status>:
 800e2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2d8:	9c08      	ldr	r4, [sp, #32]
 800e2da:	4606      	mov	r6, r0
 800e2dc:	460f      	mov	r7, r1
 800e2de:	4691      	mov	r9, r2
 800e2e0:	461d      	mov	r5, r3
 800e2e2:	f7ff fc11 	bl	800db08 <uxr_flash_output_streams>
 800e2e6:	b124      	cbz	r4, 800e2f2 <uxr_run_session_until_all_status+0x1e>
 800e2e8:	4622      	mov	r2, r4
 800e2ea:	21ff      	movs	r1, #255	@ 0xff
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	f006 fdf3 	bl	8014ed8 <memset>
 800e2f2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e2f6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e2f8:	f001 f9de 	bl	800f6b8 <uxr_millis>
 800e2fc:	3d01      	subs	r5, #1
 800e2fe:	f1a9 0902 	sub.w	r9, r9, #2
 800e302:	4680      	mov	r8, r0
 800e304:	4639      	mov	r1, r7
 800e306:	4630      	mov	r0, r6
 800e308:	f7ff fe44 	bl	800df94 <listen_message_reliably>
 800e30c:	f001 f9d4 	bl	800f6b8 <uxr_millis>
 800e310:	eba0 0008 	sub.w	r0, r0, r8
 800e314:	1a39      	subs	r1, r7, r0
 800e316:	b344      	cbz	r4, 800e36a <uxr_run_session_until_all_status+0x96>
 800e318:	4628      	mov	r0, r5
 800e31a:	46ac      	mov	ip, r5
 800e31c:	2301      	movs	r3, #1
 800e31e:	e002      	b.n	800e326 <uxr_run_session_until_all_status+0x52>
 800e320:	42a3      	cmp	r3, r4
 800e322:	d20d      	bcs.n	800e340 <uxr_run_session_until_all_status+0x6c>
 800e324:	3301      	adds	r3, #1
 800e326:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e32a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e32e:	d1f7      	bne.n	800e320 <uxr_run_session_until_all_status+0x4c>
 800e330:	42a3      	cmp	r3, r4
 800e332:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e336:	d213      	bcs.n	800e360 <uxr_run_session_until_all_status+0x8c>
 800e338:	2a00      	cmp	r2, #0
 800e33a:	d0f3      	beq.n	800e324 <uxr_run_session_until_all_status+0x50>
 800e33c:	2900      	cmp	r1, #0
 800e33e:	dce2      	bgt.n	800e306 <uxr_run_session_until_all_status+0x32>
 800e340:	2300      	movs	r3, #0
 800e342:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e344:	442c      	add	r4, r5
 800e346:	e001      	b.n	800e34c <uxr_run_session_until_all_status+0x78>
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d812      	bhi.n	800e372 <uxr_run_session_until_all_status+0x9e>
 800e34c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e350:	4284      	cmp	r4, r0
 800e352:	d1f9      	bne.n	800e348 <uxr_run_session_until_all_status+0x74>
 800e354:	2b01      	cmp	r3, #1
 800e356:	bf8c      	ite	hi
 800e358:	2000      	movhi	r0, #0
 800e35a:	2001      	movls	r0, #1
 800e35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e360:	2900      	cmp	r1, #0
 800e362:	dded      	ble.n	800e340 <uxr_run_session_until_all_status+0x6c>
 800e364:	2a00      	cmp	r2, #0
 800e366:	d1ce      	bne.n	800e306 <uxr_run_session_until_all_status+0x32>
 800e368:	e7ea      	b.n	800e340 <uxr_run_session_until_all_status+0x6c>
 800e36a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e36c:	2001      	movs	r0, #1
 800e36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e372:	2000      	movs	r0, #0
 800e374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e378 <uxr_sync_session>:
 800e378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e37a:	b093      	sub	sp, #76	@ 0x4c
 800e37c:	4604      	mov	r4, r0
 800e37e:	460d      	mov	r5, r1
 800e380:	f000 fb52 	bl	800ea28 <uxr_session_header_offset>
 800e384:	2214      	movs	r2, #20
 800e386:	eb0d 0102 	add.w	r1, sp, r2
 800e38a:	9000      	str	r0, [sp, #0]
 800e38c:	2300      	movs	r3, #0
 800e38e:	a80a      	add	r0, sp, #40	@ 0x28
 800e390:	f7fe fee8 	bl	800d164 <ucdr_init_buffer_origin_offset>
 800e394:	2300      	movs	r3, #0
 800e396:	2208      	movs	r2, #8
 800e398:	210e      	movs	r1, #14
 800e39a:	a80a      	add	r0, sp, #40	@ 0x28
 800e39c:	f001 f946 	bl	800f62c <uxr_buffer_submessage_header>
 800e3a0:	f001 f9a4 	bl	800f6ec <uxr_nanos>
 800e3a4:	a31c      	add	r3, pc, #112	@ (adr r3, 800e418 <uxr_sync_session+0xa0>)
 800e3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3aa:	460e      	mov	r6, r1
 800e3ac:	4607      	mov	r7, r0
 800e3ae:	f7f1 ff9f 	bl	80002f0 <__aeabi_ldivmod>
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	9003      	str	r0, [sp, #12]
 800e3b6:	a318      	add	r3, pc, #96	@ (adr r3, 800e418 <uxr_sync_session+0xa0>)
 800e3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3bc:	4638      	mov	r0, r7
 800e3be:	f7f1 ff97 	bl	80002f0 <__aeabi_ldivmod>
 800e3c2:	a903      	add	r1, sp, #12
 800e3c4:	a80a      	add	r0, sp, #40	@ 0x28
 800e3c6:	9204      	str	r2, [sp, #16]
 800e3c8:	f001 ffda 	bl	8010380 <uxr_serialize_TIMESTAMP_Payload>
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f000 fad2 	bl	800e97c <uxr_stamp_session_header>
 800e3d8:	a80a      	add	r0, sp, #40	@ 0x28
 800e3da:	f7fe ff01 	bl	800d1e0 <ucdr_buffer_length>
 800e3de:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	a905      	add	r1, sp, #20
 800e3e4:	e9d3 0600 	ldrd	r0, r6, [r3]
 800e3e8:	47b0      	blx	r6
 800e3ea:	f001 f965 	bl	800f6b8 <uxr_millis>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	e000      	b.n	800e3fc <uxr_sync_session+0x84>
 800e3fa:	b950      	cbnz	r0, 800e412 <uxr_sync_session+0x9a>
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f7ff fdc9 	bl	800df94 <listen_message_reliably>
 800e402:	f001 f959 	bl	800f6b8 <uxr_millis>
 800e406:	1b83      	subs	r3, r0, r6
 800e408:	1ae9      	subs	r1, r5, r3
 800e40a:	2900      	cmp	r1, #0
 800e40c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800e410:	dcf3      	bgt.n	800e3fa <uxr_sync_session+0x82>
 800e412:	b013      	add	sp, #76	@ 0x4c
 800e414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e416:	bf00      	nop
 800e418:	3b9aca00 	.word	0x3b9aca00
 800e41c:	00000000 	.word	0x00000000

0800e420 <wait_session_status>:
 800e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	4604      	mov	r4, r0
 800e426:	b09d      	sub	sp, #116	@ 0x74
 800e428:	20ff      	movs	r0, #255	@ 0xff
 800e42a:	7160      	strb	r0, [r4, #5]
 800e42c:	9303      	str	r3, [sp, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f000 80b6 	beq.w	800e5a0 <wait_session_status+0x180>
 800e434:	468a      	mov	sl, r1
 800e436:	4691      	mov	r9, r2
 800e438:	f04f 0b00 	mov.w	fp, #0
 800e43c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e43e:	464a      	mov	r2, r9
 800e440:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e444:	4651      	mov	r1, sl
 800e446:	47a8      	blx	r5
 800e448:	f001 f936 	bl	800f6b8 <uxr_millis>
 800e44c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e450:	4605      	mov	r5, r0
 800e452:	e009      	b.n	800e468 <wait_session_status+0x48>
 800e454:	f001 f930 	bl	800f6b8 <uxr_millis>
 800e458:	1b40      	subs	r0, r0, r5
 800e45a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e45e:	2b00      	cmp	r3, #0
 800e460:	dd40      	ble.n	800e4e4 <wait_session_status+0xc4>
 800e462:	7960      	ldrb	r0, [r4, #5]
 800e464:	28ff      	cmp	r0, #255	@ 0xff
 800e466:	d145      	bne.n	800e4f4 <wait_session_status+0xd4>
 800e468:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e46a:	a908      	add	r1, sp, #32
 800e46c:	6896      	ldr	r6, [r2, #8]
 800e46e:	6810      	ldr	r0, [r2, #0]
 800e470:	aa09      	add	r2, sp, #36	@ 0x24
 800e472:	47b0      	blx	r6
 800e474:	2800      	cmp	r0, #0
 800e476:	d0ed      	beq.n	800e454 <wait_session_status+0x34>
 800e478:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e47c:	a80c      	add	r0, sp, #48	@ 0x30
 800e47e:	f7fe fe83 	bl	800d188 <ucdr_init_buffer>
 800e482:	2600      	movs	r6, #0
 800e484:	f10d 031e 	add.w	r3, sp, #30
 800e488:	aa07      	add	r2, sp, #28
 800e48a:	a90c      	add	r1, sp, #48	@ 0x30
 800e48c:	4620      	mov	r0, r4
 800e48e:	f88d 601c 	strb.w	r6, [sp, #28]
 800e492:	f000 fa87 	bl	800e9a4 <uxr_read_session_header>
 800e496:	2800      	cmp	r0, #0
 800e498:	d0dc      	beq.n	800e454 <wait_session_status+0x34>
 800e49a:	4631      	mov	r1, r6
 800e49c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e4a0:	f000 ffb6 	bl	800f410 <uxr_stream_id_from_raw>
 800e4a4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e4a8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e4ac:	9302      	str	r3, [sp, #8]
 800e4ae:	2f01      	cmp	r7, #1
 800e4b0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800e4b4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e4b8:	d05c      	beq.n	800e574 <wait_session_status+0x154>
 800e4ba:	2f02      	cmp	r7, #2
 800e4bc:	d020      	beq.n	800e500 <wait_session_status+0xe0>
 800e4be:	2f00      	cmp	r7, #0
 800e4c0:	d1c8      	bne.n	800e454 <wait_session_status+0x34>
 800e4c2:	4639      	mov	r1, r7
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	f000 ffa3 	bl	800f410 <uxr_stream_id_from_raw>
 800e4ca:	a90c      	add	r1, sp, #48	@ 0x30
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f7ff fbd7 	bl	800dc84 <read_submessage_list>
 800e4d6:	f001 f8ef 	bl	800f6b8 <uxr_millis>
 800e4da:	1b40      	subs	r0, r0, r5
 800e4dc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	dcbe      	bgt.n	800e462 <wait_session_status+0x42>
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	7960      	ldrb	r0, [r4, #5]
 800e4e8:	f10b 0b01 	add.w	fp, fp, #1
 800e4ec:	455b      	cmp	r3, fp
 800e4ee:	d001      	beq.n	800e4f4 <wait_session_status+0xd4>
 800e4f0:	28ff      	cmp	r0, #255	@ 0xff
 800e4f2:	d0a3      	beq.n	800e43c <wait_session_status+0x1c>
 800e4f4:	38ff      	subs	r0, #255	@ 0xff
 800e4f6:	bf18      	it	ne
 800e4f8:	2001      	movne	r0, #1
 800e4fa:	b01d      	add	sp, #116	@ 0x74
 800e4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e500:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800e504:	9304      	str	r3, [sp, #16]
 800e506:	4631      	mov	r1, r6
 800e508:	f104 0008 	add.w	r0, r4, #8
 800e50c:	f001 f86e 	bl	800f5ec <uxr_get_input_reliable_stream>
 800e510:	4680      	mov	r8, r0
 800e512:	b348      	cbz	r0, 800e568 <wait_session_status+0x148>
 800e514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e516:	9205      	str	r2, [sp, #20]
 800e518:	a80c      	add	r0, sp, #48	@ 0x30
 800e51a:	f7fe fe65 	bl	800d1e8 <ucdr_buffer_remaining>
 800e51e:	4603      	mov	r3, r0
 800e520:	f10d 001d 	add.w	r0, sp, #29
 800e524:	9000      	str	r0, [sp, #0]
 800e526:	9a05      	ldr	r2, [sp, #20]
 800e528:	9902      	ldr	r1, [sp, #8]
 800e52a:	4640      	mov	r0, r8
 800e52c:	f005 fae2 	bl	8013af4 <uxr_receive_reliable_message>
 800e530:	b1d0      	cbz	r0, 800e568 <wait_session_status+0x148>
 800e532:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d03a      	beq.n	800e5b0 <wait_session_status+0x190>
 800e53a:	9f04      	ldr	r7, [sp, #16]
 800e53c:	e00a      	b.n	800e554 <wait_session_status+0x134>
 800e53e:	f04f 0302 	mov.w	r3, #2
 800e542:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800e546:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e54a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e54e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e550:	f7ff fb98 	bl	800dc84 <read_submessage_list>
 800e554:	a914      	add	r1, sp, #80	@ 0x50
 800e556:	2204      	movs	r2, #4
 800e558:	4640      	mov	r0, r8
 800e55a:	f005 fb4b 	bl	8013bf4 <uxr_next_input_reliable_buffer_available>
 800e55e:	4603      	mov	r3, r0
 800e560:	a914      	add	r1, sp, #80	@ 0x50
 800e562:	4620      	mov	r0, r4
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1ea      	bne.n	800e53e <wait_session_status+0x11e>
 800e568:	9904      	ldr	r1, [sp, #16]
 800e56a:	4632      	mov	r2, r6
 800e56c:	4620      	mov	r0, r4
 800e56e:	f7ff fa05 	bl	800d97c <write_submessage_acknack.isra.0>
 800e572:	e76f      	b.n	800e454 <wait_session_status+0x34>
 800e574:	4631      	mov	r1, r6
 800e576:	f104 0008 	add.w	r0, r4, #8
 800e57a:	f001 f82d 	bl	800f5d8 <uxr_get_input_best_effort_stream>
 800e57e:	2800      	cmp	r0, #0
 800e580:	f43f af68 	beq.w	800e454 <wait_session_status+0x34>
 800e584:	9902      	ldr	r1, [sp, #8]
 800e586:	f005 fa21 	bl	80139cc <uxr_receive_best_effort_message>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	f43f af62 	beq.w	800e454 <wait_session_status+0x34>
 800e590:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e594:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e596:	a90c      	add	r1, sp, #48	@ 0x30
 800e598:	4620      	mov	r0, r4
 800e59a:	f7ff fb73 	bl	800dc84 <read_submessage_list>
 800e59e:	e759      	b.n	800e454 <wait_session_status+0x34>
 800e5a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e5a2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e5a6:	47a0      	blx	r4
 800e5a8:	2001      	movs	r0, #1
 800e5aa:	b01d      	add	sp, #116	@ 0x74
 800e5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e5b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5b6:	a90c      	add	r1, sp, #48	@ 0x30
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f7ff fb63 	bl	800dc84 <read_submessage_list>
 800e5be:	e7bc      	b.n	800e53a <wait_session_status+0x11a>

0800e5c0 <uxr_delete_session_retries>:
 800e5c0:	b530      	push	{r4, r5, lr}
 800e5c2:	b08f      	sub	sp, #60	@ 0x3c
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	460d      	mov	r5, r1
 800e5c8:	f000 fa2e 	bl	800ea28 <uxr_session_header_offset>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	2210      	movs	r2, #16
 800e5d0:	9000      	str	r0, [sp, #0]
 800e5d2:	a902      	add	r1, sp, #8
 800e5d4:	a806      	add	r0, sp, #24
 800e5d6:	f7fe fdc5 	bl	800d164 <ucdr_init_buffer_origin_offset>
 800e5da:	a906      	add	r1, sp, #24
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f000 f973 	bl	800e8c8 <uxr_buffer_delete_session>
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	9b06      	ldr	r3, [sp, #24]
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f000 f9c7 	bl	800e97c <uxr_stamp_session_header>
 800e5ee:	a806      	add	r0, sp, #24
 800e5f0:	f7fe fdf6 	bl	800d1e0 <ucdr_buffer_length>
 800e5f4:	462b      	mov	r3, r5
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	a902      	add	r1, sp, #8
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f7ff ff10 	bl	800e420 <wait_session_status>
 800e600:	b118      	cbz	r0, 800e60a <uxr_delete_session_retries+0x4a>
 800e602:	7960      	ldrb	r0, [r4, #5]
 800e604:	fab0 f080 	clz	r0, r0
 800e608:	0940      	lsrs	r0, r0, #5
 800e60a:	b00f      	add	sp, #60	@ 0x3c
 800e60c:	bd30      	pop	{r4, r5, pc}
 800e60e:	bf00      	nop

0800e610 <uxr_create_session>:
 800e610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e614:	f100 0b08 	add.w	fp, r0, #8
 800e618:	b0ab      	sub	sp, #172	@ 0xac
 800e61a:	4604      	mov	r4, r0
 800e61c:	4658      	mov	r0, fp
 800e61e:	f000 ff2b 	bl	800f478 <uxr_reset_stream_storage>
 800e622:	4620      	mov	r0, r4
 800e624:	f000 fa00 	bl	800ea28 <uxr_session_header_offset>
 800e628:	2300      	movs	r3, #0
 800e62a:	9000      	str	r0, [sp, #0]
 800e62c:	221c      	movs	r2, #28
 800e62e:	a90b      	add	r1, sp, #44	@ 0x2c
 800e630:	a812      	add	r0, sp, #72	@ 0x48
 800e632:	f7fe fd97 	bl	800d164 <ucdr_init_buffer_origin_offset>
 800e636:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e638:	8a1a      	ldrh	r2, [r3, #16]
 800e63a:	3a04      	subs	r2, #4
 800e63c:	b292      	uxth	r2, r2
 800e63e:	a912      	add	r1, sp, #72	@ 0x48
 800e640:	4620      	mov	r0, r4
 800e642:	f000 f917 	bl	800e874 <uxr_buffer_create_session>
 800e646:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e648:	4620      	mov	r0, r4
 800e64a:	f000 f983 	bl	800e954 <uxr_stamp_create_session_header>
 800e64e:	a812      	add	r0, sp, #72	@ 0x48
 800e650:	f7fe fdc6 	bl	800d1e0 <ucdr_buffer_length>
 800e654:	23ff      	movs	r3, #255	@ 0xff
 800e656:	7163      	strb	r3, [r4, #5]
 800e658:	230a      	movs	r3, #10
 800e65a:	46da      	mov	sl, fp
 800e65c:	9303      	str	r3, [sp, #12]
 800e65e:	4683      	mov	fp, r0
 800e660:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e662:	465a      	mov	r2, fp
 800e664:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e668:	a90b      	add	r1, sp, #44	@ 0x2c
 800e66a:	47a8      	blx	r5
 800e66c:	f001 f824 	bl	800f6b8 <uxr_millis>
 800e670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e674:	4605      	mov	r5, r0
 800e676:	e009      	b.n	800e68c <uxr_create_session+0x7c>
 800e678:	f001 f81e 	bl	800f6b8 <uxr_millis>
 800e67c:	1b40      	subs	r0, r0, r5
 800e67e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e682:	2b00      	cmp	r3, #0
 800e684:	7962      	ldrb	r2, [r4, #5]
 800e686:	dd38      	ble.n	800e6fa <uxr_create_session+0xea>
 800e688:	2aff      	cmp	r2, #255	@ 0xff
 800e68a:	d13c      	bne.n	800e706 <uxr_create_session+0xf6>
 800e68c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e68e:	a907      	add	r1, sp, #28
 800e690:	6896      	ldr	r6, [r2, #8]
 800e692:	6810      	ldr	r0, [r2, #0]
 800e694:	aa08      	add	r2, sp, #32
 800e696:	47b0      	blx	r6
 800e698:	2800      	cmp	r0, #0
 800e69a:	d0ed      	beq.n	800e678 <uxr_create_session+0x68>
 800e69c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e6a0:	a81a      	add	r0, sp, #104	@ 0x68
 800e6a2:	f7fe fd71 	bl	800d188 <ucdr_init_buffer>
 800e6a6:	2600      	movs	r6, #0
 800e6a8:	f10d 031a 	add.w	r3, sp, #26
 800e6ac:	aa06      	add	r2, sp, #24
 800e6ae:	a91a      	add	r1, sp, #104	@ 0x68
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f88d 6018 	strb.w	r6, [sp, #24]
 800e6b6:	f000 f975 	bl	800e9a4 <uxr_read_session_header>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d0dc      	beq.n	800e678 <uxr_create_session+0x68>
 800e6be:	4631      	mov	r1, r6
 800e6c0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e6c4:	f000 fea4 	bl	800f410 <uxr_stream_id_from_raw>
 800e6c8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e6cc:	2e01      	cmp	r6, #1
 800e6ce:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e6d2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e6d6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e6da:	d053      	beq.n	800e784 <uxr_create_session+0x174>
 800e6dc:	2e02      	cmp	r6, #2
 800e6de:	d018      	beq.n	800e712 <uxr_create_session+0x102>
 800e6e0:	2e00      	cmp	r6, #0
 800e6e2:	d1c9      	bne.n	800e678 <uxr_create_session+0x68>
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f000 fe92 	bl	800f410 <uxr_stream_id_from_raw>
 800e6ec:	a91a      	add	r1, sp, #104	@ 0x68
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	900a      	str	r0, [sp, #40]	@ 0x28
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f7ff fac6 	bl	800dc84 <read_submessage_list>
 800e6f8:	e7be      	b.n	800e678 <uxr_create_session+0x68>
 800e6fa:	9b03      	ldr	r3, [sp, #12]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	9303      	str	r3, [sp, #12]
 800e700:	d001      	beq.n	800e706 <uxr_create_session+0xf6>
 800e702:	2aff      	cmp	r2, #255	@ 0xff
 800e704:	d0ac      	beq.n	800e660 <uxr_create_session+0x50>
 800e706:	2a00      	cmp	r2, #0
 800e708:	d051      	beq.n	800e7ae <uxr_create_session+0x19e>
 800e70a:	2000      	movs	r0, #0
 800e70c:	b02b      	add	sp, #172	@ 0xac
 800e70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e712:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e716:	9304      	str	r3, [sp, #16]
 800e718:	4639      	mov	r1, r7
 800e71a:	4650      	mov	r0, sl
 800e71c:	f000 ff66 	bl	800f5ec <uxr_get_input_reliable_stream>
 800e720:	4680      	mov	r8, r0
 800e722:	b348      	cbz	r0, 800e778 <uxr_create_session+0x168>
 800e724:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e726:	9205      	str	r2, [sp, #20]
 800e728:	a81a      	add	r0, sp, #104	@ 0x68
 800e72a:	f7fe fd5d 	bl	800d1e8 <ucdr_buffer_remaining>
 800e72e:	4603      	mov	r3, r0
 800e730:	f10d 0019 	add.w	r0, sp, #25
 800e734:	9000      	str	r0, [sp, #0]
 800e736:	9a05      	ldr	r2, [sp, #20]
 800e738:	4649      	mov	r1, r9
 800e73a:	4640      	mov	r0, r8
 800e73c:	f005 f9da 	bl	8013af4 <uxr_receive_reliable_message>
 800e740:	b1d0      	cbz	r0, 800e778 <uxr_create_session+0x168>
 800e742:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d038      	beq.n	800e7bc <uxr_create_session+0x1ac>
 800e74a:	9e04      	ldr	r6, [sp, #16]
 800e74c:	e00a      	b.n	800e764 <uxr_create_session+0x154>
 800e74e:	f04f 0302 	mov.w	r3, #2
 800e752:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e756:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e75a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e75e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e760:	f7ff fa90 	bl	800dc84 <read_submessage_list>
 800e764:	a922      	add	r1, sp, #136	@ 0x88
 800e766:	2204      	movs	r2, #4
 800e768:	4640      	mov	r0, r8
 800e76a:	f005 fa43 	bl	8013bf4 <uxr_next_input_reliable_buffer_available>
 800e76e:	4603      	mov	r3, r0
 800e770:	a922      	add	r1, sp, #136	@ 0x88
 800e772:	4620      	mov	r0, r4
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1ea      	bne.n	800e74e <uxr_create_session+0x13e>
 800e778:	9904      	ldr	r1, [sp, #16]
 800e77a:	463a      	mov	r2, r7
 800e77c:	4620      	mov	r0, r4
 800e77e:	f7ff f8fd 	bl	800d97c <write_submessage_acknack.isra.0>
 800e782:	e779      	b.n	800e678 <uxr_create_session+0x68>
 800e784:	4639      	mov	r1, r7
 800e786:	4650      	mov	r0, sl
 800e788:	f000 ff26 	bl	800f5d8 <uxr_get_input_best_effort_stream>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	f43f af73 	beq.w	800e678 <uxr_create_session+0x68>
 800e792:	4649      	mov	r1, r9
 800e794:	f005 f91a 	bl	80139cc <uxr_receive_best_effort_message>
 800e798:	2800      	cmp	r0, #0
 800e79a:	f43f af6d 	beq.w	800e678 <uxr_create_session+0x68>
 800e79e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e7a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7a4:	a91a      	add	r1, sp, #104	@ 0x68
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f7ff fa6c 	bl	800dc84 <read_submessage_list>
 800e7ac:	e764      	b.n	800e678 <uxr_create_session+0x68>
 800e7ae:	4650      	mov	r0, sl
 800e7b0:	f000 fe62 	bl	800f478 <uxr_reset_stream_storage>
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	b02b      	add	sp, #172	@ 0xac
 800e7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7bc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e7c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7c2:	a91a      	add	r1, sp, #104	@ 0x68
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f7ff fa5d 	bl	800dc84 <read_submessage_list>
 800e7ca:	e7be      	b.n	800e74a <uxr_create_session+0x13a>

0800e7cc <uxr_prepare_stream_to_write_submessage>:
 800e7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d0:	b082      	sub	sp, #8
 800e7d2:	4682      	mov	sl, r0
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	4615      	mov	r5, r2
 800e7d8:	461e      	mov	r6, r3
 800e7da:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e7de:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e7e2:	9101      	str	r1, [sp, #4]
 800e7e4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e7e8:	f000 ff60 	bl	800f6ac <uxr_submessage_padding>
 800e7ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e7f0:	f105 0904 	add.w	r9, r5, #4
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	4481      	add	r9, r0
 800e7f8:	d01d      	beq.n	800e836 <uxr_prepare_stream_to_write_submessage+0x6a>
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d116      	bne.n	800e82c <uxr_prepare_stream_to_write_submessage+0x60>
 800e7fe:	4621      	mov	r1, r4
 800e800:	f10a 0008 	add.w	r0, sl, #8
 800e804:	f000 fede 	bl	800f5c4 <uxr_get_output_reliable_stream>
 800e808:	4604      	mov	r4, r0
 800e80a:	b158      	cbz	r0, 800e824 <uxr_prepare_stream_to_write_submessage+0x58>
 800e80c:	4649      	mov	r1, r9
 800e80e:	4632      	mov	r2, r6
 800e810:	f005 fbac 	bl	8013f6c <uxr_prepare_reliable_buffer_to_write>
 800e814:	4604      	mov	r4, r0
 800e816:	b12c      	cbz	r4, 800e824 <uxr_prepare_stream_to_write_submessage+0x58>
 800e818:	4643      	mov	r3, r8
 800e81a:	b2aa      	uxth	r2, r5
 800e81c:	4639      	mov	r1, r7
 800e81e:	4630      	mov	r0, r6
 800e820:	f000 ff04 	bl	800f62c <uxr_buffer_submessage_header>
 800e824:	4620      	mov	r0, r4
 800e826:	b002      	add	sp, #8
 800e828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e82c:	2400      	movs	r4, #0
 800e82e:	4620      	mov	r0, r4
 800e830:	b002      	add	sp, #8
 800e832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e836:	4621      	mov	r1, r4
 800e838:	f10a 0008 	add.w	r0, sl, #8
 800e83c:	f000 feba 	bl	800f5b4 <uxr_get_output_best_effort_stream>
 800e840:	4604      	mov	r4, r0
 800e842:	2800      	cmp	r0, #0
 800e844:	d0ee      	beq.n	800e824 <uxr_prepare_stream_to_write_submessage+0x58>
 800e846:	4649      	mov	r1, r9
 800e848:	4632      	mov	r2, r6
 800e84a:	f005 fabf 	bl	8013dcc <uxr_prepare_best_effort_buffer_to_write>
 800e84e:	4604      	mov	r4, r0
 800e850:	e7e1      	b.n	800e816 <uxr_prepare_stream_to_write_submessage+0x4a>
 800e852:	bf00      	nop

0800e854 <uxr_init_session_info>:
 800e854:	0e13      	lsrs	r3, r2, #24
 800e856:	7043      	strb	r3, [r0, #1]
 800e858:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e85c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e860:	7001      	strb	r1, [r0, #0]
 800e862:	70c3      	strb	r3, [r0, #3]
 800e864:	2109      	movs	r1, #9
 800e866:	23ff      	movs	r3, #255	@ 0xff
 800e868:	f880 c002 	strb.w	ip, [r0, #2]
 800e86c:	7102      	strb	r2, [r0, #4]
 800e86e:	80c1      	strh	r1, [r0, #6]
 800e870:	7143      	strb	r3, [r0, #5]
 800e872:	4770      	bx	lr

0800e874 <uxr_buffer_create_session>:
 800e874:	b530      	push	{r4, r5, lr}
 800e876:	b089      	sub	sp, #36	@ 0x24
 800e878:	2300      	movs	r3, #0
 800e87a:	4d12      	ldr	r5, [pc, #72]	@ (800e8c4 <uxr_buffer_create_session+0x50>)
 800e87c:	9307      	str	r3, [sp, #28]
 800e87e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e882:	2201      	movs	r2, #1
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	80c2      	strh	r2, [r0, #6]
 800e888:	f88d 2004 	strb.w	r2, [sp, #4]
 800e88c:	682a      	ldr	r2, [r5, #0]
 800e88e:	9200      	str	r2, [sp, #0]
 800e890:	88aa      	ldrh	r2, [r5, #4]
 800e892:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e896:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e89a:	9202      	str	r2, [sp, #8]
 800e89c:	460c      	mov	r4, r1
 800e89e:	7802      	ldrb	r2, [r0, #0]
 800e8a0:	9303      	str	r3, [sp, #12]
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	f88d 200c 	strb.w	r2, [sp, #12]
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	2210      	movs	r2, #16
 800e8ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e8b0:	9306      	str	r3, [sp, #24]
 800e8b2:	f000 febb 	bl	800f62c <uxr_buffer_submessage_header>
 800e8b6:	4669      	mov	r1, sp
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f001 fb9d 	bl	800fff8 <uxr_serialize_CREATE_CLIENT_Payload>
 800e8be:	b009      	add	sp, #36	@ 0x24
 800e8c0:	bd30      	pop	{r4, r5, pc}
 800e8c2:	bf00      	nop
 800e8c4:	08015d7c 	.word	0x08015d7c

0800e8c8 <uxr_buffer_delete_session>:
 800e8c8:	b510      	push	{r4, lr}
 800e8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e8fc <uxr_buffer_delete_session+0x34>)
 800e8cc:	b082      	sub	sp, #8
 800e8ce:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e8d2:	f8ad c006 	strh.w	ip, [sp, #6]
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	2202      	movs	r2, #2
 800e8da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e8de:	80c2      	strh	r2, [r0, #6]
 800e8e0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e8e4:	2204      	movs	r2, #4
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	2103      	movs	r1, #3
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f000 fe9e 	bl	800f62c <uxr_buffer_submessage_header>
 800e8f0:	a901      	add	r1, sp, #4
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f001 fc26 	bl	8010144 <uxr_serialize_DELETE_Payload>
 800e8f8:	b002      	add	sp, #8
 800e8fa:	bd10      	pop	{r4, pc}
 800e8fc:	08015d7c 	.word	0x08015d7c

0800e900 <uxr_read_create_session_status>:
 800e900:	b510      	push	{r4, lr}
 800e902:	b088      	sub	sp, #32
 800e904:	4604      	mov	r4, r0
 800e906:	4608      	mov	r0, r1
 800e908:	a901      	add	r1, sp, #4
 800e90a:	f001 fc2b 	bl	8010164 <uxr_deserialize_STATUS_AGENT_Payload>
 800e90e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e912:	7163      	strb	r3, [r4, #5]
 800e914:	b008      	add	sp, #32
 800e916:	bd10      	pop	{r4, pc}

0800e918 <uxr_read_delete_session_status>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	4604      	mov	r4, r0
 800e91c:	b084      	sub	sp, #16
 800e91e:	4608      	mov	r0, r1
 800e920:	a902      	add	r1, sp, #8
 800e922:	f001 fc4f 	bl	80101c4 <uxr_deserialize_STATUS_Payload>
 800e926:	88e3      	ldrh	r3, [r4, #6]
 800e928:	2b02      	cmp	r3, #2
 800e92a:	d001      	beq.n	800e930 <uxr_read_delete_session_status+0x18>
 800e92c:	b004      	add	sp, #16
 800e92e:	bd10      	pop	{r4, pc}
 800e930:	f10d 000a 	add.w	r0, sp, #10
 800e934:	f7fe fe78 	bl	800d628 <uxr_object_id_from_raw>
 800e938:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e93c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e940:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e944:	b29b      	uxth	r3, r3
 800e946:	2b02      	cmp	r3, #2
 800e948:	bf04      	itt	eq
 800e94a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e94e:	7163      	strbeq	r3, [r4, #5]
 800e950:	b004      	add	sp, #16
 800e952:	bd10      	pop	{r4, pc}

0800e954 <uxr_stamp_create_session_header>:
 800e954:	b510      	push	{r4, lr}
 800e956:	2208      	movs	r2, #8
 800e958:	b08a      	sub	sp, #40	@ 0x28
 800e95a:	4604      	mov	r4, r0
 800e95c:	eb0d 0002 	add.w	r0, sp, r2
 800e960:	f7fe fc12 	bl	800d188 <ucdr_init_buffer>
 800e964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e968:	9400      	str	r4, [sp, #0]
 800e96a:	2300      	movs	r3, #0
 800e96c:	461a      	mov	r2, r3
 800e96e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e972:	a802      	add	r0, sp, #8
 800e974:	f000 ff00 	bl	800f778 <uxr_serialize_message_header>
 800e978:	b00a      	add	sp, #40	@ 0x28
 800e97a:	bd10      	pop	{r4, pc}

0800e97c <uxr_stamp_session_header>:
 800e97c:	b530      	push	{r4, r5, lr}
 800e97e:	b08d      	sub	sp, #52	@ 0x34
 800e980:	4604      	mov	r4, r0
 800e982:	460d      	mov	r5, r1
 800e984:	9203      	str	r2, [sp, #12]
 800e986:	4619      	mov	r1, r3
 800e988:	a804      	add	r0, sp, #16
 800e98a:	2208      	movs	r2, #8
 800e98c:	f7fe fbfc 	bl	800d188 <ucdr_init_buffer>
 800e990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e994:	9b03      	ldr	r3, [sp, #12]
 800e996:	9400      	str	r4, [sp, #0]
 800e998:	462a      	mov	r2, r5
 800e99a:	a804      	add	r0, sp, #16
 800e99c:	f000 feec 	bl	800f778 <uxr_serialize_message_header>
 800e9a0:	b00d      	add	sp, #52	@ 0x34
 800e9a2:	bd30      	pop	{r4, r5, pc}

0800e9a4 <uxr_read_session_header>:
 800e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a8:	4607      	mov	r7, r0
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	4615      	mov	r5, r2
 800e9b2:	461e      	mov	r6, r3
 800e9b4:	f7fe fc18 	bl	800d1e8 <ucdr_buffer_remaining>
 800e9b8:	2808      	cmp	r0, #8
 800e9ba:	d803      	bhi.n	800e9c4 <uxr_read_session_header+0x20>
 800e9bc:	2000      	movs	r0, #0
 800e9be:	b004      	add	sp, #16
 800e9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c4:	f10d 080c 	add.w	r8, sp, #12
 800e9c8:	4633      	mov	r3, r6
 800e9ca:	462a      	mov	r2, r5
 800e9cc:	f8cd 8000 	str.w	r8, [sp]
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f10d 010b 	add.w	r1, sp, #11
 800e9d6:	f000 feed 	bl	800f7b4 <uxr_deserialize_message_header>
 800e9da:	783a      	ldrb	r2, [r7, #0]
 800e9dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d1eb      	bne.n	800e9bc <uxr_read_session_header+0x18>
 800e9e4:	061b      	lsls	r3, r3, #24
 800e9e6:	d41c      	bmi.n	800ea22 <uxr_read_session_header+0x7e>
 800e9e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e9ec:	787b      	ldrb	r3, [r7, #1]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d003      	beq.n	800e9fa <uxr_read_session_header+0x56>
 800e9f2:	2001      	movs	r0, #1
 800e9f4:	f080 0001 	eor.w	r0, r0, #1
 800e9f8:	e7e1      	b.n	800e9be <uxr_read_session_header+0x1a>
 800e9fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e9fe:	78bb      	ldrb	r3, [r7, #2]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	f107 0102 	add.w	r1, r7, #2
 800ea06:	d1f4      	bne.n	800e9f2 <uxr_read_session_header+0x4e>
 800ea08:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ea0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d1ee      	bne.n	800e9f2 <uxr_read_session_header+0x4e>
 800ea14:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ea18:	784b      	ldrb	r3, [r1, #1]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d1e9      	bne.n	800e9f2 <uxr_read_session_header+0x4e>
 800ea1e:	2000      	movs	r0, #0
 800ea20:	e7e8      	b.n	800e9f4 <uxr_read_session_header+0x50>
 800ea22:	2001      	movs	r0, #1
 800ea24:	e7cb      	b.n	800e9be <uxr_read_session_header+0x1a>
 800ea26:	bf00      	nop

0800ea28 <uxr_session_header_offset>:
 800ea28:	f990 3000 	ldrsb.w	r3, [r0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	bfac      	ite	ge
 800ea30:	2008      	movge	r0, #8
 800ea32:	2004      	movlt	r0, #4
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop

0800ea38 <uxr_init_base_object_request>:
 800ea38:	b510      	push	{r4, lr}
 800ea3a:	88c3      	ldrh	r3, [r0, #6]
 800ea3c:	b082      	sub	sp, #8
 800ea3e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ea42:	9101      	str	r1, [sp, #4]
 800ea44:	f1a3 010a 	sub.w	r1, r3, #10
 800ea48:	b289      	uxth	r1, r1
 800ea4a:	42a1      	cmp	r1, r4
 800ea4c:	d80e      	bhi.n	800ea6c <uxr_init_base_object_request+0x34>
 800ea4e:	3301      	adds	r3, #1
 800ea50:	b29c      	uxth	r4, r3
 800ea52:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	80c4      	strh	r4, [r0, #6]
 800ea5a:	9801      	ldr	r0, [sp, #4]
 800ea5c:	7011      	strb	r1, [r2, #0]
 800ea5e:	7053      	strb	r3, [r2, #1]
 800ea60:	1c91      	adds	r1, r2, #2
 800ea62:	f7fe fdf5 	bl	800d650 <uxr_object_id_to_raw>
 800ea66:	4620      	mov	r0, r4
 800ea68:	b002      	add	sp, #8
 800ea6a:	bd10      	pop	{r4, pc}
 800ea6c:	230a      	movs	r3, #10
 800ea6e:	2100      	movs	r1, #0
 800ea70:	461c      	mov	r4, r3
 800ea72:	e7f1      	b.n	800ea58 <uxr_init_base_object_request+0x20>

0800ea74 <uxr_parse_base_object_request>:
 800ea74:	b570      	push	{r4, r5, r6, lr}
 800ea76:	4604      	mov	r4, r0
 800ea78:	3002      	adds	r0, #2
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	4616      	mov	r6, r2
 800ea7e:	f7fe fdd3 	bl	800d628 <uxr_object_id_from_raw>
 800ea82:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ea86:	8028      	strh	r0, [r5, #0]
 800ea88:	806b      	strh	r3, [r5, #2]
 800ea8a:	7822      	ldrb	r2, [r4, #0]
 800ea8c:	7863      	ldrb	r3, [r4, #1]
 800ea8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ea92:	8033      	strh	r3, [r6, #0]
 800ea94:	bd70      	pop	{r4, r5, r6, pc}
 800ea96:	bf00      	nop

0800ea98 <uxr_init_framing_io>:
 800ea98:	2300      	movs	r3, #0
 800ea9a:	7041      	strb	r1, [r0, #1]
 800ea9c:	7003      	strb	r3, [r0, #0]
 800ea9e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop

0800eaa4 <uxr_write_framed_msg>:
 800eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa8:	4617      	mov	r7, r2
 800eaaa:	7842      	ldrb	r2, [r0, #1]
 800eaac:	b083      	sub	sp, #12
 800eaae:	460e      	mov	r6, r1
 800eab0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800eab4:	469a      	mov	sl, r3
 800eab6:	2901      	cmp	r1, #1
 800eab8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800eabc:	4604      	mov	r4, r0
 800eabe:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800eac2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800eac6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800eaca:	f240 8137 	bls.w	800ed3c <uxr_write_framed_msg+0x298>
 800eace:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800ead2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800ead6:	2901      	cmp	r1, #1
 800ead8:	f04f 0202 	mov.w	r2, #2
 800eadc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eae0:	f240 808f 	bls.w	800ec02 <uxr_write_framed_msg+0x15e>
 800eae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eae6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800eaea:	b2dd      	uxtb	r5, r3
 800eaec:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800eaf0:	2203      	movs	r2, #3
 800eaf2:	2901      	cmp	r1, #1
 800eaf4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eaf8:	f240 809a 	bls.w	800ec30 <uxr_write_framed_msg+0x18c>
 800eafc:	18a1      	adds	r1, r4, r2
 800eafe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb00:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800eb04:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800eb08:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800eb0c:	3201      	adds	r2, #1
 800eb0e:	2801      	cmp	r0, #1
 800eb10:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eb14:	f240 80a0 	bls.w	800ec58 <uxr_write_framed_msg+0x1b4>
 800eb18:	18a0      	adds	r0, r4, r2
 800eb1a:	3201      	adds	r2, #1
 800eb1c:	b2d2      	uxtb	r2, r2
 800eb1e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800eb22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f000 80a9 	beq.w	800ec7e <uxr_write_framed_msg+0x1da>
 800eb2c:	f04f 0900 	mov.w	r9, #0
 800eb30:	46c8      	mov	r8, r9
 800eb32:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800eb36:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800eb3a:	2901      	cmp	r1, #1
 800eb3c:	f240 80c3 	bls.w	800ecc6 <uxr_write_framed_msg+0x222>
 800eb40:	2a29      	cmp	r2, #41	@ 0x29
 800eb42:	f200 809f 	bhi.w	800ec84 <uxr_write_framed_msg+0x1e0>
 800eb46:	18a1      	adds	r1, r4, r2
 800eb48:	3201      	adds	r2, #1
 800eb4a:	b2d2      	uxtb	r2, r2
 800eb4c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800eb50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eb54:	ea89 0303 	eor.w	r3, r9, r3
 800eb58:	498c      	ldr	r1, [pc, #560]	@ (800ed8c <uxr_write_framed_msg+0x2e8>)
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	f108 0801 	add.w	r8, r8, #1
 800eb60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eb64:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800eb68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb6a:	4543      	cmp	r3, r8
 800eb6c:	d8e1      	bhi.n	800eb32 <uxr_write_framed_msg+0x8e>
 800eb6e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800eb72:	fa5f f889 	uxtb.w	r8, r9
 800eb76:	9301      	str	r3, [sp, #4]
 800eb78:	f04f 0900 	mov.w	r9, #0
 800eb7c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800eb80:	fa5f f18a 	uxtb.w	r1, sl
 800eb84:	2901      	cmp	r1, #1
 800eb86:	d921      	bls.n	800ebcc <uxr_write_framed_msg+0x128>
 800eb88:	2a29      	cmp	r2, #41	@ 0x29
 800eb8a:	f240 80af 	bls.w	800ecec <uxr_write_framed_msg+0x248>
 800eb8e:	2500      	movs	r5, #0
 800eb90:	e000      	b.n	800eb94 <uxr_write_framed_msg+0xf0>
 800eb92:	b160      	cbz	r0, 800ebae <uxr_write_framed_msg+0x10a>
 800eb94:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800eb98:	1b52      	subs	r2, r2, r5
 800eb9a:	465b      	mov	r3, fp
 800eb9c:	4421      	add	r1, r4
 800eb9e:	4638      	mov	r0, r7
 800eba0:	47b0      	blx	r6
 800eba2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800eba6:	4405      	add	r5, r0
 800eba8:	4295      	cmp	r5, r2
 800ebaa:	d3f2      	bcc.n	800eb92 <uxr_write_framed_msg+0xee>
 800ebac:	d003      	beq.n	800ebb6 <uxr_write_framed_msg+0x112>
 800ebae:	2000      	movs	r0, #0
 800ebb0:	b003      	add	sp, #12
 800ebb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb6:	fa5f f18a 	uxtb.w	r1, sl
 800ebba:	f04f 0300 	mov.w	r3, #0
 800ebbe:	2901      	cmp	r1, #1
 800ebc0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ebc4:	f04f 0200 	mov.w	r2, #0
 800ebc8:	f200 8090 	bhi.w	800ecec <uxr_write_framed_msg+0x248>
 800ebcc:	1c51      	adds	r1, r2, #1
 800ebce:	b2c9      	uxtb	r1, r1
 800ebd0:	2929      	cmp	r1, #41	@ 0x29
 800ebd2:	d8dc      	bhi.n	800eb8e <uxr_write_framed_msg+0xea>
 800ebd4:	18a5      	adds	r5, r4, r2
 800ebd6:	4421      	add	r1, r4
 800ebd8:	3202      	adds	r2, #2
 800ebda:	f088 0820 	eor.w	r8, r8, #32
 800ebde:	4648      	mov	r0, r9
 800ebe0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800ebe4:	b2d2      	uxtb	r2, r2
 800ebe6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800ebea:	f04f 0901 	mov.w	r9, #1
 800ebee:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800ebf2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f040 8085 	bne.w	800ed06 <uxr_write_framed_msg+0x262>
 800ebfc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ec00:	e7bc      	b.n	800eb7c <uxr_write_framed_msg+0xd8>
 800ec02:	4611      	mov	r1, r2
 800ec04:	f04f 0c03 	mov.w	ip, #3
 800ec08:	2204      	movs	r2, #4
 800ec0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec0c:	4421      	add	r1, r4
 800ec0e:	b2dd      	uxtb	r5, r3
 800ec10:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800ec14:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800ec18:	44a4      	add	ip, r4
 800ec1a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ec1e:	f080 0020 	eor.w	r0, r0, #32
 800ec22:	2901      	cmp	r1, #1
 800ec24:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800ec28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ec2c:	f63f af66 	bhi.w	800eafc <uxr_write_framed_msg+0x58>
 800ec30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec32:	18a0      	adds	r0, r4, r2
 800ec34:	f085 0520 	eor.w	r5, r5, #32
 800ec38:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ec3c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ec40:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800ec44:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800ec48:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ec4c:	3202      	adds	r2, #2
 800ec4e:	2801      	cmp	r0, #1
 800ec50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ec54:	f63f af60 	bhi.w	800eb18 <uxr_write_framed_msg+0x74>
 800ec58:	1c50      	adds	r0, r2, #1
 800ec5a:	18a5      	adds	r5, r4, r2
 800ec5c:	fa54 f080 	uxtab	r0, r4, r0
 800ec60:	3202      	adds	r2, #2
 800ec62:	f081 0120 	eor.w	r1, r1, #32
 800ec66:	b2d2      	uxtb	r2, r2
 800ec68:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ec6c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800ec70:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ec74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f47f af57 	bne.w	800eb2c <uxr_write_framed_msg+0x88>
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	4698      	mov	r8, r3
 800ec82:	e779      	b.n	800eb78 <uxr_write_framed_msg+0xd4>
 800ec84:	2500      	movs	r5, #0
 800ec86:	e001      	b.n	800ec8c <uxr_write_framed_msg+0x1e8>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d090      	beq.n	800ebae <uxr_write_framed_msg+0x10a>
 800ec8c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ec90:	1b52      	subs	r2, r2, r5
 800ec92:	465b      	mov	r3, fp
 800ec94:	4421      	add	r1, r4
 800ec96:	4638      	mov	r0, r7
 800ec98:	47b0      	blx	r6
 800ec9a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ec9e:	4405      	add	r5, r0
 800eca0:	4295      	cmp	r5, r2
 800eca2:	d3f1      	bcc.n	800ec88 <uxr_write_framed_msg+0x1e4>
 800eca4:	d183      	bne.n	800ebae <uxr_write_framed_msg+0x10a>
 800eca6:	f04f 0300 	mov.w	r3, #0
 800ecaa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ecae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecb0:	4543      	cmp	r3, r8
 800ecb2:	d964      	bls.n	800ed7e <uxr_write_framed_msg+0x2da>
 800ecb4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800ecb8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ecbc:	2901      	cmp	r1, #1
 800ecbe:	f04f 0200 	mov.w	r2, #0
 800ecc2:	f63f af3d 	bhi.w	800eb40 <uxr_write_framed_msg+0x9c>
 800ecc6:	1c51      	adds	r1, r2, #1
 800ecc8:	b2c9      	uxtb	r1, r1
 800ecca:	2929      	cmp	r1, #41	@ 0x29
 800eccc:	d8da      	bhi.n	800ec84 <uxr_write_framed_msg+0x1e0>
 800ecce:	18a0      	adds	r0, r4, r2
 800ecd0:	4421      	add	r1, r4
 800ecd2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800ecd6:	3202      	adds	r2, #2
 800ecd8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800ecdc:	b2d2      	uxtb	r2, r2
 800ecde:	f083 0020 	eor.w	r0, r3, #32
 800ece2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800ece6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ecea:	e733      	b.n	800eb54 <uxr_write_framed_msg+0xb0>
 800ecec:	18a1      	adds	r1, r4, r2
 800ecee:	3201      	adds	r2, #1
 800ecf0:	4648      	mov	r0, r9
 800ecf2:	b2d2      	uxtb	r2, r2
 800ecf4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800ecf8:	f04f 0901 	mov.w	r9, #1
 800ecfc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ed00:	2800      	cmp	r0, #0
 800ed02:	f43f af7b 	beq.w	800ebfc <uxr_write_framed_msg+0x158>
 800ed06:	2500      	movs	r5, #0
 800ed08:	e002      	b.n	800ed10 <uxr_write_framed_msg+0x26c>
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	f43f af4f 	beq.w	800ebae <uxr_write_framed_msg+0x10a>
 800ed10:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ed14:	1b52      	subs	r2, r2, r5
 800ed16:	465b      	mov	r3, fp
 800ed18:	4421      	add	r1, r4
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	47b0      	blx	r6
 800ed1e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ed22:	4405      	add	r5, r0
 800ed24:	4295      	cmp	r5, r2
 800ed26:	d3f0      	bcc.n	800ed0a <uxr_write_framed_msg+0x266>
 800ed28:	f47f af41 	bne.w	800ebae <uxr_write_framed_msg+0x10a>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ed32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed34:	b298      	uxth	r0, r3
 800ed36:	b003      	add	sp, #12
 800ed38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3c:	217d      	movs	r1, #125	@ 0x7d
 800ed3e:	f082 0220 	eor.w	r2, r2, #32
 800ed42:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800ed46:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800ed4a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800ed4e:	2901      	cmp	r1, #1
 800ed50:	f04f 0203 	mov.w	r2, #3
 800ed54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ed58:	d804      	bhi.n	800ed64 <uxr_write_framed_msg+0x2c0>
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	f04f 0c04 	mov.w	ip, #4
 800ed60:	2205      	movs	r2, #5
 800ed62:	e752      	b.n	800ec0a <uxr_write_framed_msg+0x166>
 800ed64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed66:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800ed6a:	b2dd      	uxtb	r5, r3
 800ed6c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ed70:	2204      	movs	r2, #4
 800ed72:	2901      	cmp	r1, #1
 800ed74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ed78:	f63f aec0 	bhi.w	800eafc <uxr_write_framed_msg+0x58>
 800ed7c:	e758      	b.n	800ec30 <uxr_write_framed_msg+0x18c>
 800ed7e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800ed82:	fa5f f889 	uxtb.w	r8, r9
 800ed86:	9301      	str	r3, [sp, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	e6f5      	b.n	800eb78 <uxr_write_framed_msg+0xd4>
 800ed8c:	080167dc 	.word	0x080167dc

0800ed90 <uxr_framing_read_transport>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	4604      	mov	r4, r0
 800ed96:	b083      	sub	sp, #12
 800ed98:	461f      	mov	r7, r3
 800ed9a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800ed9e:	4689      	mov	r9, r1
 800eda0:	4692      	mov	sl, r2
 800eda2:	f000 fc89 	bl	800f6b8 <uxr_millis>
 800eda6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800edaa:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800edae:	42b3      	cmp	r3, r6
 800edb0:	4680      	mov	r8, r0
 800edb2:	d061      	beq.n	800ee78 <uxr_framing_read_transport+0xe8>
 800edb4:	d81c      	bhi.n	800edf0 <uxr_framing_read_transport+0x60>
 800edb6:	1e75      	subs	r5, r6, #1
 800edb8:	1aed      	subs	r5, r5, r3
 800edba:	b2ed      	uxtb	r5, r5
 800edbc:	2600      	movs	r6, #0
 800edbe:	455d      	cmp	r5, fp
 800edc0:	d81f      	bhi.n	800ee02 <uxr_framing_read_transport+0x72>
 800edc2:	19ab      	adds	r3, r5, r6
 800edc4:	455b      	cmp	r3, fp
 800edc6:	bf84      	itt	hi
 800edc8:	ebab 0605 	subhi.w	r6, fp, r5
 800edcc:	b2f6      	uxtbhi	r6, r6
 800edce:	b9ed      	cbnz	r5, 800ee0c <uxr_framing_read_transport+0x7c>
 800edd0:	f04f 0b00 	mov.w	fp, #0
 800edd4:	f000 fc70 	bl	800f6b8 <uxr_millis>
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	eba0 0808 	sub.w	r8, r0, r8
 800edde:	eba3 0308 	sub.w	r3, r3, r8
 800ede2:	4658      	mov	r0, fp
 800ede4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ede8:	603b      	str	r3, [r7, #0]
 800edea:	b003      	add	sp, #12
 800edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf0:	2e00      	cmp	r6, #0
 800edf2:	d049      	beq.n	800ee88 <uxr_framing_read_transport+0xf8>
 800edf4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800edf8:	b2ed      	uxtb	r5, r5
 800edfa:	3e01      	subs	r6, #1
 800edfc:	455d      	cmp	r5, fp
 800edfe:	b2f6      	uxtb	r6, r6
 800ee00:	d9df      	bls.n	800edc2 <uxr_framing_read_transport+0x32>
 800ee02:	fa5f f58b 	uxtb.w	r5, fp
 800ee06:	2600      	movs	r6, #0
 800ee08:	2d00      	cmp	r5, #0
 800ee0a:	d0e1      	beq.n	800edd0 <uxr_framing_read_transport+0x40>
 800ee0c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ee10:	3102      	adds	r1, #2
 800ee12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee14:	9300      	str	r3, [sp, #0]
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	4421      	add	r1, r4
 800ee1a:	462a      	mov	r2, r5
 800ee1c:	4650      	mov	r0, sl
 800ee1e:	47c8      	blx	r9
 800ee20:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ee24:	4a1a      	ldr	r2, [pc, #104]	@ (800ee90 <uxr_framing_read_transport+0x100>)
 800ee26:	4403      	add	r3, r0
 800ee28:	0859      	lsrs	r1, r3, #1
 800ee2a:	fba2 2101 	umull	r2, r1, r2, r1
 800ee2e:	0889      	lsrs	r1, r1, #2
 800ee30:	222a      	movs	r2, #42	@ 0x2a
 800ee32:	fb02 3111 	mls	r1, r2, r1, r3
 800ee36:	4683      	mov	fp, r0
 800ee38:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d0c7      	beq.n	800edd0 <uxr_framing_read_transport+0x40>
 800ee40:	42a8      	cmp	r0, r5
 800ee42:	d1c7      	bne.n	800edd4 <uxr_framing_read_transport+0x44>
 800ee44:	2e00      	cmp	r6, #0
 800ee46:	d0c5      	beq.n	800edd4 <uxr_framing_read_transport+0x44>
 800ee48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	3102      	adds	r1, #2
 800ee4e:	4632      	mov	r2, r6
 800ee50:	4421      	add	r1, r4
 800ee52:	2300      	movs	r3, #0
 800ee54:	4650      	mov	r0, sl
 800ee56:	47c8      	blx	r9
 800ee58:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ee5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ee90 <uxr_framing_read_transport+0x100>)
 800ee5e:	180b      	adds	r3, r1, r0
 800ee60:	0859      	lsrs	r1, r3, #1
 800ee62:	fba2 1201 	umull	r1, r2, r2, r1
 800ee66:	0892      	lsrs	r2, r2, #2
 800ee68:	212a      	movs	r1, #42	@ 0x2a
 800ee6a:	fb01 3312 	mls	r3, r1, r2, r3
 800ee6e:	eb00 0b05 	add.w	fp, r0, r5
 800ee72:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800ee76:	e7ad      	b.n	800edd4 <uxr_framing_read_transport+0x44>
 800ee78:	2600      	movs	r6, #0
 800ee7a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800ee7e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800ee80:	d9bf      	bls.n	800ee02 <uxr_framing_read_transport+0x72>
 800ee82:	2102      	movs	r1, #2
 800ee84:	2529      	movs	r5, #41	@ 0x29
 800ee86:	e7c4      	b.n	800ee12 <uxr_framing_read_transport+0x82>
 800ee88:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800ee8c:	b2ed      	uxtb	r5, r5
 800ee8e:	e796      	b.n	800edbe <uxr_framing_read_transport+0x2e>
 800ee90:	30c30c31 	.word	0x30c30c31

0800ee94 <uxr_read_framed_msg>:
 800ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	461e      	mov	r6, r3
 800ee9a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800ee9e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800eea2:	429d      	cmp	r5, r3
 800eea4:	b083      	sub	sp, #12
 800eea6:	4604      	mov	r4, r0
 800eea8:	4688      	mov	r8, r1
 800eeaa:	4691      	mov	r9, r2
 800eeac:	f000 8188 	beq.w	800f1c0 <uxr_read_framed_msg+0x32c>
 800eeb0:	7823      	ldrb	r3, [r4, #0]
 800eeb2:	4dc1      	ldr	r5, [pc, #772]	@ (800f1b8 <uxr_read_framed_msg+0x324>)
 800eeb4:	4fc1      	ldr	r7, [pc, #772]	@ (800f1bc <uxr_read_framed_msg+0x328>)
 800eeb6:	2b07      	cmp	r3, #7
 800eeb8:	d8fd      	bhi.n	800eeb6 <uxr_read_framed_msg+0x22>
 800eeba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800eebe:	0115      	.short	0x0115
 800eec0:	00d600f6 	.word	0x00d600f6
 800eec4:	009000b9 	.word	0x009000b9
 800eec8:	0030004d 	.word	0x0030004d
 800eecc:	0008      	.short	0x0008
 800eece:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800eed2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800eed6:	4299      	cmp	r1, r3
 800eed8:	f000 814a 	beq.w	800f170 <uxr_read_framed_msg+0x2dc>
 800eedc:	18e2      	adds	r2, r4, r3
 800eede:	7892      	ldrb	r2, [r2, #2]
 800eee0:	2a7d      	cmp	r2, #125	@ 0x7d
 800eee2:	f000 8199 	beq.w	800f218 <uxr_read_framed_msg+0x384>
 800eee6:	3301      	adds	r3, #1
 800eee8:	0858      	lsrs	r0, r3, #1
 800eeea:	fba5 1000 	umull	r1, r0, r5, r0
 800eeee:	0880      	lsrs	r0, r0, #2
 800eef0:	212a      	movs	r1, #42	@ 0x2a
 800eef2:	fb01 3310 	mls	r3, r1, r0, r3
 800eef6:	2a7e      	cmp	r2, #126	@ 0x7e
 800eef8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800eefc:	f000 8252 	beq.w	800f3a4 <uxr_read_framed_msg+0x510>
 800ef00:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800ef02:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800ef04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4299      	cmp	r1, r3
 800ef0e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ef10:	7022      	strb	r2, [r4, #0]
 800ef12:	f000 8179 	beq.w	800f208 <uxr_read_framed_msg+0x374>
 800ef16:	2000      	movs	r0, #0
 800ef18:	b003      	add	sp, #12
 800ef1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ef22:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ef26:	4299      	cmp	r1, r3
 800ef28:	f000 8131 	beq.w	800f18e <uxr_read_framed_msg+0x2fa>
 800ef2c:	18e2      	adds	r2, r4, r3
 800ef2e:	7890      	ldrb	r0, [r2, #2]
 800ef30:	287d      	cmp	r0, #125	@ 0x7d
 800ef32:	f000 8190 	beq.w	800f256 <uxr_read_framed_msg+0x3c2>
 800ef36:	3301      	adds	r3, #1
 800ef38:	085a      	lsrs	r2, r3, #1
 800ef3a:	fba5 1202 	umull	r1, r2, r5, r2
 800ef3e:	0892      	lsrs	r2, r2, #2
 800ef40:	212a      	movs	r1, #42	@ 0x2a
 800ef42:	fb01 3312 	mls	r3, r1, r2, r3
 800ef46:	287e      	cmp	r0, #126	@ 0x7e
 800ef48:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ef4c:	f000 821a 	beq.w	800f384 <uxr_read_framed_msg+0x4f0>
 800ef50:	2307      	movs	r3, #7
 800ef52:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800ef54:	7023      	strb	r3, [r4, #0]
 800ef56:	e7ae      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800ef58:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ef5a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800ef5e:	459e      	cmp	lr, r3
 800ef60:	d938      	bls.n	800efd4 <uxr_read_framed_msg+0x140>
 800ef62:	ee07 8a90 	vmov	s15, r8
 800ef66:	212a      	movs	r1, #42	@ 0x2a
 800ef68:	e020      	b.n	800efac <uxr_read_framed_msg+0x118>
 800ef6a:	f89b c002 	ldrb.w	ip, [fp, #2]
 800ef6e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800ef72:	f000 80d4 	beq.w	800f11e <uxr_read_framed_msg+0x28a>
 800ef76:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800ef7a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ef7e:	f000 8219 	beq.w	800f3b4 <uxr_read_framed_msg+0x520>
 800ef82:	f806 c003 	strb.w	ip, [r6, r3]
 800ef86:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800ef8a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ef8c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800ef90:	ea8a 000c 	eor.w	r0, sl, ip
 800ef94:	b2c0      	uxtb	r0, r0
 800ef96:	3301      	adds	r3, #1
 800ef98:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800efa2:	4573      	cmp	r3, lr
 800efa4:	8663      	strh	r3, [r4, #50]	@ 0x32
 800efa6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800efa8:	f080 8120 	bcs.w	800f1ec <uxr_read_framed_msg+0x358>
 800efac:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800efb0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800efb4:	f100 0c01 	add.w	ip, r0, #1
 800efb8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800efbc:	fba5 8202 	umull	r8, r2, r5, r2
 800efc0:	0892      	lsrs	r2, r2, #2
 800efc2:	4582      	cmp	sl, r0
 800efc4:	eb04 0b00 	add.w	fp, r4, r0
 800efc8:	fb01 c212 	mls	r2, r1, r2, ip
 800efcc:	d1cd      	bne.n	800ef6a <uxr_read_framed_msg+0xd6>
 800efce:	ee17 8a90 	vmov	r8, s15
 800efd2:	459e      	cmp	lr, r3
 800efd4:	f040 8111 	bne.w	800f1fa <uxr_read_framed_msg+0x366>
 800efd8:	2306      	movs	r3, #6
 800efda:	7023      	strb	r3, [r4, #0]
 800efdc:	e76b      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800efde:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800efe2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800efe6:	4298      	cmp	r0, r3
 800efe8:	f000 80c2 	beq.w	800f170 <uxr_read_framed_msg+0x2dc>
 800efec:	18e2      	adds	r2, r4, r3
 800efee:	7891      	ldrb	r1, [r2, #2]
 800eff0:	297d      	cmp	r1, #125	@ 0x7d
 800eff2:	f000 814c 	beq.w	800f28e <uxr_read_framed_msg+0x3fa>
 800eff6:	3301      	adds	r3, #1
 800eff8:	085a      	lsrs	r2, r3, #1
 800effa:	fba5 0202 	umull	r0, r2, r5, r2
 800effe:	0892      	lsrs	r2, r2, #2
 800f000:	202a      	movs	r0, #42	@ 0x2a
 800f002:	fb00 3312 	mls	r3, r0, r2, r3
 800f006:	297e      	cmp	r1, #126	@ 0x7e
 800f008:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f00c:	f000 81ca 	beq.w	800f3a4 <uxr_read_framed_msg+0x510>
 800f010:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f012:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f016:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f018:	b29b      	uxth	r3, r3
 800f01a:	2000      	movs	r0, #0
 800f01c:	428b      	cmp	r3, r1
 800f01e:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f020:	8660      	strh	r0, [r4, #50]	@ 0x32
 800f022:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800f024:	f240 80df 	bls.w	800f1e6 <uxr_read_framed_msg+0x352>
 800f028:	7020      	strb	r0, [r4, #0]
 800f02a:	b003      	add	sp, #12
 800f02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f030:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f034:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f038:	4299      	cmp	r1, r3
 800f03a:	f000 80a8 	beq.w	800f18e <uxr_read_framed_msg+0x2fa>
 800f03e:	18e2      	adds	r2, r4, r3
 800f040:	7890      	ldrb	r0, [r2, #2]
 800f042:	287d      	cmp	r0, #125	@ 0x7d
 800f044:	f000 8164 	beq.w	800f310 <uxr_read_framed_msg+0x47c>
 800f048:	3301      	adds	r3, #1
 800f04a:	085a      	lsrs	r2, r3, #1
 800f04c:	fba5 1202 	umull	r1, r2, r5, r2
 800f050:	0892      	lsrs	r2, r2, #2
 800f052:	212a      	movs	r1, #42	@ 0x2a
 800f054:	fb01 3312 	mls	r3, r1, r2, r3
 800f058:	287e      	cmp	r0, #126	@ 0x7e
 800f05a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f05e:	f000 8191 	beq.w	800f384 <uxr_read_framed_msg+0x4f0>
 800f062:	2304      	movs	r3, #4
 800f064:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f066:	7023      	strb	r3, [r4, #0]
 800f068:	e725      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800f06a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f06e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f072:	4290      	cmp	r0, r2
 800f074:	f000 80b3 	beq.w	800f1de <uxr_read_framed_msg+0x34a>
 800f078:	18a3      	adds	r3, r4, r2
 800f07a:	7899      	ldrb	r1, [r3, #2]
 800f07c:	297d      	cmp	r1, #125	@ 0x7d
 800f07e:	f000 8164 	beq.w	800f34a <uxr_read_framed_msg+0x4b6>
 800f082:	3201      	adds	r2, #1
 800f084:	0850      	lsrs	r0, r2, #1
 800f086:	fba5 3000 	umull	r3, r0, r5, r0
 800f08a:	0880      	lsrs	r0, r0, #2
 800f08c:	232a      	movs	r3, #42	@ 0x2a
 800f08e:	fb03 2210 	mls	r2, r3, r0, r2
 800f092:	297e      	cmp	r1, #126	@ 0x7e
 800f094:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f098:	f000 8188 	beq.w	800f3ac <uxr_read_framed_msg+0x518>
 800f09c:	7863      	ldrb	r3, [r4, #1]
 800f09e:	428b      	cmp	r3, r1
 800f0a0:	bf0c      	ite	eq
 800f0a2:	2303      	moveq	r3, #3
 800f0a4:	2300      	movne	r3, #0
 800f0a6:	7023      	strb	r3, [r4, #0]
 800f0a8:	e705      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800f0aa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f0ae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	4299      	cmp	r1, r3
 800f0b6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f0ba:	d06c      	beq.n	800f196 <uxr_read_framed_msg+0x302>
 800f0bc:	18e2      	adds	r2, r4, r3
 800f0be:	7890      	ldrb	r0, [r2, #2]
 800f0c0:	287d      	cmp	r0, #125	@ 0x7d
 800f0c2:	f000 8101 	beq.w	800f2c8 <uxr_read_framed_msg+0x434>
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	085a      	lsrs	r2, r3, #1
 800f0ca:	fba5 1202 	umull	r1, r2, r5, r2
 800f0ce:	0892      	lsrs	r2, r2, #2
 800f0d0:	212a      	movs	r1, #42	@ 0x2a
 800f0d2:	fb01 3312 	mls	r3, r1, r2, r3
 800f0d6:	287e      	cmp	r0, #126	@ 0x7e
 800f0d8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f0dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f0e0:	d059      	beq.n	800f196 <uxr_read_framed_msg+0x302>
 800f0e2:	2302      	movs	r3, #2
 800f0e4:	7023      	strb	r3, [r4, #0]
 800f0e6:	e6e6      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800f0e8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f0ec:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f0f0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800f0f4:	1c51      	adds	r1, r2, #1
 800f0f6:	084b      	lsrs	r3, r1, #1
 800f0f8:	fba5 c303 	umull	ip, r3, r5, r3
 800f0fc:	089b      	lsrs	r3, r3, #2
 800f0fe:	fb0e 1313 	mls	r3, lr, r3, r1
 800f102:	4592      	cmp	sl, r2
 800f104:	eb04 0002 	add.w	r0, r4, r2
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	f43f af04 	beq.w	800ef16 <uxr_read_framed_msg+0x82>
 800f10e:	7883      	ldrb	r3, [r0, #2]
 800f110:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f114:	2b7e      	cmp	r3, #126	@ 0x7e
 800f116:	d1ed      	bne.n	800f0f4 <uxr_read_framed_msg+0x260>
 800f118:	2301      	movs	r3, #1
 800f11a:	7023      	strb	r3, [r4, #0]
 800f11c:	e6cb      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800f11e:	f100 0c01 	add.w	ip, r0, #1
 800f122:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f126:	fba5 8202 	umull	r8, r2, r5, r2
 800f12a:	0892      	lsrs	r2, r2, #2
 800f12c:	fb01 c212 	mls	r2, r1, r2, ip
 800f130:	eb04 0c02 	add.w	ip, r4, r2
 800f134:	b2d2      	uxtb	r2, r2
 800f136:	4592      	cmp	sl, r2
 800f138:	f100 0002 	add.w	r0, r0, #2
 800f13c:	f43f af47 	beq.w	800efce <uxr_read_framed_msg+0x13a>
 800f140:	0842      	lsrs	r2, r0, #1
 800f142:	f89c a002 	ldrb.w	sl, [ip, #2]
 800f146:	fba5 8202 	umull	r8, r2, r5, r2
 800f14a:	0892      	lsrs	r2, r2, #2
 800f14c:	fb01 0012 	mls	r0, r1, r2, r0
 800f150:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800f154:	f08a 0c20 	eor.w	ip, sl, #32
 800f158:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800f15c:	f47f af11 	bne.w	800ef82 <uxr_read_framed_msg+0xee>
 800f160:	459e      	cmp	lr, r3
 800f162:	ee17 8a90 	vmov	r8, s15
 800f166:	f43f af37 	beq.w	800efd8 <uxr_read_framed_msg+0x144>
 800f16a:	2301      	movs	r3, #1
 800f16c:	7023      	strb	r3, [r4, #0]
 800f16e:	e6a2      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800f170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	2301      	movs	r3, #1
 800f176:	9301      	str	r3, [sp, #4]
 800f178:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f17a:	464a      	mov	r2, r9
 800f17c:	4641      	mov	r1, r8
 800f17e:	4620      	mov	r0, r4
 800f180:	f7ff fe06 	bl	800ed90 <uxr_framing_read_transport>
 800f184:	2800      	cmp	r0, #0
 800f186:	f43f aec6 	beq.w	800ef16 <uxr_read_framed_msg+0x82>
 800f18a:	7823      	ldrb	r3, [r4, #0]
 800f18c:	e693      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800f18e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	2302      	movs	r3, #2
 800f194:	e7ef      	b.n	800f176 <uxr_read_framed_msg+0x2e2>
 800f196:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	2304      	movs	r3, #4
 800f19c:	9301      	str	r3, [sp, #4]
 800f19e:	464a      	mov	r2, r9
 800f1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1a2:	4641      	mov	r1, r8
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f7ff fdf3 	bl	800ed90 <uxr_framing_read_transport>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d1ed      	bne.n	800f18a <uxr_read_framed_msg+0x2f6>
 800f1ae:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f1b2:	2b7e      	cmp	r3, #126	@ 0x7e
 800f1b4:	d0e9      	beq.n	800f18a <uxr_read_framed_msg+0x2f6>
 800f1b6:	e6ae      	b.n	800ef16 <uxr_read_framed_msg+0x82>
 800f1b8:	30c30c31 	.word	0x30c30c31
 800f1bc:	080167dc 	.word	0x080167dc
 800f1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	2305      	movs	r3, #5
 800f1c6:	9301      	str	r3, [sp, #4]
 800f1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1ca:	f7ff fde1 	bl	800ed90 <uxr_framing_read_transport>
 800f1ce:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f1d2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	f43f ae9d 	beq.w	800ef16 <uxr_read_framed_msg+0x82>
 800f1dc:	e668      	b.n	800eeb0 <uxr_read_framed_msg+0x1c>
 800f1de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	2303      	movs	r3, #3
 800f1e4:	e7c7      	b.n	800f176 <uxr_read_framed_msg+0x2e2>
 800f1e6:	2305      	movs	r3, #5
 800f1e8:	7023      	strb	r3, [r4, #0]
 800f1ea:	e664      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800f1ec:	ee17 8a90 	vmov	r8, s15
 800f1f0:	f43f aef2 	beq.w	800efd8 <uxr_read_framed_msg+0x144>
 800f1f4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f1f8:	d08e      	beq.n	800f118 <uxr_read_framed_msg+0x284>
 800f1fa:	ebae 0303 	sub.w	r3, lr, r3
 800f1fe:	3302      	adds	r3, #2
 800f200:	9301      	str	r3, [sp, #4]
 800f202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f204:	9300      	str	r3, [sp, #0]
 800f206:	e7b7      	b.n	800f178 <uxr_read_framed_msg+0x2e4>
 800f208:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f20a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f20e:	7013      	strb	r3, [r2, #0]
 800f210:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f212:	b003      	add	sp, #12
 800f214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f218:	f103 0c01 	add.w	ip, r3, #1
 800f21c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f220:	fba5 0202 	umull	r0, r2, r5, r2
 800f224:	0892      	lsrs	r2, r2, #2
 800f226:	202a      	movs	r0, #42	@ 0x2a
 800f228:	fb00 c212 	mls	r2, r0, r2, ip
 800f22c:	fa5f fc82 	uxtb.w	ip, r2
 800f230:	4561      	cmp	r1, ip
 800f232:	d09d      	beq.n	800f170 <uxr_read_framed_msg+0x2dc>
 800f234:	3302      	adds	r3, #2
 800f236:	4422      	add	r2, r4
 800f238:	0859      	lsrs	r1, r3, #1
 800f23a:	7892      	ldrb	r2, [r2, #2]
 800f23c:	fba5 c101 	umull	ip, r1, r5, r1
 800f240:	0889      	lsrs	r1, r1, #2
 800f242:	fb00 3311 	mls	r3, r0, r1, r3
 800f246:	2a7e      	cmp	r2, #126	@ 0x7e
 800f248:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f24c:	f000 80aa 	beq.w	800f3a4 <uxr_read_framed_msg+0x510>
 800f250:	f082 0220 	eor.w	r2, r2, #32
 800f254:	e654      	b.n	800ef00 <uxr_read_framed_msg+0x6c>
 800f256:	1c58      	adds	r0, r3, #1
 800f258:	0842      	lsrs	r2, r0, #1
 800f25a:	fba5 c202 	umull	ip, r2, r5, r2
 800f25e:	0892      	lsrs	r2, r2, #2
 800f260:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f264:	fb0c 0212 	mls	r2, ip, r2, r0
 800f268:	b2d0      	uxtb	r0, r2
 800f26a:	4281      	cmp	r1, r0
 800f26c:	d08f      	beq.n	800f18e <uxr_read_framed_msg+0x2fa>
 800f26e:	4422      	add	r2, r4
 800f270:	3302      	adds	r3, #2
 800f272:	7890      	ldrb	r0, [r2, #2]
 800f274:	085a      	lsrs	r2, r3, #1
 800f276:	fba5 1202 	umull	r1, r2, r5, r2
 800f27a:	0892      	lsrs	r2, r2, #2
 800f27c:	fb0c 3312 	mls	r3, ip, r2, r3
 800f280:	287e      	cmp	r0, #126	@ 0x7e
 800f282:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f286:	d07d      	beq.n	800f384 <uxr_read_framed_msg+0x4f0>
 800f288:	f080 0020 	eor.w	r0, r0, #32
 800f28c:	e660      	b.n	800ef50 <uxr_read_framed_msg+0xbc>
 800f28e:	1c59      	adds	r1, r3, #1
 800f290:	084a      	lsrs	r2, r1, #1
 800f292:	fba5 c202 	umull	ip, r2, r5, r2
 800f296:	0892      	lsrs	r2, r2, #2
 800f298:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f29c:	fb0c 1212 	mls	r2, ip, r2, r1
 800f2a0:	b2d1      	uxtb	r1, r2
 800f2a2:	4288      	cmp	r0, r1
 800f2a4:	f43f af64 	beq.w	800f170 <uxr_read_framed_msg+0x2dc>
 800f2a8:	4422      	add	r2, r4
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	7891      	ldrb	r1, [r2, #2]
 800f2ae:	085a      	lsrs	r2, r3, #1
 800f2b0:	fba5 0202 	umull	r0, r2, r5, r2
 800f2b4:	0892      	lsrs	r2, r2, #2
 800f2b6:	fb0c 3312 	mls	r3, ip, r2, r3
 800f2ba:	297e      	cmp	r1, #126	@ 0x7e
 800f2bc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f2c0:	d070      	beq.n	800f3a4 <uxr_read_framed_msg+0x510>
 800f2c2:	f081 0120 	eor.w	r1, r1, #32
 800f2c6:	e6a3      	b.n	800f010 <uxr_read_framed_msg+0x17c>
 800f2c8:	f103 0c01 	add.w	ip, r3, #1
 800f2cc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f2d0:	fba5 0202 	umull	r0, r2, r5, r2
 800f2d4:	0892      	lsrs	r2, r2, #2
 800f2d6:	202a      	movs	r0, #42	@ 0x2a
 800f2d8:	fb00 c212 	mls	r2, r0, r2, ip
 800f2dc:	fa5f fc82 	uxtb.w	ip, r2
 800f2e0:	4561      	cmp	r1, ip
 800f2e2:	f43f af58 	beq.w	800f196 <uxr_read_framed_msg+0x302>
 800f2e6:	4422      	add	r2, r4
 800f2e8:	3302      	adds	r3, #2
 800f2ea:	7891      	ldrb	r1, [r2, #2]
 800f2ec:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f2f0:	085a      	lsrs	r2, r3, #1
 800f2f2:	fba5 c202 	umull	ip, r2, r5, r2
 800f2f6:	0892      	lsrs	r2, r2, #2
 800f2f8:	fb00 3312 	mls	r3, r0, r2, r3
 800f2fc:	297e      	cmp	r1, #126	@ 0x7e
 800f2fe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f302:	f43f af48 	beq.w	800f196 <uxr_read_framed_msg+0x302>
 800f306:	f081 0120 	eor.w	r1, r1, #32
 800f30a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f30e:	e6e8      	b.n	800f0e2 <uxr_read_framed_msg+0x24e>
 800f310:	1c58      	adds	r0, r3, #1
 800f312:	0842      	lsrs	r2, r0, #1
 800f314:	fba5 c202 	umull	ip, r2, r5, r2
 800f318:	0892      	lsrs	r2, r2, #2
 800f31a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f31e:	fb0c 0212 	mls	r2, ip, r2, r0
 800f322:	b2d0      	uxtb	r0, r2
 800f324:	4281      	cmp	r1, r0
 800f326:	f43f af32 	beq.w	800f18e <uxr_read_framed_msg+0x2fa>
 800f32a:	4422      	add	r2, r4
 800f32c:	3302      	adds	r3, #2
 800f32e:	7890      	ldrb	r0, [r2, #2]
 800f330:	085a      	lsrs	r2, r3, #1
 800f332:	fba5 1202 	umull	r1, r2, r5, r2
 800f336:	0892      	lsrs	r2, r2, #2
 800f338:	fb0c 3312 	mls	r3, ip, r2, r3
 800f33c:	287e      	cmp	r0, #126	@ 0x7e
 800f33e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f342:	d01f      	beq.n	800f384 <uxr_read_framed_msg+0x4f0>
 800f344:	f080 0020 	eor.w	r0, r0, #32
 800f348:	e68b      	b.n	800f062 <uxr_read_framed_msg+0x1ce>
 800f34a:	1c51      	adds	r1, r2, #1
 800f34c:	084b      	lsrs	r3, r1, #1
 800f34e:	fba5 c303 	umull	ip, r3, r5, r3
 800f352:	089b      	lsrs	r3, r3, #2
 800f354:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f358:	fb0c 1313 	mls	r3, ip, r3, r1
 800f35c:	b2d9      	uxtb	r1, r3
 800f35e:	4288      	cmp	r0, r1
 800f360:	f43f af3d 	beq.w	800f1de <uxr_read_framed_msg+0x34a>
 800f364:	3202      	adds	r2, #2
 800f366:	4423      	add	r3, r4
 800f368:	0850      	lsrs	r0, r2, #1
 800f36a:	789b      	ldrb	r3, [r3, #2]
 800f36c:	fba5 1000 	umull	r1, r0, r5, r0
 800f370:	0880      	lsrs	r0, r0, #2
 800f372:	fb0c 2210 	mls	r2, ip, r0, r2
 800f376:	2b7e      	cmp	r3, #126	@ 0x7e
 800f378:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f37c:	d016      	beq.n	800f3ac <uxr_read_framed_msg+0x518>
 800f37e:	f083 0120 	eor.w	r1, r3, #32
 800f382:	e68b      	b.n	800f09c <uxr_read_framed_msg+0x208>
 800f384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	2302      	movs	r3, #2
 800f38a:	9301      	str	r3, [sp, #4]
 800f38c:	464a      	mov	r2, r9
 800f38e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f390:	4641      	mov	r1, r8
 800f392:	4620      	mov	r0, r4
 800f394:	f7ff fcfc 	bl	800ed90 <uxr_framing_read_transport>
 800f398:	2800      	cmp	r0, #0
 800f39a:	f47f aef6 	bne.w	800f18a <uxr_read_framed_msg+0x2f6>
 800f39e:	2301      	movs	r3, #1
 800f3a0:	7023      	strb	r3, [r4, #0]
 800f3a2:	e588      	b.n	800eeb6 <uxr_read_framed_msg+0x22>
 800f3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	e7ee      	b.n	800f38a <uxr_read_framed_msg+0x4f6>
 800f3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	2303      	movs	r3, #3
 800f3b2:	e7ea      	b.n	800f38a <uxr_read_framed_msg+0x4f6>
 800f3b4:	ee17 8a90 	vmov	r8, s15
 800f3b8:	e6ae      	b.n	800f118 <uxr_read_framed_msg+0x284>
 800f3ba:	bf00      	nop

0800f3bc <uxr_stream_id>:
 800f3bc:	2901      	cmp	r1, #1
 800f3be:	b082      	sub	sp, #8
 800f3c0:	d01d      	beq.n	800f3fe <uxr_stream_id+0x42>
 800f3c2:	2902      	cmp	r1, #2
 800f3c4:	f04f 0c00 	mov.w	ip, #0
 800f3c8:	d01e      	beq.n	800f408 <uxr_stream_id+0x4c>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	f36c 0307 	bfi	r3, ip, #0, #8
 800f3d0:	f360 230f 	bfi	r3, r0, #8, #8
 800f3d4:	f361 4317 	bfi	r3, r1, #16, #8
 800f3d8:	f362 631f 	bfi	r3, r2, #24, #8
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	2000      	movs	r0, #0
 800f3e0:	f362 0007 	bfi	r0, r2, #0, #8
 800f3e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f3e8:	f362 200f 	bfi	r0, r2, #8, #8
 800f3ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f3f0:	f362 4017 	bfi	r0, r2, #16, #8
 800f3f4:	0e1b      	lsrs	r3, r3, #24
 800f3f6:	f363 601f 	bfi	r0, r3, #24, #8
 800f3fa:	b002      	add	sp, #8
 800f3fc:	4770      	bx	lr
 800f3fe:	f100 0c01 	add.w	ip, r0, #1
 800f402:	fa5f fc8c 	uxtb.w	ip, ip
 800f406:	e7e0      	b.n	800f3ca <uxr_stream_id+0xe>
 800f408:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800f40c:	e7dd      	b.n	800f3ca <uxr_stream_id+0xe>
 800f40e:	bf00      	nop

0800f410 <uxr_stream_id_from_raw>:
 800f410:	b082      	sub	sp, #8
 800f412:	b130      	cbz	r0, 800f422 <uxr_stream_id_from_raw+0x12>
 800f414:	0603      	lsls	r3, r0, #24
 800f416:	d420      	bmi.n	800f45a <uxr_stream_id_from_raw+0x4a>
 800f418:	1e42      	subs	r2, r0, #1
 800f41a:	b2d2      	uxtb	r2, r2
 800f41c:	f04f 0c01 	mov.w	ip, #1
 800f420:	e001      	b.n	800f426 <uxr_stream_id_from_raw+0x16>
 800f422:	4684      	mov	ip, r0
 800f424:	4602      	mov	r2, r0
 800f426:	2300      	movs	r3, #0
 800f428:	f360 0307 	bfi	r3, r0, #0, #8
 800f42c:	f362 230f 	bfi	r3, r2, #8, #8
 800f430:	f36c 4317 	bfi	r3, ip, #16, #8
 800f434:	f361 631f 	bfi	r3, r1, #24, #8
 800f438:	b2da      	uxtb	r2, r3
 800f43a:	2000      	movs	r0, #0
 800f43c:	f362 0007 	bfi	r0, r2, #0, #8
 800f440:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f444:	f362 200f 	bfi	r0, r2, #8, #8
 800f448:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f44c:	f362 4017 	bfi	r0, r2, #16, #8
 800f450:	0e1b      	lsrs	r3, r3, #24
 800f452:	f363 601f 	bfi	r0, r3, #24, #8
 800f456:	b002      	add	sp, #8
 800f458:	4770      	bx	lr
 800f45a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800f45e:	f04f 0c02 	mov.w	ip, #2
 800f462:	e7e0      	b.n	800f426 <uxr_stream_id_from_raw+0x16>

0800f464 <uxr_init_stream_storage>:
 800f464:	2300      	movs	r3, #0
 800f466:	7403      	strb	r3, [r0, #16]
 800f468:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800f46c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800f470:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f474:	4770      	bx	lr
 800f476:	bf00      	nop

0800f478 <uxr_reset_stream_storage>:
 800f478:	b570      	push	{r4, r5, r6, lr}
 800f47a:	7c03      	ldrb	r3, [r0, #16]
 800f47c:	4604      	mov	r4, r0
 800f47e:	b153      	cbz	r3, 800f496 <uxr_reset_stream_storage+0x1e>
 800f480:	4606      	mov	r6, r0
 800f482:	2500      	movs	r5, #0
 800f484:	4630      	mov	r0, r6
 800f486:	f004 fc9b 	bl	8013dc0 <uxr_reset_output_best_effort_stream>
 800f48a:	7c23      	ldrb	r3, [r4, #16]
 800f48c:	3501      	adds	r5, #1
 800f48e:	42ab      	cmp	r3, r5
 800f490:	f106 0610 	add.w	r6, r6, #16
 800f494:	d8f6      	bhi.n	800f484 <uxr_reset_stream_storage+0xc>
 800f496:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f49a:	b163      	cbz	r3, 800f4b6 <uxr_reset_stream_storage+0x3e>
 800f49c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4a0:	2500      	movs	r5, #0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f004 fa8e 	bl	80139c4 <uxr_reset_input_best_effort_stream>
 800f4a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f4ac:	3501      	adds	r5, #1
 800f4ae:	42ab      	cmp	r3, r5
 800f4b0:	f106 0602 	add.w	r6, r6, #2
 800f4b4:	d8f5      	bhi.n	800f4a2 <uxr_reset_stream_storage+0x2a>
 800f4b6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f4ba:	b163      	cbz	r3, 800f4d6 <uxr_reset_stream_storage+0x5e>
 800f4bc:	f104 0618 	add.w	r6, r4, #24
 800f4c0:	2500      	movs	r5, #0
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	f004 fd28 	bl	8013f18 <uxr_reset_output_reliable_stream>
 800f4c8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f4cc:	3501      	adds	r5, #1
 800f4ce:	42ab      	cmp	r3, r5
 800f4d0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800f4d4:	d8f5      	bhi.n	800f4c2 <uxr_reset_stream_storage+0x4a>
 800f4d6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f4da:	b163      	cbz	r3, 800f4f6 <uxr_reset_stream_storage+0x7e>
 800f4dc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800f4e0:	2500      	movs	r5, #0
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f004 fae2 	bl	8013aac <uxr_reset_input_reliable_stream>
 800f4e8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f4ec:	3501      	adds	r5, #1
 800f4ee:	42ab      	cmp	r3, r5
 800f4f0:	f106 0618 	add.w	r6, r6, #24
 800f4f4:	d8f5      	bhi.n	800f4e2 <uxr_reset_stream_storage+0x6a>
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}

0800f4f8 <uxr_add_output_best_effort_buffer>:
 800f4f8:	b510      	push	{r4, lr}
 800f4fa:	7c04      	ldrb	r4, [r0, #16]
 800f4fc:	f104 0c01 	add.w	ip, r4, #1
 800f500:	b082      	sub	sp, #8
 800f502:	f880 c010 	strb.w	ip, [r0, #16]
 800f506:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f50a:	f004 fc4f 	bl	8013dac <uxr_init_output_best_effort_stream>
 800f50e:	2201      	movs	r2, #1
 800f510:	4611      	mov	r1, r2
 800f512:	4620      	mov	r0, r4
 800f514:	b002      	add	sp, #8
 800f516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f51a:	f7ff bf4f 	b.w	800f3bc <uxr_stream_id>
 800f51e:	bf00      	nop

0800f520 <uxr_add_output_reliable_buffer>:
 800f520:	b510      	push	{r4, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	4684      	mov	ip, r0
 800f526:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f52a:	9000      	str	r0, [sp, #0]
 800f52c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800f530:	2028      	movs	r0, #40	@ 0x28
 800f532:	fb00 c004 	mla	r0, r0, r4, ip
 800f536:	f104 0e01 	add.w	lr, r4, #1
 800f53a:	3018      	adds	r0, #24
 800f53c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800f540:	f004 fcb2 	bl	8013ea8 <uxr_init_output_reliable_stream>
 800f544:	2201      	movs	r2, #1
 800f546:	2102      	movs	r1, #2
 800f548:	4620      	mov	r0, r4
 800f54a:	b004      	add	sp, #16
 800f54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f550:	f7ff bf34 	b.w	800f3bc <uxr_stream_id>

0800f554 <uxr_add_input_best_effort_buffer>:
 800f554:	b510      	push	{r4, lr}
 800f556:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800f55a:	4603      	mov	r3, r0
 800f55c:	1c62      	adds	r2, r4, #1
 800f55e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800f562:	b082      	sub	sp, #8
 800f564:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800f568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f56c:	f004 fa26 	bl	80139bc <uxr_init_input_best_effort_stream>
 800f570:	2200      	movs	r2, #0
 800f572:	2101      	movs	r1, #1
 800f574:	4620      	mov	r0, r4
 800f576:	b002      	add	sp, #8
 800f578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f57c:	f7ff bf1e 	b.w	800f3bc <uxr_stream_id>

0800f580 <uxr_add_input_reliable_buffer>:
 800f580:	b510      	push	{r4, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	4684      	mov	ip, r0
 800f586:	9806      	ldr	r0, [sp, #24]
 800f588:	9000      	str	r0, [sp, #0]
 800f58a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800f58e:	2018      	movs	r0, #24
 800f590:	fb00 c004 	mla	r0, r0, r4, ip
 800f594:	f104 0e01 	add.w	lr, r4, #1
 800f598:	3048      	adds	r0, #72	@ 0x48
 800f59a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800f59e:	f004 fa59 	bl	8013a54 <uxr_init_input_reliable_stream>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2102      	movs	r1, #2
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	b004      	add	sp, #16
 800f5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5ae:	f7ff bf05 	b.w	800f3bc <uxr_stream_id>
 800f5b2:	bf00      	nop

0800f5b4 <uxr_get_output_best_effort_stream>:
 800f5b4:	7c03      	ldrb	r3, [r0, #16]
 800f5b6:	428b      	cmp	r3, r1
 800f5b8:	bf8c      	ite	hi
 800f5ba:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800f5be:	2000      	movls	r0, #0
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop

0800f5c4 <uxr_get_output_reliable_stream>:
 800f5c4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f5c8:	428b      	cmp	r3, r1
 800f5ca:	bf83      	ittte	hi
 800f5cc:	2328      	movhi	r3, #40	@ 0x28
 800f5ce:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f5d2:	3018      	addhi	r0, #24
 800f5d4:	2000      	movls	r0, #0
 800f5d6:	4770      	bx	lr

0800f5d8 <uxr_get_input_best_effort_stream>:
 800f5d8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f5dc:	428b      	cmp	r3, r1
 800f5de:	bf86      	itte	hi
 800f5e0:	3121      	addhi	r1, #33	@ 0x21
 800f5e2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f5e6:	2000      	movls	r0, #0
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop

0800f5ec <uxr_get_input_reliable_stream>:
 800f5ec:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800f5f0:	428b      	cmp	r3, r1
 800f5f2:	bf83      	ittte	hi
 800f5f4:	2318      	movhi	r3, #24
 800f5f6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f5fa:	3048      	addhi	r0, #72	@ 0x48
 800f5fc:	2000      	movls	r0, #0
 800f5fe:	4770      	bx	lr

0800f600 <uxr_output_streams_confirmed>:
 800f600:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f604:	b183      	cbz	r3, 800f628 <uxr_output_streams_confirmed+0x28>
 800f606:	b570      	push	{r4, r5, r6, lr}
 800f608:	4606      	mov	r6, r0
 800f60a:	f100 0518 	add.w	r5, r0, #24
 800f60e:	2400      	movs	r4, #0
 800f610:	e001      	b.n	800f616 <uxr_output_streams_confirmed+0x16>
 800f612:	3528      	adds	r5, #40	@ 0x28
 800f614:	b138      	cbz	r0, 800f626 <uxr_output_streams_confirmed+0x26>
 800f616:	4628      	mov	r0, r5
 800f618:	f004 feee 	bl	80143f8 <uxr_is_output_up_to_date>
 800f61c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800f620:	3401      	adds	r4, #1
 800f622:	42a3      	cmp	r3, r4
 800f624:	d8f5      	bhi.n	800f612 <uxr_output_streams_confirmed+0x12>
 800f626:	bd70      	pop	{r4, r5, r6, pc}
 800f628:	2001      	movs	r0, #1
 800f62a:	4770      	bx	lr

0800f62c <uxr_buffer_submessage_header>:
 800f62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f62e:	4604      	mov	r4, r0
 800f630:	460e      	mov	r6, r1
 800f632:	2104      	movs	r1, #4
 800f634:	4615      	mov	r5, r2
 800f636:	461f      	mov	r7, r3
 800f638:	f7fd fdc0 	bl	800d1bc <ucdr_align_to>
 800f63c:	2301      	movs	r3, #1
 800f63e:	ea47 0203 	orr.w	r2, r7, r3
 800f642:	4631      	mov	r1, r6
 800f644:	7523      	strb	r3, [r4, #20]
 800f646:	4620      	mov	r0, r4
 800f648:	462b      	mov	r3, r5
 800f64a:	f000 f8d3 	bl	800f7f4 <uxr_serialize_submessage_header>
 800f64e:	4620      	mov	r0, r4
 800f650:	f7fd fdca 	bl	800d1e8 <ucdr_buffer_remaining>
 800f654:	42a8      	cmp	r0, r5
 800f656:	bf34      	ite	cc
 800f658:	2000      	movcc	r0, #0
 800f65a:	2001      	movcs	r0, #1
 800f65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f65e:	bf00      	nop

0800f660 <uxr_read_submessage_header>:
 800f660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f664:	4604      	mov	r4, r0
 800f666:	460d      	mov	r5, r1
 800f668:	2104      	movs	r1, #4
 800f66a:	4616      	mov	r6, r2
 800f66c:	4698      	mov	r8, r3
 800f66e:	f7fd fda5 	bl	800d1bc <ucdr_align_to>
 800f672:	4620      	mov	r0, r4
 800f674:	f7fd fdb8 	bl	800d1e8 <ucdr_buffer_remaining>
 800f678:	2803      	cmp	r0, #3
 800f67a:	bf8c      	ite	hi
 800f67c:	2701      	movhi	r7, #1
 800f67e:	2700      	movls	r7, #0
 800f680:	d802      	bhi.n	800f688 <uxr_read_submessage_header+0x28>
 800f682:	4638      	mov	r0, r7
 800f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f688:	4633      	mov	r3, r6
 800f68a:	4642      	mov	r2, r8
 800f68c:	4620      	mov	r0, r4
 800f68e:	4629      	mov	r1, r5
 800f690:	f000 f8c4 	bl	800f81c <uxr_deserialize_submessage_header>
 800f694:	f898 3000 	ldrb.w	r3, [r8]
 800f698:	f003 0201 	and.w	r2, r3, #1
 800f69c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f6a0:	f888 3000 	strb.w	r3, [r8]
 800f6a4:	7522      	strb	r2, [r4, #20]
 800f6a6:	4638      	mov	r0, r7
 800f6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6ac <uxr_submessage_padding>:
 800f6ac:	f010 0003 	ands.w	r0, r0, #3
 800f6b0:	bf18      	it	ne
 800f6b2:	f1c0 0004 	rsbne	r0, r0, #4
 800f6b6:	4770      	bx	lr

0800f6b8 <uxr_millis>:
 800f6b8:	b510      	push	{r4, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	4669      	mov	r1, sp
 800f6be:	2001      	movs	r0, #1
 800f6c0:	f7f1 fdf2 	bl	80012a8 <clock_gettime>
 800f6c4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f6c8:	4906      	ldr	r1, [pc, #24]	@ (800f6e4 <uxr_millis+0x2c>)
 800f6ca:	fba0 0301 	umull	r0, r3, r0, r1
 800f6ce:	1900      	adds	r0, r0, r4
 800f6d0:	fb01 3102 	mla	r1, r1, r2, r3
 800f6d4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f6d8:	4a03      	ldr	r2, [pc, #12]	@ (800f6e8 <uxr_millis+0x30>)
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f7f0 fe08 	bl	80002f0 <__aeabi_ldivmod>
 800f6e0:	b004      	add	sp, #16
 800f6e2:	bd10      	pop	{r4, pc}
 800f6e4:	3b9aca00 	.word	0x3b9aca00
 800f6e8:	000f4240 	.word	0x000f4240

0800f6ec <uxr_nanos>:
 800f6ec:	b510      	push	{r4, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	4669      	mov	r1, sp
 800f6f2:	2001      	movs	r0, #1
 800f6f4:	f7f1 fdd8 	bl	80012a8 <clock_gettime>
 800f6f8:	4a06      	ldr	r2, [pc, #24]	@ (800f714 <uxr_nanos+0x28>)
 800f6fa:	9800      	ldr	r0, [sp, #0]
 800f6fc:	9902      	ldr	r1, [sp, #8]
 800f6fe:	9c01      	ldr	r4, [sp, #4]
 800f700:	fba0 0302 	umull	r0, r3, r0, r2
 800f704:	1840      	adds	r0, r0, r1
 800f706:	fb02 3304 	mla	r3, r2, r4, r3
 800f70a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f70e:	b004      	add	sp, #16
 800f710:	bd10      	pop	{r4, pc}
 800f712:	bf00      	nop
 800f714:	3b9aca00 	.word	0x3b9aca00

0800f718 <uxr_prepare_output_stream>:
 800f718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f71a:	b087      	sub	sp, #28
 800f71c:	2707      	movs	r7, #7
 800f71e:	9202      	str	r2, [sp, #8]
 800f720:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f722:	9103      	str	r1, [sp, #12]
 800f724:	2500      	movs	r5, #0
 800f726:	3204      	adds	r2, #4
 800f728:	e9cd 7500 	strd	r7, r5, [sp]
 800f72c:	461c      	mov	r4, r3
 800f72e:	4606      	mov	r6, r0
 800f730:	f7ff f84c 	bl	800e7cc <uxr_prepare_stream_to_write_submessage>
 800f734:	f080 0201 	eor.w	r2, r0, #1
 800f738:	b2d2      	uxtb	r2, r2
 800f73a:	75a2      	strb	r2, [r4, #22]
 800f73c:	b112      	cbz	r2, 800f744 <uxr_prepare_output_stream+0x2c>
 800f73e:	4628      	mov	r0, r5
 800f740:	b007      	add	sp, #28
 800f742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f744:	aa05      	add	r2, sp, #20
 800f746:	9902      	ldr	r1, [sp, #8]
 800f748:	4630      	mov	r0, r6
 800f74a:	f7ff f975 	bl	800ea38 <uxr_init_base_object_request>
 800f74e:	a905      	add	r1, sp, #20
 800f750:	4605      	mov	r5, r0
 800f752:	4620      	mov	r0, r4
 800f754:	f000 fdb4 	bl	80102c0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f758:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f75c:	69a6      	ldr	r6, [r4, #24]
 800f75e:	69e7      	ldr	r7, [r4, #28]
 800f760:	1a52      	subs	r2, r2, r1
 800f762:	4620      	mov	r0, r4
 800f764:	f7fd fd10 	bl	800d188 <ucdr_init_buffer>
 800f768:	4620      	mov	r0, r4
 800f76a:	463a      	mov	r2, r7
 800f76c:	4631      	mov	r1, r6
 800f76e:	f7fd fcdf 	bl	800d130 <ucdr_set_on_full_buffer_callback>
 800f772:	4628      	mov	r0, r5
 800f774:	b007      	add	sp, #28
 800f776:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f778 <uxr_serialize_message_header>:
 800f778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f77a:	b083      	sub	sp, #12
 800f77c:	4616      	mov	r6, r2
 800f77e:	4604      	mov	r4, r0
 800f780:	9301      	str	r3, [sp, #4]
 800f782:	460d      	mov	r5, r1
 800f784:	9f08      	ldr	r7, [sp, #32]
 800f786:	f7fc fd53 	bl	800c230 <ucdr_serialize_uint8_t>
 800f78a:	4631      	mov	r1, r6
 800f78c:	4620      	mov	r0, r4
 800f78e:	f7fc fd4f 	bl	800c230 <ucdr_serialize_uint8_t>
 800f792:	9a01      	ldr	r2, [sp, #4]
 800f794:	2101      	movs	r1, #1
 800f796:	4620      	mov	r0, r4
 800f798:	f7fc fdf6 	bl	800c388 <ucdr_serialize_endian_uint16_t>
 800f79c:	062b      	lsls	r3, r5, #24
 800f79e:	d501      	bpl.n	800f7a4 <uxr_serialize_message_header+0x2c>
 800f7a0:	b003      	add	sp, #12
 800f7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a4:	2204      	movs	r2, #4
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	b003      	add	sp, #12
 800f7ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f7b0:	f004 b824 	b.w	80137fc <ucdr_serialize_array_uint8_t>

0800f7b4 <uxr_deserialize_message_header>:
 800f7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	4616      	mov	r6, r2
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	460d      	mov	r5, r1
 800f7c0:	9f08      	ldr	r7, [sp, #32]
 800f7c2:	f7fc fd4b 	bl	800c25c <ucdr_deserialize_uint8_t>
 800f7c6:	4631      	mov	r1, r6
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f7fc fd47 	bl	800c25c <ucdr_deserialize_uint8_t>
 800f7ce:	9a01      	ldr	r2, [sp, #4]
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f7fc fecc 	bl	800c570 <ucdr_deserialize_endian_uint16_t>
 800f7d8:	f995 3000 	ldrsb.w	r3, [r5]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	da01      	bge.n	800f7e4 <uxr_deserialize_message_header+0x30>
 800f7e0:	b003      	add	sp, #12
 800f7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7e4:	2204      	movs	r2, #4
 800f7e6:	4639      	mov	r1, r7
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	b003      	add	sp, #12
 800f7ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f7f0:	f004 b868 	b.w	80138c4 <ucdr_deserialize_array_uint8_t>

0800f7f4 <uxr_serialize_submessage_header>:
 800f7f4:	b530      	push	{r4, r5, lr}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	4615      	mov	r5, r2
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	9301      	str	r3, [sp, #4]
 800f7fe:	f7fc fd17 	bl	800c230 <ucdr_serialize_uint8_t>
 800f802:	4629      	mov	r1, r5
 800f804:	4620      	mov	r0, r4
 800f806:	f7fc fd13 	bl	800c230 <ucdr_serialize_uint8_t>
 800f80a:	9a01      	ldr	r2, [sp, #4]
 800f80c:	2101      	movs	r1, #1
 800f80e:	4620      	mov	r0, r4
 800f810:	b003      	add	sp, #12
 800f812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f816:	f7fc bdb7 	b.w	800c388 <ucdr_serialize_endian_uint16_t>
 800f81a:	bf00      	nop

0800f81c <uxr_deserialize_submessage_header>:
 800f81c:	b530      	push	{r4, r5, lr}
 800f81e:	b083      	sub	sp, #12
 800f820:	4615      	mov	r5, r2
 800f822:	4604      	mov	r4, r0
 800f824:	9301      	str	r3, [sp, #4]
 800f826:	f7fc fd19 	bl	800c25c <ucdr_deserialize_uint8_t>
 800f82a:	4629      	mov	r1, r5
 800f82c:	4620      	mov	r0, r4
 800f82e:	f7fc fd15 	bl	800c25c <ucdr_deserialize_uint8_t>
 800f832:	9a01      	ldr	r2, [sp, #4]
 800f834:	2101      	movs	r1, #1
 800f836:	4620      	mov	r0, r4
 800f838:	b003      	add	sp, #12
 800f83a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f83e:	f7fc be97 	b.w	800c570 <ucdr_deserialize_endian_uint16_t>
 800f842:	bf00      	nop

0800f844 <uxr_serialize_CLIENT_Representation>:
 800f844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f848:	2204      	movs	r2, #4
 800f84a:	460e      	mov	r6, r1
 800f84c:	4605      	mov	r5, r0
 800f84e:	f003 ffd5 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800f852:	2202      	movs	r2, #2
 800f854:	4607      	mov	r7, r0
 800f856:	1d31      	adds	r1, r6, #4
 800f858:	4628      	mov	r0, r5
 800f85a:	f003 ffcf 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800f85e:	4038      	ands	r0, r7
 800f860:	2202      	movs	r2, #2
 800f862:	1db1      	adds	r1, r6, #6
 800f864:	b2c7      	uxtb	r7, r0
 800f866:	4628      	mov	r0, r5
 800f868:	f003 ffc8 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800f86c:	2204      	movs	r2, #4
 800f86e:	4007      	ands	r7, r0
 800f870:	f106 0108 	add.w	r1, r6, #8
 800f874:	4628      	mov	r0, r5
 800f876:	f003 ffc1 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800f87a:	7b31      	ldrb	r1, [r6, #12]
 800f87c:	4007      	ands	r7, r0
 800f87e:	4628      	mov	r0, r5
 800f880:	f7fc fcd6 	bl	800c230 <ucdr_serialize_uint8_t>
 800f884:	7b71      	ldrb	r1, [r6, #13]
 800f886:	4007      	ands	r7, r0
 800f888:	4628      	mov	r0, r5
 800f88a:	f7fc fca3 	bl	800c1d4 <ucdr_serialize_bool>
 800f88e:	7b73      	ldrb	r3, [r6, #13]
 800f890:	ea07 0800 	and.w	r8, r7, r0
 800f894:	b93b      	cbnz	r3, 800f8a6 <uxr_serialize_CLIENT_Representation+0x62>
 800f896:	8bb1      	ldrh	r1, [r6, #28]
 800f898:	4628      	mov	r0, r5
 800f89a:	f7fc fcf5 	bl	800c288 <ucdr_serialize_uint16_t>
 800f89e:	ea08 0000 	and.w	r0, r8, r0
 800f8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8a6:	6931      	ldr	r1, [r6, #16]
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	f7fc fed7 	bl	800c65c <ucdr_serialize_uint32_t>
 800f8ae:	6933      	ldr	r3, [r6, #16]
 800f8b0:	b1e3      	cbz	r3, 800f8ec <uxr_serialize_CLIENT_Representation+0xa8>
 800f8b2:	b1c0      	cbz	r0, 800f8e6 <uxr_serialize_CLIENT_Representation+0xa2>
 800f8b4:	4637      	mov	r7, r6
 800f8b6:	f04f 0900 	mov.w	r9, #0
 800f8ba:	e001      	b.n	800f8c0 <uxr_serialize_CLIENT_Representation+0x7c>
 800f8bc:	3708      	adds	r7, #8
 800f8be:	b194      	cbz	r4, 800f8e6 <uxr_serialize_CLIENT_Representation+0xa2>
 800f8c0:	6979      	ldr	r1, [r7, #20]
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	f004 f862 	bl	801398c <ucdr_serialize_string>
 800f8c8:	69b9      	ldr	r1, [r7, #24]
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	f004 f85d 	bl	801398c <ucdr_serialize_string>
 800f8d2:	6933      	ldr	r3, [r6, #16]
 800f8d4:	f109 0901 	add.w	r9, r9, #1
 800f8d8:	4004      	ands	r4, r0
 800f8da:	4599      	cmp	r9, r3
 800f8dc:	b2e4      	uxtb	r4, r4
 800f8de:	d3ed      	bcc.n	800f8bc <uxr_serialize_CLIENT_Representation+0x78>
 800f8e0:	ea08 0804 	and.w	r8, r8, r4
 800f8e4:	e7d7      	b.n	800f896 <uxr_serialize_CLIENT_Representation+0x52>
 800f8e6:	f04f 0800 	mov.w	r8, #0
 800f8ea:	e7d4      	b.n	800f896 <uxr_serialize_CLIENT_Representation+0x52>
 800f8ec:	ea08 0800 	and.w	r8, r8, r0
 800f8f0:	e7d1      	b.n	800f896 <uxr_serialize_CLIENT_Representation+0x52>
 800f8f2:	bf00      	nop

0800f8f4 <uxr_deserialize_CLIENT_Representation>:
 800f8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8f8:	2204      	movs	r2, #4
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	f003 ffe1 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800f902:	2202      	movs	r2, #2
 800f904:	4607      	mov	r7, r0
 800f906:	1d21      	adds	r1, r4, #4
 800f908:	4628      	mov	r0, r5
 800f90a:	f003 ffdb 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800f90e:	4038      	ands	r0, r7
 800f910:	2202      	movs	r2, #2
 800f912:	1da1      	adds	r1, r4, #6
 800f914:	b2c6      	uxtb	r6, r0
 800f916:	4628      	mov	r0, r5
 800f918:	f003 ffd4 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800f91c:	2204      	movs	r2, #4
 800f91e:	4006      	ands	r6, r0
 800f920:	f104 0108 	add.w	r1, r4, #8
 800f924:	4628      	mov	r0, r5
 800f926:	f003 ffcd 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800f92a:	f104 010c 	add.w	r1, r4, #12
 800f92e:	4006      	ands	r6, r0
 800f930:	4628      	mov	r0, r5
 800f932:	f7fc fc93 	bl	800c25c <ucdr_deserialize_uint8_t>
 800f936:	f104 010d 	add.w	r1, r4, #13
 800f93a:	ea06 0700 	and.w	r7, r6, r0
 800f93e:	4628      	mov	r0, r5
 800f940:	f7fc fc5e 	bl	800c200 <ucdr_deserialize_bool>
 800f944:	7b63      	ldrb	r3, [r4, #13]
 800f946:	4007      	ands	r7, r0
 800f948:	b93b      	cbnz	r3, 800f95a <uxr_deserialize_CLIENT_Representation+0x66>
 800f94a:	f104 011c 	add.w	r1, r4, #28
 800f94e:	4628      	mov	r0, r5
 800f950:	f7fc fd9a 	bl	800c488 <ucdr_deserialize_uint16_t>
 800f954:	4038      	ands	r0, r7
 800f956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f95a:	f104 0110 	add.w	r1, r4, #16
 800f95e:	4628      	mov	r0, r5
 800f960:	f7fc ffac 	bl	800c8bc <ucdr_deserialize_uint32_t>
 800f964:	6923      	ldr	r3, [r4, #16]
 800f966:	2b01      	cmp	r3, #1
 800f968:	d903      	bls.n	800f972 <uxr_deserialize_CLIENT_Representation+0x7e>
 800f96a:	2301      	movs	r3, #1
 800f96c:	75ab      	strb	r3, [r5, #22]
 800f96e:	2700      	movs	r7, #0
 800f970:	e7eb      	b.n	800f94a <uxr_deserialize_CLIENT_Representation+0x56>
 800f972:	b30b      	cbz	r3, 800f9b8 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f974:	2800      	cmp	r0, #0
 800f976:	d0fa      	beq.n	800f96e <uxr_deserialize_CLIENT_Representation+0x7a>
 800f978:	46a0      	mov	r8, r4
 800f97a:	f04f 0900 	mov.w	r9, #0
 800f97e:	e001      	b.n	800f984 <uxr_deserialize_CLIENT_Representation+0x90>
 800f980:	2e00      	cmp	r6, #0
 800f982:	d0f4      	beq.n	800f96e <uxr_deserialize_CLIENT_Representation+0x7a>
 800f984:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f98c:	4628      	mov	r0, r5
 800f98e:	f004 f80d 	bl	80139ac <ucdr_deserialize_string>
 800f992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f996:	4606      	mov	r6, r0
 800f998:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f99c:	4628      	mov	r0, r5
 800f99e:	f004 f805 	bl	80139ac <ucdr_deserialize_string>
 800f9a2:	6923      	ldr	r3, [r4, #16]
 800f9a4:	f109 0901 	add.w	r9, r9, #1
 800f9a8:	4006      	ands	r6, r0
 800f9aa:	4599      	cmp	r9, r3
 800f9ac:	f108 0808 	add.w	r8, r8, #8
 800f9b0:	b2f6      	uxtb	r6, r6
 800f9b2:	d3e5      	bcc.n	800f980 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f9b4:	4037      	ands	r7, r6
 800f9b6:	e7c8      	b.n	800f94a <uxr_deserialize_CLIENT_Representation+0x56>
 800f9b8:	4007      	ands	r7, r0
 800f9ba:	e7c6      	b.n	800f94a <uxr_deserialize_CLIENT_Representation+0x56>

0800f9bc <uxr_serialize_AGENT_Representation>:
 800f9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9c0:	2204      	movs	r2, #4
 800f9c2:	460f      	mov	r7, r1
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	f003 ff19 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800f9ca:	2202      	movs	r2, #2
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	1d39      	adds	r1, r7, #4
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f003 ff13 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800f9d6:	4020      	ands	r0, r4
 800f9d8:	2202      	movs	r2, #2
 800f9da:	1db9      	adds	r1, r7, #6
 800f9dc:	b2c4      	uxtb	r4, r0
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f003 ff0c 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800f9e4:	7a39      	ldrb	r1, [r7, #8]
 800f9e6:	4004      	ands	r4, r0
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f7fc fbf3 	bl	800c1d4 <ucdr_serialize_bool>
 800f9ee:	7a3b      	ldrb	r3, [r7, #8]
 800f9f0:	ea00 0804 	and.w	r8, r0, r4
 800f9f4:	b913      	cbnz	r3, 800f9fc <uxr_serialize_AGENT_Representation+0x40>
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9fc:	68f9      	ldr	r1, [r7, #12]
 800f9fe:	4628      	mov	r0, r5
 800fa00:	f7fc fe2c 	bl	800c65c <ucdr_serialize_uint32_t>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	b303      	cbz	r3, 800fa4a <uxr_serialize_AGENT_Representation+0x8e>
 800fa08:	b1d0      	cbz	r0, 800fa40 <uxr_serialize_AGENT_Representation+0x84>
 800fa0a:	463e      	mov	r6, r7
 800fa0c:	f04f 0900 	mov.w	r9, #0
 800fa10:	e001      	b.n	800fa16 <uxr_serialize_AGENT_Representation+0x5a>
 800fa12:	3608      	adds	r6, #8
 800fa14:	b1a4      	cbz	r4, 800fa40 <uxr_serialize_AGENT_Representation+0x84>
 800fa16:	6931      	ldr	r1, [r6, #16]
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f003 ffb7 	bl	801398c <ucdr_serialize_string>
 800fa1e:	6971      	ldr	r1, [r6, #20]
 800fa20:	4604      	mov	r4, r0
 800fa22:	4628      	mov	r0, r5
 800fa24:	f003 ffb2 	bl	801398c <ucdr_serialize_string>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f109 0901 	add.w	r9, r9, #1
 800fa2e:	4004      	ands	r4, r0
 800fa30:	4599      	cmp	r9, r3
 800fa32:	b2e4      	uxtb	r4, r4
 800fa34:	d3ed      	bcc.n	800fa12 <uxr_serialize_AGENT_Representation+0x56>
 800fa36:	ea08 0804 	and.w	r8, r8, r4
 800fa3a:	4640      	mov	r0, r8
 800fa3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa40:	f04f 0800 	mov.w	r8, #0
 800fa44:	4640      	mov	r0, r8
 800fa46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4a:	ea08 0800 	and.w	r8, r8, r0
 800fa4e:	e7d2      	b.n	800f9f6 <uxr_serialize_AGENT_Representation+0x3a>

0800fa50 <uxr_serialize_DATAWRITER_Representation>:
 800fa50:	b570      	push	{r4, r5, r6, lr}
 800fa52:	460d      	mov	r5, r1
 800fa54:	7809      	ldrb	r1, [r1, #0]
 800fa56:	4606      	mov	r6, r0
 800fa58:	f7fc fbea 	bl	800c230 <ucdr_serialize_uint8_t>
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	b130      	cbz	r0, 800fa6e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fa60:	782b      	ldrb	r3, [r5, #0]
 800fa62:	2b02      	cmp	r3, #2
 800fa64:	d00c      	beq.n	800fa80 <uxr_serialize_DATAWRITER_Representation+0x30>
 800fa66:	2b03      	cmp	r3, #3
 800fa68:	d010      	beq.n	800fa8c <uxr_serialize_DATAWRITER_Representation+0x3c>
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d008      	beq.n	800fa80 <uxr_serialize_DATAWRITER_Representation+0x30>
 800fa6e:	2202      	movs	r2, #2
 800fa70:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800fa74:	4630      	mov	r0, r6
 800fa76:	f003 fec1 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800fa7a:	4020      	ands	r0, r4
 800fa7c:	b2c0      	uxtb	r0, r0
 800fa7e:	bd70      	pop	{r4, r5, r6, pc}
 800fa80:	6869      	ldr	r1, [r5, #4]
 800fa82:	4630      	mov	r0, r6
 800fa84:	f003 ff82 	bl	801398c <ucdr_serialize_string>
 800fa88:	4604      	mov	r4, r0
 800fa8a:	e7f0      	b.n	800fa6e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fa8c:	4629      	mov	r1, r5
 800fa8e:	4630      	mov	r0, r6
 800fa90:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800fa94:	3104      	adds	r1, #4
 800fa96:	f7fd fc13 	bl	800d2c0 <ucdr_serialize_sequence_uint8_t>
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	e7e7      	b.n	800fa6e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fa9e:	bf00      	nop

0800faa0 <uxr_serialize_ObjectVariant.part.0>:
 800faa0:	b570      	push	{r4, r5, r6, lr}
 800faa2:	780b      	ldrb	r3, [r1, #0]
 800faa4:	3b01      	subs	r3, #1
 800faa6:	460c      	mov	r4, r1
 800faa8:	4605      	mov	r5, r0
 800faaa:	2b0d      	cmp	r3, #13
 800faac:	d854      	bhi.n	800fb58 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800faae:	e8df f003 	tbb	[pc, r3]
 800fab2:	0730      	.short	0x0730
 800fab4:	07071b1b 	.word	0x07071b1b
 800fab8:	0c530707 	.word	0x0c530707
 800fabc:	494e0c0c 	.word	0x494e0c0c
 800fac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fac4:	3104      	adds	r1, #4
 800fac6:	f7ff bfc3 	b.w	800fa50 <uxr_serialize_DATAWRITER_Representation>
 800faca:	7909      	ldrb	r1, [r1, #4]
 800facc:	f7fc fbb0 	bl	800c230 <ucdr_serialize_uint8_t>
 800fad0:	b1e8      	cbz	r0, 800fb0e <uxr_serialize_ObjectVariant.part.0+0x6e>
 800fad2:	7923      	ldrb	r3, [r4, #4]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d001      	beq.n	800fadc <uxr_serialize_ObjectVariant.part.0+0x3c>
 800fad8:	2b02      	cmp	r3, #2
 800fada:	d13d      	bne.n	800fb58 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800fadc:	68a1      	ldr	r1, [r4, #8]
 800fade:	4628      	mov	r0, r5
 800fae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fae4:	f003 bf52 	b.w	801398c <ucdr_serialize_string>
 800fae8:	7909      	ldrb	r1, [r1, #4]
 800faea:	f7fc fba1 	bl	800c230 <ucdr_serialize_uint8_t>
 800faee:	4606      	mov	r6, r0
 800faf0:	b120      	cbz	r0, 800fafc <uxr_serialize_ObjectVariant.part.0+0x5c>
 800faf2:	7923      	ldrb	r3, [r4, #4]
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	d039      	beq.n	800fb6c <uxr_serialize_ObjectVariant.part.0+0xcc>
 800faf8:	2b03      	cmp	r3, #3
 800fafa:	d02f      	beq.n	800fb5c <uxr_serialize_ObjectVariant.part.0+0xbc>
 800fafc:	2202      	movs	r2, #2
 800fafe:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800fb02:	4628      	mov	r0, r5
 800fb04:	f003 fe7a 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800fb08:	4030      	ands	r0, r6
 800fb0a:	b2c0      	uxtb	r0, r0
 800fb0c:	bd70      	pop	{r4, r5, r6, pc}
 800fb0e:	2000      	movs	r0, #0
 800fb10:	bd70      	pop	{r4, r5, r6, pc}
 800fb12:	7909      	ldrb	r1, [r1, #4]
 800fb14:	f7fc fb8c 	bl	800c230 <ucdr_serialize_uint8_t>
 800fb18:	4606      	mov	r6, r0
 800fb1a:	b158      	cbz	r0, 800fb34 <uxr_serialize_ObjectVariant.part.0+0x94>
 800fb1c:	7923      	ldrb	r3, [r4, #4]
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	d003      	beq.n	800fb2a <uxr_serialize_ObjectVariant.part.0+0x8a>
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	d028      	beq.n	800fb78 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d104      	bne.n	800fb34 <uxr_serialize_ObjectVariant.part.0+0x94>
 800fb2a:	68a1      	ldr	r1, [r4, #8]
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	f003 ff2d 	bl	801398c <ucdr_serialize_string>
 800fb32:	4606      	mov	r6, r0
 800fb34:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800fb38:	4628      	mov	r0, r5
 800fb3a:	f7fd f8b5 	bl	800cca8 <ucdr_serialize_int16_t>
 800fb3e:	4030      	ands	r0, r6
 800fb40:	b2c0      	uxtb	r0, r0
 800fb42:	bd70      	pop	{r4, r5, r6, pc}
 800fb44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb48:	3104      	adds	r1, #4
 800fb4a:	f7ff be7b 	b.w	800f844 <uxr_serialize_CLIENT_Representation>
 800fb4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb52:	3104      	adds	r1, #4
 800fb54:	f7ff bf32 	b.w	800f9bc <uxr_serialize_AGENT_Representation>
 800fb58:	2001      	movs	r0, #1
 800fb5a:	bd70      	pop	{r4, r5, r6, pc}
 800fb5c:	68a2      	ldr	r2, [r4, #8]
 800fb5e:	f104 010c 	add.w	r1, r4, #12
 800fb62:	4628      	mov	r0, r5
 800fb64:	f7fd fbac 	bl	800d2c0 <ucdr_serialize_sequence_uint8_t>
 800fb68:	4606      	mov	r6, r0
 800fb6a:	e7c7      	b.n	800fafc <uxr_serialize_ObjectVariant.part.0+0x5c>
 800fb6c:	68a1      	ldr	r1, [r4, #8]
 800fb6e:	4628      	mov	r0, r5
 800fb70:	f003 ff0c 	bl	801398c <ucdr_serialize_string>
 800fb74:	4606      	mov	r6, r0
 800fb76:	e7c1      	b.n	800fafc <uxr_serialize_ObjectVariant.part.0+0x5c>
 800fb78:	68a2      	ldr	r2, [r4, #8]
 800fb7a:	f104 010c 	add.w	r1, r4, #12
 800fb7e:	4628      	mov	r0, r5
 800fb80:	f7fd fb9e 	bl	800d2c0 <ucdr_serialize_sequence_uint8_t>
 800fb84:	4606      	mov	r6, r0
 800fb86:	e7d5      	b.n	800fb34 <uxr_serialize_ObjectVariant.part.0+0x94>

0800fb88 <uxr_deserialize_DATAWRITER_Representation>:
 800fb88:	b570      	push	{r4, r5, r6, lr}
 800fb8a:	4606      	mov	r6, r0
 800fb8c:	460d      	mov	r5, r1
 800fb8e:	f7fc fb65 	bl	800c25c <ucdr_deserialize_uint8_t>
 800fb92:	4604      	mov	r4, r0
 800fb94:	b130      	cbz	r0, 800fba4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fb96:	782b      	ldrb	r3, [r5, #0]
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d00c      	beq.n	800fbb6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fb9c:	2b03      	cmp	r3, #3
 800fb9e:	d012      	beq.n	800fbc6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d008      	beq.n	800fbb6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fba4:	2202      	movs	r2, #2
 800fba6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800fbaa:	4630      	mov	r0, r6
 800fbac:	f003 fe8a 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800fbb0:	4020      	ands	r0, r4
 800fbb2:	b2c0      	uxtb	r0, r0
 800fbb4:	bd70      	pop	{r4, r5, r6, pc}
 800fbb6:	6869      	ldr	r1, [r5, #4]
 800fbb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	f003 fef5 	bl	80139ac <ucdr_deserialize_string>
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	e7ee      	b.n	800fba4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fbc6:	1d2b      	adds	r3, r5, #4
 800fbc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbcc:	f105 0108 	add.w	r1, r5, #8
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f7fd fb87 	bl	800d2e4 <ucdr_deserialize_sequence_uint8_t>
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	e7e4      	b.n	800fba4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fbda:	bf00      	nop

0800fbdc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800fbdc:	b570      	push	{r4, r5, r6, lr}
 800fbde:	460d      	mov	r5, r1
 800fbe0:	7809      	ldrb	r1, [r1, #0]
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	f7fc faf6 	bl	800c1d4 <ucdr_serialize_bool>
 800fbe8:	782b      	ldrb	r3, [r5, #0]
 800fbea:	4604      	mov	r4, r0
 800fbec:	b94b      	cbnz	r3, 800fc02 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800fbee:	7a29      	ldrb	r1, [r5, #8]
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	f7fc faef 	bl	800c1d4 <ucdr_serialize_bool>
 800fbf6:	7a2b      	ldrb	r3, [r5, #8]
 800fbf8:	4004      	ands	r4, r0
 800fbfa:	b2e4      	uxtb	r4, r4
 800fbfc:	b943      	cbnz	r3, 800fc10 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800fbfe:	4620      	mov	r0, r4
 800fc00:	bd70      	pop	{r4, r5, r6, pc}
 800fc02:	6869      	ldr	r1, [r5, #4]
 800fc04:	4630      	mov	r0, r6
 800fc06:	f003 fec1 	bl	801398c <ucdr_serialize_string>
 800fc0a:	4004      	ands	r4, r0
 800fc0c:	b2e4      	uxtb	r4, r4
 800fc0e:	e7ee      	b.n	800fbee <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800fc10:	68e9      	ldr	r1, [r5, #12]
 800fc12:	4630      	mov	r0, r6
 800fc14:	f003 feba 	bl	801398c <ucdr_serialize_string>
 800fc18:	4004      	ands	r4, r0
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	bd70      	pop	{r4, r5, r6, pc}
 800fc1e:	bf00      	nop

0800fc20 <uxr_serialize_OBJK_Requester_Binary>:
 800fc20:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800fc24:	460f      	mov	r7, r1
 800fc26:	6809      	ldr	r1, [r1, #0]
 800fc28:	4680      	mov	r8, r0
 800fc2a:	f003 feaf 	bl	801398c <ucdr_serialize_string>
 800fc2e:	6879      	ldr	r1, [r7, #4]
 800fc30:	4605      	mov	r5, r0
 800fc32:	4640      	mov	r0, r8
 800fc34:	f003 feaa 	bl	801398c <ucdr_serialize_string>
 800fc38:	68b9      	ldr	r1, [r7, #8]
 800fc3a:	4005      	ands	r5, r0
 800fc3c:	4640      	mov	r0, r8
 800fc3e:	f003 fea5 	bl	801398c <ucdr_serialize_string>
 800fc42:	b2ec      	uxtb	r4, r5
 800fc44:	4004      	ands	r4, r0
 800fc46:	7b39      	ldrb	r1, [r7, #12]
 800fc48:	4640      	mov	r0, r8
 800fc4a:	f7fc fac3 	bl	800c1d4 <ucdr_serialize_bool>
 800fc4e:	7b3b      	ldrb	r3, [r7, #12]
 800fc50:	4004      	ands	r4, r0
 800fc52:	b94b      	cbnz	r3, 800fc68 <uxr_serialize_OBJK_Requester_Binary+0x48>
 800fc54:	7d39      	ldrb	r1, [r7, #20]
 800fc56:	4640      	mov	r0, r8
 800fc58:	f7fc fabc 	bl	800c1d4 <ucdr_serialize_bool>
 800fc5c:	7d3b      	ldrb	r3, [r7, #20]
 800fc5e:	4004      	ands	r4, r0
 800fc60:	b943      	cbnz	r3, 800fc74 <uxr_serialize_OBJK_Requester_Binary+0x54>
 800fc62:	4620      	mov	r0, r4
 800fc64:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800fc68:	6939      	ldr	r1, [r7, #16]
 800fc6a:	4640      	mov	r0, r8
 800fc6c:	f003 fe8e 	bl	801398c <ucdr_serialize_string>
 800fc70:	4004      	ands	r4, r0
 800fc72:	e7ef      	b.n	800fc54 <uxr_serialize_OBJK_Requester_Binary+0x34>
 800fc74:	69b9      	ldr	r1, [r7, #24]
 800fc76:	4640      	mov	r0, r8
 800fc78:	f003 fe88 	bl	801398c <ucdr_serialize_string>
 800fc7c:	4004      	ands	r4, r0
 800fc7e:	b2e4      	uxtb	r4, r4
 800fc80:	4620      	mov	r0, r4
 800fc82:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800fc86:	bf00      	nop

0800fc88 <uxr_deserialize_ObjectVariant>:
 800fc88:	b570      	push	{r4, r5, r6, lr}
 800fc8a:	4605      	mov	r5, r0
 800fc8c:	460e      	mov	r6, r1
 800fc8e:	f7fc fae5 	bl	800c25c <ucdr_deserialize_uint8_t>
 800fc92:	b168      	cbz	r0, 800fcb0 <uxr_deserialize_ObjectVariant+0x28>
 800fc94:	7833      	ldrb	r3, [r6, #0]
 800fc96:	3b01      	subs	r3, #1
 800fc98:	4604      	mov	r4, r0
 800fc9a:	2b0d      	cmp	r3, #13
 800fc9c:	d809      	bhi.n	800fcb2 <uxr_deserialize_ObjectVariant+0x2a>
 800fc9e:	e8df f003 	tbb	[pc, r3]
 800fca2:	0a41      	.short	0x0a41
 800fca4:	0a0a2323 	.word	0x0a0a2323
 800fca8:	10080a0a 	.word	0x10080a0a
 800fcac:	565c1010 	.word	0x565c1010
 800fcb0:	2400      	movs	r4, #0
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	bd70      	pop	{r4, r5, r6, pc}
 800fcb6:	1d31      	adds	r1, r6, #4
 800fcb8:	4628      	mov	r0, r5
 800fcba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcbe:	f7ff bf63 	b.w	800fb88 <uxr_deserialize_DATAWRITER_Representation>
 800fcc2:	1d31      	adds	r1, r6, #4
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	f7fc fac9 	bl	800c25c <ucdr_deserialize_uint8_t>
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d0f0      	beq.n	800fcb0 <uxr_deserialize_ObjectVariant+0x28>
 800fcce:	7933      	ldrb	r3, [r6, #4]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d001      	beq.n	800fcd8 <uxr_deserialize_ObjectVariant+0x50>
 800fcd4:	2b02      	cmp	r3, #2
 800fcd6:	d1ec      	bne.n	800fcb2 <uxr_deserialize_ObjectVariant+0x2a>
 800fcd8:	68b1      	ldr	r1, [r6, #8]
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fce4:	f003 be62 	b.w	80139ac <ucdr_deserialize_string>
 800fce8:	1d31      	adds	r1, r6, #4
 800fcea:	4628      	mov	r0, r5
 800fcec:	f7fc fab6 	bl	800c25c <ucdr_deserialize_uint8_t>
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	b170      	cbz	r0, 800fd12 <uxr_deserialize_ObjectVariant+0x8a>
 800fcf4:	7933      	ldrb	r3, [r6, #4]
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	d04c      	beq.n	800fd94 <uxr_deserialize_ObjectVariant+0x10c>
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d109      	bne.n	800fd12 <uxr_deserialize_ObjectVariant+0x8a>
 800fcfe:	f106 0308 	add.w	r3, r6, #8
 800fd02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd06:	f106 010c 	add.w	r1, r6, #12
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	f7fd faea 	bl	800d2e4 <ucdr_deserialize_sequence_uint8_t>
 800fd10:	4604      	mov	r4, r0
 800fd12:	2202      	movs	r2, #2
 800fd14:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fd18:	4628      	mov	r0, r5
 800fd1a:	f003 fdd3 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800fd1e:	4020      	ands	r0, r4
 800fd20:	b2c4      	uxtb	r4, r0
 800fd22:	e7c6      	b.n	800fcb2 <uxr_deserialize_ObjectVariant+0x2a>
 800fd24:	1d31      	adds	r1, r6, #4
 800fd26:	4628      	mov	r0, r5
 800fd28:	f7fc fa98 	bl	800c25c <ucdr_deserialize_uint8_t>
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	b130      	cbz	r0, 800fd3e <uxr_deserialize_ObjectVariant+0xb6>
 800fd30:	7933      	ldrb	r3, [r6, #4]
 800fd32:	2b02      	cmp	r3, #2
 800fd34:	d036      	beq.n	800fda4 <uxr_deserialize_ObjectVariant+0x11c>
 800fd36:	2b03      	cmp	r3, #3
 800fd38:	d03c      	beq.n	800fdb4 <uxr_deserialize_ObjectVariant+0x12c>
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d032      	beq.n	800fda4 <uxr_deserialize_ObjectVariant+0x11c>
 800fd3e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fd42:	4628      	mov	r0, r5
 800fd44:	f7fd f830 	bl	800cda8 <ucdr_deserialize_int16_t>
 800fd48:	4020      	ands	r0, r4
 800fd4a:	b2c4      	uxtb	r4, r0
 800fd4c:	e7b1      	b.n	800fcb2 <uxr_deserialize_ObjectVariant+0x2a>
 800fd4e:	1d31      	adds	r1, r6, #4
 800fd50:	4628      	mov	r0, r5
 800fd52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd56:	f7ff bdcd 	b.w	800f8f4 <uxr_deserialize_CLIENT_Representation>
 800fd5a:	2204      	movs	r2, #4
 800fd5c:	18b1      	adds	r1, r6, r2
 800fd5e:	4628      	mov	r0, r5
 800fd60:	f003 fdb0 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800fd64:	2202      	movs	r2, #2
 800fd66:	f106 0108 	add.w	r1, r6, #8
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	f003 fda9 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800fd72:	2202      	movs	r2, #2
 800fd74:	4004      	ands	r4, r0
 800fd76:	f106 010a 	add.w	r1, r6, #10
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	f003 fda2 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800fd80:	b2e4      	uxtb	r4, r4
 800fd82:	4603      	mov	r3, r0
 800fd84:	f106 010c 	add.w	r1, r6, #12
 800fd88:	4628      	mov	r0, r5
 800fd8a:	401c      	ands	r4, r3
 800fd8c:	f7fc fa38 	bl	800c200 <ucdr_deserialize_bool>
 800fd90:	4004      	ands	r4, r0
 800fd92:	e78e      	b.n	800fcb2 <uxr_deserialize_ObjectVariant+0x2a>
 800fd94:	68b1      	ldr	r1, [r6, #8]
 800fd96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f003 fe06 	bl	80139ac <ucdr_deserialize_string>
 800fda0:	4604      	mov	r4, r0
 800fda2:	e7b6      	b.n	800fd12 <uxr_deserialize_ObjectVariant+0x8a>
 800fda4:	68b1      	ldr	r1, [r6, #8]
 800fda6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdaa:	4628      	mov	r0, r5
 800fdac:	f003 fdfe 	bl	80139ac <ucdr_deserialize_string>
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	e7c4      	b.n	800fd3e <uxr_deserialize_ObjectVariant+0xb6>
 800fdb4:	f106 0308 	add.w	r3, r6, #8
 800fdb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdbc:	f106 010c 	add.w	r1, r6, #12
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	f7fd fa8f 	bl	800d2e4 <ucdr_deserialize_sequence_uint8_t>
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	e7b9      	b.n	800fd3e <uxr_deserialize_ObjectVariant+0xb6>
 800fdca:	bf00      	nop

0800fdcc <uxr_deserialize_BaseObjectRequest>:
 800fdcc:	b570      	push	{r4, r5, r6, lr}
 800fdce:	2202      	movs	r2, #2
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	460e      	mov	r6, r1
 800fdd4:	f003 fd76 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800fdd8:	2202      	movs	r2, #2
 800fdda:	4604      	mov	r4, r0
 800fddc:	18b1      	adds	r1, r6, r2
 800fdde:	4628      	mov	r0, r5
 800fde0:	f003 fd70 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800fde4:	4020      	ands	r0, r4
 800fde6:	b2c0      	uxtb	r0, r0
 800fde8:	bd70      	pop	{r4, r5, r6, pc}
 800fdea:	bf00      	nop

0800fdec <uxr_serialize_ActivityInfoVariant>:
 800fdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdf0:	460d      	mov	r5, r1
 800fdf2:	7809      	ldrb	r1, [r1, #0]
 800fdf4:	4607      	mov	r7, r0
 800fdf6:	f7fc fa1b 	bl	800c230 <ucdr_serialize_uint8_t>
 800fdfa:	4681      	mov	r9, r0
 800fdfc:	b138      	cbz	r0, 800fe0e <uxr_serialize_ActivityInfoVariant+0x22>
 800fdfe:	782b      	ldrb	r3, [r5, #0]
 800fe00:	2b06      	cmp	r3, #6
 800fe02:	f000 8082 	beq.w	800ff0a <uxr_serialize_ActivityInfoVariant+0x11e>
 800fe06:	2b0d      	cmp	r3, #13
 800fe08:	d016      	beq.n	800fe38 <uxr_serialize_ActivityInfoVariant+0x4c>
 800fe0a:	2b05      	cmp	r3, #5
 800fe0c:	d002      	beq.n	800fe14 <uxr_serialize_ActivityInfoVariant+0x28>
 800fe0e:	4648      	mov	r0, r9
 800fe10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe14:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fe18:	4638      	mov	r0, r7
 800fe1a:	f7fc ff45 	bl	800cca8 <ucdr_serialize_int16_t>
 800fe1e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800fe22:	4681      	mov	r9, r0
 800fe24:	4638      	mov	r0, r7
 800fe26:	f7fc fe6f 	bl	800cb08 <ucdr_serialize_uint64_t>
 800fe2a:	ea09 0000 	and.w	r0, r9, r0
 800fe2e:	fa5f f980 	uxtb.w	r9, r0
 800fe32:	4648      	mov	r0, r9
 800fe34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe38:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fe3c:	4638      	mov	r0, r7
 800fe3e:	f7fc ff33 	bl	800cca8 <ucdr_serialize_int16_t>
 800fe42:	68e9      	ldr	r1, [r5, #12]
 800fe44:	4681      	mov	r9, r0
 800fe46:	4638      	mov	r0, r7
 800fe48:	f7fc fc08 	bl	800c65c <ucdr_serialize_uint32_t>
 800fe4c:	68eb      	ldr	r3, [r5, #12]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d0eb      	beq.n	800fe2a <uxr_serialize_ActivityInfoVariant+0x3e>
 800fe52:	b320      	cbz	r0, 800fe9e <uxr_serialize_ActivityInfoVariant+0xb2>
 800fe54:	f105 080c 	add.w	r8, r5, #12
 800fe58:	2600      	movs	r6, #0
 800fe5a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800fe5e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800fe62:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800fe66:	4638      	mov	r0, r7
 800fe68:	f7fc f9e2 	bl	800c230 <ucdr_serialize_uint8_t>
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	d053      	beq.n	800ff18 <uxr_serialize_ActivityInfoVariant+0x12c>
 800fe70:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800fe74:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800fe78:	0074      	lsls	r4, r6, #1
 800fe7a:	00c9      	lsls	r1, r1, #3
 800fe7c:	2b03      	cmp	r3, #3
 800fe7e:	d854      	bhi.n	800ff2a <uxr_serialize_ActivityInfoVariant+0x13e>
 800fe80:	e8df f003 	tbb	[pc, r3]
 800fe84:	02102132 	.word	0x02102132
 800fe88:	4441      	add	r1, r8
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	6889      	ldr	r1, [r1, #8]
 800fe8e:	f003 fd7d 	bl	801398c <ucdr_serialize_string>
 800fe92:	68ea      	ldr	r2, [r5, #12]
 800fe94:	3601      	adds	r6, #1
 800fe96:	4296      	cmp	r6, r2
 800fe98:	d242      	bcs.n	800ff20 <uxr_serialize_ActivityInfoVariant+0x134>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	d1dd      	bne.n	800fe5a <uxr_serialize_ActivityInfoVariant+0x6e>
 800fe9e:	f04f 0900 	mov.w	r9, #0
 800fea2:	e7b4      	b.n	800fe0e <uxr_serialize_ActivityInfoVariant+0x22>
 800fea4:	3108      	adds	r1, #8
 800fea6:	4441      	add	r1, r8
 800fea8:	2210      	movs	r2, #16
 800feaa:	4638      	mov	r0, r7
 800feac:	f003 fca6 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800feb0:	4434      	add	r4, r6
 800feb2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800feb6:	4604      	mov	r4, r0
 800feb8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800feba:	4638      	mov	r0, r7
 800febc:	f7fc fbce 	bl	800c65c <ucdr_serialize_uint32_t>
 800fec0:	4020      	ands	r0, r4
 800fec2:	b2c0      	uxtb	r0, r0
 800fec4:	e7e5      	b.n	800fe92 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fec6:	3108      	adds	r1, #8
 800fec8:	4441      	add	r1, r8
 800feca:	2204      	movs	r2, #4
 800fecc:	4638      	mov	r0, r7
 800fece:	f003 fc95 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800fed2:	4434      	add	r4, r6
 800fed4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fed8:	4604      	mov	r4, r0
 800feda:	8b19      	ldrh	r1, [r3, #24]
 800fedc:	4638      	mov	r0, r7
 800fede:	f7fc f9d3 	bl	800c288 <ucdr_serialize_uint16_t>
 800fee2:	4020      	ands	r0, r4
 800fee4:	b2c0      	uxtb	r0, r0
 800fee6:	e7d4      	b.n	800fe92 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fee8:	3108      	adds	r1, #8
 800feea:	4441      	add	r1, r8
 800feec:	2202      	movs	r2, #2
 800feee:	4638      	mov	r0, r7
 800fef0:	f003 fc84 	bl	80137fc <ucdr_serialize_array_uint8_t>
 800fef4:	4434      	add	r4, r6
 800fef6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fefa:	4604      	mov	r4, r0
 800fefc:	7d99      	ldrb	r1, [r3, #22]
 800fefe:	4638      	mov	r0, r7
 800ff00:	f7fc f996 	bl	800c230 <ucdr_serialize_uint8_t>
 800ff04:	4020      	ands	r0, r4
 800ff06:	b2c0      	uxtb	r0, r0
 800ff08:	e7c3      	b.n	800fe92 <uxr_serialize_ActivityInfoVariant+0xa6>
 800ff0a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ff0e:	4638      	mov	r0, r7
 800ff10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff14:	f7fc bec8 	b.w	800cca8 <ucdr_serialize_int16_t>
 800ff18:	68ea      	ldr	r2, [r5, #12]
 800ff1a:	3601      	adds	r6, #1
 800ff1c:	42b2      	cmp	r2, r6
 800ff1e:	d8be      	bhi.n	800fe9e <uxr_serialize_ActivityInfoVariant+0xb2>
 800ff20:	ea09 0900 	and.w	r9, r9, r0
 800ff24:	fa5f f989 	uxtb.w	r9, r9
 800ff28:	e771      	b.n	800fe0e <uxr_serialize_ActivityInfoVariant+0x22>
 800ff2a:	68eb      	ldr	r3, [r5, #12]
 800ff2c:	3601      	adds	r6, #1
 800ff2e:	429e      	cmp	r6, r3
 800ff30:	f10a 0a18 	add.w	sl, sl, #24
 800ff34:	d395      	bcc.n	800fe62 <uxr_serialize_ActivityInfoVariant+0x76>
 800ff36:	e76a      	b.n	800fe0e <uxr_serialize_ActivityInfoVariant+0x22>

0800ff38 <uxr_deserialize_BaseObjectReply>:
 800ff38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	4606      	mov	r6, r0
 800ff40:	460f      	mov	r7, r1
 800ff42:	f003 fcbf 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800ff46:	2202      	movs	r2, #2
 800ff48:	18b9      	adds	r1, r7, r2
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	f003 fcb9 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 800ff52:	1d39      	adds	r1, r7, #4
 800ff54:	4680      	mov	r8, r0
 800ff56:	4630      	mov	r0, r6
 800ff58:	f7fc f980 	bl	800c25c <ucdr_deserialize_uint8_t>
 800ff5c:	1d79      	adds	r1, r7, #5
 800ff5e:	4604      	mov	r4, r0
 800ff60:	4630      	mov	r0, r6
 800ff62:	f7fc f97b 	bl	800c25c <ucdr_deserialize_uint8_t>
 800ff66:	ea05 0508 	and.w	r5, r5, r8
 800ff6a:	402c      	ands	r4, r5
 800ff6c:	4020      	ands	r0, r4
 800ff6e:	b2c0      	uxtb	r0, r0
 800ff70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff74 <uxr_serialize_ReadSpecification>:
 800ff74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff78:	460e      	mov	r6, r1
 800ff7a:	7809      	ldrb	r1, [r1, #0]
 800ff7c:	4607      	mov	r7, r0
 800ff7e:	f7fc f957 	bl	800c230 <ucdr_serialize_uint8_t>
 800ff82:	7871      	ldrb	r1, [r6, #1]
 800ff84:	4604      	mov	r4, r0
 800ff86:	4638      	mov	r0, r7
 800ff88:	f7fc f952 	bl	800c230 <ucdr_serialize_uint8_t>
 800ff8c:	78b1      	ldrb	r1, [r6, #2]
 800ff8e:	4004      	ands	r4, r0
 800ff90:	4638      	mov	r0, r7
 800ff92:	f7fc f91f 	bl	800c1d4 <ucdr_serialize_bool>
 800ff96:	78b3      	ldrb	r3, [r6, #2]
 800ff98:	b2e4      	uxtb	r4, r4
 800ff9a:	4004      	ands	r4, r0
 800ff9c:	b94b      	cbnz	r3, 800ffb2 <uxr_serialize_ReadSpecification+0x3e>
 800ff9e:	7a31      	ldrb	r1, [r6, #8]
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	f7fc f917 	bl	800c1d4 <ucdr_serialize_bool>
 800ffa6:	7a33      	ldrb	r3, [r6, #8]
 800ffa8:	4004      	ands	r4, r0
 800ffaa:	b943      	cbnz	r3, 800ffbe <uxr_serialize_ReadSpecification+0x4a>
 800ffac:	4620      	mov	r0, r4
 800ffae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb2:	6871      	ldr	r1, [r6, #4]
 800ffb4:	4638      	mov	r0, r7
 800ffb6:	f003 fce9 	bl	801398c <ucdr_serialize_string>
 800ffba:	4004      	ands	r4, r0
 800ffbc:	e7ef      	b.n	800ff9e <uxr_serialize_ReadSpecification+0x2a>
 800ffbe:	8971      	ldrh	r1, [r6, #10]
 800ffc0:	4638      	mov	r0, r7
 800ffc2:	f7fc f961 	bl	800c288 <ucdr_serialize_uint16_t>
 800ffc6:	89b1      	ldrh	r1, [r6, #12]
 800ffc8:	4605      	mov	r5, r0
 800ffca:	4638      	mov	r0, r7
 800ffcc:	f7fc f95c 	bl	800c288 <ucdr_serialize_uint16_t>
 800ffd0:	89f1      	ldrh	r1, [r6, #14]
 800ffd2:	4005      	ands	r5, r0
 800ffd4:	4638      	mov	r0, r7
 800ffd6:	f7fc f957 	bl	800c288 <ucdr_serialize_uint16_t>
 800ffda:	8a31      	ldrh	r1, [r6, #16]
 800ffdc:	4680      	mov	r8, r0
 800ffde:	4638      	mov	r0, r7
 800ffe0:	f7fc f952 	bl	800c288 <ucdr_serialize_uint16_t>
 800ffe4:	b2ed      	uxtb	r5, r5
 800ffe6:	4025      	ands	r5, r4
 800ffe8:	ea08 0505 	and.w	r5, r8, r5
 800ffec:	ea00 0405 	and.w	r4, r0, r5
 800fff0:	4620      	mov	r0, r4
 800fff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fff6:	bf00      	nop

0800fff8 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fff8:	f7ff bc24 	b.w	800f844 <uxr_serialize_CLIENT_Representation>

0800fffc <uxr_serialize_CREATE_Payload>:
 800fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffe:	2202      	movs	r2, #2
 8010000:	4607      	mov	r7, r0
 8010002:	460e      	mov	r6, r1
 8010004:	f003 fbfa 	bl	80137fc <ucdr_serialize_array_uint8_t>
 8010008:	2202      	movs	r2, #2
 801000a:	18b1      	adds	r1, r6, r2
 801000c:	4605      	mov	r5, r0
 801000e:	4638      	mov	r0, r7
 8010010:	f003 fbf4 	bl	80137fc <ucdr_serialize_array_uint8_t>
 8010014:	7931      	ldrb	r1, [r6, #4]
 8010016:	4604      	mov	r4, r0
 8010018:	4638      	mov	r0, r7
 801001a:	f7fc f909 	bl	800c230 <ucdr_serialize_uint8_t>
 801001e:	b170      	cbz	r0, 801003e <uxr_serialize_CREATE_Payload+0x42>
 8010020:	7933      	ldrb	r3, [r6, #4]
 8010022:	402c      	ands	r4, r5
 8010024:	3b01      	subs	r3, #1
 8010026:	b2e4      	uxtb	r4, r4
 8010028:	2b0d      	cmp	r3, #13
 801002a:	d809      	bhi.n	8010040 <uxr_serialize_CREATE_Payload+0x44>
 801002c:	e8df f003 	tbb	[pc, r3]
 8010030:	23230a4c 	.word	0x23230a4c
 8010034:	0a0a0a0a 	.word	0x0a0a0a0a
 8010038:	12121208 	.word	0x12121208
 801003c:	3e45      	.short	0x3e45
 801003e:	2400      	movs	r4, #0
 8010040:	4620      	mov	r0, r4
 8010042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010044:	f106 0108 	add.w	r1, r6, #8
 8010048:	4638      	mov	r0, r7
 801004a:	f7ff fd01 	bl	800fa50 <uxr_serialize_DATAWRITER_Representation>
 801004e:	4004      	ands	r4, r0
 8010050:	4620      	mov	r0, r4
 8010052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010054:	7a31      	ldrb	r1, [r6, #8]
 8010056:	4638      	mov	r0, r7
 8010058:	f7fc f8ea 	bl	800c230 <ucdr_serialize_uint8_t>
 801005c:	2800      	cmp	r0, #0
 801005e:	d0ee      	beq.n	801003e <uxr_serialize_CREATE_Payload+0x42>
 8010060:	7a33      	ldrb	r3, [r6, #8]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d001      	beq.n	801006a <uxr_serialize_CREATE_Payload+0x6e>
 8010066:	2b02      	cmp	r3, #2
 8010068:	d1ea      	bne.n	8010040 <uxr_serialize_CREATE_Payload+0x44>
 801006a:	68f1      	ldr	r1, [r6, #12]
 801006c:	4638      	mov	r0, r7
 801006e:	f003 fc8d 	bl	801398c <ucdr_serialize_string>
 8010072:	4004      	ands	r4, r0
 8010074:	e7e4      	b.n	8010040 <uxr_serialize_CREATE_Payload+0x44>
 8010076:	7a31      	ldrb	r1, [r6, #8]
 8010078:	4638      	mov	r0, r7
 801007a:	f7fc f8d9 	bl	800c230 <ucdr_serialize_uint8_t>
 801007e:	4605      	mov	r5, r0
 8010080:	b158      	cbz	r0, 801009a <uxr_serialize_CREATE_Payload+0x9e>
 8010082:	7a33      	ldrb	r3, [r6, #8]
 8010084:	2b02      	cmp	r3, #2
 8010086:	d034      	beq.n	80100f2 <uxr_serialize_CREATE_Payload+0xf6>
 8010088:	2b03      	cmp	r3, #3
 801008a:	d106      	bne.n	801009a <uxr_serialize_CREATE_Payload+0x9e>
 801008c:	68f2      	ldr	r2, [r6, #12]
 801008e:	f106 0110 	add.w	r1, r6, #16
 8010092:	4638      	mov	r0, r7
 8010094:	f7fd f914 	bl	800d2c0 <ucdr_serialize_sequence_uint8_t>
 8010098:	4605      	mov	r5, r0
 801009a:	2202      	movs	r2, #2
 801009c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80100a0:	4638      	mov	r0, r7
 80100a2:	f003 fbab 	bl	80137fc <ucdr_serialize_array_uint8_t>
 80100a6:	4028      	ands	r0, r5
 80100a8:	4004      	ands	r4, r0
 80100aa:	e7c9      	b.n	8010040 <uxr_serialize_CREATE_Payload+0x44>
 80100ac:	f106 0108 	add.w	r1, r6, #8
 80100b0:	4638      	mov	r0, r7
 80100b2:	f7ff fbc7 	bl	800f844 <uxr_serialize_CLIENT_Representation>
 80100b6:	4004      	ands	r4, r0
 80100b8:	e7c2      	b.n	8010040 <uxr_serialize_CREATE_Payload+0x44>
 80100ba:	f106 0108 	add.w	r1, r6, #8
 80100be:	4638      	mov	r0, r7
 80100c0:	f7ff fc7c 	bl	800f9bc <uxr_serialize_AGENT_Representation>
 80100c4:	4004      	ands	r4, r0
 80100c6:	e7bb      	b.n	8010040 <uxr_serialize_CREATE_Payload+0x44>
 80100c8:	7a31      	ldrb	r1, [r6, #8]
 80100ca:	4638      	mov	r0, r7
 80100cc:	f7fc f8b0 	bl	800c230 <ucdr_serialize_uint8_t>
 80100d0:	4605      	mov	r5, r0
 80100d2:	b130      	cbz	r0, 80100e2 <uxr_serialize_CREATE_Payload+0xe6>
 80100d4:	7a33      	ldrb	r3, [r6, #8]
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	d011      	beq.n	80100fe <uxr_serialize_CREATE_Payload+0x102>
 80100da:	2b03      	cmp	r3, #3
 80100dc:	d015      	beq.n	801010a <uxr_serialize_CREATE_Payload+0x10e>
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d00d      	beq.n	80100fe <uxr_serialize_CREATE_Payload+0x102>
 80100e2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80100e6:	4638      	mov	r0, r7
 80100e8:	f7fc fdde 	bl	800cca8 <ucdr_serialize_int16_t>
 80100ec:	4028      	ands	r0, r5
 80100ee:	4004      	ands	r4, r0
 80100f0:	e7a6      	b.n	8010040 <uxr_serialize_CREATE_Payload+0x44>
 80100f2:	68f1      	ldr	r1, [r6, #12]
 80100f4:	4638      	mov	r0, r7
 80100f6:	f003 fc49 	bl	801398c <ucdr_serialize_string>
 80100fa:	4605      	mov	r5, r0
 80100fc:	e7cd      	b.n	801009a <uxr_serialize_CREATE_Payload+0x9e>
 80100fe:	68f1      	ldr	r1, [r6, #12]
 8010100:	4638      	mov	r0, r7
 8010102:	f003 fc43 	bl	801398c <ucdr_serialize_string>
 8010106:	4605      	mov	r5, r0
 8010108:	e7eb      	b.n	80100e2 <uxr_serialize_CREATE_Payload+0xe6>
 801010a:	68f2      	ldr	r2, [r6, #12]
 801010c:	f106 0110 	add.w	r1, r6, #16
 8010110:	4638      	mov	r0, r7
 8010112:	f7fd f8d5 	bl	800d2c0 <ucdr_serialize_sequence_uint8_t>
 8010116:	4605      	mov	r5, r0
 8010118:	e7e3      	b.n	80100e2 <uxr_serialize_CREATE_Payload+0xe6>
 801011a:	bf00      	nop

0801011c <uxr_deserialize_GET_INFO_Payload>:
 801011c:	b570      	push	{r4, r5, r6, lr}
 801011e:	2202      	movs	r2, #2
 8010120:	4605      	mov	r5, r0
 8010122:	460e      	mov	r6, r1
 8010124:	f003 fbce 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 8010128:	2202      	movs	r2, #2
 801012a:	18b1      	adds	r1, r6, r2
 801012c:	4604      	mov	r4, r0
 801012e:	4628      	mov	r0, r5
 8010130:	f003 fbc8 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 8010134:	1d31      	adds	r1, r6, #4
 8010136:	4004      	ands	r4, r0
 8010138:	4628      	mov	r0, r5
 801013a:	f7fc fbbf 	bl	800c8bc <ucdr_deserialize_uint32_t>
 801013e:	b2e4      	uxtb	r4, r4
 8010140:	4020      	ands	r0, r4
 8010142:	bd70      	pop	{r4, r5, r6, pc}

08010144 <uxr_serialize_DELETE_Payload>:
 8010144:	b570      	push	{r4, r5, r6, lr}
 8010146:	2202      	movs	r2, #2
 8010148:	4605      	mov	r5, r0
 801014a:	460e      	mov	r6, r1
 801014c:	f003 fb56 	bl	80137fc <ucdr_serialize_array_uint8_t>
 8010150:	2202      	movs	r2, #2
 8010152:	4604      	mov	r4, r0
 8010154:	18b1      	adds	r1, r6, r2
 8010156:	4628      	mov	r0, r5
 8010158:	f003 fb50 	bl	80137fc <ucdr_serialize_array_uint8_t>
 801015c:	4020      	ands	r0, r4
 801015e:	b2c0      	uxtb	r0, r0
 8010160:	bd70      	pop	{r4, r5, r6, pc}
 8010162:	bf00      	nop

08010164 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010168:	4605      	mov	r5, r0
 801016a:	460e      	mov	r6, r1
 801016c:	f7fc f876 	bl	800c25c <ucdr_deserialize_uint8_t>
 8010170:	1c71      	adds	r1, r6, #1
 8010172:	4604      	mov	r4, r0
 8010174:	4628      	mov	r0, r5
 8010176:	f7fc f871 	bl	800c25c <ucdr_deserialize_uint8_t>
 801017a:	2204      	movs	r2, #4
 801017c:	18b1      	adds	r1, r6, r2
 801017e:	4680      	mov	r8, r0
 8010180:	4628      	mov	r0, r5
 8010182:	f003 fb9f 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 8010186:	f106 0108 	add.w	r1, r6, #8
 801018a:	4607      	mov	r7, r0
 801018c:	2202      	movs	r2, #2
 801018e:	4628      	mov	r0, r5
 8010190:	f003 fb98 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 8010194:	ea04 0308 	and.w	r3, r4, r8
 8010198:	b2db      	uxtb	r3, r3
 801019a:	ea03 0407 	and.w	r4, r3, r7
 801019e:	2202      	movs	r2, #2
 80101a0:	4607      	mov	r7, r0
 80101a2:	f106 010a 	add.w	r1, r6, #10
 80101a6:	4628      	mov	r0, r5
 80101a8:	f003 fb8c 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 80101ac:	f106 010c 	add.w	r1, r6, #12
 80101b0:	4603      	mov	r3, r0
 80101b2:	4628      	mov	r0, r5
 80101b4:	461d      	mov	r5, r3
 80101b6:	f7fc f823 	bl	800c200 <ucdr_deserialize_bool>
 80101ba:	403c      	ands	r4, r7
 80101bc:	4025      	ands	r5, r4
 80101be:	4028      	ands	r0, r5
 80101c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101c4 <uxr_deserialize_STATUS_Payload>:
 80101c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c8:	2202      	movs	r2, #2
 80101ca:	4606      	mov	r6, r0
 80101cc:	460f      	mov	r7, r1
 80101ce:	f003 fb79 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 80101d2:	2202      	movs	r2, #2
 80101d4:	18b9      	adds	r1, r7, r2
 80101d6:	4605      	mov	r5, r0
 80101d8:	4630      	mov	r0, r6
 80101da:	f003 fb73 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 80101de:	1d39      	adds	r1, r7, #4
 80101e0:	4680      	mov	r8, r0
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7fc f83a 	bl	800c25c <ucdr_deserialize_uint8_t>
 80101e8:	1d79      	adds	r1, r7, #5
 80101ea:	4604      	mov	r4, r0
 80101ec:	4630      	mov	r0, r6
 80101ee:	f7fc f835 	bl	800c25c <ucdr_deserialize_uint8_t>
 80101f2:	ea05 0508 	and.w	r5, r5, r8
 80101f6:	402c      	ands	r4, r5
 80101f8:	4020      	ands	r0, r4
 80101fa:	b2c0      	uxtb	r0, r0
 80101fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010200 <uxr_serialize_INFO_Payload>:
 8010200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010204:	2202      	movs	r2, #2
 8010206:	460c      	mov	r4, r1
 8010208:	4605      	mov	r5, r0
 801020a:	f003 faf7 	bl	80137fc <ucdr_serialize_array_uint8_t>
 801020e:	2202      	movs	r2, #2
 8010210:	18a1      	adds	r1, r4, r2
 8010212:	4680      	mov	r8, r0
 8010214:	4628      	mov	r0, r5
 8010216:	f003 faf1 	bl	80137fc <ucdr_serialize_array_uint8_t>
 801021a:	7921      	ldrb	r1, [r4, #4]
 801021c:	4607      	mov	r7, r0
 801021e:	4628      	mov	r0, r5
 8010220:	f7fc f806 	bl	800c230 <ucdr_serialize_uint8_t>
 8010224:	7961      	ldrb	r1, [r4, #5]
 8010226:	4606      	mov	r6, r0
 8010228:	4628      	mov	r0, r5
 801022a:	f7fc f801 	bl	800c230 <ucdr_serialize_uint8_t>
 801022e:	ea08 0807 	and.w	r8, r8, r7
 8010232:	ea06 0608 	and.w	r6, r6, r8
 8010236:	4006      	ands	r6, r0
 8010238:	7a21      	ldrb	r1, [r4, #8]
 801023a:	4628      	mov	r0, r5
 801023c:	f7fb ffca 	bl	800c1d4 <ucdr_serialize_bool>
 8010240:	7a23      	ldrb	r3, [r4, #8]
 8010242:	b2f7      	uxtb	r7, r6
 8010244:	4606      	mov	r6, r0
 8010246:	b96b      	cbnz	r3, 8010264 <uxr_serialize_INFO_Payload+0x64>
 8010248:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801024c:	4628      	mov	r0, r5
 801024e:	f7fb ffc1 	bl	800c1d4 <ucdr_serialize_bool>
 8010252:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010256:	4030      	ands	r0, r6
 8010258:	b2c6      	uxtb	r6, r0
 801025a:	b983      	cbnz	r3, 801027e <uxr_serialize_INFO_Payload+0x7e>
 801025c:	ea06 0007 	and.w	r0, r6, r7
 8010260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010264:	7b21      	ldrb	r1, [r4, #12]
 8010266:	4628      	mov	r0, r5
 8010268:	f7fb ffe2 	bl	800c230 <ucdr_serialize_uint8_t>
 801026c:	b188      	cbz	r0, 8010292 <uxr_serialize_INFO_Payload+0x92>
 801026e:	f104 010c 	add.w	r1, r4, #12
 8010272:	4628      	mov	r0, r5
 8010274:	f7ff fc14 	bl	800faa0 <uxr_serialize_ObjectVariant.part.0>
 8010278:	4030      	ands	r0, r6
 801027a:	b2c6      	uxtb	r6, r0
 801027c:	e7e4      	b.n	8010248 <uxr_serialize_INFO_Payload+0x48>
 801027e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010282:	4628      	mov	r0, r5
 8010284:	f7ff fdb2 	bl	800fdec <uxr_serialize_ActivityInfoVariant>
 8010288:	4006      	ands	r6, r0
 801028a:	ea06 0007 	and.w	r0, r6, r7
 801028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010292:	4606      	mov	r6, r0
 8010294:	e7d8      	b.n	8010248 <uxr_serialize_INFO_Payload+0x48>
 8010296:	bf00      	nop

08010298 <uxr_serialize_READ_DATA_Payload>:
 8010298:	b570      	push	{r4, r5, r6, lr}
 801029a:	2202      	movs	r2, #2
 801029c:	4605      	mov	r5, r0
 801029e:	460e      	mov	r6, r1
 80102a0:	f003 faac 	bl	80137fc <ucdr_serialize_array_uint8_t>
 80102a4:	2202      	movs	r2, #2
 80102a6:	18b1      	adds	r1, r6, r2
 80102a8:	4604      	mov	r4, r0
 80102aa:	4628      	mov	r0, r5
 80102ac:	f003 faa6 	bl	80137fc <ucdr_serialize_array_uint8_t>
 80102b0:	1d31      	adds	r1, r6, #4
 80102b2:	4004      	ands	r4, r0
 80102b4:	4628      	mov	r0, r5
 80102b6:	f7ff fe5d 	bl	800ff74 <uxr_serialize_ReadSpecification>
 80102ba:	b2e4      	uxtb	r4, r4
 80102bc:	4020      	ands	r0, r4
 80102be:	bd70      	pop	{r4, r5, r6, pc}

080102c0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	2202      	movs	r2, #2
 80102c4:	4605      	mov	r5, r0
 80102c6:	460e      	mov	r6, r1
 80102c8:	f003 fa98 	bl	80137fc <ucdr_serialize_array_uint8_t>
 80102cc:	2202      	movs	r2, #2
 80102ce:	4604      	mov	r4, r0
 80102d0:	18b1      	adds	r1, r6, r2
 80102d2:	4628      	mov	r0, r5
 80102d4:	f003 fa92 	bl	80137fc <ucdr_serialize_array_uint8_t>
 80102d8:	4020      	ands	r0, r4
 80102da:	b2c0      	uxtb	r0, r0
 80102dc:	bd70      	pop	{r4, r5, r6, pc}
 80102de:	bf00      	nop

080102e0 <uxr_serialize_ACKNACK_Payload>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	460c      	mov	r4, r1
 80102e4:	460e      	mov	r6, r1
 80102e6:	f834 1b02 	ldrh.w	r1, [r4], #2
 80102ea:	4605      	mov	r5, r0
 80102ec:	f7fb ffcc 	bl	800c288 <ucdr_serialize_uint16_t>
 80102f0:	2202      	movs	r2, #2
 80102f2:	4621      	mov	r1, r4
 80102f4:	4604      	mov	r4, r0
 80102f6:	4628      	mov	r0, r5
 80102f8:	f003 fa80 	bl	80137fc <ucdr_serialize_array_uint8_t>
 80102fc:	7931      	ldrb	r1, [r6, #4]
 80102fe:	4004      	ands	r4, r0
 8010300:	4628      	mov	r0, r5
 8010302:	f7fb ff95 	bl	800c230 <ucdr_serialize_uint8_t>
 8010306:	b2e4      	uxtb	r4, r4
 8010308:	4020      	ands	r0, r4
 801030a:	bd70      	pop	{r4, r5, r6, pc}

0801030c <uxr_deserialize_ACKNACK_Payload>:
 801030c:	b570      	push	{r4, r5, r6, lr}
 801030e:	4605      	mov	r5, r0
 8010310:	460e      	mov	r6, r1
 8010312:	f7fc f8b9 	bl	800c488 <ucdr_deserialize_uint16_t>
 8010316:	2202      	movs	r2, #2
 8010318:	18b1      	adds	r1, r6, r2
 801031a:	4604      	mov	r4, r0
 801031c:	4628      	mov	r0, r5
 801031e:	f003 fad1 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 8010322:	1d31      	adds	r1, r6, #4
 8010324:	4004      	ands	r4, r0
 8010326:	4628      	mov	r0, r5
 8010328:	f7fb ff98 	bl	800c25c <ucdr_deserialize_uint8_t>
 801032c:	b2e4      	uxtb	r4, r4
 801032e:	4020      	ands	r0, r4
 8010330:	bd70      	pop	{r4, r5, r6, pc}
 8010332:	bf00      	nop

08010334 <uxr_serialize_HEARTBEAT_Payload>:
 8010334:	b570      	push	{r4, r5, r6, lr}
 8010336:	460d      	mov	r5, r1
 8010338:	8809      	ldrh	r1, [r1, #0]
 801033a:	4606      	mov	r6, r0
 801033c:	f7fb ffa4 	bl	800c288 <ucdr_serialize_uint16_t>
 8010340:	8869      	ldrh	r1, [r5, #2]
 8010342:	4604      	mov	r4, r0
 8010344:	4630      	mov	r0, r6
 8010346:	f7fb ff9f 	bl	800c288 <ucdr_serialize_uint16_t>
 801034a:	7929      	ldrb	r1, [r5, #4]
 801034c:	4004      	ands	r4, r0
 801034e:	4630      	mov	r0, r6
 8010350:	f7fb ff6e 	bl	800c230 <ucdr_serialize_uint8_t>
 8010354:	b2e4      	uxtb	r4, r4
 8010356:	4020      	ands	r0, r4
 8010358:	bd70      	pop	{r4, r5, r6, pc}
 801035a:	bf00      	nop

0801035c <uxr_deserialize_HEARTBEAT_Payload>:
 801035c:	b570      	push	{r4, r5, r6, lr}
 801035e:	4605      	mov	r5, r0
 8010360:	460e      	mov	r6, r1
 8010362:	f7fc f891 	bl	800c488 <ucdr_deserialize_uint16_t>
 8010366:	1cb1      	adds	r1, r6, #2
 8010368:	4604      	mov	r4, r0
 801036a:	4628      	mov	r0, r5
 801036c:	f7fc f88c 	bl	800c488 <ucdr_deserialize_uint16_t>
 8010370:	1d31      	adds	r1, r6, #4
 8010372:	4004      	ands	r4, r0
 8010374:	4628      	mov	r0, r5
 8010376:	f7fb ff71 	bl	800c25c <ucdr_deserialize_uint8_t>
 801037a:	b2e4      	uxtb	r4, r4
 801037c:	4020      	ands	r0, r4
 801037e:	bd70      	pop	{r4, r5, r6, pc}

08010380 <uxr_serialize_TIMESTAMP_Payload>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	460d      	mov	r5, r1
 8010384:	6809      	ldr	r1, [r1, #0]
 8010386:	4606      	mov	r6, r0
 8010388:	f7fc fd82 	bl	800ce90 <ucdr_serialize_int32_t>
 801038c:	6869      	ldr	r1, [r5, #4]
 801038e:	4604      	mov	r4, r0
 8010390:	4630      	mov	r0, r6
 8010392:	f7fc f963 	bl	800c65c <ucdr_serialize_uint32_t>
 8010396:	4020      	ands	r0, r4
 8010398:	b2c0      	uxtb	r0, r0
 801039a:	bd70      	pop	{r4, r5, r6, pc}

0801039c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	4605      	mov	r5, r0
 80103a2:	460e      	mov	r6, r1
 80103a4:	f7fc fe0c 	bl	800cfc0 <ucdr_deserialize_int32_t>
 80103a8:	1d31      	adds	r1, r6, #4
 80103aa:	4607      	mov	r7, r0
 80103ac:	4628      	mov	r0, r5
 80103ae:	f7fc fa85 	bl	800c8bc <ucdr_deserialize_uint32_t>
 80103b2:	f106 0108 	add.w	r1, r6, #8
 80103b6:	4680      	mov	r8, r0
 80103b8:	4628      	mov	r0, r5
 80103ba:	f7fc fe01 	bl	800cfc0 <ucdr_deserialize_int32_t>
 80103be:	f106 010c 	add.w	r1, r6, #12
 80103c2:	4604      	mov	r4, r0
 80103c4:	4628      	mov	r0, r5
 80103c6:	f7fc fa79 	bl	800c8bc <ucdr_deserialize_uint32_t>
 80103ca:	ea07 0708 	and.w	r7, r7, r8
 80103ce:	403c      	ands	r4, r7
 80103d0:	f106 0110 	add.w	r1, r6, #16
 80103d4:	4004      	ands	r4, r0
 80103d6:	4628      	mov	r0, r5
 80103d8:	f7fc fdf2 	bl	800cfc0 <ucdr_deserialize_int32_t>
 80103dc:	f106 0114 	add.w	r1, r6, #20
 80103e0:	4607      	mov	r7, r0
 80103e2:	4628      	mov	r0, r5
 80103e4:	f7fc fa6a 	bl	800c8bc <ucdr_deserialize_uint32_t>
 80103e8:	b2e4      	uxtb	r4, r4
 80103ea:	403c      	ands	r4, r7
 80103ec:	4020      	ands	r0, r4
 80103ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f2:	bf00      	nop

080103f4 <uxr_serialize_SampleIdentity>:
 80103f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f8:	220c      	movs	r2, #12
 80103fa:	4604      	mov	r4, r0
 80103fc:	460d      	mov	r5, r1
 80103fe:	f003 f9fd 	bl	80137fc <ucdr_serialize_array_uint8_t>
 8010402:	2203      	movs	r2, #3
 8010404:	f105 010c 	add.w	r1, r5, #12
 8010408:	4607      	mov	r7, r0
 801040a:	4620      	mov	r0, r4
 801040c:	f003 f9f6 	bl	80137fc <ucdr_serialize_array_uint8_t>
 8010410:	7be9      	ldrb	r1, [r5, #15]
 8010412:	4680      	mov	r8, r0
 8010414:	4620      	mov	r0, r4
 8010416:	f7fb ff0b 	bl	800c230 <ucdr_serialize_uint8_t>
 801041a:	6929      	ldr	r1, [r5, #16]
 801041c:	4606      	mov	r6, r0
 801041e:	4620      	mov	r0, r4
 8010420:	f7fc fd36 	bl	800ce90 <ucdr_serialize_int32_t>
 8010424:	6969      	ldr	r1, [r5, #20]
 8010426:	4603      	mov	r3, r0
 8010428:	4620      	mov	r0, r4
 801042a:	ea07 0708 	and.w	r7, r7, r8
 801042e:	461c      	mov	r4, r3
 8010430:	f7fc f914 	bl	800c65c <ucdr_serialize_uint32_t>
 8010434:	403e      	ands	r6, r7
 8010436:	4034      	ands	r4, r6
 8010438:	4020      	ands	r0, r4
 801043a:	b2c0      	uxtb	r0, r0
 801043c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010440 <uxr_deserialize_SampleIdentity>:
 8010440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010444:	220c      	movs	r2, #12
 8010446:	4604      	mov	r4, r0
 8010448:	460d      	mov	r5, r1
 801044a:	f003 fa3b 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 801044e:	2203      	movs	r2, #3
 8010450:	f105 010c 	add.w	r1, r5, #12
 8010454:	4607      	mov	r7, r0
 8010456:	4620      	mov	r0, r4
 8010458:	f003 fa34 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 801045c:	f105 010f 	add.w	r1, r5, #15
 8010460:	4680      	mov	r8, r0
 8010462:	4620      	mov	r0, r4
 8010464:	f7fb fefa 	bl	800c25c <ucdr_deserialize_uint8_t>
 8010468:	f105 0110 	add.w	r1, r5, #16
 801046c:	4606      	mov	r6, r0
 801046e:	4620      	mov	r0, r4
 8010470:	f7fc fda6 	bl	800cfc0 <ucdr_deserialize_int32_t>
 8010474:	f105 0114 	add.w	r1, r5, #20
 8010478:	4603      	mov	r3, r0
 801047a:	4620      	mov	r0, r4
 801047c:	ea07 0708 	and.w	r7, r7, r8
 8010480:	461c      	mov	r4, r3
 8010482:	f7fc fa1b 	bl	800c8bc <ucdr_deserialize_uint32_t>
 8010486:	403e      	ands	r6, r7
 8010488:	4034      	ands	r4, r6
 801048a:	4020      	ands	r0, r4
 801048c:	b2c0      	uxtb	r0, r0
 801048e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010492:	bf00      	nop

08010494 <rcl_convert_rmw_ret_to_rcl_ret>:
 8010494:	280b      	cmp	r0, #11
 8010496:	dc0d      	bgt.n	80104b4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010498:	2800      	cmp	r0, #0
 801049a:	db09      	blt.n	80104b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801049c:	280b      	cmp	r0, #11
 801049e:	d807      	bhi.n	80104b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80104a0:	e8df f000 	tbb	[pc, r0]
 80104a4:	07060607 	.word	0x07060607
 80104a8:	06060606 	.word	0x06060606
 80104ac:	07070606 	.word	0x07070606
 80104b0:	2001      	movs	r0, #1
 80104b2:	4770      	bx	lr
 80104b4:	28cb      	cmp	r0, #203	@ 0xcb
 80104b6:	bf18      	it	ne
 80104b8:	2001      	movne	r0, #1
 80104ba:	4770      	bx	lr

080104bc <rcl_get_zero_initialized_context>:
 80104bc:	4a03      	ldr	r2, [pc, #12]	@ (80104cc <rcl_get_zero_initialized_context+0x10>)
 80104be:	4603      	mov	r3, r0
 80104c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80104c8:	4618      	mov	r0, r3
 80104ca:	4770      	bx	lr
 80104cc:	080169dc 	.word	0x080169dc

080104d0 <rcl_context_is_valid>:
 80104d0:	b118      	cbz	r0, 80104da <rcl_context_is_valid+0xa>
 80104d2:	6840      	ldr	r0, [r0, #4]
 80104d4:	3800      	subs	r0, #0
 80104d6:	bf18      	it	ne
 80104d8:	2001      	movne	r0, #1
 80104da:	4770      	bx	lr

080104dc <__cleanup_context>:
 80104dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104e0:	4606      	mov	r6, r0
 80104e2:	6800      	ldr	r0, [r0, #0]
 80104e4:	2300      	movs	r3, #0
 80104e6:	6073      	str	r3, [r6, #4]
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d049      	beq.n	8010580 <__cleanup_context+0xa4>
 80104ec:	6947      	ldr	r7, [r0, #20]
 80104ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80104f2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80104f6:	b137      	cbz	r7, 8010506 <__cleanup_context+0x2a>
 80104f8:	3014      	adds	r0, #20
 80104fa:	f7f8 fa93 	bl	8008a24 <rcl_init_options_fini>
 80104fe:	4607      	mov	r7, r0
 8010500:	2800      	cmp	r0, #0
 8010502:	d144      	bne.n	801058e <__cleanup_context+0xb2>
 8010504:	6830      	ldr	r0, [r6, #0]
 8010506:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010508:	b143      	cbz	r3, 801051c <__cleanup_context+0x40>
 801050a:	3028      	adds	r0, #40	@ 0x28
 801050c:	f7fa fdaa 	bl	800b064 <rmw_context_fini>
 8010510:	b118      	cbz	r0, 801051a <__cleanup_context+0x3e>
 8010512:	2f00      	cmp	r7, #0
 8010514:	d03e      	beq.n	8010594 <__cleanup_context+0xb8>
 8010516:	f7f9 fdb7 	bl	800a088 <rcutils_reset_error>
 801051a:	6830      	ldr	r0, [r6, #0]
 801051c:	6a03      	ldr	r3, [r0, #32]
 801051e:	b1db      	cbz	r3, 8010558 <__cleanup_context+0x7c>
 8010520:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010524:	2a01      	cmp	r2, #1
 8010526:	f17c 0100 	sbcs.w	r1, ip, #0
 801052a:	db11      	blt.n	8010550 <__cleanup_context+0x74>
 801052c:	2400      	movs	r4, #0
 801052e:	4625      	mov	r5, r4
 8010530:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010534:	4649      	mov	r1, r9
 8010536:	b1b8      	cbz	r0, 8010568 <__cleanup_context+0x8c>
 8010538:	47c0      	blx	r8
 801053a:	6833      	ldr	r3, [r6, #0]
 801053c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010540:	3401      	adds	r4, #1
 8010542:	f145 0500 	adc.w	r5, r5, #0
 8010546:	4294      	cmp	r4, r2
 8010548:	eb75 010c 	sbcs.w	r1, r5, ip
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	dbef      	blt.n	8010530 <__cleanup_context+0x54>
 8010550:	4618      	mov	r0, r3
 8010552:	4649      	mov	r1, r9
 8010554:	47c0      	blx	r8
 8010556:	6830      	ldr	r0, [r6, #0]
 8010558:	4649      	mov	r1, r9
 801055a:	47c0      	blx	r8
 801055c:	2300      	movs	r3, #0
 801055e:	e9c6 3300 	strd	r3, r3, [r6]
 8010562:	4638      	mov	r0, r7
 8010564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010568:	3401      	adds	r4, #1
 801056a:	f145 0500 	adc.w	r5, r5, #0
 801056e:	4294      	cmp	r4, r2
 8010570:	eb75 010c 	sbcs.w	r1, r5, ip
 8010574:	dbdc      	blt.n	8010530 <__cleanup_context+0x54>
 8010576:	4618      	mov	r0, r3
 8010578:	4649      	mov	r1, r9
 801057a:	47c0      	blx	r8
 801057c:	6830      	ldr	r0, [r6, #0]
 801057e:	e7eb      	b.n	8010558 <__cleanup_context+0x7c>
 8010580:	4607      	mov	r7, r0
 8010582:	2300      	movs	r3, #0
 8010584:	e9c6 3300 	strd	r3, r3, [r6]
 8010588:	4638      	mov	r0, r7
 801058a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801058e:	f7f9 fd7b 	bl	800a088 <rcutils_reset_error>
 8010592:	e7b7      	b.n	8010504 <__cleanup_context+0x28>
 8010594:	f7ff ff7e 	bl	8010494 <rcl_convert_rmw_ret_to_rcl_ret>
 8010598:	4607      	mov	r7, r0
 801059a:	e7bc      	b.n	8010516 <__cleanup_context+0x3a>

0801059c <rcl_expand_topic_name>:
 801059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	b08b      	sub	sp, #44	@ 0x2c
 80105a2:	9306      	str	r3, [sp, #24]
 80105a4:	2800      	cmp	r0, #0
 80105a6:	f000 80ad 	beq.w	8010704 <rcl_expand_topic_name+0x168>
 80105aa:	460e      	mov	r6, r1
 80105ac:	2900      	cmp	r1, #0
 80105ae:	f000 80a9 	beq.w	8010704 <rcl_expand_topic_name+0x168>
 80105b2:	4617      	mov	r7, r2
 80105b4:	2a00      	cmp	r2, #0
 80105b6:	f000 80a5 	beq.w	8010704 <rcl_expand_topic_name+0x168>
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f000 80a2 	beq.w	8010704 <rcl_expand_topic_name+0x168>
 80105c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	f000 809e 	beq.w	8010704 <rcl_expand_topic_name+0x168>
 80105c8:	2200      	movs	r2, #0
 80105ca:	a909      	add	r1, sp, #36	@ 0x24
 80105cc:	4680      	mov	r8, r0
 80105ce:	f000 ffe5 	bl	801159c <rcl_validate_topic_name>
 80105d2:	4604      	mov	r4, r0
 80105d4:	2800      	cmp	r0, #0
 80105d6:	f040 8096 	bne.w	8010706 <rcl_expand_topic_name+0x16a>
 80105da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f040 809a 	bne.w	8010716 <rcl_expand_topic_name+0x17a>
 80105e2:	4602      	mov	r2, r0
 80105e4:	a909      	add	r1, sp, #36	@ 0x24
 80105e6:	4630      	mov	r0, r6
 80105e8:	f7fa f934 	bl	800a854 <rmw_validate_node_name>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	f040 808e 	bne.w	801070e <rcl_expand_topic_name+0x172>
 80105f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105f4:	2a00      	cmp	r2, #0
 80105f6:	f040 8093 	bne.w	8010720 <rcl_expand_topic_name+0x184>
 80105fa:	a909      	add	r1, sp, #36	@ 0x24
 80105fc:	4638      	mov	r0, r7
 80105fe:	f7fa f90b 	bl	800a818 <rmw_validate_namespace>
 8010602:	2800      	cmp	r0, #0
 8010604:	f040 8083 	bne.w	801070e <rcl_expand_topic_name+0x172>
 8010608:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801060a:	2c00      	cmp	r4, #0
 801060c:	f040 80ed 	bne.w	80107ea <rcl_expand_topic_name+0x24e>
 8010610:	217b      	movs	r1, #123	@ 0x7b
 8010612:	4640      	mov	r0, r8
 8010614:	f004 fc68 	bl	8014ee8 <strchr>
 8010618:	f898 3000 	ldrb.w	r3, [r8]
 801061c:	2b2f      	cmp	r3, #47	@ 0x2f
 801061e:	4605      	mov	r5, r0
 8010620:	f000 809e 	beq.w	8010760 <rcl_expand_topic_name+0x1c4>
 8010624:	2b7e      	cmp	r3, #126	@ 0x7e
 8010626:	f040 80a2 	bne.w	801076e <rcl_expand_topic_name+0x1d2>
 801062a:	4638      	mov	r0, r7
 801062c:	f7ef fe02 	bl	8000234 <strlen>
 8010630:	4a82      	ldr	r2, [pc, #520]	@ (801083c <rcl_expand_topic_name+0x2a0>)
 8010632:	4b83      	ldr	r3, [pc, #524]	@ (8010840 <rcl_expand_topic_name+0x2a4>)
 8010634:	2801      	cmp	r0, #1
 8010636:	bf18      	it	ne
 8010638:	4613      	movne	r3, r2
 801063a:	9302      	str	r3, [sp, #8]
 801063c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801063e:	9300      	str	r3, [sp, #0]
 8010640:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8010644:	f108 0301 	add.w	r3, r8, #1
 8010648:	9305      	str	r3, [sp, #20]
 801064a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801064e:	9301      	str	r3, [sp, #4]
 8010650:	ab14      	add	r3, sp, #80	@ 0x50
 8010652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010654:	f7f9 fd34 	bl	800a0c0 <rcutils_format_string_limit>
 8010658:	4682      	mov	sl, r0
 801065a:	2800      	cmp	r0, #0
 801065c:	f000 80c7 	beq.w	80107ee <rcl_expand_topic_name+0x252>
 8010660:	2d00      	cmp	r5, #0
 8010662:	f000 80a2 	beq.w	80107aa <rcl_expand_topic_name+0x20e>
 8010666:	217b      	movs	r1, #123	@ 0x7b
 8010668:	f004 fc3e 	bl	8014ee8 <strchr>
 801066c:	46d1      	mov	r9, sl
 801066e:	4605      	mov	r5, r0
 8010670:	9407      	str	r4, [sp, #28]
 8010672:	46d3      	mov	fp, sl
 8010674:	464c      	mov	r4, r9
 8010676:	2d00      	cmp	r5, #0
 8010678:	f000 80be 	beq.w	80107f8 <rcl_expand_topic_name+0x25c>
 801067c:	217d      	movs	r1, #125	@ 0x7d
 801067e:	4620      	mov	r0, r4
 8010680:	f004 fc32 	bl	8014ee8 <strchr>
 8010684:	eba0 0905 	sub.w	r9, r0, r5
 8010688:	f109 0a01 	add.w	sl, r9, #1
 801068c:	486d      	ldr	r0, [pc, #436]	@ (8010844 <rcl_expand_topic_name+0x2a8>)
 801068e:	4652      	mov	r2, sl
 8010690:	4629      	mov	r1, r5
 8010692:	f004 fc36 	bl	8014f02 <strncmp>
 8010696:	2800      	cmp	r0, #0
 8010698:	d067      	beq.n	801076a <rcl_expand_topic_name+0x1ce>
 801069a:	486b      	ldr	r0, [pc, #428]	@ (8010848 <rcl_expand_topic_name+0x2ac>)
 801069c:	4652      	mov	r2, sl
 801069e:	4629      	mov	r1, r5
 80106a0:	f004 fc2f 	bl	8014f02 <strncmp>
 80106a4:	b130      	cbz	r0, 80106b4 <rcl_expand_topic_name+0x118>
 80106a6:	4869      	ldr	r0, [pc, #420]	@ (801084c <rcl_expand_topic_name+0x2b0>)
 80106a8:	4652      	mov	r2, sl
 80106aa:	4629      	mov	r1, r5
 80106ac:	f004 fc29 	bl	8014f02 <strncmp>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d137      	bne.n	8010724 <rcl_expand_topic_name+0x188>
 80106b4:	46b9      	mov	r9, r7
 80106b6:	ab16      	add	r3, sp, #88	@ 0x58
 80106b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80106bc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80106c0:	ab14      	add	r3, sp, #80	@ 0x50
 80106c2:	4628      	mov	r0, r5
 80106c4:	cb0c      	ldmia	r3, {r2, r3}
 80106c6:	4651      	mov	r1, sl
 80106c8:	f7f9 fe36 	bl	800a338 <rcutils_strndup>
 80106cc:	4605      	mov	r5, r0
 80106ce:	2800      	cmp	r0, #0
 80106d0:	f000 809c 	beq.w	801080c <rcl_expand_topic_name+0x270>
 80106d4:	464a      	mov	r2, r9
 80106d6:	4620      	mov	r0, r4
 80106d8:	ab14      	add	r3, sp, #80	@ 0x50
 80106da:	4629      	mov	r1, r5
 80106dc:	f7f9 fd2a 	bl	800a134 <rcutils_repl_str>
 80106e0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80106e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80106e4:	4604      	mov	r4, r0
 80106e6:	4628      	mov	r0, r5
 80106e8:	4798      	blx	r3
 80106ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80106ec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80106ee:	4658      	mov	r0, fp
 80106f0:	4798      	blx	r3
 80106f2:	2c00      	cmp	r4, #0
 80106f4:	d07b      	beq.n	80107ee <rcl_expand_topic_name+0x252>
 80106f6:	217b      	movs	r1, #123	@ 0x7b
 80106f8:	4620      	mov	r0, r4
 80106fa:	f004 fbf5 	bl	8014ee8 <strchr>
 80106fe:	46a3      	mov	fp, r4
 8010700:	4605      	mov	r5, r0
 8010702:	e7b8      	b.n	8010676 <rcl_expand_topic_name+0xda>
 8010704:	240b      	movs	r4, #11
 8010706:	4620      	mov	r0, r4
 8010708:	b00b      	add	sp, #44	@ 0x2c
 801070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801070e:	f7ff fec1 	bl	8010494 <rcl_convert_rmw_ret_to_rcl_ret>
 8010712:	4604      	mov	r4, r0
 8010714:	e7f7      	b.n	8010706 <rcl_expand_topic_name+0x16a>
 8010716:	2467      	movs	r4, #103	@ 0x67
 8010718:	4620      	mov	r0, r4
 801071a:	b00b      	add	sp, #44	@ 0x2c
 801071c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010720:	24c9      	movs	r4, #201	@ 0xc9
 8010722:	e7f0      	b.n	8010706 <rcl_expand_topic_name+0x16a>
 8010724:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8010728:	9806      	ldr	r0, [sp, #24]
 801072a:	1c69      	adds	r1, r5, #1
 801072c:	f7f9 ff1e 	bl	800a56c <rcutils_string_map_getn>
 8010730:	4681      	mov	r9, r0
 8010732:	2800      	cmp	r0, #0
 8010734:	d1bf      	bne.n	80106b6 <rcl_expand_topic_name+0x11a>
 8010736:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010738:	aa16      	add	r2, sp, #88	@ 0x58
 801073a:	6018      	str	r0, [r3, #0]
 801073c:	ca07      	ldmia	r2, {r0, r1, r2}
 801073e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010742:	ab14      	add	r3, sp, #80	@ 0x50
 8010744:	cb0c      	ldmia	r3, {r2, r3}
 8010746:	4651      	mov	r1, sl
 8010748:	4628      	mov	r0, r5
 801074a:	f7f9 fdf5 	bl	800a338 <rcutils_strndup>
 801074e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010750:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010752:	4798      	blx	r3
 8010754:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010756:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010758:	4658      	mov	r0, fp
 801075a:	2469      	movs	r4, #105	@ 0x69
 801075c:	4798      	blx	r3
 801075e:	e7d2      	b.n	8010706 <rcl_expand_topic_name+0x16a>
 8010760:	2800      	cmp	r0, #0
 8010762:	d05b      	beq.n	801081c <rcl_expand_topic_name+0x280>
 8010764:	46c1      	mov	r9, r8
 8010766:	46a2      	mov	sl, r4
 8010768:	e782      	b.n	8010670 <rcl_expand_topic_name+0xd4>
 801076a:	46b1      	mov	r9, r6
 801076c:	e7a3      	b.n	80106b6 <rcl_expand_topic_name+0x11a>
 801076e:	2800      	cmp	r0, #0
 8010770:	d1f8      	bne.n	8010764 <rcl_expand_topic_name+0x1c8>
 8010772:	4638      	mov	r0, r7
 8010774:	f7ef fd5e 	bl	8000234 <strlen>
 8010778:	4a35      	ldr	r2, [pc, #212]	@ (8010850 <rcl_expand_topic_name+0x2b4>)
 801077a:	4b36      	ldr	r3, [pc, #216]	@ (8010854 <rcl_expand_topic_name+0x2b8>)
 801077c:	f8cd 8010 	str.w	r8, [sp, #16]
 8010780:	2801      	cmp	r0, #1
 8010782:	bf18      	it	ne
 8010784:	4613      	movne	r3, r2
 8010786:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801078a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801078e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010790:	9703      	str	r7, [sp, #12]
 8010792:	9200      	str	r2, [sp, #0]
 8010794:	ab14      	add	r3, sp, #80	@ 0x50
 8010796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010798:	f7f9 fc92 	bl	800a0c0 <rcutils_format_string_limit>
 801079c:	4682      	mov	sl, r0
 801079e:	4653      	mov	r3, sl
 80107a0:	b32b      	cbz	r3, 80107ee <rcl_expand_topic_name+0x252>
 80107a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107a4:	f8c3 a000 	str.w	sl, [r3]
 80107a8:	e7ad      	b.n	8010706 <rcl_expand_topic_name+0x16a>
 80107aa:	f89a 3000 	ldrb.w	r3, [sl]
 80107ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80107b0:	d0f7      	beq.n	80107a2 <rcl_expand_topic_name+0x206>
 80107b2:	4638      	mov	r0, r7
 80107b4:	f7ef fd3e 	bl	8000234 <strlen>
 80107b8:	4a25      	ldr	r2, [pc, #148]	@ (8010850 <rcl_expand_topic_name+0x2b4>)
 80107ba:	4b26      	ldr	r3, [pc, #152]	@ (8010854 <rcl_expand_topic_name+0x2b8>)
 80107bc:	f8cd a010 	str.w	sl, [sp, #16]
 80107c0:	2801      	cmp	r0, #1
 80107c2:	bf18      	it	ne
 80107c4:	4613      	movne	r3, r2
 80107c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80107ca:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80107ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80107d0:	9703      	str	r7, [sp, #12]
 80107d2:	9200      	str	r2, [sp, #0]
 80107d4:	ab14      	add	r3, sp, #80	@ 0x50
 80107d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107d8:	f7f9 fc72 	bl	800a0c0 <rcutils_format_string_limit>
 80107dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80107de:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80107e0:	4605      	mov	r5, r0
 80107e2:	4650      	mov	r0, sl
 80107e4:	4798      	blx	r3
 80107e6:	46aa      	mov	sl, r5
 80107e8:	e7d9      	b.n	801079e <rcl_expand_topic_name+0x202>
 80107ea:	24ca      	movs	r4, #202	@ 0xca
 80107ec:	e78b      	b.n	8010706 <rcl_expand_topic_name+0x16a>
 80107ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80107f0:	2300      	movs	r3, #0
 80107f2:	6013      	str	r3, [r2, #0]
 80107f4:	240a      	movs	r4, #10
 80107f6:	e786      	b.n	8010706 <rcl_expand_topic_name+0x16a>
 80107f8:	465b      	mov	r3, fp
 80107fa:	9c07      	ldr	r4, [sp, #28]
 80107fc:	46da      	mov	sl, fp
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d1d3      	bne.n	80107aa <rcl_expand_topic_name+0x20e>
 8010802:	f898 3000 	ldrb.w	r3, [r8]
 8010806:	2b2f      	cmp	r3, #47	@ 0x2f
 8010808:	d0cb      	beq.n	80107a2 <rcl_expand_topic_name+0x206>
 801080a:	e7b2      	b.n	8010772 <rcl_expand_topic_name+0x1d6>
 801080c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8010810:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010812:	6015      	str	r5, [r2, #0]
 8010814:	4658      	mov	r0, fp
 8010816:	4798      	blx	r3
 8010818:	240a      	movs	r4, #10
 801081a:	e774      	b.n	8010706 <rcl_expand_topic_name+0x16a>
 801081c:	ab17      	add	r3, sp, #92	@ 0x5c
 801081e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010822:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010826:	ab14      	add	r3, sp, #80	@ 0x50
 8010828:	cb0e      	ldmia	r3, {r1, r2, r3}
 801082a:	4640      	mov	r0, r8
 801082c:	f7f9 fd62 	bl	800a2f4 <rcutils_strdup>
 8010830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010832:	2800      	cmp	r0, #0
 8010834:	6018      	str	r0, [r3, #0]
 8010836:	bf08      	it	eq
 8010838:	240a      	moveq	r4, #10
 801083a:	e764      	b.n	8010706 <rcl_expand_topic_name+0x16a>
 801083c:	0801648c 	.word	0x0801648c
 8010840:	080161b8 	.word	0x080161b8
 8010844:	08016494 	.word	0x08016494
 8010848:	0801649c 	.word	0x0801649c
 801084c:	080164a4 	.word	0x080164a4
 8010850:	08015e64 	.word	0x08015e64
 8010854:	08015e5c 	.word	0x08015e5c

08010858 <rcl_get_default_topic_name_substitutions>:
 8010858:	2800      	cmp	r0, #0
 801085a:	bf0c      	ite	eq
 801085c:	200b      	moveq	r0, #11
 801085e:	2000      	movne	r0, #0
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop

08010864 <rcl_get_zero_initialized_guard_condition>:
 8010864:	4a03      	ldr	r2, [pc, #12]	@ (8010874 <rcl_get_zero_initialized_guard_condition+0x10>)
 8010866:	4603      	mov	r3, r0
 8010868:	e892 0003 	ldmia.w	r2, {r0, r1}
 801086c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010870:	4618      	mov	r0, r3
 8010872:	4770      	bx	lr
 8010874:	080169e4 	.word	0x080169e4

08010878 <rcl_guard_condition_init>:
 8010878:	b082      	sub	sp, #8
 801087a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801087c:	b087      	sub	sp, #28
 801087e:	ac0c      	add	r4, sp, #48	@ 0x30
 8010880:	e884 000c 	stmia.w	r4, {r2, r3}
 8010884:	46a6      	mov	lr, r4
 8010886:	460d      	mov	r5, r1
 8010888:	4604      	mov	r4, r0
 801088a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801088e:	f10d 0c04 	add.w	ip, sp, #4
 8010892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010896:	f8de 3000 	ldr.w	r3, [lr]
 801089a:	f8cc 3000 	str.w	r3, [ip]
 801089e:	a801      	add	r0, sp, #4
 80108a0:	f7f9 fb10 	bl	8009ec4 <rcutils_allocator_is_valid>
 80108a4:	b338      	cbz	r0, 80108f6 <rcl_guard_condition_init+0x7e>
 80108a6:	b334      	cbz	r4, 80108f6 <rcl_guard_condition_init+0x7e>
 80108a8:	6866      	ldr	r6, [r4, #4]
 80108aa:	b9ee      	cbnz	r6, 80108e8 <rcl_guard_condition_init+0x70>
 80108ac:	b31d      	cbz	r5, 80108f6 <rcl_guard_condition_init+0x7e>
 80108ae:	4628      	mov	r0, r5
 80108b0:	f7ff fe0e 	bl	80104d0 <rcl_context_is_valid>
 80108b4:	b308      	cbz	r0, 80108fa <rcl_guard_condition_init+0x82>
 80108b6:	9b01      	ldr	r3, [sp, #4]
 80108b8:	9905      	ldr	r1, [sp, #20]
 80108ba:	201c      	movs	r0, #28
 80108bc:	4798      	blx	r3
 80108be:	4607      	mov	r7, r0
 80108c0:	6060      	str	r0, [r4, #4]
 80108c2:	b310      	cbz	r0, 801090a <rcl_guard_condition_init+0x92>
 80108c4:	6828      	ldr	r0, [r5, #0]
 80108c6:	3028      	adds	r0, #40	@ 0x28
 80108c8:	f002 fc36 	bl	8013138 <rmw_create_guard_condition>
 80108cc:	6038      	str	r0, [r7, #0]
 80108ce:	6860      	ldr	r0, [r4, #4]
 80108d0:	6805      	ldr	r5, [r0, #0]
 80108d2:	b1a5      	cbz	r5, 80108fe <rcl_guard_condition_init+0x86>
 80108d4:	2301      	movs	r3, #1
 80108d6:	ac01      	add	r4, sp, #4
 80108d8:	7103      	strb	r3, [r0, #4]
 80108da:	f100 0708 	add.w	r7, r0, #8
 80108de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80108e2:	6823      	ldr	r3, [r4, #0]
 80108e4:	603b      	str	r3, [r7, #0]
 80108e6:	e000      	b.n	80108ea <rcl_guard_condition_init+0x72>
 80108e8:	2664      	movs	r6, #100	@ 0x64
 80108ea:	4630      	mov	r0, r6
 80108ec:	b007      	add	sp, #28
 80108ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80108f2:	b002      	add	sp, #8
 80108f4:	4770      	bx	lr
 80108f6:	260b      	movs	r6, #11
 80108f8:	e7f7      	b.n	80108ea <rcl_guard_condition_init+0x72>
 80108fa:	2665      	movs	r6, #101	@ 0x65
 80108fc:	e7f5      	b.n	80108ea <rcl_guard_condition_init+0x72>
 80108fe:	9b02      	ldr	r3, [sp, #8]
 8010900:	9905      	ldr	r1, [sp, #20]
 8010902:	4798      	blx	r3
 8010904:	2601      	movs	r6, #1
 8010906:	6065      	str	r5, [r4, #4]
 8010908:	e7ef      	b.n	80108ea <rcl_guard_condition_init+0x72>
 801090a:	260a      	movs	r6, #10
 801090c:	e7ed      	b.n	80108ea <rcl_guard_condition_init+0x72>
 801090e:	bf00      	nop

08010910 <rcl_guard_condition_init_from_rmw>:
 8010910:	b082      	sub	sp, #8
 8010912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010916:	b086      	sub	sp, #24
 8010918:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801091c:	4604      	mov	r4, r0
 801091e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8010922:	460e      	mov	r6, r1
 8010924:	4617      	mov	r7, r2
 8010926:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801092a:	f10d 0e04 	add.w	lr, sp, #4
 801092e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010932:	f8dc 3000 	ldr.w	r3, [ip]
 8010936:	f8ce 3000 	str.w	r3, [lr]
 801093a:	a801      	add	r0, sp, #4
 801093c:	f7f9 fac2 	bl	8009ec4 <rcutils_allocator_is_valid>
 8010940:	b350      	cbz	r0, 8010998 <rcl_guard_condition_init_from_rmw+0x88>
 8010942:	b34c      	cbz	r4, 8010998 <rcl_guard_condition_init_from_rmw+0x88>
 8010944:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010948:	f1b8 0f00 	cmp.w	r8, #0
 801094c:	d11e      	bne.n	801098c <rcl_guard_condition_init_from_rmw+0x7c>
 801094e:	b31f      	cbz	r7, 8010998 <rcl_guard_condition_init_from_rmw+0x88>
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff fdbd 	bl	80104d0 <rcl_context_is_valid>
 8010956:	b328      	cbz	r0, 80109a4 <rcl_guard_condition_init_from_rmw+0x94>
 8010958:	9b01      	ldr	r3, [sp, #4]
 801095a:	9905      	ldr	r1, [sp, #20]
 801095c:	201c      	movs	r0, #28
 801095e:	4798      	blx	r3
 8010960:	4605      	mov	r5, r0
 8010962:	6060      	str	r0, [r4, #4]
 8010964:	b358      	cbz	r0, 80109be <rcl_guard_condition_init_from_rmw+0xae>
 8010966:	b1fe      	cbz	r6, 80109a8 <rcl_guard_condition_init_from_rmw+0x98>
 8010968:	6006      	str	r6, [r0, #0]
 801096a:	f880 8004 	strb.w	r8, [r0, #4]
 801096e:	ac01      	add	r4, sp, #4
 8010970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010972:	f105 0c08 	add.w	ip, r5, #8
 8010976:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801097a:	6823      	ldr	r3, [r4, #0]
 801097c:	f8cc 3000 	str.w	r3, [ip]
 8010980:	2000      	movs	r0, #0
 8010982:	b006      	add	sp, #24
 8010984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010988:	b002      	add	sp, #8
 801098a:	4770      	bx	lr
 801098c:	2064      	movs	r0, #100	@ 0x64
 801098e:	b006      	add	sp, #24
 8010990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010994:	b002      	add	sp, #8
 8010996:	4770      	bx	lr
 8010998:	200b      	movs	r0, #11
 801099a:	b006      	add	sp, #24
 801099c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109a0:	b002      	add	sp, #8
 80109a2:	4770      	bx	lr
 80109a4:	2065      	movs	r0, #101	@ 0x65
 80109a6:	e7f2      	b.n	801098e <rcl_guard_condition_init_from_rmw+0x7e>
 80109a8:	6838      	ldr	r0, [r7, #0]
 80109aa:	3028      	adds	r0, #40	@ 0x28
 80109ac:	f002 fbc4 	bl	8013138 <rmw_create_guard_condition>
 80109b0:	6028      	str	r0, [r5, #0]
 80109b2:	6865      	ldr	r5, [r4, #4]
 80109b4:	682e      	ldr	r6, [r5, #0]
 80109b6:	b126      	cbz	r6, 80109c2 <rcl_guard_condition_init_from_rmw+0xb2>
 80109b8:	2301      	movs	r3, #1
 80109ba:	712b      	strb	r3, [r5, #4]
 80109bc:	e7d7      	b.n	801096e <rcl_guard_condition_init_from_rmw+0x5e>
 80109be:	200a      	movs	r0, #10
 80109c0:	e7e5      	b.n	801098e <rcl_guard_condition_init_from_rmw+0x7e>
 80109c2:	4628      	mov	r0, r5
 80109c4:	9b02      	ldr	r3, [sp, #8]
 80109c6:	9905      	ldr	r1, [sp, #20]
 80109c8:	4798      	blx	r3
 80109ca:	6066      	str	r6, [r4, #4]
 80109cc:	2001      	movs	r0, #1
 80109ce:	e7de      	b.n	801098e <rcl_guard_condition_init_from_rmw+0x7e>

080109d0 <rcl_guard_condition_fini>:
 80109d0:	b570      	push	{r4, r5, r6, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	b1f0      	cbz	r0, 8010a14 <rcl_guard_condition_fini+0x44>
 80109d6:	6843      	ldr	r3, [r0, #4]
 80109d8:	4604      	mov	r4, r0
 80109da:	b163      	cbz	r3, 80109f6 <rcl_guard_condition_fini+0x26>
 80109dc:	6818      	ldr	r0, [r3, #0]
 80109de:	68de      	ldr	r6, [r3, #12]
 80109e0:	6999      	ldr	r1, [r3, #24]
 80109e2:	b160      	cbz	r0, 80109fe <rcl_guard_condition_fini+0x2e>
 80109e4:	791d      	ldrb	r5, [r3, #4]
 80109e6:	b965      	cbnz	r5, 8010a02 <rcl_guard_condition_fini+0x32>
 80109e8:	4618      	mov	r0, r3
 80109ea:	47b0      	blx	r6
 80109ec:	2300      	movs	r3, #0
 80109ee:	4628      	mov	r0, r5
 80109f0:	6063      	str	r3, [r4, #4]
 80109f2:	b002      	add	sp, #8
 80109f4:	bd70      	pop	{r4, r5, r6, pc}
 80109f6:	461d      	mov	r5, r3
 80109f8:	4628      	mov	r0, r5
 80109fa:	b002      	add	sp, #8
 80109fc:	bd70      	pop	{r4, r5, r6, pc}
 80109fe:	4605      	mov	r5, r0
 8010a00:	e7f2      	b.n	80109e8 <rcl_guard_condition_fini+0x18>
 8010a02:	9101      	str	r1, [sp, #4]
 8010a04:	f002 fbac 	bl	8013160 <rmw_destroy_guard_condition>
 8010a08:	1e05      	subs	r5, r0, #0
 8010a0a:	6863      	ldr	r3, [r4, #4]
 8010a0c:	9901      	ldr	r1, [sp, #4]
 8010a0e:	bf18      	it	ne
 8010a10:	2501      	movne	r5, #1
 8010a12:	e7e9      	b.n	80109e8 <rcl_guard_condition_fini+0x18>
 8010a14:	250b      	movs	r5, #11
 8010a16:	4628      	mov	r0, r5
 8010a18:	b002      	add	sp, #8
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}

08010a1c <rcl_guard_condition_get_default_options>:
 8010a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a1e:	b087      	sub	sp, #28
 8010a20:	4606      	mov	r6, r0
 8010a22:	4668      	mov	r0, sp
 8010a24:	f7f9 fa40 	bl	8009ea8 <rcutils_get_default_allocator>
 8010a28:	4b09      	ldr	r3, [pc, #36]	@ (8010a50 <rcl_guard_condition_get_default_options+0x34>)
 8010a2a:	46ee      	mov	lr, sp
 8010a2c:	469c      	mov	ip, r3
 8010a2e:	461d      	mov	r5, r3
 8010a30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a3a:	4634      	mov	r4, r6
 8010a3c:	f8de 7000 	ldr.w	r7, [lr]
 8010a40:	f8cc 7000 	str.w	r7, [ip]
 8010a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a46:	4630      	mov	r0, r6
 8010a48:	6027      	str	r7, [r4, #0]
 8010a4a:	b007      	add	sp, #28
 8010a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	2000ace8 	.word	0x2000ace8

08010a54 <rcl_trigger_guard_condition>:
 8010a54:	b148      	cbz	r0, 8010a6a <rcl_trigger_guard_condition+0x16>
 8010a56:	b508      	push	{r3, lr}
 8010a58:	6843      	ldr	r3, [r0, #4]
 8010a5a:	b143      	cbz	r3, 8010a6e <rcl_trigger_guard_condition+0x1a>
 8010a5c:	6818      	ldr	r0, [r3, #0]
 8010a5e:	f002 fc09 	bl	8013274 <rmw_trigger_guard_condition>
 8010a62:	3800      	subs	r0, #0
 8010a64:	bf18      	it	ne
 8010a66:	2001      	movne	r0, #1
 8010a68:	bd08      	pop	{r3, pc}
 8010a6a:	200b      	movs	r0, #11
 8010a6c:	4770      	bx	lr
 8010a6e:	200b      	movs	r0, #11
 8010a70:	bd08      	pop	{r3, pc}
 8010a72:	bf00      	nop

08010a74 <rcl_guard_condition_get_rmw_handle>:
 8010a74:	b110      	cbz	r0, 8010a7c <rcl_guard_condition_get_rmw_handle+0x8>
 8010a76:	6840      	ldr	r0, [r0, #4]
 8010a78:	b100      	cbz	r0, 8010a7c <rcl_guard_condition_get_rmw_handle+0x8>
 8010a7a:	6800      	ldr	r0, [r0, #0]
 8010a7c:	4770      	bx	lr
 8010a7e:	bf00      	nop

08010a80 <rcl_init>:
 8010a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a84:	1e05      	subs	r5, r0, #0
 8010a86:	b09c      	sub	sp, #112	@ 0x70
 8010a88:	460e      	mov	r6, r1
 8010a8a:	4690      	mov	r8, r2
 8010a8c:	461f      	mov	r7, r3
 8010a8e:	f340 8099 	ble.w	8010bc4 <rcl_init+0x144>
 8010a92:	2900      	cmp	r1, #0
 8010a94:	f000 8099 	beq.w	8010bca <rcl_init+0x14a>
 8010a98:	f1a1 0e04 	sub.w	lr, r1, #4
 8010a9c:	f04f 0c00 	mov.w	ip, #0
 8010aa0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8010aa4:	f10c 0c01 	add.w	ip, ip, #1
 8010aa8:	2c00      	cmp	r4, #0
 8010aaa:	f000 808e 	beq.w	8010bca <rcl_init+0x14a>
 8010aae:	4565      	cmp	r5, ip
 8010ab0:	d1f6      	bne.n	8010aa0 <rcl_init+0x20>
 8010ab2:	f1b8 0f00 	cmp.w	r8, #0
 8010ab6:	f000 8088 	beq.w	8010bca <rcl_init+0x14a>
 8010aba:	f8d8 4000 	ldr.w	r4, [r8]
 8010abe:	2c00      	cmp	r4, #0
 8010ac0:	f000 8083 	beq.w	8010bca <rcl_init+0x14a>
 8010ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ac6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8010aca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ace:	6823      	ldr	r3, [r4, #0]
 8010ad0:	f8cc 3000 	str.w	r3, [ip]
 8010ad4:	a817      	add	r0, sp, #92	@ 0x5c
 8010ad6:	f7f9 f9f5 	bl	8009ec4 <rcutils_allocator_is_valid>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d075      	beq.n	8010bca <rcl_init+0x14a>
 8010ade:	2f00      	cmp	r7, #0
 8010ae0:	d073      	beq.n	8010bca <rcl_init+0x14a>
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d175      	bne.n	8010bd4 <rcl_init+0x154>
 8010ae8:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8010aec:	2178      	movs	r1, #120	@ 0x78
 8010aee:	2001      	movs	r0, #1
 8010af0:	4798      	blx	r3
 8010af2:	4604      	mov	r4, r0
 8010af4:	6038      	str	r0, [r7, #0]
 8010af6:	2800      	cmp	r0, #0
 8010af8:	f000 80a0 	beq.w	8010c3c <rcl_init+0x1bc>
 8010afc:	a802      	add	r0, sp, #8
 8010afe:	f002 f973 	bl	8012de8 <rmw_get_zero_initialized_context>
 8010b02:	a902      	add	r1, sp, #8
 8010b04:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010b08:	2250      	movs	r2, #80	@ 0x50
 8010b0a:	ac17      	add	r4, sp, #92	@ 0x5c
 8010b0c:	f004 faad 	bl	801506a <memcpy>
 8010b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b12:	f8d7 e000 	ldr.w	lr, [r7]
 8010b16:	46f4      	mov	ip, lr
 8010b18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	f8cc 3000 	str.w	r3, [ip]
 8010b22:	f10e 0114 	add.w	r1, lr, #20
 8010b26:	4640      	mov	r0, r8
 8010b28:	f7f7 ffa6 	bl	8008a78 <rcl_init_options_copy>
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d144      	bne.n	8010bbc <rcl_init+0x13c>
 8010b32:	f8d7 9000 	ldr.w	r9, [r7]
 8010b36:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8010b3a:	f8c9 0020 	str.w	r0, [r9, #32]
 8010b3e:	f8c9 5018 	str.w	r5, [r9, #24]
 8010b42:	f8c9 801c 	str.w	r8, [r9, #28]
 8010b46:	2d00      	cmp	r5, #0
 8010b48:	d04b      	beq.n	8010be2 <rcl_init+0x162>
 8010b4a:	2e00      	cmp	r6, #0
 8010b4c:	d049      	beq.n	8010be2 <rcl_init+0x162>
 8010b4e:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8010b52:	2104      	movs	r1, #4
 8010b54:	4628      	mov	r0, r5
 8010b56:	4798      	blx	r3
 8010b58:	f8c9 0020 	str.w	r0, [r9, #32]
 8010b5c:	f8d7 9000 	ldr.w	r9, [r7]
 8010b60:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010b64:	46ca      	mov	sl, r9
 8010b66:	b343      	cbz	r3, 8010bba <rcl_init+0x13a>
 8010b68:	2d01      	cmp	r5, #1
 8010b6a:	f178 0300 	sbcs.w	r3, r8, #0
 8010b6e:	db38      	blt.n	8010be2 <rcl_init+0x162>
 8010b70:	2400      	movs	r4, #0
 8010b72:	3e04      	subs	r6, #4
 8010b74:	46a1      	mov	r9, r4
 8010b76:	e00b      	b.n	8010b90 <rcl_init+0x110>
 8010b78:	6831      	ldr	r1, [r6, #0]
 8010b7a:	f004 fa76 	bl	801506a <memcpy>
 8010b7e:	3401      	adds	r4, #1
 8010b80:	f149 0900 	adc.w	r9, r9, #0
 8010b84:	45c8      	cmp	r8, r9
 8010b86:	bf08      	it	eq
 8010b88:	42a5      	cmpeq	r5, r4
 8010b8a:	d028      	beq.n	8010bde <rcl_init+0x15e>
 8010b8c:	f8d7 a000 	ldr.w	sl, [r7]
 8010b90:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010b94:	f7ef fb4e 	bl	8000234 <strlen>
 8010b98:	1c42      	adds	r2, r0, #1
 8010b9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b9c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8010b9e:	f8da a020 	ldr.w	sl, [sl, #32]
 8010ba2:	9201      	str	r2, [sp, #4]
 8010ba4:	4610      	mov	r0, r2
 8010ba6:	4798      	blx	r3
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8010bae:	6a1b      	ldr	r3, [r3, #32]
 8010bb0:	9a01      	ldr	r2, [sp, #4]
 8010bb2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	d1de      	bne.n	8010b78 <rcl_init+0xf8>
 8010bba:	240a      	movs	r4, #10
 8010bbc:	4638      	mov	r0, r7
 8010bbe:	f7ff fc8d 	bl	80104dc <__cleanup_context>
 8010bc2:	e003      	b.n	8010bcc <rcl_init+0x14c>
 8010bc4:	2900      	cmp	r1, #0
 8010bc6:	f43f af74 	beq.w	8010ab2 <rcl_init+0x32>
 8010bca:	240b      	movs	r4, #11
 8010bcc:	4620      	mov	r0, r4
 8010bce:	b01c      	add	sp, #112	@ 0x70
 8010bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bd4:	2464      	movs	r4, #100	@ 0x64
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	b01c      	add	sp, #112	@ 0x70
 8010bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bde:	f8d7 9000 	ldr.w	r9, [r7]
 8010be2:	491d      	ldr	r1, [pc, #116]	@ (8010c58 <rcl_init+0x1d8>)
 8010be4:	680b      	ldr	r3, [r1, #0]
 8010be6:	3301      	adds	r3, #1
 8010be8:	d023      	beq.n	8010c32 <rcl_init+0x1b2>
 8010bea:	600b      	str	r3, [r1, #0]
 8010bec:	461a      	mov	r2, r3
 8010bee:	2400      	movs	r4, #0
 8010bf0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010bf4:	607b      	str	r3, [r7, #4]
 8010bf6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010bf8:	6182      	str	r2, [r0, #24]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	61c4      	str	r4, [r0, #28]
 8010bfe:	d01f      	beq.n	8010c40 <rcl_init+0x1c0>
 8010c00:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8010c04:	b94b      	cbnz	r3, 8010c1a <rcl_init+0x19a>
 8010c06:	3030      	adds	r0, #48	@ 0x30
 8010c08:	f000 f828 	bl	8010c5c <rcl_get_localhost_only>
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	d1d4      	bne.n	8010bbc <rcl_init+0x13c>
 8010c12:	f8d7 9000 	ldr.w	r9, [r7]
 8010c16:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010c1a:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8010c1e:	3018      	adds	r0, #24
 8010c20:	f7fa f8ea 	bl	800adf8 <rmw_init>
 8010c24:	4604      	mov	r4, r0
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d0d0      	beq.n	8010bcc <rcl_init+0x14c>
 8010c2a:	f7ff fc33 	bl	8010494 <rcl_convert_rmw_ret_to_rcl_ret>
 8010c2e:	4604      	mov	r4, r0
 8010c30:	e7c4      	b.n	8010bbc <rcl_init+0x13c>
 8010c32:	2201      	movs	r2, #1
 8010c34:	461c      	mov	r4, r3
 8010c36:	600a      	str	r2, [r1, #0]
 8010c38:	4613      	mov	r3, r2
 8010c3a:	e7d9      	b.n	8010bf0 <rcl_init+0x170>
 8010c3c:	240a      	movs	r4, #10
 8010c3e:	e7c5      	b.n	8010bcc <rcl_init+0x14c>
 8010c40:	3024      	adds	r0, #36	@ 0x24
 8010c42:	f003 fc03 	bl	801444c <rcl_get_default_domain_id>
 8010c46:	4604      	mov	r4, r0
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d1b7      	bne.n	8010bbc <rcl_init+0x13c>
 8010c4c:	f8d7 9000 	ldr.w	r9, [r7]
 8010c50:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010c54:	e7d4      	b.n	8010c00 <rcl_init+0x180>
 8010c56:	bf00      	nop
 8010c58:	2000acfc 	.word	0x2000acfc

08010c5c <rcl_get_localhost_only>:
 8010c5c:	b510      	push	{r4, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	2300      	movs	r3, #0
 8010c62:	9301      	str	r3, [sp, #4]
 8010c64:	b1b8      	cbz	r0, 8010c96 <rcl_get_localhost_only+0x3a>
 8010c66:	4604      	mov	r4, r0
 8010c68:	a901      	add	r1, sp, #4
 8010c6a:	480c      	ldr	r0, [pc, #48]	@ (8010c9c <rcl_get_localhost_only+0x40>)
 8010c6c:	f7f9 f9dc 	bl	800a028 <rcutils_get_env>
 8010c70:	b110      	cbz	r0, 8010c78 <rcl_get_localhost_only+0x1c>
 8010c72:	2001      	movs	r0, #1
 8010c74:	b002      	add	sp, #8
 8010c76:	bd10      	pop	{r4, pc}
 8010c78:	9b01      	ldr	r3, [sp, #4]
 8010c7a:	b113      	cbz	r3, 8010c82 <rcl_get_localhost_only+0x26>
 8010c7c:	781a      	ldrb	r2, [r3, #0]
 8010c7e:	2a31      	cmp	r2, #49	@ 0x31
 8010c80:	d004      	beq.n	8010c8c <rcl_get_localhost_only+0x30>
 8010c82:	2302      	movs	r3, #2
 8010c84:	2000      	movs	r0, #0
 8010c86:	7023      	strb	r3, [r4, #0]
 8010c88:	b002      	add	sp, #8
 8010c8a:	bd10      	pop	{r4, pc}
 8010c8c:	785b      	ldrb	r3, [r3, #1]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1f7      	bne.n	8010c82 <rcl_get_localhost_only+0x26>
 8010c92:	2301      	movs	r3, #1
 8010c94:	e7f6      	b.n	8010c84 <rcl_get_localhost_only+0x28>
 8010c96:	200b      	movs	r0, #11
 8010c98:	b002      	add	sp, #8
 8010c9a:	bd10      	pop	{r4, pc}
 8010c9c:	080164b0 	.word	0x080164b0

08010ca0 <rcl_service_get_rmw_handle>:
 8010ca0:	b118      	cbz	r0, 8010caa <rcl_service_get_rmw_handle+0xa>
 8010ca2:	6800      	ldr	r0, [r0, #0]
 8010ca4:	b108      	cbz	r0, 8010caa <rcl_service_get_rmw_handle+0xa>
 8010ca6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010caa:	4770      	bx	lr

08010cac <rcl_take_request>:
 8010cac:	b570      	push	{r4, r5, r6, lr}
 8010cae:	468e      	mov	lr, r1
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	4616      	mov	r6, r2
 8010cb4:	4605      	mov	r5, r0
 8010cb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cba:	b08c      	sub	sp, #48	@ 0x30
 8010cbc:	f10d 0c18 	add.w	ip, sp, #24
 8010cc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cc4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010cc8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010ccc:	b30d      	cbz	r5, 8010d12 <rcl_take_request+0x66>
 8010cce:	682b      	ldr	r3, [r5, #0]
 8010cd0:	b1fb      	cbz	r3, 8010d12 <rcl_take_request+0x66>
 8010cd2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010cd6:	b1e0      	cbz	r0, 8010d12 <rcl_take_request+0x66>
 8010cd8:	b336      	cbz	r6, 8010d28 <rcl_take_request+0x7c>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	f88d 3007 	strb.w	r3, [sp, #7]
 8010ce0:	4632      	mov	r2, r6
 8010ce2:	f10d 0307 	add.w	r3, sp, #7
 8010ce6:	a902      	add	r1, sp, #8
 8010ce8:	f7fa fba2 	bl	800b430 <rmw_take_request>
 8010cec:	4605      	mov	r5, r0
 8010cee:	b198      	cbz	r0, 8010d18 <rcl_take_request+0x6c>
 8010cf0:	280a      	cmp	r0, #10
 8010cf2:	bf18      	it	ne
 8010cf4:	2501      	movne	r5, #1
 8010cf6:	f10d 0e18 	add.w	lr, sp, #24
 8010cfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cfe:	46a4      	mov	ip, r4
 8010d00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d04:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d08:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	b00c      	add	sp, #48	@ 0x30
 8010d10:	bd70      	pop	{r4, r5, r6, pc}
 8010d12:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8010d16:	e7ee      	b.n	8010cf6 <rcl_take_request+0x4a>
 8010d18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010d1c:	f240 2359 	movw	r3, #601	@ 0x259
 8010d20:	2a00      	cmp	r2, #0
 8010d22:	bf08      	it	eq
 8010d24:	461d      	moveq	r5, r3
 8010d26:	e7e6      	b.n	8010cf6 <rcl_take_request+0x4a>
 8010d28:	250b      	movs	r5, #11
 8010d2a:	e7e4      	b.n	8010cf6 <rcl_take_request+0x4a>

08010d2c <rcl_send_response>:
 8010d2c:	b170      	cbz	r0, 8010d4c <rcl_send_response+0x20>
 8010d2e:	6800      	ldr	r0, [r0, #0]
 8010d30:	b160      	cbz	r0, 8010d4c <rcl_send_response+0x20>
 8010d32:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010d36:	b148      	cbz	r0, 8010d4c <rcl_send_response+0x20>
 8010d38:	b159      	cbz	r1, 8010d52 <rcl_send_response+0x26>
 8010d3a:	b510      	push	{r4, lr}
 8010d3c:	b15a      	cbz	r2, 8010d56 <rcl_send_response+0x2a>
 8010d3e:	f7fa fbd5 	bl	800b4ec <rmw_send_response>
 8010d42:	b110      	cbz	r0, 8010d4a <rcl_send_response+0x1e>
 8010d44:	2802      	cmp	r0, #2
 8010d46:	bf18      	it	ne
 8010d48:	2001      	movne	r0, #1
 8010d4a:	bd10      	pop	{r4, pc}
 8010d4c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010d50:	4770      	bx	lr
 8010d52:	200b      	movs	r0, #11
 8010d54:	4770      	bx	lr
 8010d56:	200b      	movs	r0, #11
 8010d58:	bd10      	pop	{r4, pc}
 8010d5a:	bf00      	nop

08010d5c <rcl_service_is_valid>:
 8010d5c:	b130      	cbz	r0, 8010d6c <rcl_service_is_valid+0x10>
 8010d5e:	6800      	ldr	r0, [r0, #0]
 8010d60:	b120      	cbz	r0, 8010d6c <rcl_service_is_valid+0x10>
 8010d62:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010d66:	3800      	subs	r0, #0
 8010d68:	bf18      	it	ne
 8010d6a:	2001      	movne	r0, #1
 8010d6c:	4770      	bx	lr
 8010d6e:	bf00      	nop

08010d70 <rcl_take>:
 8010d70:	2800      	cmp	r0, #0
 8010d72:	d04a      	beq.n	8010e0a <rcl_take+0x9a>
 8010d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d78:	4604      	mov	r4, r0
 8010d7a:	6800      	ldr	r0, [r0, #0]
 8010d7c:	b0a4      	sub	sp, #144	@ 0x90
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d03b      	beq.n	8010dfa <rcl_take+0x8a>
 8010d82:	461f      	mov	r7, r3
 8010d84:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d036      	beq.n	8010dfa <rcl_take+0x8a>
 8010d8c:	460e      	mov	r6, r1
 8010d8e:	2900      	cmp	r1, #0
 8010d90:	d039      	beq.n	8010e06 <rcl_take+0x96>
 8010d92:	4615      	mov	r5, r2
 8010d94:	2a00      	cmp	r2, #0
 8010d96:	d03c      	beq.n	8010e12 <rcl_take+0xa2>
 8010d98:	a802      	add	r0, sp, #8
 8010d9a:	f002 f8b9 	bl	8012f10 <rmw_get_zero_initialized_message_info>
 8010d9e:	f10d 0c08 	add.w	ip, sp, #8
 8010da2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010da6:	46ae      	mov	lr, r5
 8010da8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010dac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010db0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010db4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010db8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010dbc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010dc0:	f04f 0800 	mov.w	r8, #0
 8010dc4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010dc8:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8010dcc:	6822      	ldr	r2, [r4, #0]
 8010dce:	462b      	mov	r3, r5
 8010dd0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8010dd4:	9700      	str	r7, [sp, #0]
 8010dd6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8010dda:	4631      	mov	r1, r6
 8010ddc:	f002 f9f6 	bl	80131cc <rmw_take_with_info>
 8010de0:	4603      	mov	r3, r0
 8010de2:	b9c0      	cbnz	r0, 8010e16 <rcl_take+0xa6>
 8010de4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8010de8:	f240 1291 	movw	r2, #401	@ 0x191
 8010dec:	2900      	cmp	r1, #0
 8010dee:	bf08      	it	eq
 8010df0:	4613      	moveq	r3, r2
 8010df2:	4618      	mov	r0, r3
 8010df4:	b024      	add	sp, #144	@ 0x90
 8010df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dfa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010dfe:	4618      	mov	r0, r3
 8010e00:	b024      	add	sp, #144	@ 0x90
 8010e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e06:	230b      	movs	r3, #11
 8010e08:	e7f3      	b.n	8010df2 <rcl_take+0x82>
 8010e0a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010e0e:	4618      	mov	r0, r3
 8010e10:	4770      	bx	lr
 8010e12:	ad14      	add	r5, sp, #80	@ 0x50
 8010e14:	e7c0      	b.n	8010d98 <rcl_take+0x28>
 8010e16:	f7ff fb3d 	bl	8010494 <rcl_convert_rmw_ret_to_rcl_ret>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	e7e9      	b.n	8010df2 <rcl_take+0x82>
 8010e1e:	bf00      	nop

08010e20 <rcl_subscription_get_rmw_handle>:
 8010e20:	b118      	cbz	r0, 8010e2a <rcl_subscription_get_rmw_handle+0xa>
 8010e22:	6800      	ldr	r0, [r0, #0]
 8010e24:	b108      	cbz	r0, 8010e2a <rcl_subscription_get_rmw_handle+0xa>
 8010e26:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010e2a:	4770      	bx	lr

08010e2c <rcl_subscription_is_valid>:
 8010e2c:	b130      	cbz	r0, 8010e3c <rcl_subscription_is_valid+0x10>
 8010e2e:	6800      	ldr	r0, [r0, #0]
 8010e30:	b120      	cbz	r0, 8010e3c <rcl_subscription_is_valid+0x10>
 8010e32:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010e36:	3800      	subs	r0, #0
 8010e38:	bf18      	it	ne
 8010e3a:	2001      	movne	r0, #1
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop

08010e40 <rcl_get_system_time>:
 8010e40:	4608      	mov	r0, r1
 8010e42:	f7f9 bbc1 	b.w	800a5c8 <rcutils_system_time_now>
 8010e46:	bf00      	nop

08010e48 <rcl_get_steady_time>:
 8010e48:	4608      	mov	r0, r1
 8010e4a:	f7f9 bbe5 	b.w	800a618 <rcutils_steady_time_now>
 8010e4e:	bf00      	nop

08010e50 <rcl_get_ros_time>:
 8010e50:	7a03      	ldrb	r3, [r0, #8]
 8010e52:	b510      	push	{r4, lr}
 8010e54:	460c      	mov	r4, r1
 8010e56:	b133      	cbz	r3, 8010e66 <rcl_get_ros_time+0x16>
 8010e58:	2105      	movs	r1, #5
 8010e5a:	f7f9 f841 	bl	8009ee0 <__atomic_load_8>
 8010e5e:	e9c4 0100 	strd	r0, r1, [r4]
 8010e62:	2000      	movs	r0, #0
 8010e64:	bd10      	pop	{r4, pc}
 8010e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e6a:	4608      	mov	r0, r1
 8010e6c:	f7f9 bbac 	b.w	800a5c8 <rcutils_system_time_now>

08010e70 <rcl_clock_init>:
 8010e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e72:	4605      	mov	r5, r0
 8010e74:	4610      	mov	r0, r2
 8010e76:	4614      	mov	r4, r2
 8010e78:	460e      	mov	r6, r1
 8010e7a:	f7f9 f823 	bl	8009ec4 <rcutils_allocator_is_valid>
 8010e7e:	b128      	cbz	r0, 8010e8c <rcl_clock_init+0x1c>
 8010e80:	2d03      	cmp	r5, #3
 8010e82:	d803      	bhi.n	8010e8c <rcl_clock_init+0x1c>
 8010e84:	e8df f005 	tbb	[pc, r5]
 8010e88:	06532e1d 	.word	0x06532e1d
 8010e8c:	f04f 0c0b 	mov.w	ip, #11
 8010e90:	4660      	mov	r0, ip
 8010e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e94:	2e00      	cmp	r6, #0
 8010e96:	d0f9      	beq.n	8010e8c <rcl_clock_init+0x1c>
 8010e98:	2c00      	cmp	r4, #0
 8010e9a:	d0f7      	beq.n	8010e8c <rcl_clock_init+0x1c>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010ea2:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010f58 <rcl_clock_init+0xe8>
 8010ea6:	6133      	str	r3, [r6, #16]
 8010ea8:	f106 0514 	add.w	r5, r6, #20
 8010eac:	469c      	mov	ip, r3
 8010eae:	2703      	movs	r7, #3
 8010eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	602b      	str	r3, [r5, #0]
 8010eb8:	7037      	strb	r7, [r6, #0]
 8010eba:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010ebe:	4660      	mov	r0, ip
 8010ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ec2:	2e00      	cmp	r6, #0
 8010ec4:	d0e2      	beq.n	8010e8c <rcl_clock_init+0x1c>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	7033      	strb	r3, [r6, #0]
 8010eca:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010ece:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010ed2:	469c      	mov	ip, r3
 8010ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ed6:	f106 0514 	add.w	r5, r6, #20
 8010eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010edc:	6823      	ldr	r3, [r4, #0]
 8010ede:	602b      	str	r3, [r5, #0]
 8010ee0:	4660      	mov	r0, ip
 8010ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ee4:	2e00      	cmp	r6, #0
 8010ee6:	d0d1      	beq.n	8010e8c <rcl_clock_init+0x1c>
 8010ee8:	2c00      	cmp	r4, #0
 8010eea:	d0cf      	beq.n	8010e8c <rcl_clock_init+0x1c>
 8010eec:	2700      	movs	r7, #0
 8010eee:	7037      	strb	r7, [r6, #0]
 8010ef0:	46a4      	mov	ip, r4
 8010ef2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ef6:	f106 0514 	add.w	r5, r6, #20
 8010efa:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010efe:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f04:	f8dc 3000 	ldr.w	r3, [ip]
 8010f08:	602b      	str	r3, [r5, #0]
 8010f0a:	6921      	ldr	r1, [r4, #16]
 8010f0c:	6823      	ldr	r3, [r4, #0]
 8010f0e:	2010      	movs	r0, #16
 8010f10:	4798      	blx	r3
 8010f12:	6130      	str	r0, [r6, #16]
 8010f14:	b1d0      	cbz	r0, 8010f4c <rcl_clock_init+0xdc>
 8010f16:	2200      	movs	r2, #0
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e9c0 2300 	strd	r2, r3, [r0]
 8010f1e:	2301      	movs	r3, #1
 8010f20:	7207      	strb	r7, [r0, #8]
 8010f22:	4a0c      	ldr	r2, [pc, #48]	@ (8010f54 <rcl_clock_init+0xe4>)
 8010f24:	7033      	strb	r3, [r6, #0]
 8010f26:	46bc      	mov	ip, r7
 8010f28:	60f2      	str	r2, [r6, #12]
 8010f2a:	4660      	mov	r0, ip
 8010f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f2e:	2e00      	cmp	r6, #0
 8010f30:	d0ac      	beq.n	8010e8c <rcl_clock_init+0x1c>
 8010f32:	2c00      	cmp	r4, #0
 8010f34:	d0aa      	beq.n	8010e8c <rcl_clock_init+0x1c>
 8010f36:	2300      	movs	r3, #0
 8010f38:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010f3c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010f5c <rcl_clock_init+0xec>
 8010f40:	6133      	str	r3, [r6, #16]
 8010f42:	f106 0514 	add.w	r5, r6, #20
 8010f46:	469c      	mov	ip, r3
 8010f48:	2702      	movs	r7, #2
 8010f4a:	e7b1      	b.n	8010eb0 <rcl_clock_init+0x40>
 8010f4c:	f04f 0c0a 	mov.w	ip, #10
 8010f50:	e79e      	b.n	8010e90 <rcl_clock_init+0x20>
 8010f52:	bf00      	nop
 8010f54:	08010e51 	.word	0x08010e51
 8010f58:	08010e49 	.word	0x08010e49
 8010f5c:	08010e41 	.word	0x08010e41

08010f60 <rcl_clock_get_now>:
 8010f60:	b140      	cbz	r0, 8010f74 <rcl_clock_get_now+0x14>
 8010f62:	b139      	cbz	r1, 8010f74 <rcl_clock_get_now+0x14>
 8010f64:	7803      	ldrb	r3, [r0, #0]
 8010f66:	b11b      	cbz	r3, 8010f70 <rcl_clock_get_now+0x10>
 8010f68:	68c3      	ldr	r3, [r0, #12]
 8010f6a:	b10b      	cbz	r3, 8010f70 <rcl_clock_get_now+0x10>
 8010f6c:	6900      	ldr	r0, [r0, #16]
 8010f6e:	4718      	bx	r3
 8010f70:	2001      	movs	r0, #1
 8010f72:	4770      	bx	lr
 8010f74:	200b      	movs	r0, #11
 8010f76:	4770      	bx	lr

08010f78 <rcl_clock_add_jump_callback>:
 8010f78:	b082      	sub	sp, #8
 8010f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f7e:	a906      	add	r1, sp, #24
 8010f80:	e881 000c 	stmia.w	r1, {r2, r3}
 8010f84:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8010f88:	b320      	cbz	r0, 8010fd4 <rcl_clock_add_jump_callback+0x5c>
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	3014      	adds	r0, #20
 8010f8e:	f7f8 ff99 	bl	8009ec4 <rcutils_allocator_is_valid>
 8010f92:	b1f8      	cbz	r0, 8010fd4 <rcl_clock_add_jump_callback+0x5c>
 8010f94:	b1f6      	cbz	r6, 8010fd4 <rcl_clock_add_jump_callback+0x5c>
 8010f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	db1b      	blt.n	8010fd4 <rcl_clock_add_jump_callback+0x5c>
 8010f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8010fa0:	2a01      	cmp	r2, #1
 8010fa2:	f173 0300 	sbcs.w	r3, r3, #0
 8010fa6:	da15      	bge.n	8010fd4 <rcl_clock_add_jump_callback+0x5c>
 8010fa8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8010fac:	2f00      	cmp	r7, #0
 8010fae:	d042      	beq.n	8011036 <rcl_clock_add_jump_callback+0xbe>
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	e003      	b.n	8010fbe <rcl_clock_add_jump_callback+0x46>
 8010fb6:	42bb      	cmp	r3, r7
 8010fb8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8010fbc:	d011      	beq.n	8010fe2 <rcl_clock_add_jump_callback+0x6a>
 8010fbe:	6811      	ldr	r1, [r2, #0]
 8010fc0:	42b1      	cmp	r1, r6
 8010fc2:	f103 0301 	add.w	r3, r3, #1
 8010fc6:	d1f6      	bne.n	8010fb6 <rcl_clock_add_jump_callback+0x3e>
 8010fc8:	6a11      	ldr	r1, [r2, #32]
 8010fca:	42a9      	cmp	r1, r5
 8010fcc:	d1f3      	bne.n	8010fb6 <rcl_clock_add_jump_callback+0x3e>
 8010fce:	f04f 0e01 	mov.w	lr, #1
 8010fd2:	e001      	b.n	8010fd8 <rcl_clock_add_jump_callback+0x60>
 8010fd4:	f04f 0e0b 	mov.w	lr, #11
 8010fd8:	4670      	mov	r0, lr
 8010fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fde:	b002      	add	sp, #8
 8010fe0:	4770      	bx	lr
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010fe8:	00d9      	lsls	r1, r3, #3
 8010fea:	69e3      	ldr	r3, [r4, #28]
 8010fec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010fee:	4798      	blx	r3
 8010ff0:	b1f0      	cbz	r0, 8011030 <rcl_clock_add_jump_callback+0xb8>
 8010ff2:	68a3      	ldr	r3, [r4, #8]
 8010ff4:	6060      	str	r0, [r4, #4]
 8010ff6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8010ffa:	f10d 0c18 	add.w	ip, sp, #24
 8010ffe:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8011002:	f103 0801 	add.w	r8, r3, #1
 8011006:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801100a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801100e:	f106 0708 	add.w	r7, r6, #8
 8011012:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011014:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011018:	f04f 0e00 	mov.w	lr, #0
 801101c:	e887 0003 	stmia.w	r7, {r0, r1}
 8011020:	6235      	str	r5, [r6, #32]
 8011022:	4670      	mov	r0, lr
 8011024:	f8c4 8008 	str.w	r8, [r4, #8]
 8011028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801102c:	b002      	add	sp, #8
 801102e:	4770      	bx	lr
 8011030:	f04f 0e0a 	mov.w	lr, #10
 8011034:	e7d0      	b.n	8010fd8 <rcl_clock_add_jump_callback+0x60>
 8011036:	2128      	movs	r1, #40	@ 0x28
 8011038:	e7d7      	b.n	8010fea <rcl_clock_add_jump_callback+0x72>
 801103a:	bf00      	nop

0801103c <rcl_clock_remove_jump_callback>:
 801103c:	2800      	cmp	r0, #0
 801103e:	d057      	beq.n	80110f0 <rcl_clock_remove_jump_callback+0xb4>
 8011040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011044:	4605      	mov	r5, r0
 8011046:	3014      	adds	r0, #20
 8011048:	4688      	mov	r8, r1
 801104a:	4692      	mov	sl, r2
 801104c:	f7f8 ff3a 	bl	8009ec4 <rcutils_allocator_is_valid>
 8011050:	2800      	cmp	r0, #0
 8011052:	d03b      	beq.n	80110cc <rcl_clock_remove_jump_callback+0x90>
 8011054:	f1b8 0f00 	cmp.w	r8, #0
 8011058:	d038      	beq.n	80110cc <rcl_clock_remove_jump_callback+0x90>
 801105a:	68ae      	ldr	r6, [r5, #8]
 801105c:	b166      	cbz	r6, 8011078 <rcl_clock_remove_jump_callback+0x3c>
 801105e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011062:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8011066:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801106a:	464c      	mov	r4, r9
 801106c:	6823      	ldr	r3, [r4, #0]
 801106e:	4543      	cmp	r3, r8
 8011070:	d005      	beq.n	801107e <rcl_clock_remove_jump_callback+0x42>
 8011072:	3428      	adds	r4, #40	@ 0x28
 8011074:	42a7      	cmp	r7, r4
 8011076:	d1f9      	bne.n	801106c <rcl_clock_remove_jump_callback+0x30>
 8011078:	2001      	movs	r0, #1
 801107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801107e:	6a23      	ldr	r3, [r4, #32]
 8011080:	3428      	adds	r4, #40	@ 0x28
 8011082:	42bc      	cmp	r4, r7
 8011084:	d02d      	beq.n	80110e2 <rcl_clock_remove_jump_callback+0xa6>
 8011086:	4553      	cmp	r3, sl
 8011088:	d1f0      	bne.n	801106c <rcl_clock_remove_jump_callback+0x30>
 801108a:	46a6      	mov	lr, r4
 801108c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011090:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8011094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011098:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801109c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80110a4:	3428      	adds	r4, #40	@ 0x28
 80110a6:	42a7      	cmp	r7, r4
 80110a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80110ac:	d1ed      	bne.n	801108a <rcl_clock_remove_jump_callback+0x4e>
 80110ae:	3e01      	subs	r6, #1
 80110b0:	60ae      	str	r6, [r5, #8]
 80110b2:	b176      	cbz	r6, 80110d2 <rcl_clock_remove_jump_callback+0x96>
 80110b4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80110b8:	69eb      	ldr	r3, [r5, #28]
 80110ba:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80110bc:	00f1      	lsls	r1, r6, #3
 80110be:	4648      	mov	r0, r9
 80110c0:	4798      	blx	r3
 80110c2:	b1b8      	cbz	r0, 80110f4 <rcl_clock_remove_jump_callback+0xb8>
 80110c4:	6068      	str	r0, [r5, #4]
 80110c6:	2000      	movs	r0, #0
 80110c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110cc:	200b      	movs	r0, #11
 80110ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110d2:	4648      	mov	r0, r9
 80110d4:	69ab      	ldr	r3, [r5, #24]
 80110d6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80110d8:	4798      	blx	r3
 80110da:	606e      	str	r6, [r5, #4]
 80110dc:	4630      	mov	r0, r6
 80110de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e2:	4553      	cmp	r3, sl
 80110e4:	d1c8      	bne.n	8011078 <rcl_clock_remove_jump_callback+0x3c>
 80110e6:	3e01      	subs	r6, #1
 80110e8:	60ae      	str	r6, [r5, #8]
 80110ea:	2e00      	cmp	r6, #0
 80110ec:	d1e2      	bne.n	80110b4 <rcl_clock_remove_jump_callback+0x78>
 80110ee:	e7f0      	b.n	80110d2 <rcl_clock_remove_jump_callback+0x96>
 80110f0:	200b      	movs	r0, #11
 80110f2:	4770      	bx	lr
 80110f4:	200a      	movs	r0, #10
 80110f6:	e7ea      	b.n	80110ce <rcl_clock_remove_jump_callback+0x92>

080110f8 <_rcl_timer_time_jump>:
 80110f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110fc:	4605      	mov	r5, r0
 80110fe:	b084      	sub	sp, #16
 8011100:	4614      	mov	r4, r2
 8011102:	b131      	cbz	r1, 8011112 <_rcl_timer_time_jump+0x1a>
 8011104:	7803      	ldrb	r3, [r0, #0]
 8011106:	3b02      	subs	r3, #2
 8011108:	2b01      	cmp	r3, #1
 801110a:	d93f      	bls.n	801118c <_rcl_timer_time_jump+0x94>
 801110c:	b004      	add	sp, #16
 801110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011112:	6813      	ldr	r3, [r2, #0]
 8011114:	a902      	add	r1, sp, #8
 8011116:	6818      	ldr	r0, [r3, #0]
 8011118:	f7ff ff22 	bl	8010f60 <rcl_clock_get_now>
 801111c:	2800      	cmp	r0, #0
 801111e:	d1f5      	bne.n	801110c <_rcl_timer_time_jump+0x14>
 8011120:	6820      	ldr	r0, [r4, #0]
 8011122:	2105      	movs	r1, #5
 8011124:	3020      	adds	r0, #32
 8011126:	f7f8 fedb 	bl	8009ee0 <__atomic_load_8>
 801112a:	6823      	ldr	r3, [r4, #0]
 801112c:	4681      	mov	r9, r0
 801112e:	4688      	mov	r8, r1
 8011130:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8011134:	2105      	movs	r1, #5
 8011136:	f7f8 fed3 	bl	8009ee0 <__atomic_load_8>
 801113a:	4607      	mov	r7, r0
 801113c:	6820      	ldr	r0, [r4, #0]
 801113e:	460e      	mov	r6, r1
 8011140:	3018      	adds	r0, #24
 8011142:	2105      	movs	r1, #5
 8011144:	f7f8 fecc 	bl	8009ee0 <__atomic_load_8>
 8011148:	782b      	ldrb	r3, [r5, #0]
 801114a:	9a02      	ldr	r2, [sp, #8]
 801114c:	3b02      	subs	r3, #2
 801114e:	2b01      	cmp	r3, #1
 8011150:	460d      	mov	r5, r1
 8011152:	9b03      	ldr	r3, [sp, #12]
 8011154:	4682      	mov	sl, r0
 8011156:	d937      	bls.n	80111c8 <_rcl_timer_time_jump+0xd0>
 8011158:	42ba      	cmp	r2, r7
 801115a:	eb73 0106 	sbcs.w	r1, r3, r6
 801115e:	da5f      	bge.n	8011220 <_rcl_timer_time_jump+0x128>
 8011160:	454a      	cmp	r2, r9
 8011162:	eb73 0108 	sbcs.w	r1, r3, r8
 8011166:	dad1      	bge.n	801110c <_rcl_timer_time_jump+0x14>
 8011168:	6820      	ldr	r0, [r4, #0]
 801116a:	eb1a 0202 	adds.w	r2, sl, r2
 801116e:	eb43 0305 	adc.w	r3, r3, r5
 8011172:	2505      	movs	r5, #5
 8011174:	3028      	adds	r0, #40	@ 0x28
 8011176:	9500      	str	r5, [sp, #0]
 8011178:	f7f8 fee8 	bl	8009f4c <__atomic_store_8>
 801117c:	6820      	ldr	r0, [r4, #0]
 801117e:	9500      	str	r5, [sp, #0]
 8011180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011184:	3020      	adds	r0, #32
 8011186:	f7f8 fee1 	bl	8009f4c <__atomic_store_8>
 801118a:	e7bf      	b.n	801110c <_rcl_timer_time_jump+0x14>
 801118c:	6813      	ldr	r3, [r2, #0]
 801118e:	a902      	add	r1, sp, #8
 8011190:	6818      	ldr	r0, [r3, #0]
 8011192:	f7ff fee5 	bl	8010f60 <rcl_clock_get_now>
 8011196:	2800      	cmp	r0, #0
 8011198:	d1b8      	bne.n	801110c <_rcl_timer_time_jump+0x14>
 801119a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801119e:	4313      	orrs	r3, r2
 80111a0:	d0b4      	beq.n	801110c <_rcl_timer_time_jump+0x14>
 80111a2:	6820      	ldr	r0, [r4, #0]
 80111a4:	2105      	movs	r1, #5
 80111a6:	3028      	adds	r0, #40	@ 0x28
 80111a8:	f7f8 fe9a 	bl	8009ee0 <__atomic_load_8>
 80111ac:	9d02      	ldr	r5, [sp, #8]
 80111ae:	9b03      	ldr	r3, [sp, #12]
 80111b0:	4602      	mov	r2, r0
 80111b2:	6820      	ldr	r0, [r4, #0]
 80111b4:	1b52      	subs	r2, r2, r5
 80111b6:	f04f 0405 	mov.w	r4, #5
 80111ba:	9400      	str	r4, [sp, #0]
 80111bc:	eb61 0303 	sbc.w	r3, r1, r3
 80111c0:	3030      	adds	r0, #48	@ 0x30
 80111c2:	f7f8 fec3 	bl	8009f4c <__atomic_store_8>
 80111c6:	e7a1      	b.n	801110c <_rcl_timer_time_jump+0x14>
 80111c8:	4313      	orrs	r3, r2
 80111ca:	d09f      	beq.n	801110c <_rcl_timer_time_jump+0x14>
 80111cc:	6820      	ldr	r0, [r4, #0]
 80111ce:	f04f 0805 	mov.w	r8, #5
 80111d2:	2300      	movs	r3, #0
 80111d4:	f8cd 8000 	str.w	r8, [sp]
 80111d8:	3030      	adds	r0, #48	@ 0x30
 80111da:	2200      	movs	r2, #0
 80111dc:	f7f8 feec 	bl	8009fb8 <__atomic_exchange_8>
 80111e0:	ea51 0300 	orrs.w	r3, r1, r0
 80111e4:	4606      	mov	r6, r0
 80111e6:	460f      	mov	r7, r1
 80111e8:	d090      	beq.n	801110c <_rcl_timer_time_jump+0x14>
 80111ea:	9a02      	ldr	r2, [sp, #8]
 80111ec:	9b03      	ldr	r3, [sp, #12]
 80111ee:	f8cd 8000 	str.w	r8, [sp]
 80111f2:	1a12      	subs	r2, r2, r0
 80111f4:	6820      	ldr	r0, [r4, #0]
 80111f6:	eb63 0301 	sbc.w	r3, r3, r1
 80111fa:	eb12 020a 	adds.w	r2, r2, sl
 80111fe:	eb43 0305 	adc.w	r3, r3, r5
 8011202:	3028      	adds	r0, #40	@ 0x28
 8011204:	f7f8 fea2 	bl	8009f4c <__atomic_store_8>
 8011208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801120c:	f8cd 8000 	str.w	r8, [sp]
 8011210:	6820      	ldr	r0, [r4, #0]
 8011212:	1b92      	subs	r2, r2, r6
 8011214:	eb63 0307 	sbc.w	r3, r3, r7
 8011218:	3020      	adds	r0, #32
 801121a:	f7f8 fe97 	bl	8009f4c <__atomic_store_8>
 801121e:	e775      	b.n	801110c <_rcl_timer_time_jump+0x14>
 8011220:	6820      	ldr	r0, [r4, #0]
 8011222:	3008      	adds	r0, #8
 8011224:	f7ff fc16 	bl	8010a54 <rcl_trigger_guard_condition>
 8011228:	e770      	b.n	801110c <_rcl_timer_time_jump+0x14>
 801122a:	bf00      	nop

0801122c <rcl_get_zero_initialized_timer>:
 801122c:	4b01      	ldr	r3, [pc, #4]	@ (8011234 <rcl_get_zero_initialized_timer+0x8>)
 801122e:	6818      	ldr	r0, [r3, #0]
 8011230:	4770      	bx	lr
 8011232:	bf00      	nop
 8011234:	080169ec 	.word	0x080169ec

08011238 <rcl_timer_init>:
 8011238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801123c:	b0aa      	sub	sp, #168	@ 0xa8
 801123e:	4604      	mov	r4, r0
 8011240:	a835      	add	r0, sp, #212	@ 0xd4
 8011242:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8011246:	460d      	mov	r5, r1
 8011248:	4692      	mov	sl, r2
 801124a:	f7f8 fe3b 	bl	8009ec4 <rcutils_allocator_is_valid>
 801124e:	2800      	cmp	r0, #0
 8011250:	d064      	beq.n	801131c <rcl_timer_init+0xe4>
 8011252:	2c00      	cmp	r4, #0
 8011254:	d062      	beq.n	801131c <rcl_timer_init+0xe4>
 8011256:	2d00      	cmp	r5, #0
 8011258:	d060      	beq.n	801131c <rcl_timer_init+0xe4>
 801125a:	2f00      	cmp	r7, #0
 801125c:	db5e      	blt.n	801131c <rcl_timer_init+0xe4>
 801125e:	6823      	ldr	r3, [r4, #0]
 8011260:	b123      	cbz	r3, 801126c <rcl_timer_init+0x34>
 8011262:	2664      	movs	r6, #100	@ 0x64
 8011264:	4630      	mov	r0, r6
 8011266:	b02a      	add	sp, #168	@ 0xa8
 8011268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801126c:	a908      	add	r1, sp, #32
 801126e:	4628      	mov	r0, r5
 8011270:	f7ff fe76 	bl	8010f60 <rcl_clock_get_now>
 8011274:	4606      	mov	r6, r0
 8011276:	2800      	cmp	r0, #0
 8011278:	d1f4      	bne.n	8011264 <rcl_timer_init+0x2c>
 801127a:	ae06      	add	r6, sp, #24
 801127c:	4630      	mov	r0, r6
 801127e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8011282:	f7ff faef 	bl	8010864 <rcl_get_zero_initialized_guard_condition>
 8011286:	e896 0003 	ldmia.w	r6, {r0, r1}
 801128a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801128e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8011290:	e889 0003 	stmia.w	r9, {r0, r1}
 8011294:	4630      	mov	r0, r6
 8011296:	f7ff fbc1 	bl	8010a1c <rcl_guard_condition_get_default_options>
 801129a:	ab0d      	add	r3, sp, #52	@ 0x34
 801129c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80112a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80112a4:	4651      	mov	r1, sl
 80112a6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80112aa:	4648      	mov	r0, r9
 80112ac:	f7ff fae4 	bl	8010878 <rcl_guard_condition_init>
 80112b0:	4606      	mov	r6, r0
 80112b2:	2800      	cmp	r0, #0
 80112b4:	d1d6      	bne.n	8011264 <rcl_timer_init+0x2c>
 80112b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d033      	beq.n	8011326 <rcl_timer_init+0xee>
 80112be:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80112c0:	911a      	str	r1, [sp, #104]	@ 0x68
 80112c2:	4642      	mov	r2, r8
 80112c4:	463b      	mov	r3, r7
 80112c6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80112ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80112ce:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8011380 <rcl_timer_init+0x148>
 80112d2:	eb12 0008 	adds.w	r0, r2, r8
 80112d6:	eb47 0103 	adc.w	r1, r7, r3
 80112da:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 80112de:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80112e2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80112e6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 80112ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80112ee:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 80112f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112f6:	f8de 3000 	ldr.w	r3, [lr]
 80112fa:	f8cc 3000 	str.w	r3, [ip]
 80112fe:	f04f 0a00 	mov.w	sl, #0
 8011302:	4619      	mov	r1, r3
 8011304:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8011308:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801130a:	2050      	movs	r0, #80	@ 0x50
 801130c:	4798      	blx	r3
 801130e:	6020      	str	r0, [r4, #0]
 8011310:	b358      	cbz	r0, 801136a <rcl_timer_init+0x132>
 8011312:	2250      	movs	r2, #80	@ 0x50
 8011314:	a916      	add	r1, sp, #88	@ 0x58
 8011316:	f003 fea8 	bl	801506a <memcpy>
 801131a:	e7a3      	b.n	8011264 <rcl_timer_init+0x2c>
 801131c:	260b      	movs	r6, #11
 801131e:	4630      	mov	r0, r6
 8011320:	b02a      	add	sp, #168	@ 0xa8
 8011322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011326:	2001      	movs	r0, #1
 8011328:	2100      	movs	r1, #0
 801132a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801132e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011332:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011336:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801133a:	4a13      	ldr	r2, [pc, #76]	@ (8011388 <rcl_timer_init+0x150>)
 801133c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8011340:	9405      	str	r4, [sp, #20]
 8011342:	9204      	str	r2, [sp, #16]
 8011344:	ab12      	add	r3, sp, #72	@ 0x48
 8011346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011348:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801134c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011350:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8011354:	4628      	mov	r0, r5
 8011356:	f7ff fe0f 	bl	8010f78 <rcl_clock_add_jump_callback>
 801135a:	4682      	mov	sl, r0
 801135c:	2800      	cmp	r0, #0
 801135e:	d0ae      	beq.n	80112be <rcl_timer_init+0x86>
 8011360:	4648      	mov	r0, r9
 8011362:	f7ff fb35 	bl	80109d0 <rcl_guard_condition_fini>
 8011366:	4656      	mov	r6, sl
 8011368:	e77c      	b.n	8011264 <rcl_timer_init+0x2c>
 801136a:	4648      	mov	r0, r9
 801136c:	f7ff fb30 	bl	80109d0 <rcl_guard_condition_fini>
 8011370:	4905      	ldr	r1, [pc, #20]	@ (8011388 <rcl_timer_init+0x150>)
 8011372:	4622      	mov	r2, r4
 8011374:	4628      	mov	r0, r5
 8011376:	f7ff fe61 	bl	801103c <rcl_clock_remove_jump_callback>
 801137a:	260a      	movs	r6, #10
 801137c:	e772      	b.n	8011264 <rcl_timer_init+0x2c>
 801137e:	bf00      	nop
	...
 8011388:	080110f9 	.word	0x080110f9

0801138c <rcl_timer_call>:
 801138c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011390:	b087      	sub	sp, #28
 8011392:	2800      	cmp	r0, #0
 8011394:	d06d      	beq.n	8011472 <rcl_timer_call+0xe6>
 8011396:	6803      	ldr	r3, [r0, #0]
 8011398:	4604      	mov	r4, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	d063      	beq.n	8011466 <rcl_timer_call+0xda>
 801139e:	f3bf 8f5b 	dmb	ish
 80113a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80113a6:	f3bf 8f5b 	dmb	ish
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d150      	bne.n	8011450 <rcl_timer_call+0xc4>
 80113ae:	6803      	ldr	r3, [r0, #0]
 80113b0:	a904      	add	r1, sp, #16
 80113b2:	6818      	ldr	r0, [r3, #0]
 80113b4:	f7ff fdd4 	bl	8010f60 <rcl_clock_get_now>
 80113b8:	4605      	mov	r5, r0
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d14a      	bne.n	8011454 <rcl_timer_call+0xc8>
 80113be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	db4a      	blt.n	801145c <rcl_timer_call+0xd0>
 80113c6:	6820      	ldr	r0, [r4, #0]
 80113c8:	f04f 0a05 	mov.w	sl, #5
 80113cc:	f8cd a000 	str.w	sl, [sp]
 80113d0:	3020      	adds	r0, #32
 80113d2:	f7f8 fdf1 	bl	8009fb8 <__atomic_exchange_8>
 80113d6:	6823      	ldr	r3, [r4, #0]
 80113d8:	f3bf 8f5b 	dmb	ish
 80113dc:	4680      	mov	r8, r0
 80113de:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80113e2:	f3bf 8f5b 	dmb	ish
 80113e6:	6820      	ldr	r0, [r4, #0]
 80113e8:	4689      	mov	r9, r1
 80113ea:	3028      	adds	r0, #40	@ 0x28
 80113ec:	4651      	mov	r1, sl
 80113ee:	f7f8 fd77 	bl	8009ee0 <__atomic_load_8>
 80113f2:	4606      	mov	r6, r0
 80113f4:	6820      	ldr	r0, [r4, #0]
 80113f6:	460f      	mov	r7, r1
 80113f8:	3018      	adds	r0, #24
 80113fa:	4651      	mov	r1, sl
 80113fc:	f7f8 fd70 	bl	8009ee0 <__atomic_load_8>
 8011400:	1836      	adds	r6, r6, r0
 8011402:	4602      	mov	r2, r0
 8011404:	4682      	mov	sl, r0
 8011406:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801140a:	eb47 0701 	adc.w	r7, r7, r1
 801140e:	4286      	cmp	r6, r0
 8011410:	460b      	mov	r3, r1
 8011412:	eb77 010c 	sbcs.w	r1, r7, ip
 8011416:	da04      	bge.n	8011422 <rcl_timer_call+0x96>
 8011418:	ea53 0102 	orrs.w	r1, r3, r2
 801141c:	d12e      	bne.n	801147c <rcl_timer_call+0xf0>
 801141e:	4606      	mov	r6, r0
 8011420:	4667      	mov	r7, ip
 8011422:	6820      	ldr	r0, [r4, #0]
 8011424:	2105      	movs	r1, #5
 8011426:	4632      	mov	r2, r6
 8011428:	463b      	mov	r3, r7
 801142a:	3028      	adds	r0, #40	@ 0x28
 801142c:	9100      	str	r1, [sp, #0]
 801142e:	f7f8 fd8d 	bl	8009f4c <__atomic_store_8>
 8011432:	f1bb 0f00 	cmp.w	fp, #0
 8011436:	d00d      	beq.n	8011454 <rcl_timer_call+0xc8>
 8011438:	9a04      	ldr	r2, [sp, #16]
 801143a:	9b05      	ldr	r3, [sp, #20]
 801143c:	ebb2 0208 	subs.w	r2, r2, r8
 8011440:	4620      	mov	r0, r4
 8011442:	eb63 0309 	sbc.w	r3, r3, r9
 8011446:	47d8      	blx	fp
 8011448:	4628      	mov	r0, r5
 801144a:	b007      	add	sp, #28
 801144c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011450:	f240 3521 	movw	r5, #801	@ 0x321
 8011454:	4628      	mov	r0, r5
 8011456:	b007      	add	sp, #28
 8011458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801145c:	2501      	movs	r5, #1
 801145e:	4628      	mov	r0, r5
 8011460:	b007      	add	sp, #28
 8011462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011466:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801146a:	4628      	mov	r0, r5
 801146c:	b007      	add	sp, #28
 801146e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011472:	250b      	movs	r5, #11
 8011474:	4628      	mov	r0, r5
 8011476:	b007      	add	sp, #28
 8011478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147c:	1b80      	subs	r0, r0, r6
 801147e:	eb6c 0107 	sbc.w	r1, ip, r7
 8011482:	3801      	subs	r0, #1
 8011484:	f161 0100 	sbc.w	r1, r1, #0
 8011488:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801148c:	f7ee ff30 	bl	80002f0 <__aeabi_ldivmod>
 8011490:	9b02      	ldr	r3, [sp, #8]
 8011492:	3001      	adds	r0, #1
 8011494:	f141 0100 	adc.w	r1, r1, #0
 8011498:	fb00 f303 	mul.w	r3, r0, r3
 801149c:	fb01 330a 	mla	r3, r1, sl, r3
 80114a0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80114a4:	1986      	adds	r6, r0, r6
 80114a6:	4453      	add	r3, sl
 80114a8:	eb43 0707 	adc.w	r7, r3, r7
 80114ac:	e7b9      	b.n	8011422 <rcl_timer_call+0x96>
 80114ae:	bf00      	nop

080114b0 <rcl_timer_is_ready>:
 80114b0:	b570      	push	{r4, r5, r6, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	b378      	cbz	r0, 8011516 <rcl_timer_is_ready+0x66>
 80114b6:	6803      	ldr	r3, [r0, #0]
 80114b8:	4604      	mov	r4, r0
 80114ba:	b383      	cbz	r3, 801151e <rcl_timer_is_ready+0x6e>
 80114bc:	460d      	mov	r5, r1
 80114be:	b351      	cbz	r1, 8011516 <rcl_timer_is_ready+0x66>
 80114c0:	f3bf 8f5b 	dmb	ish
 80114c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80114c8:	f3bf 8f5b 	dmb	ish
 80114cc:	b953      	cbnz	r3, 80114e4 <rcl_timer_is_ready+0x34>
 80114ce:	6803      	ldr	r3, [r0, #0]
 80114d0:	4669      	mov	r1, sp
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	f7ff fd44 	bl	8010f60 <rcl_clock_get_now>
 80114d8:	4606      	mov	r6, r0
 80114da:	b140      	cbz	r0, 80114ee <rcl_timer_is_ready+0x3e>
 80114dc:	f240 3321 	movw	r3, #801	@ 0x321
 80114e0:	4298      	cmp	r0, r3
 80114e2:	d101      	bne.n	80114e8 <rcl_timer_is_ready+0x38>
 80114e4:	2600      	movs	r6, #0
 80114e6:	702e      	strb	r6, [r5, #0]
 80114e8:	4630      	mov	r0, r6
 80114ea:	b002      	add	sp, #8
 80114ec:	bd70      	pop	{r4, r5, r6, pc}
 80114ee:	6820      	ldr	r0, [r4, #0]
 80114f0:	2105      	movs	r1, #5
 80114f2:	3028      	adds	r0, #40	@ 0x28
 80114f4:	f7f8 fcf4 	bl	8009ee0 <__atomic_load_8>
 80114f8:	9b00      	ldr	r3, [sp, #0]
 80114fa:	1ac0      	subs	r0, r0, r3
 80114fc:	9b01      	ldr	r3, [sp, #4]
 80114fe:	eb61 0103 	sbc.w	r1, r1, r3
 8011502:	2801      	cmp	r0, #1
 8011504:	f171 0300 	sbcs.w	r3, r1, #0
 8011508:	bfb4      	ite	lt
 801150a:	2301      	movlt	r3, #1
 801150c:	2300      	movge	r3, #0
 801150e:	4630      	mov	r0, r6
 8011510:	702b      	strb	r3, [r5, #0]
 8011512:	b002      	add	sp, #8
 8011514:	bd70      	pop	{r4, r5, r6, pc}
 8011516:	260b      	movs	r6, #11
 8011518:	4630      	mov	r0, r6
 801151a:	b002      	add	sp, #8
 801151c:	bd70      	pop	{r4, r5, r6, pc}
 801151e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011522:	e7e1      	b.n	80114e8 <rcl_timer_is_ready+0x38>

08011524 <rcl_timer_get_time_until_next_call>:
 8011524:	b570      	push	{r4, r5, r6, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	b330      	cbz	r0, 8011578 <rcl_timer_get_time_until_next_call+0x54>
 801152a:	6803      	ldr	r3, [r0, #0]
 801152c:	4604      	mov	r4, r0
 801152e:	b33b      	cbz	r3, 8011580 <rcl_timer_get_time_until_next_call+0x5c>
 8011530:	460d      	mov	r5, r1
 8011532:	b309      	cbz	r1, 8011578 <rcl_timer_get_time_until_next_call+0x54>
 8011534:	f3bf 8f5b 	dmb	ish
 8011538:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801153c:	f3bf 8f5b 	dmb	ish
 8011540:	b9ab      	cbnz	r3, 801156e <rcl_timer_get_time_until_next_call+0x4a>
 8011542:	6803      	ldr	r3, [r0, #0]
 8011544:	4669      	mov	r1, sp
 8011546:	6818      	ldr	r0, [r3, #0]
 8011548:	f7ff fd0a 	bl	8010f60 <rcl_clock_get_now>
 801154c:	4606      	mov	r6, r0
 801154e:	b958      	cbnz	r0, 8011568 <rcl_timer_get_time_until_next_call+0x44>
 8011550:	6820      	ldr	r0, [r4, #0]
 8011552:	2105      	movs	r1, #5
 8011554:	3028      	adds	r0, #40	@ 0x28
 8011556:	f7f8 fcc3 	bl	8009ee0 <__atomic_load_8>
 801155a:	9b00      	ldr	r3, [sp, #0]
 801155c:	1ac0      	subs	r0, r0, r3
 801155e:	9b01      	ldr	r3, [sp, #4]
 8011560:	6028      	str	r0, [r5, #0]
 8011562:	eb61 0103 	sbc.w	r1, r1, r3
 8011566:	6069      	str	r1, [r5, #4]
 8011568:	4630      	mov	r0, r6
 801156a:	b002      	add	sp, #8
 801156c:	bd70      	pop	{r4, r5, r6, pc}
 801156e:	f240 3621 	movw	r6, #801	@ 0x321
 8011572:	4630      	mov	r0, r6
 8011574:	b002      	add	sp, #8
 8011576:	bd70      	pop	{r4, r5, r6, pc}
 8011578:	260b      	movs	r6, #11
 801157a:	4630      	mov	r0, r6
 801157c:	b002      	add	sp, #8
 801157e:	bd70      	pop	{r4, r5, r6, pc}
 8011580:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011584:	e7f0      	b.n	8011568 <rcl_timer_get_time_until_next_call+0x44>
 8011586:	bf00      	nop

08011588 <rcl_timer_get_guard_condition>:
 8011588:	b130      	cbz	r0, 8011598 <rcl_timer_get_guard_condition+0x10>
 801158a:	6800      	ldr	r0, [r0, #0]
 801158c:	b120      	cbz	r0, 8011598 <rcl_timer_get_guard_condition+0x10>
 801158e:	68c3      	ldr	r3, [r0, #12]
 8011590:	b10b      	cbz	r3, 8011596 <rcl_timer_get_guard_condition+0xe>
 8011592:	3008      	adds	r0, #8
 8011594:	4770      	bx	lr
 8011596:	4618      	mov	r0, r3
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop

0801159c <rcl_validate_topic_name>:
 801159c:	2800      	cmp	r0, #0
 801159e:	d07a      	beq.n	8011696 <rcl_validate_topic_name+0xfa>
 80115a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115a4:	460e      	mov	r6, r1
 80115a6:	2900      	cmp	r1, #0
 80115a8:	d07c      	beq.n	80116a4 <rcl_validate_topic_name+0x108>
 80115aa:	4617      	mov	r7, r2
 80115ac:	4605      	mov	r5, r0
 80115ae:	f7ee fe41 	bl	8000234 <strlen>
 80115b2:	b1b0      	cbz	r0, 80115e2 <rcl_validate_topic_name+0x46>
 80115b4:	f895 9000 	ldrb.w	r9, [r5]
 80115b8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801173c <rcl_validate_topic_name+0x1a0>
 80115bc:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80115c0:	f013 0304 	ands.w	r3, r3, #4
 80115c4:	d169      	bne.n	801169a <rcl_validate_topic_name+0xfe>
 80115c6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80115ca:	f815 2008 	ldrb.w	r2, [r5, r8]
 80115ce:	2a2f      	cmp	r2, #47	@ 0x2f
 80115d0:	d10e      	bne.n	80115f0 <rcl_validate_topic_name+0x54>
 80115d2:	2202      	movs	r2, #2
 80115d4:	6032      	str	r2, [r6, #0]
 80115d6:	b36f      	cbz	r7, 8011634 <rcl_validate_topic_name+0x98>
 80115d8:	f8c7 8000 	str.w	r8, [r7]
 80115dc:	4618      	mov	r0, r3
 80115de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115e2:	2301      	movs	r3, #1
 80115e4:	6033      	str	r3, [r6, #0]
 80115e6:	b32f      	cbz	r7, 8011634 <rcl_validate_topic_name+0x98>
 80115e8:	2000      	movs	r0, #0
 80115ea:	6038      	str	r0, [r7, #0]
 80115ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115f0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80115f4:	461c      	mov	r4, r3
 80115f6:	4619      	mov	r1, r3
 80115f8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80115fc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011600:	f1be 0f09 	cmp.w	lr, #9
 8011604:	d919      	bls.n	801163a <rcl_validate_topic_name+0x9e>
 8011606:	f022 0e20 	bic.w	lr, r2, #32
 801160a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801160e:	f1be 0f19 	cmp.w	lr, #25
 8011612:	d912      	bls.n	801163a <rcl_validate_topic_name+0x9e>
 8011614:	2a5f      	cmp	r2, #95	@ 0x5f
 8011616:	d019      	beq.n	801164c <rcl_validate_topic_name+0xb0>
 8011618:	2a2f      	cmp	r2, #47	@ 0x2f
 801161a:	d051      	beq.n	80116c0 <rcl_validate_topic_name+0x124>
 801161c:	2a7e      	cmp	r2, #126	@ 0x7e
 801161e:	d048      	beq.n	80116b2 <rcl_validate_topic_name+0x116>
 8011620:	2a7b      	cmp	r2, #123	@ 0x7b
 8011622:	d054      	beq.n	80116ce <rcl_validate_topic_name+0x132>
 8011624:	2a7d      	cmp	r2, #125	@ 0x7d
 8011626:	d161      	bne.n	80116ec <rcl_validate_topic_name+0x150>
 8011628:	2c00      	cmp	r4, #0
 801162a:	d155      	bne.n	80116d8 <rcl_validate_topic_name+0x13c>
 801162c:	2305      	movs	r3, #5
 801162e:	6033      	str	r3, [r6, #0]
 8011630:	b107      	cbz	r7, 8011634 <rcl_validate_topic_name+0x98>
 8011632:	6039      	str	r1, [r7, #0]
 8011634:	2000      	movs	r0, #0
 8011636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801163a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801163e:	0752      	lsls	r2, r2, #29
 8011640:	d504      	bpl.n	801164c <rcl_validate_topic_name+0xb0>
 8011642:	b11c      	cbz	r4, 801164c <rcl_validate_topic_name+0xb0>
 8011644:	b111      	cbz	r1, 801164c <rcl_validate_topic_name+0xb0>
 8011646:	1e4a      	subs	r2, r1, #1
 8011648:	429a      	cmp	r2, r3
 801164a:	d02d      	beq.n	80116a8 <rcl_validate_topic_name+0x10c>
 801164c:	3101      	adds	r1, #1
 801164e:	4288      	cmp	r0, r1
 8011650:	d1d2      	bne.n	80115f8 <rcl_validate_topic_name+0x5c>
 8011652:	2c00      	cmp	r4, #0
 8011654:	d145      	bne.n	80116e2 <rcl_validate_topic_name+0x146>
 8011656:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801165a:	d04f      	beq.n	80116fc <rcl_validate_topic_name+0x160>
 801165c:	4620      	mov	r0, r4
 801165e:	2301      	movs	r3, #1
 8011660:	e006      	b.n	8011670 <rcl_validate_topic_name+0xd4>
 8011662:	428b      	cmp	r3, r1
 8011664:	f105 0501 	add.w	r5, r5, #1
 8011668:	f103 0201 	add.w	r2, r3, #1
 801166c:	d236      	bcs.n	80116dc <rcl_validate_topic_name+0x140>
 801166e:	4613      	mov	r3, r2
 8011670:	4580      	cmp	r8, r0
 8011672:	f100 0001 	add.w	r0, r0, #1
 8011676:	d0f4      	beq.n	8011662 <rcl_validate_topic_name+0xc6>
 8011678:	782a      	ldrb	r2, [r5, #0]
 801167a:	2a2f      	cmp	r2, #47	@ 0x2f
 801167c:	d1f1      	bne.n	8011662 <rcl_validate_topic_name+0xc6>
 801167e:	786a      	ldrb	r2, [r5, #1]
 8011680:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011684:	0754      	lsls	r4, r2, #29
 8011686:	d5ec      	bpl.n	8011662 <rcl_validate_topic_name+0xc6>
 8011688:	2204      	movs	r2, #4
 801168a:	6032      	str	r2, [r6, #0]
 801168c:	2f00      	cmp	r7, #0
 801168e:	d0d1      	beq.n	8011634 <rcl_validate_topic_name+0x98>
 8011690:	603b      	str	r3, [r7, #0]
 8011692:	2000      	movs	r0, #0
 8011694:	e7aa      	b.n	80115ec <rcl_validate_topic_name+0x50>
 8011696:	200b      	movs	r0, #11
 8011698:	4770      	bx	lr
 801169a:	2304      	movs	r3, #4
 801169c:	6033      	str	r3, [r6, #0]
 801169e:	2f00      	cmp	r7, #0
 80116a0:	d1a2      	bne.n	80115e8 <rcl_validate_topic_name+0x4c>
 80116a2:	e7c7      	b.n	8011634 <rcl_validate_topic_name+0x98>
 80116a4:	200b      	movs	r0, #11
 80116a6:	e7a1      	b.n	80115ec <rcl_validate_topic_name+0x50>
 80116a8:	2309      	movs	r3, #9
 80116aa:	6033      	str	r3, [r6, #0]
 80116ac:	2f00      	cmp	r7, #0
 80116ae:	d1c0      	bne.n	8011632 <rcl_validate_topic_name+0x96>
 80116b0:	e7c0      	b.n	8011634 <rcl_validate_topic_name+0x98>
 80116b2:	2900      	cmp	r1, #0
 80116b4:	d0ca      	beq.n	801164c <rcl_validate_topic_name+0xb0>
 80116b6:	2306      	movs	r3, #6
 80116b8:	6033      	str	r3, [r6, #0]
 80116ba:	2f00      	cmp	r7, #0
 80116bc:	d1b9      	bne.n	8011632 <rcl_validate_topic_name+0x96>
 80116be:	e7b9      	b.n	8011634 <rcl_validate_topic_name+0x98>
 80116c0:	2c00      	cmp	r4, #0
 80116c2:	d0c3      	beq.n	801164c <rcl_validate_topic_name+0xb0>
 80116c4:	2308      	movs	r3, #8
 80116c6:	6033      	str	r3, [r6, #0]
 80116c8:	2f00      	cmp	r7, #0
 80116ca:	d1b2      	bne.n	8011632 <rcl_validate_topic_name+0x96>
 80116cc:	e7b2      	b.n	8011634 <rcl_validate_topic_name+0x98>
 80116ce:	2c00      	cmp	r4, #0
 80116d0:	d1f8      	bne.n	80116c4 <rcl_validate_topic_name+0x128>
 80116d2:	460b      	mov	r3, r1
 80116d4:	2401      	movs	r4, #1
 80116d6:	e7b9      	b.n	801164c <rcl_validate_topic_name+0xb0>
 80116d8:	2400      	movs	r4, #0
 80116da:	e7b7      	b.n	801164c <rcl_validate_topic_name+0xb0>
 80116dc:	2000      	movs	r0, #0
 80116de:	6030      	str	r0, [r6, #0]
 80116e0:	e784      	b.n	80115ec <rcl_validate_topic_name+0x50>
 80116e2:	2205      	movs	r2, #5
 80116e4:	6032      	str	r2, [r6, #0]
 80116e6:	2f00      	cmp	r7, #0
 80116e8:	d1d2      	bne.n	8011690 <rcl_validate_topic_name+0xf4>
 80116ea:	e7a3      	b.n	8011634 <rcl_validate_topic_name+0x98>
 80116ec:	2c00      	cmp	r4, #0
 80116ee:	bf14      	ite	ne
 80116f0:	2308      	movne	r3, #8
 80116f2:	2303      	moveq	r3, #3
 80116f4:	6033      	str	r3, [r6, #0]
 80116f6:	2f00      	cmp	r7, #0
 80116f8:	d19b      	bne.n	8011632 <rcl_validate_topic_name+0x96>
 80116fa:	e79b      	b.n	8011634 <rcl_validate_topic_name+0x98>
 80116fc:	2301      	movs	r3, #1
 80116fe:	e00a      	b.n	8011716 <rcl_validate_topic_name+0x17a>
 8011700:	2c01      	cmp	r4, #1
 8011702:	d013      	beq.n	801172c <rcl_validate_topic_name+0x190>
 8011704:	4299      	cmp	r1, r3
 8011706:	f104 0401 	add.w	r4, r4, #1
 801170a:	f105 0501 	add.w	r5, r5, #1
 801170e:	f103 0201 	add.w	r2, r3, #1
 8011712:	d9e3      	bls.n	80116dc <rcl_validate_topic_name+0x140>
 8011714:	4613      	mov	r3, r2
 8011716:	45a0      	cmp	r8, r4
 8011718:	d0f4      	beq.n	8011704 <rcl_validate_topic_name+0x168>
 801171a:	782a      	ldrb	r2, [r5, #0]
 801171c:	2a2f      	cmp	r2, #47	@ 0x2f
 801171e:	d1ef      	bne.n	8011700 <rcl_validate_topic_name+0x164>
 8011720:	786a      	ldrb	r2, [r5, #1]
 8011722:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011726:	0752      	lsls	r2, r2, #29
 8011728:	d5ec      	bpl.n	8011704 <rcl_validate_topic_name+0x168>
 801172a:	e7ad      	b.n	8011688 <rcl_validate_topic_name+0xec>
 801172c:	2307      	movs	r3, #7
 801172e:	6033      	str	r3, [r6, #0]
 8011730:	2f00      	cmp	r7, #0
 8011732:	f43f af7f 	beq.w	8011634 <rcl_validate_topic_name+0x98>
 8011736:	603c      	str	r4, [r7, #0]
 8011738:	2000      	movs	r0, #0
 801173a:	e757      	b.n	80115ec <rcl_validate_topic_name+0x50>
 801173c:	08016bb7 	.word	0x08016bb7

08011740 <rcl_get_zero_initialized_wait_set>:
 8011740:	b510      	push	{r4, lr}
 8011742:	4c08      	ldr	r4, [pc, #32]	@ (8011764 <rcl_get_zero_initialized_wait_set+0x24>)
 8011744:	4686      	mov	lr, r0
 8011746:	4684      	mov	ip, r0
 8011748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801174a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011750:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011756:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801175a:	6823      	ldr	r3, [r4, #0]
 801175c:	f8cc 3000 	str.w	r3, [ip]
 8011760:	4670      	mov	r0, lr
 8011762:	bd10      	pop	{r4, pc}
 8011764:	080169f0 	.word	0x080169f0

08011768 <rcl_wait_set_is_valid>:
 8011768:	b118      	cbz	r0, 8011772 <rcl_wait_set_is_valid+0xa>
 801176a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801176c:	3800      	subs	r0, #0
 801176e:	bf18      	it	ne
 8011770:	2001      	movne	r0, #1
 8011772:	4770      	bx	lr

08011774 <rcl_wait_set_fini>:
 8011774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011778:	b082      	sub	sp, #8
 801177a:	2800      	cmp	r0, #0
 801177c:	f000 8095 	beq.w	80118aa <rcl_wait_set_fini+0x136>
 8011780:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011782:	4604      	mov	r4, r0
 8011784:	2e00      	cmp	r6, #0
 8011786:	f000 808c 	beq.w	80118a2 <rcl_wait_set_fini+0x12e>
 801178a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801178c:	f001 ff04 	bl	8013598 <rmw_destroy_wait_set>
 8011790:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011792:	1e06      	subs	r6, r0, #0
 8011794:	bf18      	it	ne
 8011796:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801179a:	2d00      	cmp	r5, #0
 801179c:	f000 8081 	beq.w	80118a2 <rcl_wait_set_fini+0x12e>
 80117a0:	6820      	ldr	r0, [r4, #0]
 80117a2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80117a6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80117a8:	2700      	movs	r7, #0
 80117aa:	6067      	str	r7, [r4, #4]
 80117ac:	602f      	str	r7, [r5, #0]
 80117ae:	b120      	cbz	r0, 80117ba <rcl_wait_set_fini+0x46>
 80117b0:	9101      	str	r1, [sp, #4]
 80117b2:	47c0      	blx	r8
 80117b4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117b6:	9901      	ldr	r1, [sp, #4]
 80117b8:	6027      	str	r7, [r4, #0]
 80117ba:	68a8      	ldr	r0, [r5, #8]
 80117bc:	b120      	cbz	r0, 80117c8 <rcl_wait_set_fini+0x54>
 80117be:	47c0      	blx	r8
 80117c0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117c2:	2300      	movs	r3, #0
 80117c4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80117c8:	68a0      	ldr	r0, [r4, #8]
 80117ca:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80117cc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80117ce:	f04f 0800 	mov.w	r8, #0
 80117d2:	f8c4 800c 	str.w	r8, [r4, #12]
 80117d6:	f8c5 800c 	str.w	r8, [r5, #12]
 80117da:	b128      	cbz	r0, 80117e8 <rcl_wait_set_fini+0x74>
 80117dc:	47b8      	blx	r7
 80117de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117e0:	f8c4 8008 	str.w	r8, [r4, #8]
 80117e4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80117e6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80117e8:	6968      	ldr	r0, [r5, #20]
 80117ea:	f04f 0800 	mov.w	r8, #0
 80117ee:	f8c5 8010 	str.w	r8, [r5, #16]
 80117f2:	b128      	cbz	r0, 8011800 <rcl_wait_set_fini+0x8c>
 80117f4:	47b8      	blx	r7
 80117f6:	f8c5 8014 	str.w	r8, [r5, #20]
 80117fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117fc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80117fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011800:	6920      	ldr	r0, [r4, #16]
 8011802:	f04f 0800 	mov.w	r8, #0
 8011806:	f8c4 8014 	str.w	r8, [r4, #20]
 801180a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801180e:	b128      	cbz	r0, 801181c <rcl_wait_set_fini+0xa8>
 8011810:	47b8      	blx	r7
 8011812:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011814:	f8c4 8010 	str.w	r8, [r4, #16]
 8011818:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801181a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801181c:	69a0      	ldr	r0, [r4, #24]
 801181e:	f04f 0800 	mov.w	r8, #0
 8011822:	f8c4 801c 	str.w	r8, [r4, #28]
 8011826:	f8c5 8018 	str.w	r8, [r5, #24]
 801182a:	b128      	cbz	r0, 8011838 <rcl_wait_set_fini+0xc4>
 801182c:	9101      	str	r1, [sp, #4]
 801182e:	47b8      	blx	r7
 8011830:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011832:	9901      	ldr	r1, [sp, #4]
 8011834:	f8c4 8018 	str.w	r8, [r4, #24]
 8011838:	6a28      	ldr	r0, [r5, #32]
 801183a:	b120      	cbz	r0, 8011846 <rcl_wait_set_fini+0xd2>
 801183c:	47b8      	blx	r7
 801183e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011840:	2300      	movs	r3, #0
 8011842:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011846:	6a20      	ldr	r0, [r4, #32]
 8011848:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801184c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801184e:	2700      	movs	r7, #0
 8011850:	6267      	str	r7, [r4, #36]	@ 0x24
 8011852:	626f      	str	r7, [r5, #36]	@ 0x24
 8011854:	b120      	cbz	r0, 8011860 <rcl_wait_set_fini+0xec>
 8011856:	9101      	str	r1, [sp, #4]
 8011858:	47c0      	blx	r8
 801185a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801185c:	9901      	ldr	r1, [sp, #4]
 801185e:	6227      	str	r7, [r4, #32]
 8011860:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011862:	b120      	cbz	r0, 801186e <rcl_wait_set_fini+0xfa>
 8011864:	47c0      	blx	r8
 8011866:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011868:	2300      	movs	r3, #0
 801186a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801186e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011870:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011874:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011876:	2700      	movs	r7, #0
 8011878:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801187a:	632f      	str	r7, [r5, #48]	@ 0x30
 801187c:	b120      	cbz	r0, 8011888 <rcl_wait_set_fini+0x114>
 801187e:	9101      	str	r1, [sp, #4]
 8011880:	47c0      	blx	r8
 8011882:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011884:	9901      	ldr	r1, [sp, #4]
 8011886:	62a7      	str	r7, [r4, #40]	@ 0x28
 8011888:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801188a:	b120      	cbz	r0, 8011896 <rcl_wait_set_fini+0x122>
 801188c:	47c0      	blx	r8
 801188e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011890:	2300      	movs	r3, #0
 8011892:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8011896:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011898:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801189a:	4628      	mov	r0, r5
 801189c:	4798      	blx	r3
 801189e:	2300      	movs	r3, #0
 80118a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80118a2:	4630      	mov	r0, r6
 80118a4:	b002      	add	sp, #8
 80118a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118aa:	260b      	movs	r6, #11
 80118ac:	4630      	mov	r0, r6
 80118ae:	b002      	add	sp, #8
 80118b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118b4 <rcl_wait_set_add_subscription>:
 80118b4:	b318      	cbz	r0, 80118fe <rcl_wait_set_add_subscription+0x4a>
 80118b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80118b8:	b570      	push	{r4, r5, r6, lr}
 80118ba:	4604      	mov	r4, r0
 80118bc:	b30b      	cbz	r3, 8011902 <rcl_wait_set_add_subscription+0x4e>
 80118be:	b319      	cbz	r1, 8011908 <rcl_wait_set_add_subscription+0x54>
 80118c0:	681d      	ldr	r5, [r3, #0]
 80118c2:	6840      	ldr	r0, [r0, #4]
 80118c4:	4285      	cmp	r5, r0
 80118c6:	d217      	bcs.n	80118f8 <rcl_wait_set_add_subscription+0x44>
 80118c8:	6820      	ldr	r0, [r4, #0]
 80118ca:	1c6e      	adds	r6, r5, #1
 80118cc:	601e      	str	r6, [r3, #0]
 80118ce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80118d2:	b102      	cbz	r2, 80118d6 <rcl_wait_set_add_subscription+0x22>
 80118d4:	6015      	str	r5, [r2, #0]
 80118d6:	4608      	mov	r0, r1
 80118d8:	f7ff faa2 	bl	8010e20 <rcl_subscription_get_rmw_handle>
 80118dc:	b150      	cbz	r0, 80118f4 <rcl_wait_set_add_subscription+0x40>
 80118de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118e0:	6842      	ldr	r2, [r0, #4]
 80118e2:	689b      	ldr	r3, [r3, #8]
 80118e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80118e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80118ea:	6853      	ldr	r3, [r2, #4]
 80118ec:	3301      	adds	r3, #1
 80118ee:	2000      	movs	r0, #0
 80118f0:	6053      	str	r3, [r2, #4]
 80118f2:	bd70      	pop	{r4, r5, r6, pc}
 80118f4:	2001      	movs	r0, #1
 80118f6:	bd70      	pop	{r4, r5, r6, pc}
 80118f8:	f240 3086 	movw	r0, #902	@ 0x386
 80118fc:	bd70      	pop	{r4, r5, r6, pc}
 80118fe:	200b      	movs	r0, #11
 8011900:	4770      	bx	lr
 8011902:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011906:	bd70      	pop	{r4, r5, r6, pc}
 8011908:	200b      	movs	r0, #11
 801190a:	bd70      	pop	{r4, r5, r6, pc}

0801190c <rcl_wait_set_clear>:
 801190c:	2800      	cmp	r0, #0
 801190e:	d073      	beq.n	80119f8 <rcl_wait_set_clear+0xec>
 8011910:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011912:	b510      	push	{r4, lr}
 8011914:	4604      	mov	r4, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d070      	beq.n	80119fc <rcl_wait_set_clear+0xf0>
 801191a:	6800      	ldr	r0, [r0, #0]
 801191c:	b138      	cbz	r0, 801192e <rcl_wait_set_clear+0x22>
 801191e:	6862      	ldr	r2, [r4, #4]
 8011920:	2100      	movs	r1, #0
 8011922:	0092      	lsls	r2, r2, #2
 8011924:	f003 fad8 	bl	8014ed8 <memset>
 8011928:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801192a:	2200      	movs	r2, #0
 801192c:	601a      	str	r2, [r3, #0]
 801192e:	68a0      	ldr	r0, [r4, #8]
 8011930:	b138      	cbz	r0, 8011942 <rcl_wait_set_clear+0x36>
 8011932:	68e2      	ldr	r2, [r4, #12]
 8011934:	2100      	movs	r1, #0
 8011936:	0092      	lsls	r2, r2, #2
 8011938:	f003 face 	bl	8014ed8 <memset>
 801193c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801193e:	2200      	movs	r2, #0
 8011940:	60da      	str	r2, [r3, #12]
 8011942:	69a0      	ldr	r0, [r4, #24]
 8011944:	b138      	cbz	r0, 8011956 <rcl_wait_set_clear+0x4a>
 8011946:	69e2      	ldr	r2, [r4, #28]
 8011948:	2100      	movs	r1, #0
 801194a:	0092      	lsls	r2, r2, #2
 801194c:	f003 fac4 	bl	8014ed8 <memset>
 8011950:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011952:	2200      	movs	r2, #0
 8011954:	619a      	str	r2, [r3, #24]
 8011956:	6a20      	ldr	r0, [r4, #32]
 8011958:	b138      	cbz	r0, 801196a <rcl_wait_set_clear+0x5e>
 801195a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801195c:	2100      	movs	r1, #0
 801195e:	0092      	lsls	r2, r2, #2
 8011960:	f003 faba 	bl	8014ed8 <memset>
 8011964:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011966:	2200      	movs	r2, #0
 8011968:	625a      	str	r2, [r3, #36]	@ 0x24
 801196a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801196c:	b138      	cbz	r0, 801197e <rcl_wait_set_clear+0x72>
 801196e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011970:	2100      	movs	r1, #0
 8011972:	0092      	lsls	r2, r2, #2
 8011974:	f003 fab0 	bl	8014ed8 <memset>
 8011978:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801197a:	2200      	movs	r2, #0
 801197c:	631a      	str	r2, [r3, #48]	@ 0x30
 801197e:	6920      	ldr	r0, [r4, #16]
 8011980:	b138      	cbz	r0, 8011992 <rcl_wait_set_clear+0x86>
 8011982:	6962      	ldr	r2, [r4, #20]
 8011984:	2100      	movs	r1, #0
 8011986:	0092      	lsls	r2, r2, #2
 8011988:	f003 faa6 	bl	8014ed8 <memset>
 801198c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801198e:	2200      	movs	r2, #0
 8011990:	641a      	str	r2, [r3, #64]	@ 0x40
 8011992:	6898      	ldr	r0, [r3, #8]
 8011994:	b138      	cbz	r0, 80119a6 <rcl_wait_set_clear+0x9a>
 8011996:	685a      	ldr	r2, [r3, #4]
 8011998:	2100      	movs	r1, #0
 801199a:	0092      	lsls	r2, r2, #2
 801199c:	f003 fa9c 	bl	8014ed8 <memset>
 80119a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119a2:	2200      	movs	r2, #0
 80119a4:	605a      	str	r2, [r3, #4]
 80119a6:	6958      	ldr	r0, [r3, #20]
 80119a8:	b138      	cbz	r0, 80119ba <rcl_wait_set_clear+0xae>
 80119aa:	691a      	ldr	r2, [r3, #16]
 80119ac:	2100      	movs	r1, #0
 80119ae:	0092      	lsls	r2, r2, #2
 80119b0:	f003 fa92 	bl	8014ed8 <memset>
 80119b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119b6:	2200      	movs	r2, #0
 80119b8:	611a      	str	r2, [r3, #16]
 80119ba:	6a18      	ldr	r0, [r3, #32]
 80119bc:	b138      	cbz	r0, 80119ce <rcl_wait_set_clear+0xc2>
 80119be:	69da      	ldr	r2, [r3, #28]
 80119c0:	2100      	movs	r1, #0
 80119c2:	0092      	lsls	r2, r2, #2
 80119c4:	f003 fa88 	bl	8014ed8 <memset>
 80119c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119ca:	2200      	movs	r2, #0
 80119cc:	61da      	str	r2, [r3, #28]
 80119ce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80119d0:	b138      	cbz	r0, 80119e2 <rcl_wait_set_clear+0xd6>
 80119d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80119d4:	2100      	movs	r1, #0
 80119d6:	0092      	lsls	r2, r2, #2
 80119d8:	f003 fa7e 	bl	8014ed8 <memset>
 80119dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119de:	2200      	movs	r2, #0
 80119e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80119e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80119e4:	b138      	cbz	r0, 80119f6 <rcl_wait_set_clear+0xea>
 80119e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119e8:	2100      	movs	r1, #0
 80119ea:	0092      	lsls	r2, r2, #2
 80119ec:	f003 fa74 	bl	8014ed8 <memset>
 80119f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119f2:	2000      	movs	r0, #0
 80119f4:	6358      	str	r0, [r3, #52]	@ 0x34
 80119f6:	bd10      	pop	{r4, pc}
 80119f8:	200b      	movs	r0, #11
 80119fa:	4770      	bx	lr
 80119fc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a00:	bd10      	pop	{r4, pc}
 8011a02:	bf00      	nop

08011a04 <rcl_wait_set_resize>:
 8011a04:	2800      	cmp	r0, #0
 8011a06:	f000 8185 	beq.w	8011d14 <rcl_wait_set_resize+0x310>
 8011a0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a0e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011a10:	b083      	sub	sp, #12
 8011a12:	4605      	mov	r5, r0
 8011a14:	2c00      	cmp	r4, #0
 8011a16:	f000 817f 	beq.w	8011d18 <rcl_wait_set_resize+0x314>
 8011a1a:	f04f 0900 	mov.w	r9, #0
 8011a1e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8011a22:	461f      	mov	r7, r3
 8011a24:	4688      	mov	r8, r1
 8011a26:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8011a2a:	4616      	mov	r6, r2
 8011a2c:	f8c0 9004 	str.w	r9, [r0, #4]
 8011a30:	f8c4 9000 	str.w	r9, [r4]
 8011a34:	2900      	cmp	r1, #0
 8011a36:	f000 80bd 	beq.w	8011bb4 <rcl_wait_set_resize+0x1b0>
 8011a3a:	008c      	lsls	r4, r1, #2
 8011a3c:	6800      	ldr	r0, [r0, #0]
 8011a3e:	9301      	str	r3, [sp, #4]
 8011a40:	4652      	mov	r2, sl
 8011a42:	4621      	mov	r1, r4
 8011a44:	4798      	blx	r3
 8011a46:	9b01      	ldr	r3, [sp, #4]
 8011a48:	6028      	str	r0, [r5, #0]
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	f000 80cb 	beq.w	8011be6 <rcl_wait_set_resize+0x1e2>
 8011a50:	4622      	mov	r2, r4
 8011a52:	4649      	mov	r1, r9
 8011a54:	9301      	str	r3, [sp, #4]
 8011a56:	f003 fa3f 	bl	8014ed8 <memset>
 8011a5a:	f8c5 8004 	str.w	r8, [r5, #4]
 8011a5e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8011a62:	9b01      	ldr	r3, [sp, #4]
 8011a64:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011a68:	f8c8 9004 	str.w	r9, [r8, #4]
 8011a6c:	4652      	mov	r2, sl
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4798      	blx	r3
 8011a72:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011a74:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a78:	689b      	ldr	r3, [r3, #8]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	f000 80ac 	beq.w	8011bd8 <rcl_wait_set_resize+0x1d4>
 8011a80:	4622      	mov	r2, r4
 8011a82:	4649      	mov	r1, r9
 8011a84:	4618      	mov	r0, r3
 8011a86:	f003 fa27 	bl	8014ed8 <memset>
 8011a8a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011a8c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011a90:	f04f 0800 	mov.w	r8, #0
 8011a94:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8011a98:	f8c5 800c 	str.w	r8, [r5, #12]
 8011a9c:	f8c4 800c 	str.w	r8, [r4, #12]
 8011aa0:	2e00      	cmp	r6, #0
 8011aa2:	f040 80a4 	bne.w	8011bee <rcl_wait_set_resize+0x1ea>
 8011aa6:	68a8      	ldr	r0, [r5, #8]
 8011aa8:	b128      	cbz	r0, 8011ab6 <rcl_wait_set_resize+0xb2>
 8011aaa:	4649      	mov	r1, r9
 8011aac:	4790      	blx	r2
 8011aae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ab0:	60ae      	str	r6, [r5, #8]
 8011ab2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011ab6:	f04f 0800 	mov.w	r8, #0
 8011aba:	19f6      	adds	r6, r6, r7
 8011abc:	f8c4 8010 	str.w	r8, [r4, #16]
 8011ac0:	f040 80ac 	bne.w	8011c1c <rcl_wait_set_resize+0x218>
 8011ac4:	6960      	ldr	r0, [r4, #20]
 8011ac6:	b130      	cbz	r0, 8011ad6 <rcl_wait_set_resize+0xd2>
 8011ac8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011aca:	4649      	mov	r1, r9
 8011acc:	4798      	blx	r3
 8011ace:	6166      	str	r6, [r4, #20]
 8011ad0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ad2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011ad6:	2600      	movs	r6, #0
 8011ad8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011adc:	616e      	str	r6, [r5, #20]
 8011ade:	6426      	str	r6, [r4, #64]	@ 0x40
 8011ae0:	2f00      	cmp	r7, #0
 8011ae2:	f040 80ad 	bne.w	8011c40 <rcl_wait_set_resize+0x23c>
 8011ae6:	6928      	ldr	r0, [r5, #16]
 8011ae8:	b138      	cbz	r0, 8011afa <rcl_wait_set_resize+0xf6>
 8011aea:	4649      	mov	r1, r9
 8011aec:	47d0      	blx	sl
 8011aee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011af0:	612f      	str	r7, [r5, #16]
 8011af2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011af6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011afa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011afc:	2600      	movs	r6, #0
 8011afe:	61ee      	str	r6, [r5, #28]
 8011b00:	61a6      	str	r6, [r4, #24]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	f040 80af 	bne.w	8011c66 <rcl_wait_set_resize+0x262>
 8011b08:	69a8      	ldr	r0, [r5, #24]
 8011b0a:	b120      	cbz	r0, 8011b16 <rcl_wait_set_resize+0x112>
 8011b0c:	4649      	mov	r1, r9
 8011b0e:	47d0      	blx	sl
 8011b10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b14:	61ab      	str	r3, [r5, #24]
 8011b16:	6a20      	ldr	r0, [r4, #32]
 8011b18:	b128      	cbz	r0, 8011b26 <rcl_wait_set_resize+0x122>
 8011b1a:	4649      	mov	r1, r9
 8011b1c:	47d0      	blx	sl
 8011b1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b20:	2300      	movs	r3, #0
 8011b22:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011b26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b28:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011b2a:	2600      	movs	r6, #0
 8011b2c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011b30:	626e      	str	r6, [r5, #36]	@ 0x24
 8011b32:	6266      	str	r6, [r4, #36]	@ 0x24
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f000 80b6 	beq.w	8011ca6 <rcl_wait_set_resize+0x2a2>
 8011b3a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011b3e:	6a28      	ldr	r0, [r5, #32]
 8011b40:	463a      	mov	r2, r7
 8011b42:	4651      	mov	r1, sl
 8011b44:	47c8      	blx	r9
 8011b46:	6228      	str	r0, [r5, #32]
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d04c      	beq.n	8011be6 <rcl_wait_set_resize+0x1e2>
 8011b4c:	4652      	mov	r2, sl
 8011b4e:	4631      	mov	r1, r6
 8011b50:	f003 f9c2 	bl	8014ed8 <memset>
 8011b54:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b58:	626b      	str	r3, [r5, #36]	@ 0x24
 8011b5a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011b5c:	62a6      	str	r6, [r4, #40]	@ 0x28
 8011b5e:	463a      	mov	r2, r7
 8011b60:	4651      	mov	r1, sl
 8011b62:	47c8      	blx	r9
 8011b64:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b66:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8011b68:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8011b6a:	2c00      	cmp	r4, #0
 8011b6c:	f000 80f0 	beq.w	8011d50 <rcl_wait_set_resize+0x34c>
 8011b70:	4620      	mov	r0, r4
 8011b72:	4652      	mov	r2, sl
 8011b74:	4631      	mov	r1, r6
 8011b76:	f003 f9af 	bl	8014ed8 <memset>
 8011b7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b7e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011b80:	2600      	movs	r6, #0
 8011b82:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011b86:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8011b88:	6326      	str	r6, [r4, #48]	@ 0x30
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	f040 809d 	bne.w	8011cca <rcl_wait_set_resize+0x2c6>
 8011b90:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011b92:	b120      	cbz	r0, 8011b9e <rcl_wait_set_resize+0x19a>
 8011b94:	4639      	mov	r1, r7
 8011b96:	47c0      	blx	r8
 8011b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b9a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b9c:	62ab      	str	r3, [r5, #40]	@ 0x28
 8011b9e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011ba0:	b310      	cbz	r0, 8011be8 <rcl_wait_set_resize+0x1e4>
 8011ba2:	4639      	mov	r1, r7
 8011ba4:	47c0      	blx	r8
 8011ba6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011ba8:	2000      	movs	r0, #0
 8011baa:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8011bae:	b003      	add	sp, #12
 8011bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb4:	6800      	ldr	r0, [r0, #0]
 8011bb6:	b120      	cbz	r0, 8011bc2 <rcl_wait_set_resize+0x1be>
 8011bb8:	4651      	mov	r1, sl
 8011bba:	47d8      	blx	fp
 8011bbc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011bbe:	f8c5 8000 	str.w	r8, [r5]
 8011bc2:	68a0      	ldr	r0, [r4, #8]
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	f43f af61 	beq.w	8011a8c <rcl_wait_set_resize+0x88>
 8011bca:	4651      	mov	r1, sl
 8011bcc:	47d8      	blx	fp
 8011bce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011bd6:	e759      	b.n	8011a8c <rcl_wait_set_resize+0x88>
 8011bd8:	6828      	ldr	r0, [r5, #0]
 8011bda:	9301      	str	r3, [sp, #4]
 8011bdc:	4651      	mov	r1, sl
 8011bde:	47d8      	blx	fp
 8011be0:	9b01      	ldr	r3, [sp, #4]
 8011be2:	e9c5 3300 	strd	r3, r3, [r5]
 8011be6:	200a      	movs	r0, #10
 8011be8:	b003      	add	sp, #12
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	00b4      	lsls	r4, r6, #2
 8011bf0:	68a8      	ldr	r0, [r5, #8]
 8011bf2:	464a      	mov	r2, r9
 8011bf4:	4621      	mov	r1, r4
 8011bf6:	4798      	blx	r3
 8011bf8:	60a8      	str	r0, [r5, #8]
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	d0f3      	beq.n	8011be6 <rcl_wait_set_resize+0x1e2>
 8011bfe:	4622      	mov	r2, r4
 8011c00:	4641      	mov	r1, r8
 8011c02:	f003 f969 	bl	8014ed8 <memset>
 8011c06:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c08:	60ee      	str	r6, [r5, #12]
 8011c0a:	f04f 0800 	mov.w	r8, #0
 8011c0e:	19f6      	adds	r6, r6, r7
 8011c10:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011c14:	f8c4 8010 	str.w	r8, [r4, #16]
 8011c18:	f43f af54 	beq.w	8011ac4 <rcl_wait_set_resize+0xc0>
 8011c1c:	00b6      	lsls	r6, r6, #2
 8011c1e:	464a      	mov	r2, r9
 8011c20:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011c22:	6960      	ldr	r0, [r4, #20]
 8011c24:	4631      	mov	r1, r6
 8011c26:	4798      	blx	r3
 8011c28:	4681      	mov	r9, r0
 8011c2a:	6160      	str	r0, [r4, #20]
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d076      	beq.n	8011d1e <rcl_wait_set_resize+0x31a>
 8011c30:	4632      	mov	r2, r6
 8011c32:	4641      	mov	r1, r8
 8011c34:	f003 f950 	bl	8014ed8 <memset>
 8011c38:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c3a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011c3e:	e74a      	b.n	8011ad6 <rcl_wait_set_resize+0xd2>
 8011c40:	00bc      	lsls	r4, r7, #2
 8011c42:	6928      	ldr	r0, [r5, #16]
 8011c44:	464a      	mov	r2, r9
 8011c46:	4621      	mov	r1, r4
 8011c48:	47c0      	blx	r8
 8011c4a:	6128      	str	r0, [r5, #16]
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	d0ca      	beq.n	8011be6 <rcl_wait_set_resize+0x1e2>
 8011c50:	4622      	mov	r2, r4
 8011c52:	4631      	mov	r1, r6
 8011c54:	f003 f940 	bl	8014ed8 <memset>
 8011c58:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c5a:	616f      	str	r7, [r5, #20]
 8011c5c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011c60:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011c64:	e749      	b.n	8011afa <rcl_wait_set_resize+0xf6>
 8011c66:	009c      	lsls	r4, r3, #2
 8011c68:	69a8      	ldr	r0, [r5, #24]
 8011c6a:	464a      	mov	r2, r9
 8011c6c:	4621      	mov	r1, r4
 8011c6e:	47c0      	blx	r8
 8011c70:	61a8      	str	r0, [r5, #24]
 8011c72:	2800      	cmp	r0, #0
 8011c74:	d0b7      	beq.n	8011be6 <rcl_wait_set_resize+0x1e2>
 8011c76:	4622      	mov	r2, r4
 8011c78:	4631      	mov	r1, r6
 8011c7a:	f003 f92d 	bl	8014ed8 <memset>
 8011c7e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011c80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c82:	61eb      	str	r3, [r5, #28]
 8011c84:	6a38      	ldr	r0, [r7, #32]
 8011c86:	61fe      	str	r6, [r7, #28]
 8011c88:	464a      	mov	r2, r9
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	47c0      	blx	r8
 8011c8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c90:	6238      	str	r0, [r7, #32]
 8011c92:	6a1f      	ldr	r7, [r3, #32]
 8011c94:	2f00      	cmp	r7, #0
 8011c96:	d054      	beq.n	8011d42 <rcl_wait_set_resize+0x33e>
 8011c98:	4622      	mov	r2, r4
 8011c9a:	4631      	mov	r1, r6
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	f003 f91b 	bl	8014ed8 <memset>
 8011ca2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ca4:	e73f      	b.n	8011b26 <rcl_wait_set_resize+0x122>
 8011ca6:	6a28      	ldr	r0, [r5, #32]
 8011ca8:	b120      	cbz	r0, 8011cb4 <rcl_wait_set_resize+0x2b0>
 8011caa:	4639      	mov	r1, r7
 8011cac:	47c0      	blx	r8
 8011cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011cb0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011cb2:	622b      	str	r3, [r5, #32]
 8011cb4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	f43f af60 	beq.w	8011b7c <rcl_wait_set_resize+0x178>
 8011cbc:	4639      	mov	r1, r7
 8011cbe:	47c0      	blx	r8
 8011cc0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011cc8:	e758      	b.n	8011b7c <rcl_wait_set_resize+0x178>
 8011cca:	009c      	lsls	r4, r3, #2
 8011ccc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011cce:	463a      	mov	r2, r7
 8011cd0:	4621      	mov	r1, r4
 8011cd2:	47c8      	blx	r9
 8011cd4:	62a8      	str	r0, [r5, #40]	@ 0x28
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	d085      	beq.n	8011be6 <rcl_wait_set_resize+0x1e2>
 8011cda:	4622      	mov	r2, r4
 8011cdc:	4631      	mov	r1, r6
 8011cde:	f003 f8fb 	bl	8014ed8 <memset>
 8011ce2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8011ce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ce8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8011cea:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011cee:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8011cf2:	463a      	mov	r2, r7
 8011cf4:	4621      	mov	r1, r4
 8011cf6:	47c8      	blx	r9
 8011cf8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011cfa:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d00:	b36b      	cbz	r3, 8011d5e <rcl_wait_set_resize+0x35a>
 8011d02:	4622      	mov	r2, r4
 8011d04:	4631      	mov	r1, r6
 8011d06:	4618      	mov	r0, r3
 8011d08:	f003 f8e6 	bl	8014ed8 <memset>
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	b003      	add	sp, #12
 8011d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d14:	200b      	movs	r0, #11
 8011d16:	4770      	bx	lr
 8011d18:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011d1c:	e764      	b.n	8011be8 <rcl_wait_set_resize+0x1e4>
 8011d1e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011d20:	68a8      	ldr	r0, [r5, #8]
 8011d22:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d26:	4798      	blx	r3
 8011d28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011d2a:	6928      	ldr	r0, [r5, #16]
 8011d2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011d2e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011d30:	f8c5 900c 	str.w	r9, [r5, #12]
 8011d34:	f8c5 9008 	str.w	r9, [r5, #8]
 8011d38:	4790      	blx	r2
 8011d3a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011d3e:	200a      	movs	r0, #10
 8011d40:	e752      	b.n	8011be8 <rcl_wait_set_resize+0x1e4>
 8011d42:	69a8      	ldr	r0, [r5, #24]
 8011d44:	4649      	mov	r1, r9
 8011d46:	47d0      	blx	sl
 8011d48:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011d4c:	200a      	movs	r0, #10
 8011d4e:	e74b      	b.n	8011be8 <rcl_wait_set_resize+0x1e4>
 8011d50:	6a28      	ldr	r0, [r5, #32]
 8011d52:	4639      	mov	r1, r7
 8011d54:	47c0      	blx	r8
 8011d56:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8011d5a:	200a      	movs	r0, #10
 8011d5c:	e744      	b.n	8011be8 <rcl_wait_set_resize+0x1e4>
 8011d5e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011d60:	9301      	str	r3, [sp, #4]
 8011d62:	4639      	mov	r1, r7
 8011d64:	47c0      	blx	r8
 8011d66:	9b01      	ldr	r3, [sp, #4]
 8011d68:	200a      	movs	r0, #10
 8011d6a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011d6e:	e73b      	b.n	8011be8 <rcl_wait_set_resize+0x1e4>

08011d70 <rcl_wait_set_init>:
 8011d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d74:	b084      	sub	sp, #16
 8011d76:	4604      	mov	r4, r0
 8011d78:	a810      	add	r0, sp, #64	@ 0x40
 8011d7a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8011d7e:	460f      	mov	r7, r1
 8011d80:	4690      	mov	r8, r2
 8011d82:	4699      	mov	r9, r3
 8011d84:	f7f8 f89e 	bl	8009ec4 <rcutils_allocator_is_valid>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d06b      	beq.n	8011e64 <rcl_wait_set_init+0xf4>
 8011d8c:	2c00      	cmp	r4, #0
 8011d8e:	d069      	beq.n	8011e64 <rcl_wait_set_init+0xf4>
 8011d90:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011d92:	b125      	cbz	r5, 8011d9e <rcl_wait_set_init+0x2e>
 8011d94:	2564      	movs	r5, #100	@ 0x64
 8011d96:	4628      	mov	r0, r5
 8011d98:	b004      	add	sp, #16
 8011d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d9e:	f1ba 0f00 	cmp.w	sl, #0
 8011da2:	d05f      	beq.n	8011e64 <rcl_wait_set_init+0xf4>
 8011da4:	4650      	mov	r0, sl
 8011da6:	f7fe fb93 	bl	80104d0 <rcl_context_is_valid>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d067      	beq.n	8011e7e <rcl_wait_set_init+0x10e>
 8011dae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011db0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011db2:	205c      	movs	r0, #92	@ 0x5c
 8011db4:	4798      	blx	r3
 8011db6:	6320      	str	r0, [r4, #48]	@ 0x30
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d062      	beq.n	8011e82 <rcl_wait_set_init+0x112>
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	225c      	movs	r2, #92	@ 0x5c
 8011dc0:	f003 f88a 	bl	8014ed8 <memset>
 8011dc4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011dc8:	eb03 0e02 	add.w	lr, r3, r2
 8011dcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011dce:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011dd0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011dd4:	449e      	add	lr, r3
 8011dd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011dda:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011dde:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8011de2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8011de6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8011dea:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8011dee:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8011df2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8011df6:	f8da a000 	ldr.w	sl, [sl]
 8011dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011dfc:	44c6      	add	lr, r8
 8011dfe:	f8dc 3000 	ldr.w	r3, [ip]
 8011e02:	602b      	str	r3, [r5, #0]
 8011e04:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011e08:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011e0c:	f001 fbba 	bl	8013584 <rmw_create_wait_set>
 8011e10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e12:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011e14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011e16:	b350      	cbz	r0, 8011e6e <rcl_wait_set_init+0xfe>
 8011e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e1a:	9302      	str	r3, [sp, #8]
 8011e1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e1e:	9301      	str	r3, [sp, #4]
 8011e20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	4642      	mov	r2, r8
 8011e26:	464b      	mov	r3, r9
 8011e28:	4639      	mov	r1, r7
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	f7ff fdea 	bl	8011a04 <rcl_wait_set_resize>
 8011e30:	4605      	mov	r5, r0
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d0af      	beq.n	8011d96 <rcl_wait_set_init+0x26>
 8011e36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e38:	bb2b      	cbnz	r3, 8011e86 <rcl_wait_set_init+0x116>
 8011e3a:	2600      	movs	r6, #0
 8011e3c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011e40:	9600      	str	r6, [sp, #0]
 8011e42:	4633      	mov	r3, r6
 8011e44:	4632      	mov	r2, r6
 8011e46:	4631      	mov	r1, r6
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f7ff fddb 	bl	8011a04 <rcl_wait_set_resize>
 8011e4e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d0a0      	beq.n	8011d96 <rcl_wait_set_init+0x26>
 8011e54:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011e56:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011e58:	4798      	blx	r3
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	6326      	str	r6, [r4, #48]	@ 0x30
 8011e5e:	b004      	add	sp, #16
 8011e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e64:	250b      	movs	r5, #11
 8011e66:	4628      	mov	r0, r5
 8011e68:	b004      	add	sp, #16
 8011e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6e:	2501      	movs	r5, #1
 8011e70:	f001 fb92 	bl	8013598 <rmw_destroy_wait_set>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	bf18      	it	ne
 8011e78:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011e7c:	e7dd      	b.n	8011e3a <rcl_wait_set_init+0xca>
 8011e7e:	2565      	movs	r5, #101	@ 0x65
 8011e80:	e789      	b.n	8011d96 <rcl_wait_set_init+0x26>
 8011e82:	250a      	movs	r5, #10
 8011e84:	e787      	b.n	8011d96 <rcl_wait_set_init+0x26>
 8011e86:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011e88:	e7f2      	b.n	8011e70 <rcl_wait_set_init+0x100>
 8011e8a:	bf00      	nop

08011e8c <rcl_wait_set_add_guard_condition>:
 8011e8c:	b318      	cbz	r0, 8011ed6 <rcl_wait_set_add_guard_condition+0x4a>
 8011e8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	4604      	mov	r4, r0
 8011e94:	b30b      	cbz	r3, 8011eda <rcl_wait_set_add_guard_condition+0x4e>
 8011e96:	b319      	cbz	r1, 8011ee0 <rcl_wait_set_add_guard_condition+0x54>
 8011e98:	68dd      	ldr	r5, [r3, #12]
 8011e9a:	68c0      	ldr	r0, [r0, #12]
 8011e9c:	4285      	cmp	r5, r0
 8011e9e:	d217      	bcs.n	8011ed0 <rcl_wait_set_add_guard_condition+0x44>
 8011ea0:	68a0      	ldr	r0, [r4, #8]
 8011ea2:	1c6e      	adds	r6, r5, #1
 8011ea4:	60de      	str	r6, [r3, #12]
 8011ea6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011eaa:	b102      	cbz	r2, 8011eae <rcl_wait_set_add_guard_condition+0x22>
 8011eac:	6015      	str	r5, [r2, #0]
 8011eae:	4608      	mov	r0, r1
 8011eb0:	f7fe fde0 	bl	8010a74 <rcl_guard_condition_get_rmw_handle>
 8011eb4:	b150      	cbz	r0, 8011ecc <rcl_wait_set_add_guard_condition+0x40>
 8011eb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011eb8:	6842      	ldr	r2, [r0, #4]
 8011eba:	695b      	ldr	r3, [r3, #20]
 8011ebc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ec0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011ec2:	6913      	ldr	r3, [r2, #16]
 8011ec4:	3301      	adds	r3, #1
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	6113      	str	r3, [r2, #16]
 8011eca:	bd70      	pop	{r4, r5, r6, pc}
 8011ecc:	2001      	movs	r0, #1
 8011ece:	bd70      	pop	{r4, r5, r6, pc}
 8011ed0:	f240 3086 	movw	r0, #902	@ 0x386
 8011ed4:	bd70      	pop	{r4, r5, r6, pc}
 8011ed6:	200b      	movs	r0, #11
 8011ed8:	4770      	bx	lr
 8011eda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011ede:	bd70      	pop	{r4, r5, r6, pc}
 8011ee0:	200b      	movs	r0, #11
 8011ee2:	bd70      	pop	{r4, r5, r6, pc}

08011ee4 <rcl_wait_set_add_timer>:
 8011ee4:	b328      	cbz	r0, 8011f32 <rcl_wait_set_add_timer+0x4e>
 8011ee6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011ee8:	b570      	push	{r4, r5, r6, lr}
 8011eea:	4604      	mov	r4, r0
 8011eec:	b31b      	cbz	r3, 8011f36 <rcl_wait_set_add_timer+0x52>
 8011eee:	b329      	cbz	r1, 8011f3c <rcl_wait_set_add_timer+0x58>
 8011ef0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011ef2:	6965      	ldr	r5, [r4, #20]
 8011ef4:	42a8      	cmp	r0, r5
 8011ef6:	d219      	bcs.n	8011f2c <rcl_wait_set_add_timer+0x48>
 8011ef8:	6925      	ldr	r5, [r4, #16]
 8011efa:	1c46      	adds	r6, r0, #1
 8011efc:	641e      	str	r6, [r3, #64]	@ 0x40
 8011efe:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011f02:	b102      	cbz	r2, 8011f06 <rcl_wait_set_add_timer+0x22>
 8011f04:	6010      	str	r0, [r2, #0]
 8011f06:	4608      	mov	r0, r1
 8011f08:	f7ff fb3e 	bl	8011588 <rcl_timer_get_guard_condition>
 8011f0c:	b168      	cbz	r0, 8011f2a <rcl_wait_set_add_timer+0x46>
 8011f0e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011f10:	68e3      	ldr	r3, [r4, #12]
 8011f12:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011f14:	3b01      	subs	r3, #1
 8011f16:	441d      	add	r5, r3
 8011f18:	f7fe fdac 	bl	8010a74 <rcl_guard_condition_get_rmw_handle>
 8011f1c:	b180      	cbz	r0, 8011f40 <rcl_wait_set_add_timer+0x5c>
 8011f1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f20:	6842      	ldr	r2, [r0, #4]
 8011f22:	695b      	ldr	r3, [r3, #20]
 8011f24:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f28:	2000      	movs	r0, #0
 8011f2a:	bd70      	pop	{r4, r5, r6, pc}
 8011f2c:	f240 3086 	movw	r0, #902	@ 0x386
 8011f30:	bd70      	pop	{r4, r5, r6, pc}
 8011f32:	200b      	movs	r0, #11
 8011f34:	4770      	bx	lr
 8011f36:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f3a:	bd70      	pop	{r4, r5, r6, pc}
 8011f3c:	200b      	movs	r0, #11
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}
 8011f40:	2001      	movs	r0, #1
 8011f42:	bd70      	pop	{r4, r5, r6, pc}

08011f44 <rcl_wait_set_add_client>:
 8011f44:	b318      	cbz	r0, 8011f8e <rcl_wait_set_add_client+0x4a>
 8011f46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011f48:	b570      	push	{r4, r5, r6, lr}
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	b30b      	cbz	r3, 8011f92 <rcl_wait_set_add_client+0x4e>
 8011f4e:	b319      	cbz	r1, 8011f98 <rcl_wait_set_add_client+0x54>
 8011f50:	699d      	ldr	r5, [r3, #24]
 8011f52:	69c0      	ldr	r0, [r0, #28]
 8011f54:	4285      	cmp	r5, r0
 8011f56:	d217      	bcs.n	8011f88 <rcl_wait_set_add_client+0x44>
 8011f58:	69a0      	ldr	r0, [r4, #24]
 8011f5a:	1c6e      	adds	r6, r5, #1
 8011f5c:	619e      	str	r6, [r3, #24]
 8011f5e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011f62:	b102      	cbz	r2, 8011f66 <rcl_wait_set_add_client+0x22>
 8011f64:	6015      	str	r5, [r2, #0]
 8011f66:	4608      	mov	r0, r1
 8011f68:	f7f6 fc66 	bl	8008838 <rcl_client_get_rmw_handle>
 8011f6c:	b150      	cbz	r0, 8011f84 <rcl_wait_set_add_client+0x40>
 8011f6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f70:	6842      	ldr	r2, [r0, #4]
 8011f72:	6a1b      	ldr	r3, [r3, #32]
 8011f74:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f78:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011f7a:	69d3      	ldr	r3, [r2, #28]
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	2000      	movs	r0, #0
 8011f80:	61d3      	str	r3, [r2, #28]
 8011f82:	bd70      	pop	{r4, r5, r6, pc}
 8011f84:	2001      	movs	r0, #1
 8011f86:	bd70      	pop	{r4, r5, r6, pc}
 8011f88:	f240 3086 	movw	r0, #902	@ 0x386
 8011f8c:	bd70      	pop	{r4, r5, r6, pc}
 8011f8e:	200b      	movs	r0, #11
 8011f90:	4770      	bx	lr
 8011f92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
 8011f98:	200b      	movs	r0, #11
 8011f9a:	bd70      	pop	{r4, r5, r6, pc}

08011f9c <rcl_wait_set_add_service>:
 8011f9c:	b318      	cbz	r0, 8011fe6 <rcl_wait_set_add_service+0x4a>
 8011f9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011fa0:	b570      	push	{r4, r5, r6, lr}
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	b30b      	cbz	r3, 8011fea <rcl_wait_set_add_service+0x4e>
 8011fa6:	b319      	cbz	r1, 8011ff0 <rcl_wait_set_add_service+0x54>
 8011fa8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011faa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011fac:	4285      	cmp	r5, r0
 8011fae:	d217      	bcs.n	8011fe0 <rcl_wait_set_add_service+0x44>
 8011fb0:	6a20      	ldr	r0, [r4, #32]
 8011fb2:	1c6e      	adds	r6, r5, #1
 8011fb4:	625e      	str	r6, [r3, #36]	@ 0x24
 8011fb6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011fba:	b102      	cbz	r2, 8011fbe <rcl_wait_set_add_service+0x22>
 8011fbc:	6015      	str	r5, [r2, #0]
 8011fbe:	4608      	mov	r0, r1
 8011fc0:	f7fe fe6e 	bl	8010ca0 <rcl_service_get_rmw_handle>
 8011fc4:	b150      	cbz	r0, 8011fdc <rcl_wait_set_add_service+0x40>
 8011fc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011fc8:	6842      	ldr	r2, [r0, #4]
 8011fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fcc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011fd0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011fd2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	6293      	str	r3, [r2, #40]	@ 0x28
 8011fda:	bd70      	pop	{r4, r5, r6, pc}
 8011fdc:	2001      	movs	r0, #1
 8011fde:	bd70      	pop	{r4, r5, r6, pc}
 8011fe0:	f240 3086 	movw	r0, #902	@ 0x386
 8011fe4:	bd70      	pop	{r4, r5, r6, pc}
 8011fe6:	200b      	movs	r0, #11
 8011fe8:	4770      	bx	lr
 8011fea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011fee:	bd70      	pop	{r4, r5, r6, pc}
 8011ff0:	200b      	movs	r0, #11
 8011ff2:	bd70      	pop	{r4, r5, r6, pc}
 8011ff4:	0000      	movs	r0, r0
	...

08011ff8 <rcl_wait>:
 8011ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ffc:	ed2d 8b02 	vpush	{d8}
 8012000:	b08d      	sub	sp, #52	@ 0x34
 8012002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012006:	2800      	cmp	r0, #0
 8012008:	f000 8143 	beq.w	8012292 <rcl_wait+0x29a>
 801200c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801200e:	4605      	mov	r5, r0
 8012010:	2e00      	cmp	r6, #0
 8012012:	f000 8112 	beq.w	801223a <rcl_wait+0x242>
 8012016:	6843      	ldr	r3, [r0, #4]
 8012018:	b983      	cbnz	r3, 801203c <rcl_wait+0x44>
 801201a:	68eb      	ldr	r3, [r5, #12]
 801201c:	b973      	cbnz	r3, 801203c <rcl_wait+0x44>
 801201e:	696b      	ldr	r3, [r5, #20]
 8012020:	b963      	cbnz	r3, 801203c <rcl_wait+0x44>
 8012022:	69eb      	ldr	r3, [r5, #28]
 8012024:	b953      	cbnz	r3, 801203c <rcl_wait+0x44>
 8012026:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012028:	b943      	cbnz	r3, 801203c <rcl_wait+0x44>
 801202a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801202c:	b933      	cbnz	r3, 801203c <rcl_wait+0x44>
 801202e:	f240 3085 	movw	r0, #901	@ 0x385
 8012032:	b00d      	add	sp, #52	@ 0x34
 8012034:	ecbd 8b02 	vpop	{d8}
 8012038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801203c:	9b04      	ldr	r3, [sp, #16]
 801203e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012040:	2b01      	cmp	r3, #1
 8012042:	9b05      	ldr	r3, [sp, #20]
 8012044:	f173 0300 	sbcs.w	r3, r3, #0
 8012048:	f2c0 80f0 	blt.w	801222c <rcl_wait+0x234>
 801204c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012050:	4643      	mov	r3, r8
 8012052:	2a00      	cmp	r2, #0
 8012054:	f000 8133 	beq.w	80122be <rcl_wait+0x2c6>
 8012058:	2400      	movs	r4, #0
 801205a:	4613      	mov	r3, r2
 801205c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80122d0 <rcl_wait+0x2d8>
 8012060:	46a2      	mov	sl, r4
 8012062:	46a3      	mov	fp, r4
 8012064:	f240 3921 	movw	r9, #801	@ 0x321
 8012068:	4632      	mov	r2, r6
 801206a:	e014      	b.n	8012096 <rcl_wait+0x9e>
 801206c:	2800      	cmp	r0, #0
 801206e:	d1e0      	bne.n	8012032 <rcl_wait+0x3a>
 8012070:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012074:	4542      	cmp	r2, r8
 8012076:	eb73 0107 	sbcs.w	r1, r3, r7
 801207a:	da03      	bge.n	8012084 <rcl_wait+0x8c>
 801207c:	4690      	mov	r8, r2
 801207e:	461f      	mov	r7, r3
 8012080:	f04f 0b01 	mov.w	fp, #1
 8012084:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012086:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012088:	3401      	adds	r4, #1
 801208a:	f14a 0a00 	adc.w	sl, sl, #0
 801208e:	429c      	cmp	r4, r3
 8012090:	f17a 0100 	sbcs.w	r1, sl, #0
 8012094:	d228      	bcs.n	80120e8 <rcl_wait+0xf0>
 8012096:	6928      	ldr	r0, [r5, #16]
 8012098:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801209c:	a908      	add	r1, sp, #32
 801209e:	00a6      	lsls	r6, r4, #2
 80120a0:	2800      	cmp	r0, #0
 80120a2:	d0f1      	beq.n	8012088 <rcl_wait+0x90>
 80120a4:	68eb      	ldr	r3, [r5, #12]
 80120a6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80120aa:	4423      	add	r3, r4
 80120ac:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80120b0:	f1be 0f00 	cmp.w	lr, #0
 80120b4:	d006      	beq.n	80120c4 <rcl_wait+0xcc>
 80120b6:	6913      	ldr	r3, [r2, #16]
 80120b8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80120bc:	3301      	adds	r3, #1
 80120be:	6113      	str	r3, [r2, #16]
 80120c0:	692b      	ldr	r3, [r5, #16]
 80120c2:	5998      	ldr	r0, [r3, r6]
 80120c4:	ed8d 8b08 	vstr	d8, [sp, #32]
 80120c8:	f7ff fa2c 	bl	8011524 <rcl_timer_get_time_until_next_call>
 80120cc:	4548      	cmp	r0, r9
 80120ce:	d1cd      	bne.n	801206c <rcl_wait+0x74>
 80120d0:	692b      	ldr	r3, [r5, #16]
 80120d2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80120d4:	2100      	movs	r1, #0
 80120d6:	5199      	str	r1, [r3, r6]
 80120d8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80120da:	3401      	adds	r4, #1
 80120dc:	f14a 0a00 	adc.w	sl, sl, #0
 80120e0:	429c      	cmp	r4, r3
 80120e2:	f17a 0100 	sbcs.w	r1, sl, #0
 80120e6:	d3d6      	bcc.n	8012096 <rcl_wait+0x9e>
 80120e8:	4616      	mov	r6, r2
 80120ea:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80120ee:	4313      	orrs	r3, r2
 80120f0:	46d9      	mov	r9, fp
 80120f2:	f040 80a9 	bne.w	8012248 <rcl_wait+0x250>
 80120f6:	2300      	movs	r3, #0
 80120f8:	2200      	movs	r2, #0
 80120fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80120fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012102:	ab08      	add	r3, sp, #32
 8012104:	9302      	str	r3, [sp, #8]
 8012106:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012108:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801210c:	e9cd 3200 	strd	r3, r2, [sp]
 8012110:	f106 0110 	add.w	r1, r6, #16
 8012114:	f106 031c 	add.w	r3, r6, #28
 8012118:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801211c:	1d30      	adds	r0, r6, #4
 801211e:	f001 f8b9 	bl	8013294 <rmw_wait>
 8012122:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012126:	4680      	mov	r8, r0
 8012128:	b1ca      	cbz	r2, 801215e <rcl_wait+0x166>
 801212a:	2400      	movs	r4, #0
 801212c:	4627      	mov	r7, r4
 801212e:	692a      	ldr	r2, [r5, #16]
 8012130:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012134:	f10d 011f 	add.w	r1, sp, #31
 8012138:	00a6      	lsls	r6, r4, #2
 801213a:	b160      	cbz	r0, 8012156 <rcl_wait+0x15e>
 801213c:	f88d 701f 	strb.w	r7, [sp, #31]
 8012140:	f7ff f9b6 	bl	80114b0 <rcl_timer_is_ready>
 8012144:	2800      	cmp	r0, #0
 8012146:	f47f af74 	bne.w	8012032 <rcl_wait+0x3a>
 801214a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801214e:	b90b      	cbnz	r3, 8012154 <rcl_wait+0x15c>
 8012150:	692a      	ldr	r2, [r5, #16]
 8012152:	5193      	str	r3, [r2, r6]
 8012154:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012158:	3401      	adds	r4, #1
 801215a:	42a2      	cmp	r2, r4
 801215c:	d8e7      	bhi.n	801212e <rcl_wait+0x136>
 801215e:	f038 0002 	bics.w	r0, r8, #2
 8012162:	f040 8090 	bne.w	8012286 <rcl_wait+0x28e>
 8012166:	686e      	ldr	r6, [r5, #4]
 8012168:	4602      	mov	r2, r0
 801216a:	b91e      	cbnz	r6, 8012174 <rcl_wait+0x17c>
 801216c:	e00d      	b.n	801218a <rcl_wait+0x192>
 801216e:	3201      	adds	r2, #1
 8012170:	42b2      	cmp	r2, r6
 8012172:	d00a      	beq.n	801218a <rcl_wait+0x192>
 8012174:	6899      	ldr	r1, [r3, #8]
 8012176:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801217a:	2900      	cmp	r1, #0
 801217c:	d1f7      	bne.n	801216e <rcl_wait+0x176>
 801217e:	682c      	ldr	r4, [r5, #0]
 8012180:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012184:	3201      	adds	r2, #1
 8012186:	42b2      	cmp	r2, r6
 8012188:	d1f4      	bne.n	8012174 <rcl_wait+0x17c>
 801218a:	68ee      	ldr	r6, [r5, #12]
 801218c:	2200      	movs	r2, #0
 801218e:	b91e      	cbnz	r6, 8012198 <rcl_wait+0x1a0>
 8012190:	e00d      	b.n	80121ae <rcl_wait+0x1b6>
 8012192:	3201      	adds	r2, #1
 8012194:	42b2      	cmp	r2, r6
 8012196:	d00a      	beq.n	80121ae <rcl_wait+0x1b6>
 8012198:	6959      	ldr	r1, [r3, #20]
 801219a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801219e:	2900      	cmp	r1, #0
 80121a0:	d1f7      	bne.n	8012192 <rcl_wait+0x19a>
 80121a2:	68ac      	ldr	r4, [r5, #8]
 80121a4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80121a8:	3201      	adds	r2, #1
 80121aa:	42b2      	cmp	r2, r6
 80121ac:	d1f4      	bne.n	8012198 <rcl_wait+0x1a0>
 80121ae:	69ee      	ldr	r6, [r5, #28]
 80121b0:	2200      	movs	r2, #0
 80121b2:	b91e      	cbnz	r6, 80121bc <rcl_wait+0x1c4>
 80121b4:	e00d      	b.n	80121d2 <rcl_wait+0x1da>
 80121b6:	3201      	adds	r2, #1
 80121b8:	42b2      	cmp	r2, r6
 80121ba:	d00a      	beq.n	80121d2 <rcl_wait+0x1da>
 80121bc:	6a19      	ldr	r1, [r3, #32]
 80121be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80121c2:	2900      	cmp	r1, #0
 80121c4:	d1f7      	bne.n	80121b6 <rcl_wait+0x1be>
 80121c6:	69ac      	ldr	r4, [r5, #24]
 80121c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80121cc:	3201      	adds	r2, #1
 80121ce:	42b2      	cmp	r2, r6
 80121d0:	d1f4      	bne.n	80121bc <rcl_wait+0x1c4>
 80121d2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80121d4:	2200      	movs	r2, #0
 80121d6:	b91e      	cbnz	r6, 80121e0 <rcl_wait+0x1e8>
 80121d8:	e00d      	b.n	80121f6 <rcl_wait+0x1fe>
 80121da:	3201      	adds	r2, #1
 80121dc:	4296      	cmp	r6, r2
 80121de:	d00a      	beq.n	80121f6 <rcl_wait+0x1fe>
 80121e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80121e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80121e6:	2900      	cmp	r1, #0
 80121e8:	d1f7      	bne.n	80121da <rcl_wait+0x1e2>
 80121ea:	6a2c      	ldr	r4, [r5, #32]
 80121ec:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80121f0:	3201      	adds	r2, #1
 80121f2:	4296      	cmp	r6, r2
 80121f4:	d1f4      	bne.n	80121e0 <rcl_wait+0x1e8>
 80121f6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80121f8:	2200      	movs	r2, #0
 80121fa:	b91e      	cbnz	r6, 8012204 <rcl_wait+0x20c>
 80121fc:	e00d      	b.n	801221a <rcl_wait+0x222>
 80121fe:	3201      	adds	r2, #1
 8012200:	42b2      	cmp	r2, r6
 8012202:	d00a      	beq.n	801221a <rcl_wait+0x222>
 8012204:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012206:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801220a:	2900      	cmp	r1, #0
 801220c:	d1f7      	bne.n	80121fe <rcl_wait+0x206>
 801220e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8012210:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012214:	3201      	adds	r2, #1
 8012216:	42b2      	cmp	r2, r6
 8012218:	d1f4      	bne.n	8012204 <rcl_wait+0x20c>
 801221a:	f1b8 0f02 	cmp.w	r8, #2
 801221e:	f47f af08 	bne.w	8012032 <rcl_wait+0x3a>
 8012222:	464b      	mov	r3, r9
 8012224:	2b00      	cmp	r3, #0
 8012226:	bf08      	it	eq
 8012228:	2002      	moveq	r0, #2
 801222a:	e702      	b.n	8012032 <rcl_wait+0x3a>
 801222c:	2a00      	cmp	r2, #0
 801222e:	d03a      	beq.n	80122a6 <rcl_wait+0x2ae>
 8012230:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012234:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012238:	e70e      	b.n	8012058 <rcl_wait+0x60>
 801223a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801223e:	b00d      	add	sp, #52	@ 0x34
 8012240:	ecbd 8b02 	vpop	{d8}
 8012244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012248:	9b04      	ldr	r3, [sp, #16]
 801224a:	2b01      	cmp	r3, #1
 801224c:	9b05      	ldr	r3, [sp, #20]
 801224e:	f173 0300 	sbcs.w	r3, r3, #0
 8012252:	db24      	blt.n	801229e <rcl_wait+0x2a6>
 8012254:	2f00      	cmp	r7, #0
 8012256:	bfbc      	itt	lt
 8012258:	f04f 0800 	movlt.w	r8, #0
 801225c:	4647      	movlt	r7, r8
 801225e:	a31e      	add	r3, pc, #120	@ (adr r3, 80122d8 <rcl_wait+0x2e0>)
 8012260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012264:	4640      	mov	r0, r8
 8012266:	4639      	mov	r1, r7
 8012268:	f7ee f842 	bl	80002f0 <__aeabi_ldivmod>
 801226c:	a31a      	add	r3, pc, #104	@ (adr r3, 80122d8 <rcl_wait+0x2e0>)
 801226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012272:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012276:	4640      	mov	r0, r8
 8012278:	4639      	mov	r1, r7
 801227a:	f7ee f839 	bl	80002f0 <__aeabi_ldivmod>
 801227e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012282:	ab08      	add	r3, sp, #32
 8012284:	e73e      	b.n	8012104 <rcl_wait+0x10c>
 8012286:	2001      	movs	r0, #1
 8012288:	b00d      	add	sp, #52	@ 0x34
 801228a:	ecbd 8b02 	vpop	{d8}
 801228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012292:	200b      	movs	r0, #11
 8012294:	b00d      	add	sp, #52	@ 0x34
 8012296:	ecbd 8b02 	vpop	{d8}
 801229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229e:	465b      	mov	r3, fp
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d1d7      	bne.n	8012254 <rcl_wait+0x25c>
 80122a4:	e72e      	b.n	8012104 <rcl_wait+0x10c>
 80122a6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80122aa:	430b      	orrs	r3, r1
 80122ac:	bf08      	it	eq
 80122ae:	4691      	moveq	r9, r2
 80122b0:	f43f af21 	beq.w	80120f6 <rcl_wait+0xfe>
 80122b4:	9b04      	ldr	r3, [sp, #16]
 80122b6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80122ba:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80122be:	2b01      	cmp	r3, #1
 80122c0:	9b05      	ldr	r3, [sp, #20]
 80122c2:	f173 0300 	sbcs.w	r3, r3, #0
 80122c6:	f04f 0300 	mov.w	r3, #0
 80122ca:	4699      	mov	r9, r3
 80122cc:	dac2      	bge.n	8012254 <rcl_wait+0x25c>
 80122ce:	e719      	b.n	8012104 <rcl_wait+0x10c>
 80122d0:	ffffffff 	.word	0xffffffff
 80122d4:	7fffffff 	.word	0x7fffffff
 80122d8:	3b9aca00 	.word	0x3b9aca00
 80122dc:	00000000 	.word	0x00000000

080122e0 <rcl_action_take_goal_response>:
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d039      	beq.n	8012358 <rcl_action_take_goal_response+0x78>
 80122e4:	b570      	push	{r4, r5, r6, lr}
 80122e6:	4604      	mov	r4, r0
 80122e8:	6800      	ldr	r0, [r0, #0]
 80122ea:	b380      	cbz	r0, 801234e <rcl_action_take_goal_response+0x6e>
 80122ec:	460d      	mov	r5, r1
 80122ee:	4616      	mov	r6, r2
 80122f0:	f7f6 fb26 	bl	8008940 <rcl_client_is_valid>
 80122f4:	b330      	cbz	r0, 8012344 <rcl_action_take_goal_response+0x64>
 80122f6:	6820      	ldr	r0, [r4, #0]
 80122f8:	3004      	adds	r0, #4
 80122fa:	f7f6 fb21 	bl	8008940 <rcl_client_is_valid>
 80122fe:	b308      	cbz	r0, 8012344 <rcl_action_take_goal_response+0x64>
 8012300:	6820      	ldr	r0, [r4, #0]
 8012302:	3008      	adds	r0, #8
 8012304:	f7f6 fb1c 	bl	8008940 <rcl_client_is_valid>
 8012308:	b1e0      	cbz	r0, 8012344 <rcl_action_take_goal_response+0x64>
 801230a:	6820      	ldr	r0, [r4, #0]
 801230c:	300c      	adds	r0, #12
 801230e:	f7fe fd8d 	bl	8010e2c <rcl_subscription_is_valid>
 8012312:	b1b8      	cbz	r0, 8012344 <rcl_action_take_goal_response+0x64>
 8012314:	6820      	ldr	r0, [r4, #0]
 8012316:	3010      	adds	r0, #16
 8012318:	f7fe fd88 	bl	8010e2c <rcl_subscription_is_valid>
 801231c:	b190      	cbz	r0, 8012344 <rcl_action_take_goal_response+0x64>
 801231e:	b1cd      	cbz	r5, 8012354 <rcl_action_take_goal_response+0x74>
 8012320:	b1c6      	cbz	r6, 8012354 <rcl_action_take_goal_response+0x74>
 8012322:	6820      	ldr	r0, [r4, #0]
 8012324:	4632      	mov	r2, r6
 8012326:	4629      	mov	r1, r5
 8012328:	f7f6 fac2 	bl	80088b0 <rcl_take_response>
 801232c:	b148      	cbz	r0, 8012342 <rcl_action_take_goal_response+0x62>
 801232e:	280a      	cmp	r0, #10
 8012330:	d007      	beq.n	8012342 <rcl_action_take_goal_response+0x62>
 8012332:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012336:	f640 0337 	movw	r3, #2103	@ 0x837
 801233a:	4290      	cmp	r0, r2
 801233c:	bf0c      	ite	eq
 801233e:	4618      	moveq	r0, r3
 8012340:	2001      	movne	r0, #1
 8012342:	bd70      	pop	{r4, r5, r6, pc}
 8012344:	f7f7 fea0 	bl	800a088 <rcutils_reset_error>
 8012348:	f640 0036 	movw	r0, #2102	@ 0x836
 801234c:	bd70      	pop	{r4, r5, r6, pc}
 801234e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012352:	bd70      	pop	{r4, r5, r6, pc}
 8012354:	200b      	movs	r0, #11
 8012356:	bd70      	pop	{r4, r5, r6, pc}
 8012358:	f640 0036 	movw	r0, #2102	@ 0x836
 801235c:	4770      	bx	lr
 801235e:	bf00      	nop

08012360 <rcl_action_send_result_request>:
 8012360:	b390      	cbz	r0, 80123c8 <rcl_action_send_result_request+0x68>
 8012362:	b570      	push	{r4, r5, r6, lr}
 8012364:	4604      	mov	r4, r0
 8012366:	6800      	ldr	r0, [r0, #0]
 8012368:	b348      	cbz	r0, 80123be <rcl_action_send_result_request+0x5e>
 801236a:	460d      	mov	r5, r1
 801236c:	4616      	mov	r6, r2
 801236e:	f7f6 fae7 	bl	8008940 <rcl_client_is_valid>
 8012372:	b1f8      	cbz	r0, 80123b4 <rcl_action_send_result_request+0x54>
 8012374:	6820      	ldr	r0, [r4, #0]
 8012376:	3004      	adds	r0, #4
 8012378:	f7f6 fae2 	bl	8008940 <rcl_client_is_valid>
 801237c:	b1d0      	cbz	r0, 80123b4 <rcl_action_send_result_request+0x54>
 801237e:	6820      	ldr	r0, [r4, #0]
 8012380:	3008      	adds	r0, #8
 8012382:	f7f6 fadd 	bl	8008940 <rcl_client_is_valid>
 8012386:	b1a8      	cbz	r0, 80123b4 <rcl_action_send_result_request+0x54>
 8012388:	6820      	ldr	r0, [r4, #0]
 801238a:	300c      	adds	r0, #12
 801238c:	f7fe fd4e 	bl	8010e2c <rcl_subscription_is_valid>
 8012390:	b180      	cbz	r0, 80123b4 <rcl_action_send_result_request+0x54>
 8012392:	6820      	ldr	r0, [r4, #0]
 8012394:	3010      	adds	r0, #16
 8012396:	f7fe fd49 	bl	8010e2c <rcl_subscription_is_valid>
 801239a:	b158      	cbz	r0, 80123b4 <rcl_action_send_result_request+0x54>
 801239c:	b195      	cbz	r5, 80123c4 <rcl_action_send_result_request+0x64>
 801239e:	b18e      	cbz	r6, 80123c4 <rcl_action_send_result_request+0x64>
 80123a0:	6820      	ldr	r0, [r4, #0]
 80123a2:	4632      	mov	r2, r6
 80123a4:	4629      	mov	r1, r5
 80123a6:	3008      	adds	r0, #8
 80123a8:	f7f6 fa4c 	bl	8008844 <rcl_send_request>
 80123ac:	3800      	subs	r0, #0
 80123ae:	bf18      	it	ne
 80123b0:	2001      	movne	r0, #1
 80123b2:	bd70      	pop	{r4, r5, r6, pc}
 80123b4:	f7f7 fe68 	bl	800a088 <rcutils_reset_error>
 80123b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80123bc:	bd70      	pop	{r4, r5, r6, pc}
 80123be:	f640 0036 	movw	r0, #2102	@ 0x836
 80123c2:	bd70      	pop	{r4, r5, r6, pc}
 80123c4:	200b      	movs	r0, #11
 80123c6:	bd70      	pop	{r4, r5, r6, pc}
 80123c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80123cc:	4770      	bx	lr
 80123ce:	bf00      	nop

080123d0 <rcl_action_take_result_response>:
 80123d0:	2800      	cmp	r0, #0
 80123d2:	d03a      	beq.n	801244a <rcl_action_take_result_response+0x7a>
 80123d4:	b570      	push	{r4, r5, r6, lr}
 80123d6:	4604      	mov	r4, r0
 80123d8:	6800      	ldr	r0, [r0, #0]
 80123da:	b388      	cbz	r0, 8012440 <rcl_action_take_result_response+0x70>
 80123dc:	460d      	mov	r5, r1
 80123de:	4616      	mov	r6, r2
 80123e0:	f7f6 faae 	bl	8008940 <rcl_client_is_valid>
 80123e4:	b338      	cbz	r0, 8012436 <rcl_action_take_result_response+0x66>
 80123e6:	6820      	ldr	r0, [r4, #0]
 80123e8:	3004      	adds	r0, #4
 80123ea:	f7f6 faa9 	bl	8008940 <rcl_client_is_valid>
 80123ee:	b310      	cbz	r0, 8012436 <rcl_action_take_result_response+0x66>
 80123f0:	6820      	ldr	r0, [r4, #0]
 80123f2:	3008      	adds	r0, #8
 80123f4:	f7f6 faa4 	bl	8008940 <rcl_client_is_valid>
 80123f8:	b1e8      	cbz	r0, 8012436 <rcl_action_take_result_response+0x66>
 80123fa:	6820      	ldr	r0, [r4, #0]
 80123fc:	300c      	adds	r0, #12
 80123fe:	f7fe fd15 	bl	8010e2c <rcl_subscription_is_valid>
 8012402:	b1c0      	cbz	r0, 8012436 <rcl_action_take_result_response+0x66>
 8012404:	6820      	ldr	r0, [r4, #0]
 8012406:	3010      	adds	r0, #16
 8012408:	f7fe fd10 	bl	8010e2c <rcl_subscription_is_valid>
 801240c:	b198      	cbz	r0, 8012436 <rcl_action_take_result_response+0x66>
 801240e:	b1d5      	cbz	r5, 8012446 <rcl_action_take_result_response+0x76>
 8012410:	b1ce      	cbz	r6, 8012446 <rcl_action_take_result_response+0x76>
 8012412:	6820      	ldr	r0, [r4, #0]
 8012414:	4632      	mov	r2, r6
 8012416:	4629      	mov	r1, r5
 8012418:	3008      	adds	r0, #8
 801241a:	f7f6 fa49 	bl	80088b0 <rcl_take_response>
 801241e:	b148      	cbz	r0, 8012434 <rcl_action_take_result_response+0x64>
 8012420:	280a      	cmp	r0, #10
 8012422:	d007      	beq.n	8012434 <rcl_action_take_result_response+0x64>
 8012424:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012428:	f640 0337 	movw	r3, #2103	@ 0x837
 801242c:	4290      	cmp	r0, r2
 801242e:	bf0c      	ite	eq
 8012430:	4618      	moveq	r0, r3
 8012432:	2001      	movne	r0, #1
 8012434:	bd70      	pop	{r4, r5, r6, pc}
 8012436:	f7f7 fe27 	bl	800a088 <rcutils_reset_error>
 801243a:	f640 0036 	movw	r0, #2102	@ 0x836
 801243e:	bd70      	pop	{r4, r5, r6, pc}
 8012440:	f640 0036 	movw	r0, #2102	@ 0x836
 8012444:	bd70      	pop	{r4, r5, r6, pc}
 8012446:	200b      	movs	r0, #11
 8012448:	bd70      	pop	{r4, r5, r6, pc}
 801244a:	f640 0036 	movw	r0, #2102	@ 0x836
 801244e:	4770      	bx	lr

08012450 <rcl_action_take_cancel_response>:
 8012450:	2800      	cmp	r0, #0
 8012452:	d03a      	beq.n	80124ca <rcl_action_take_cancel_response+0x7a>
 8012454:	b570      	push	{r4, r5, r6, lr}
 8012456:	4604      	mov	r4, r0
 8012458:	6800      	ldr	r0, [r0, #0]
 801245a:	b388      	cbz	r0, 80124c0 <rcl_action_take_cancel_response+0x70>
 801245c:	460d      	mov	r5, r1
 801245e:	4616      	mov	r6, r2
 8012460:	f7f6 fa6e 	bl	8008940 <rcl_client_is_valid>
 8012464:	b338      	cbz	r0, 80124b6 <rcl_action_take_cancel_response+0x66>
 8012466:	6820      	ldr	r0, [r4, #0]
 8012468:	3004      	adds	r0, #4
 801246a:	f7f6 fa69 	bl	8008940 <rcl_client_is_valid>
 801246e:	b310      	cbz	r0, 80124b6 <rcl_action_take_cancel_response+0x66>
 8012470:	6820      	ldr	r0, [r4, #0]
 8012472:	3008      	adds	r0, #8
 8012474:	f7f6 fa64 	bl	8008940 <rcl_client_is_valid>
 8012478:	b1e8      	cbz	r0, 80124b6 <rcl_action_take_cancel_response+0x66>
 801247a:	6820      	ldr	r0, [r4, #0]
 801247c:	300c      	adds	r0, #12
 801247e:	f7fe fcd5 	bl	8010e2c <rcl_subscription_is_valid>
 8012482:	b1c0      	cbz	r0, 80124b6 <rcl_action_take_cancel_response+0x66>
 8012484:	6820      	ldr	r0, [r4, #0]
 8012486:	3010      	adds	r0, #16
 8012488:	f7fe fcd0 	bl	8010e2c <rcl_subscription_is_valid>
 801248c:	b198      	cbz	r0, 80124b6 <rcl_action_take_cancel_response+0x66>
 801248e:	b1d5      	cbz	r5, 80124c6 <rcl_action_take_cancel_response+0x76>
 8012490:	b1ce      	cbz	r6, 80124c6 <rcl_action_take_cancel_response+0x76>
 8012492:	6820      	ldr	r0, [r4, #0]
 8012494:	4632      	mov	r2, r6
 8012496:	4629      	mov	r1, r5
 8012498:	3004      	adds	r0, #4
 801249a:	f7f6 fa09 	bl	80088b0 <rcl_take_response>
 801249e:	b148      	cbz	r0, 80124b4 <rcl_action_take_cancel_response+0x64>
 80124a0:	280a      	cmp	r0, #10
 80124a2:	d007      	beq.n	80124b4 <rcl_action_take_cancel_response+0x64>
 80124a4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80124a8:	f640 0337 	movw	r3, #2103	@ 0x837
 80124ac:	4290      	cmp	r0, r2
 80124ae:	bf0c      	ite	eq
 80124b0:	4618      	moveq	r0, r3
 80124b2:	2001      	movne	r0, #1
 80124b4:	bd70      	pop	{r4, r5, r6, pc}
 80124b6:	f7f7 fde7 	bl	800a088 <rcutils_reset_error>
 80124ba:	f640 0036 	movw	r0, #2102	@ 0x836
 80124be:	bd70      	pop	{r4, r5, r6, pc}
 80124c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80124c4:	bd70      	pop	{r4, r5, r6, pc}
 80124c6:	200b      	movs	r0, #11
 80124c8:	bd70      	pop	{r4, r5, r6, pc}
 80124ca:	f640 0036 	movw	r0, #2102	@ 0x836
 80124ce:	4770      	bx	lr

080124d0 <rcl_action_take_feedback>:
 80124d0:	2800      	cmp	r0, #0
 80124d2:	d038      	beq.n	8012546 <rcl_action_take_feedback+0x76>
 80124d4:	b530      	push	{r4, r5, lr}
 80124d6:	4604      	mov	r4, r0
 80124d8:	6800      	ldr	r0, [r0, #0]
 80124da:	b091      	sub	sp, #68	@ 0x44
 80124dc:	b378      	cbz	r0, 801253e <rcl_action_take_feedback+0x6e>
 80124de:	460d      	mov	r5, r1
 80124e0:	f7f6 fa2e 	bl	8008940 <rcl_client_is_valid>
 80124e4:	b328      	cbz	r0, 8012532 <rcl_action_take_feedback+0x62>
 80124e6:	6820      	ldr	r0, [r4, #0]
 80124e8:	3004      	adds	r0, #4
 80124ea:	f7f6 fa29 	bl	8008940 <rcl_client_is_valid>
 80124ee:	b300      	cbz	r0, 8012532 <rcl_action_take_feedback+0x62>
 80124f0:	6820      	ldr	r0, [r4, #0]
 80124f2:	3008      	adds	r0, #8
 80124f4:	f7f6 fa24 	bl	8008940 <rcl_client_is_valid>
 80124f8:	b1d8      	cbz	r0, 8012532 <rcl_action_take_feedback+0x62>
 80124fa:	6820      	ldr	r0, [r4, #0]
 80124fc:	300c      	adds	r0, #12
 80124fe:	f7fe fc95 	bl	8010e2c <rcl_subscription_is_valid>
 8012502:	b1b0      	cbz	r0, 8012532 <rcl_action_take_feedback+0x62>
 8012504:	6820      	ldr	r0, [r4, #0]
 8012506:	3010      	adds	r0, #16
 8012508:	f7fe fc90 	bl	8010e2c <rcl_subscription_is_valid>
 801250c:	b188      	cbz	r0, 8012532 <rcl_action_take_feedback+0x62>
 801250e:	b1ed      	cbz	r5, 801254c <rcl_action_take_feedback+0x7c>
 8012510:	6820      	ldr	r0, [r4, #0]
 8012512:	2300      	movs	r3, #0
 8012514:	466a      	mov	r2, sp
 8012516:	4629      	mov	r1, r5
 8012518:	300c      	adds	r0, #12
 801251a:	f7fe fc29 	bl	8010d70 <rcl_take>
 801251e:	b160      	cbz	r0, 801253a <rcl_action_take_feedback+0x6a>
 8012520:	f240 1391 	movw	r3, #401	@ 0x191
 8012524:	4298      	cmp	r0, r3
 8012526:	d014      	beq.n	8012552 <rcl_action_take_feedback+0x82>
 8012528:	280a      	cmp	r0, #10
 801252a:	bf18      	it	ne
 801252c:	2001      	movne	r0, #1
 801252e:	b011      	add	sp, #68	@ 0x44
 8012530:	bd30      	pop	{r4, r5, pc}
 8012532:	f7f7 fda9 	bl	800a088 <rcutils_reset_error>
 8012536:	f640 0036 	movw	r0, #2102	@ 0x836
 801253a:	b011      	add	sp, #68	@ 0x44
 801253c:	bd30      	pop	{r4, r5, pc}
 801253e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012542:	b011      	add	sp, #68	@ 0x44
 8012544:	bd30      	pop	{r4, r5, pc}
 8012546:	f640 0036 	movw	r0, #2102	@ 0x836
 801254a:	4770      	bx	lr
 801254c:	200b      	movs	r0, #11
 801254e:	b011      	add	sp, #68	@ 0x44
 8012550:	bd30      	pop	{r4, r5, pc}
 8012552:	f640 0037 	movw	r0, #2103	@ 0x837
 8012556:	e7f0      	b.n	801253a <rcl_action_take_feedback+0x6a>

08012558 <rcl_action_wait_set_add_action_client>:
 8012558:	2800      	cmp	r0, #0
 801255a:	d048      	beq.n	80125ee <rcl_action_wait_set_add_action_client+0x96>
 801255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255e:	460c      	mov	r4, r1
 8012560:	2900      	cmp	r1, #0
 8012562:	d03c      	beq.n	80125de <rcl_action_wait_set_add_action_client+0x86>
 8012564:	4605      	mov	r5, r0
 8012566:	6808      	ldr	r0, [r1, #0]
 8012568:	2800      	cmp	r0, #0
 801256a:	d038      	beq.n	80125de <rcl_action_wait_set_add_action_client+0x86>
 801256c:	4617      	mov	r7, r2
 801256e:	461e      	mov	r6, r3
 8012570:	f7f6 f9e6 	bl	8008940 <rcl_client_is_valid>
 8012574:	b3b0      	cbz	r0, 80125e4 <rcl_action_wait_set_add_action_client+0x8c>
 8012576:	6820      	ldr	r0, [r4, #0]
 8012578:	3004      	adds	r0, #4
 801257a:	f7f6 f9e1 	bl	8008940 <rcl_client_is_valid>
 801257e:	b388      	cbz	r0, 80125e4 <rcl_action_wait_set_add_action_client+0x8c>
 8012580:	6820      	ldr	r0, [r4, #0]
 8012582:	3008      	adds	r0, #8
 8012584:	f7f6 f9dc 	bl	8008940 <rcl_client_is_valid>
 8012588:	b360      	cbz	r0, 80125e4 <rcl_action_wait_set_add_action_client+0x8c>
 801258a:	6820      	ldr	r0, [r4, #0]
 801258c:	300c      	adds	r0, #12
 801258e:	f7fe fc4d 	bl	8010e2c <rcl_subscription_is_valid>
 8012592:	b338      	cbz	r0, 80125e4 <rcl_action_wait_set_add_action_client+0x8c>
 8012594:	6820      	ldr	r0, [r4, #0]
 8012596:	3010      	adds	r0, #16
 8012598:	f7fe fc48 	bl	8010e2c <rcl_subscription_is_valid>
 801259c:	b310      	cbz	r0, 80125e4 <rcl_action_wait_set_add_action_client+0x8c>
 801259e:	6821      	ldr	r1, [r4, #0]
 80125a0:	4628      	mov	r0, r5
 80125a2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80125a6:	f7ff fccd 	bl	8011f44 <rcl_wait_set_add_client>
 80125aa:	b9b8      	cbnz	r0, 80125dc <rcl_action_wait_set_add_action_client+0x84>
 80125ac:	6821      	ldr	r1, [r4, #0]
 80125ae:	4628      	mov	r0, r5
 80125b0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80125b4:	3104      	adds	r1, #4
 80125b6:	f7ff fcc5 	bl	8011f44 <rcl_wait_set_add_client>
 80125ba:	b978      	cbnz	r0, 80125dc <rcl_action_wait_set_add_action_client+0x84>
 80125bc:	6821      	ldr	r1, [r4, #0]
 80125be:	4628      	mov	r0, r5
 80125c0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80125c4:	3108      	adds	r1, #8
 80125c6:	f7ff fcbd 	bl	8011f44 <rcl_wait_set_add_client>
 80125ca:	b938      	cbnz	r0, 80125dc <rcl_action_wait_set_add_action_client+0x84>
 80125cc:	6821      	ldr	r1, [r4, #0]
 80125ce:	4628      	mov	r0, r5
 80125d0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80125d4:	310c      	adds	r1, #12
 80125d6:	f7ff f96d 	bl	80118b4 <rcl_wait_set_add_subscription>
 80125da:	b158      	cbz	r0, 80125f4 <rcl_action_wait_set_add_action_client+0x9c>
 80125dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125de:	f640 0036 	movw	r0, #2102	@ 0x836
 80125e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125e4:	f7f7 fd50 	bl	800a088 <rcutils_reset_error>
 80125e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80125ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80125f2:	4770      	bx	lr
 80125f4:	6821      	ldr	r1, [r4, #0]
 80125f6:	4628      	mov	r0, r5
 80125f8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80125fc:	3110      	adds	r1, #16
 80125fe:	f7ff f959 	bl	80118b4 <rcl_wait_set_add_subscription>
 8012602:	2800      	cmp	r0, #0
 8012604:	d1ea      	bne.n	80125dc <rcl_action_wait_set_add_action_client+0x84>
 8012606:	b11f      	cbz	r7, 8012610 <rcl_action_wait_set_add_action_client+0xb8>
 8012608:	6823      	ldr	r3, [r4, #0]
 801260a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801260e:	603b      	str	r3, [r7, #0]
 8012610:	2e00      	cmp	r6, #0
 8012612:	d0e3      	beq.n	80125dc <rcl_action_wait_set_add_action_client+0x84>
 8012614:	6823      	ldr	r3, [r4, #0]
 8012616:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801261a:	6033      	str	r3, [r6, #0]
 801261c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801261e:	bf00      	nop

08012620 <rcl_action_client_wait_set_get_entities_ready>:
 8012620:	2800      	cmp	r0, #0
 8012622:	f000 808d 	beq.w	8012740 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8012626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801262a:	460c      	mov	r4, r1
 801262c:	2900      	cmp	r1, #0
 801262e:	d077      	beq.n	8012720 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012630:	4605      	mov	r5, r0
 8012632:	6808      	ldr	r0, [r1, #0]
 8012634:	2800      	cmp	r0, #0
 8012636:	d073      	beq.n	8012720 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012638:	4616      	mov	r6, r2
 801263a:	461f      	mov	r7, r3
 801263c:	f7f6 f980 	bl	8008940 <rcl_client_is_valid>
 8012640:	2800      	cmp	r0, #0
 8012642:	d071      	beq.n	8012728 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012644:	6820      	ldr	r0, [r4, #0]
 8012646:	3004      	adds	r0, #4
 8012648:	f7f6 f97a 	bl	8008940 <rcl_client_is_valid>
 801264c:	2800      	cmp	r0, #0
 801264e:	d06b      	beq.n	8012728 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012650:	6820      	ldr	r0, [r4, #0]
 8012652:	3008      	adds	r0, #8
 8012654:	f7f6 f974 	bl	8008940 <rcl_client_is_valid>
 8012658:	2800      	cmp	r0, #0
 801265a:	d065      	beq.n	8012728 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801265c:	6820      	ldr	r0, [r4, #0]
 801265e:	300c      	adds	r0, #12
 8012660:	f7fe fbe4 	bl	8010e2c <rcl_subscription_is_valid>
 8012664:	2800      	cmp	r0, #0
 8012666:	d05f      	beq.n	8012728 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012668:	6820      	ldr	r0, [r4, #0]
 801266a:	3010      	adds	r0, #16
 801266c:	f7fe fbde 	bl	8010e2c <rcl_subscription_is_valid>
 8012670:	2800      	cmp	r0, #0
 8012672:	d059      	beq.n	8012728 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012674:	2e00      	cmp	r6, #0
 8012676:	d060      	beq.n	801273a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012678:	2f00      	cmp	r7, #0
 801267a:	d05e      	beq.n	801273a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801267c:	9b06      	ldr	r3, [sp, #24]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d05b      	beq.n	801273a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012682:	9b07      	ldr	r3, [sp, #28]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d058      	beq.n	801273a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012688:	9b08      	ldr	r3, [sp, #32]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d055      	beq.n	801273a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801268e:	6823      	ldr	r3, [r4, #0]
 8012690:	686a      	ldr	r2, [r5, #4]
 8012692:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8012696:	428a      	cmp	r2, r1
 8012698:	d94c      	bls.n	8012734 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801269a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801269e:	4282      	cmp	r2, r0
 80126a0:	d948      	bls.n	8012734 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126a2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80126a6:	69ea      	ldr	r2, [r5, #28]
 80126a8:	42a2      	cmp	r2, r4
 80126aa:	d943      	bls.n	8012734 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126ac:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80126b0:	4562      	cmp	r2, ip
 80126b2:	d93f      	bls.n	8012734 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126b4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80126b8:	4572      	cmp	r2, lr
 80126ba:	d93b      	bls.n	8012734 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126bc:	69aa      	ldr	r2, [r5, #24]
 80126be:	682d      	ldr	r5, [r5, #0]
 80126c0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80126c4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80126c8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80126cc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80126d0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80126d4:	f103 0c0c 	add.w	ip, r3, #12
 80126d8:	eba5 050c 	sub.w	r5, r5, ip
 80126dc:	fab5 f585 	clz	r5, r5
 80126e0:	096d      	lsrs	r5, r5, #5
 80126e2:	7035      	strb	r5, [r6, #0]
 80126e4:	f103 0510 	add.w	r5, r3, #16
 80126e8:	1b64      	subs	r4, r4, r5
 80126ea:	fab4 f484 	clz	r4, r4
 80126ee:	0964      	lsrs	r4, r4, #5
 80126f0:	703c      	strb	r4, [r7, #0]
 80126f2:	eba3 0008 	sub.w	r0, r3, r8
 80126f6:	1d1c      	adds	r4, r3, #4
 80126f8:	3308      	adds	r3, #8
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	fab0 f080 	clz	r0, r0
 8012700:	9a06      	ldr	r2, [sp, #24]
 8012702:	0940      	lsrs	r0, r0, #5
 8012704:	1b09      	subs	r1, r1, r4
 8012706:	7010      	strb	r0, [r2, #0]
 8012708:	fab1 f181 	clz	r1, r1
 801270c:	9a07      	ldr	r2, [sp, #28]
 801270e:	0949      	lsrs	r1, r1, #5
 8012710:	7011      	strb	r1, [r2, #0]
 8012712:	fab3 f383 	clz	r3, r3
 8012716:	9a08      	ldr	r2, [sp, #32]
 8012718:	095b      	lsrs	r3, r3, #5
 801271a:	2000      	movs	r0, #0
 801271c:	7013      	strb	r3, [r2, #0]
 801271e:	e001      	b.n	8012724 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012720:	f640 0036 	movw	r0, #2102	@ 0x836
 8012724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012728:	f7f7 fcae 	bl	800a088 <rcutils_reset_error>
 801272c:	f640 0036 	movw	r0, #2102	@ 0x836
 8012730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012734:	2001      	movs	r0, #1
 8012736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801273a:	200b      	movs	r0, #11
 801273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012740:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop

08012748 <rcl_action_take_goal_request>:
 8012748:	2800      	cmp	r0, #0
 801274a:	d039      	beq.n	80127c0 <rcl_action_take_goal_request+0x78>
 801274c:	b570      	push	{r4, r5, r6, lr}
 801274e:	4604      	mov	r4, r0
 8012750:	6800      	ldr	r0, [r0, #0]
 8012752:	b380      	cbz	r0, 80127b6 <rcl_action_take_goal_request+0x6e>
 8012754:	460d      	mov	r5, r1
 8012756:	4616      	mov	r6, r2
 8012758:	f7fe fb00 	bl	8010d5c <rcl_service_is_valid>
 801275c:	b330      	cbz	r0, 80127ac <rcl_action_take_goal_request+0x64>
 801275e:	6820      	ldr	r0, [r4, #0]
 8012760:	3004      	adds	r0, #4
 8012762:	f7fe fafb 	bl	8010d5c <rcl_service_is_valid>
 8012766:	b308      	cbz	r0, 80127ac <rcl_action_take_goal_request+0x64>
 8012768:	6820      	ldr	r0, [r4, #0]
 801276a:	3008      	adds	r0, #8
 801276c:	f7fe faf6 	bl	8010d5c <rcl_service_is_valid>
 8012770:	b1e0      	cbz	r0, 80127ac <rcl_action_take_goal_request+0x64>
 8012772:	6820      	ldr	r0, [r4, #0]
 8012774:	300c      	adds	r0, #12
 8012776:	f001 fe9d 	bl	80144b4 <rcl_publisher_is_valid>
 801277a:	b1b8      	cbz	r0, 80127ac <rcl_action_take_goal_request+0x64>
 801277c:	6820      	ldr	r0, [r4, #0]
 801277e:	3010      	adds	r0, #16
 8012780:	f001 fe98 	bl	80144b4 <rcl_publisher_is_valid>
 8012784:	b190      	cbz	r0, 80127ac <rcl_action_take_goal_request+0x64>
 8012786:	b1cd      	cbz	r5, 80127bc <rcl_action_take_goal_request+0x74>
 8012788:	b1c6      	cbz	r6, 80127bc <rcl_action_take_goal_request+0x74>
 801278a:	6820      	ldr	r0, [r4, #0]
 801278c:	4632      	mov	r2, r6
 801278e:	4629      	mov	r1, r5
 8012790:	f7fe fa8c 	bl	8010cac <rcl_take_request>
 8012794:	b148      	cbz	r0, 80127aa <rcl_action_take_goal_request+0x62>
 8012796:	280a      	cmp	r0, #10
 8012798:	d007      	beq.n	80127aa <rcl_action_take_goal_request+0x62>
 801279a:	f240 2259 	movw	r2, #601	@ 0x259
 801279e:	f640 0399 	movw	r3, #2201	@ 0x899
 80127a2:	4290      	cmp	r0, r2
 80127a4:	bf0c      	ite	eq
 80127a6:	4618      	moveq	r0, r3
 80127a8:	2001      	movne	r0, #1
 80127aa:	bd70      	pop	{r4, r5, r6, pc}
 80127ac:	f7f7 fc6c 	bl	800a088 <rcutils_reset_error>
 80127b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80127b4:	bd70      	pop	{r4, r5, r6, pc}
 80127b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80127ba:	bd70      	pop	{r4, r5, r6, pc}
 80127bc:	200b      	movs	r0, #11
 80127be:	bd70      	pop	{r4, r5, r6, pc}
 80127c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop

080127c8 <rcl_action_send_goal_response>:
 80127c8:	b390      	cbz	r0, 8012830 <rcl_action_send_goal_response+0x68>
 80127ca:	b570      	push	{r4, r5, r6, lr}
 80127cc:	4604      	mov	r4, r0
 80127ce:	6800      	ldr	r0, [r0, #0]
 80127d0:	b348      	cbz	r0, 8012826 <rcl_action_send_goal_response+0x5e>
 80127d2:	460d      	mov	r5, r1
 80127d4:	4616      	mov	r6, r2
 80127d6:	f7fe fac1 	bl	8010d5c <rcl_service_is_valid>
 80127da:	b1f8      	cbz	r0, 801281c <rcl_action_send_goal_response+0x54>
 80127dc:	6820      	ldr	r0, [r4, #0]
 80127de:	3004      	adds	r0, #4
 80127e0:	f7fe fabc 	bl	8010d5c <rcl_service_is_valid>
 80127e4:	b1d0      	cbz	r0, 801281c <rcl_action_send_goal_response+0x54>
 80127e6:	6820      	ldr	r0, [r4, #0]
 80127e8:	3008      	adds	r0, #8
 80127ea:	f7fe fab7 	bl	8010d5c <rcl_service_is_valid>
 80127ee:	b1a8      	cbz	r0, 801281c <rcl_action_send_goal_response+0x54>
 80127f0:	6820      	ldr	r0, [r4, #0]
 80127f2:	300c      	adds	r0, #12
 80127f4:	f001 fe5e 	bl	80144b4 <rcl_publisher_is_valid>
 80127f8:	b180      	cbz	r0, 801281c <rcl_action_send_goal_response+0x54>
 80127fa:	6820      	ldr	r0, [r4, #0]
 80127fc:	3010      	adds	r0, #16
 80127fe:	f001 fe59 	bl	80144b4 <rcl_publisher_is_valid>
 8012802:	b158      	cbz	r0, 801281c <rcl_action_send_goal_response+0x54>
 8012804:	b195      	cbz	r5, 801282c <rcl_action_send_goal_response+0x64>
 8012806:	b18e      	cbz	r6, 801282c <rcl_action_send_goal_response+0x64>
 8012808:	6820      	ldr	r0, [r4, #0]
 801280a:	4632      	mov	r2, r6
 801280c:	4629      	mov	r1, r5
 801280e:	f7fe fa8d 	bl	8010d2c <rcl_send_response>
 8012812:	b110      	cbz	r0, 801281a <rcl_action_send_goal_response+0x52>
 8012814:	2802      	cmp	r0, #2
 8012816:	bf18      	it	ne
 8012818:	2001      	movne	r0, #1
 801281a:	bd70      	pop	{r4, r5, r6, pc}
 801281c:	f7f7 fc34 	bl	800a088 <rcutils_reset_error>
 8012820:	f640 0098 	movw	r0, #2200	@ 0x898
 8012824:	bd70      	pop	{r4, r5, r6, pc}
 8012826:	f640 0098 	movw	r0, #2200	@ 0x898
 801282a:	bd70      	pop	{r4, r5, r6, pc}
 801282c:	200b      	movs	r0, #11
 801282e:	bd70      	pop	{r4, r5, r6, pc}
 8012830:	f640 0098 	movw	r0, #2200	@ 0x898
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop

08012838 <rcl_action_take_result_request>:
 8012838:	2800      	cmp	r0, #0
 801283a:	d03a      	beq.n	80128b2 <rcl_action_take_result_request+0x7a>
 801283c:	b570      	push	{r4, r5, r6, lr}
 801283e:	4604      	mov	r4, r0
 8012840:	6800      	ldr	r0, [r0, #0]
 8012842:	b388      	cbz	r0, 80128a8 <rcl_action_take_result_request+0x70>
 8012844:	460d      	mov	r5, r1
 8012846:	4616      	mov	r6, r2
 8012848:	f7fe fa88 	bl	8010d5c <rcl_service_is_valid>
 801284c:	b338      	cbz	r0, 801289e <rcl_action_take_result_request+0x66>
 801284e:	6820      	ldr	r0, [r4, #0]
 8012850:	3004      	adds	r0, #4
 8012852:	f7fe fa83 	bl	8010d5c <rcl_service_is_valid>
 8012856:	b310      	cbz	r0, 801289e <rcl_action_take_result_request+0x66>
 8012858:	6820      	ldr	r0, [r4, #0]
 801285a:	3008      	adds	r0, #8
 801285c:	f7fe fa7e 	bl	8010d5c <rcl_service_is_valid>
 8012860:	b1e8      	cbz	r0, 801289e <rcl_action_take_result_request+0x66>
 8012862:	6820      	ldr	r0, [r4, #0]
 8012864:	300c      	adds	r0, #12
 8012866:	f001 fe25 	bl	80144b4 <rcl_publisher_is_valid>
 801286a:	b1c0      	cbz	r0, 801289e <rcl_action_take_result_request+0x66>
 801286c:	6820      	ldr	r0, [r4, #0]
 801286e:	3010      	adds	r0, #16
 8012870:	f001 fe20 	bl	80144b4 <rcl_publisher_is_valid>
 8012874:	b198      	cbz	r0, 801289e <rcl_action_take_result_request+0x66>
 8012876:	b1d5      	cbz	r5, 80128ae <rcl_action_take_result_request+0x76>
 8012878:	b1ce      	cbz	r6, 80128ae <rcl_action_take_result_request+0x76>
 801287a:	6820      	ldr	r0, [r4, #0]
 801287c:	4632      	mov	r2, r6
 801287e:	4629      	mov	r1, r5
 8012880:	3008      	adds	r0, #8
 8012882:	f7fe fa13 	bl	8010cac <rcl_take_request>
 8012886:	b148      	cbz	r0, 801289c <rcl_action_take_result_request+0x64>
 8012888:	280a      	cmp	r0, #10
 801288a:	d007      	beq.n	801289c <rcl_action_take_result_request+0x64>
 801288c:	f240 2259 	movw	r2, #601	@ 0x259
 8012890:	f640 0399 	movw	r3, #2201	@ 0x899
 8012894:	4290      	cmp	r0, r2
 8012896:	bf0c      	ite	eq
 8012898:	4618      	moveq	r0, r3
 801289a:	2001      	movne	r0, #1
 801289c:	bd70      	pop	{r4, r5, r6, pc}
 801289e:	f7f7 fbf3 	bl	800a088 <rcutils_reset_error>
 80128a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80128a6:	bd70      	pop	{r4, r5, r6, pc}
 80128a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80128ac:	bd70      	pop	{r4, r5, r6, pc}
 80128ae:	200b      	movs	r0, #11
 80128b0:	bd70      	pop	{r4, r5, r6, pc}
 80128b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80128b6:	4770      	bx	lr

080128b8 <rcl_action_take_cancel_request>:
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d03a      	beq.n	8012932 <rcl_action_take_cancel_request+0x7a>
 80128bc:	b570      	push	{r4, r5, r6, lr}
 80128be:	4604      	mov	r4, r0
 80128c0:	6800      	ldr	r0, [r0, #0]
 80128c2:	b388      	cbz	r0, 8012928 <rcl_action_take_cancel_request+0x70>
 80128c4:	460d      	mov	r5, r1
 80128c6:	4616      	mov	r6, r2
 80128c8:	f7fe fa48 	bl	8010d5c <rcl_service_is_valid>
 80128cc:	b338      	cbz	r0, 801291e <rcl_action_take_cancel_request+0x66>
 80128ce:	6820      	ldr	r0, [r4, #0]
 80128d0:	3004      	adds	r0, #4
 80128d2:	f7fe fa43 	bl	8010d5c <rcl_service_is_valid>
 80128d6:	b310      	cbz	r0, 801291e <rcl_action_take_cancel_request+0x66>
 80128d8:	6820      	ldr	r0, [r4, #0]
 80128da:	3008      	adds	r0, #8
 80128dc:	f7fe fa3e 	bl	8010d5c <rcl_service_is_valid>
 80128e0:	b1e8      	cbz	r0, 801291e <rcl_action_take_cancel_request+0x66>
 80128e2:	6820      	ldr	r0, [r4, #0]
 80128e4:	300c      	adds	r0, #12
 80128e6:	f001 fde5 	bl	80144b4 <rcl_publisher_is_valid>
 80128ea:	b1c0      	cbz	r0, 801291e <rcl_action_take_cancel_request+0x66>
 80128ec:	6820      	ldr	r0, [r4, #0]
 80128ee:	3010      	adds	r0, #16
 80128f0:	f001 fde0 	bl	80144b4 <rcl_publisher_is_valid>
 80128f4:	b198      	cbz	r0, 801291e <rcl_action_take_cancel_request+0x66>
 80128f6:	b1d5      	cbz	r5, 801292e <rcl_action_take_cancel_request+0x76>
 80128f8:	b1ce      	cbz	r6, 801292e <rcl_action_take_cancel_request+0x76>
 80128fa:	6820      	ldr	r0, [r4, #0]
 80128fc:	4632      	mov	r2, r6
 80128fe:	4629      	mov	r1, r5
 8012900:	3004      	adds	r0, #4
 8012902:	f7fe f9d3 	bl	8010cac <rcl_take_request>
 8012906:	b148      	cbz	r0, 801291c <rcl_action_take_cancel_request+0x64>
 8012908:	280a      	cmp	r0, #10
 801290a:	d007      	beq.n	801291c <rcl_action_take_cancel_request+0x64>
 801290c:	f240 2259 	movw	r2, #601	@ 0x259
 8012910:	f640 0399 	movw	r3, #2201	@ 0x899
 8012914:	4290      	cmp	r0, r2
 8012916:	bf0c      	ite	eq
 8012918:	4618      	moveq	r0, r3
 801291a:	2001      	movne	r0, #1
 801291c:	bd70      	pop	{r4, r5, r6, pc}
 801291e:	f7f7 fbb3 	bl	800a088 <rcutils_reset_error>
 8012922:	f640 0098 	movw	r0, #2200	@ 0x898
 8012926:	bd70      	pop	{r4, r5, r6, pc}
 8012928:	f640 0098 	movw	r0, #2200	@ 0x898
 801292c:	bd70      	pop	{r4, r5, r6, pc}
 801292e:	200b      	movs	r0, #11
 8012930:	bd70      	pop	{r4, r5, r6, pc}
 8012932:	f640 0098 	movw	r0, #2200	@ 0x898
 8012936:	4770      	bx	lr

08012938 <rcl_action_send_cancel_response>:
 8012938:	b398      	cbz	r0, 80129a2 <rcl_action_send_cancel_response+0x6a>
 801293a:	b570      	push	{r4, r5, r6, lr}
 801293c:	4604      	mov	r4, r0
 801293e:	6800      	ldr	r0, [r0, #0]
 8012940:	b350      	cbz	r0, 8012998 <rcl_action_send_cancel_response+0x60>
 8012942:	460d      	mov	r5, r1
 8012944:	4616      	mov	r6, r2
 8012946:	f7fe fa09 	bl	8010d5c <rcl_service_is_valid>
 801294a:	b300      	cbz	r0, 801298e <rcl_action_send_cancel_response+0x56>
 801294c:	6820      	ldr	r0, [r4, #0]
 801294e:	3004      	adds	r0, #4
 8012950:	f7fe fa04 	bl	8010d5c <rcl_service_is_valid>
 8012954:	b1d8      	cbz	r0, 801298e <rcl_action_send_cancel_response+0x56>
 8012956:	6820      	ldr	r0, [r4, #0]
 8012958:	3008      	adds	r0, #8
 801295a:	f7fe f9ff 	bl	8010d5c <rcl_service_is_valid>
 801295e:	b1b0      	cbz	r0, 801298e <rcl_action_send_cancel_response+0x56>
 8012960:	6820      	ldr	r0, [r4, #0]
 8012962:	300c      	adds	r0, #12
 8012964:	f001 fda6 	bl	80144b4 <rcl_publisher_is_valid>
 8012968:	b188      	cbz	r0, 801298e <rcl_action_send_cancel_response+0x56>
 801296a:	6820      	ldr	r0, [r4, #0]
 801296c:	3010      	adds	r0, #16
 801296e:	f001 fda1 	bl	80144b4 <rcl_publisher_is_valid>
 8012972:	b160      	cbz	r0, 801298e <rcl_action_send_cancel_response+0x56>
 8012974:	b19d      	cbz	r5, 801299e <rcl_action_send_cancel_response+0x66>
 8012976:	b196      	cbz	r6, 801299e <rcl_action_send_cancel_response+0x66>
 8012978:	6820      	ldr	r0, [r4, #0]
 801297a:	4632      	mov	r2, r6
 801297c:	4629      	mov	r1, r5
 801297e:	3004      	adds	r0, #4
 8012980:	f7fe f9d4 	bl	8010d2c <rcl_send_response>
 8012984:	b110      	cbz	r0, 801298c <rcl_action_send_cancel_response+0x54>
 8012986:	2802      	cmp	r0, #2
 8012988:	bf18      	it	ne
 801298a:	2001      	movne	r0, #1
 801298c:	bd70      	pop	{r4, r5, r6, pc}
 801298e:	f7f7 fb7b 	bl	800a088 <rcutils_reset_error>
 8012992:	f640 0098 	movw	r0, #2200	@ 0x898
 8012996:	bd70      	pop	{r4, r5, r6, pc}
 8012998:	f640 0098 	movw	r0, #2200	@ 0x898
 801299c:	bd70      	pop	{r4, r5, r6, pc}
 801299e:	200b      	movs	r0, #11
 80129a0:	bd70      	pop	{r4, r5, r6, pc}
 80129a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80129a6:	4770      	bx	lr

080129a8 <rcl_action_wait_set_add_action_server>:
 80129a8:	2800      	cmp	r0, #0
 80129aa:	d04d      	beq.n	8012a48 <rcl_action_wait_set_add_action_server+0xa0>
 80129ac:	b570      	push	{r4, r5, r6, lr}
 80129ae:	460c      	mov	r4, r1
 80129b0:	b159      	cbz	r1, 80129ca <rcl_action_wait_set_add_action_server+0x22>
 80129b2:	4605      	mov	r5, r0
 80129b4:	6808      	ldr	r0, [r1, #0]
 80129b6:	b140      	cbz	r0, 80129ca <rcl_action_wait_set_add_action_server+0x22>
 80129b8:	4616      	mov	r6, r2
 80129ba:	f7fe f9cf 	bl	8010d5c <rcl_service_is_valid>
 80129be:	b120      	cbz	r0, 80129ca <rcl_action_wait_set_add_action_server+0x22>
 80129c0:	6820      	ldr	r0, [r4, #0]
 80129c2:	3004      	adds	r0, #4
 80129c4:	f7fe f9ca 	bl	8010d5c <rcl_service_is_valid>
 80129c8:	b910      	cbnz	r0, 80129d0 <rcl_action_wait_set_add_action_server+0x28>
 80129ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80129ce:	bd70      	pop	{r4, r5, r6, pc}
 80129d0:	6820      	ldr	r0, [r4, #0]
 80129d2:	3008      	adds	r0, #8
 80129d4:	f7fe f9c2 	bl	8010d5c <rcl_service_is_valid>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d0f6      	beq.n	80129ca <rcl_action_wait_set_add_action_server+0x22>
 80129dc:	6820      	ldr	r0, [r4, #0]
 80129de:	300c      	adds	r0, #12
 80129e0:	f001 fd80 	bl	80144e4 <rcl_publisher_is_valid_except_context>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	d0f0      	beq.n	80129ca <rcl_action_wait_set_add_action_server+0x22>
 80129e8:	6820      	ldr	r0, [r4, #0]
 80129ea:	3010      	adds	r0, #16
 80129ec:	f001 fd7a 	bl	80144e4 <rcl_publisher_is_valid_except_context>
 80129f0:	2800      	cmp	r0, #0
 80129f2:	d0ea      	beq.n	80129ca <rcl_action_wait_set_add_action_server+0x22>
 80129f4:	6821      	ldr	r1, [r4, #0]
 80129f6:	4628      	mov	r0, r5
 80129f8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80129fc:	f7ff face 	bl	8011f9c <rcl_wait_set_add_service>
 8012a00:	2800      	cmp	r0, #0
 8012a02:	d1e4      	bne.n	80129ce <rcl_action_wait_set_add_action_server+0x26>
 8012a04:	6821      	ldr	r1, [r4, #0]
 8012a06:	4628      	mov	r0, r5
 8012a08:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8012a0c:	3104      	adds	r1, #4
 8012a0e:	f7ff fac5 	bl	8011f9c <rcl_wait_set_add_service>
 8012a12:	2800      	cmp	r0, #0
 8012a14:	d1db      	bne.n	80129ce <rcl_action_wait_set_add_action_server+0x26>
 8012a16:	6821      	ldr	r1, [r4, #0]
 8012a18:	4628      	mov	r0, r5
 8012a1a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8012a1e:	3108      	adds	r1, #8
 8012a20:	f7ff fabc 	bl	8011f9c <rcl_wait_set_add_service>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d1d2      	bne.n	80129ce <rcl_action_wait_set_add_action_server+0x26>
 8012a28:	6821      	ldr	r1, [r4, #0]
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012a30:	3114      	adds	r1, #20
 8012a32:	f7ff fa57 	bl	8011ee4 <rcl_wait_set_add_timer>
 8012a36:	2800      	cmp	r0, #0
 8012a38:	d1c9      	bne.n	80129ce <rcl_action_wait_set_add_action_server+0x26>
 8012a3a:	2e00      	cmp	r6, #0
 8012a3c:	d0c7      	beq.n	80129ce <rcl_action_wait_set_add_action_server+0x26>
 8012a3e:	6823      	ldr	r3, [r4, #0]
 8012a40:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012a44:	6033      	str	r3, [r6, #0]
 8012a46:	bd70      	pop	{r4, r5, r6, pc}
 8012a48:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop

08012a50 <rcl_action_server_wait_set_get_entities_ready>:
 8012a50:	2800      	cmp	r0, #0
 8012a52:	d05a      	beq.n	8012b0a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8012a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a56:	460c      	mov	r4, r1
 8012a58:	b161      	cbz	r1, 8012a74 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a5a:	4605      	mov	r5, r0
 8012a5c:	6808      	ldr	r0, [r1, #0]
 8012a5e:	b148      	cbz	r0, 8012a74 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a60:	4616      	mov	r6, r2
 8012a62:	461f      	mov	r7, r3
 8012a64:	f7fe f97a 	bl	8010d5c <rcl_service_is_valid>
 8012a68:	b120      	cbz	r0, 8012a74 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a6a:	6820      	ldr	r0, [r4, #0]
 8012a6c:	3004      	adds	r0, #4
 8012a6e:	f7fe f975 	bl	8010d5c <rcl_service_is_valid>
 8012a72:	b910      	cbnz	r0, 8012a7a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012a74:	f640 0098 	movw	r0, #2200	@ 0x898
 8012a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a7a:	6820      	ldr	r0, [r4, #0]
 8012a7c:	3008      	adds	r0, #8
 8012a7e:	f7fe f96d 	bl	8010d5c <rcl_service_is_valid>
 8012a82:	2800      	cmp	r0, #0
 8012a84:	d0f6      	beq.n	8012a74 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a86:	6820      	ldr	r0, [r4, #0]
 8012a88:	300c      	adds	r0, #12
 8012a8a:	f001 fd2b 	bl	80144e4 <rcl_publisher_is_valid_except_context>
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d0f0      	beq.n	8012a74 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a92:	6820      	ldr	r0, [r4, #0]
 8012a94:	3010      	adds	r0, #16
 8012a96:	f001 fd25 	bl	80144e4 <rcl_publisher_is_valid_except_context>
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	d0ea      	beq.n	8012a74 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a9e:	b3be      	cbz	r6, 8012b10 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012aa0:	b3b7      	cbz	r7, 8012b10 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012aa2:	9b06      	ldr	r3, [sp, #24]
 8012aa4:	b3a3      	cbz	r3, 8012b10 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012aa6:	9b07      	ldr	r3, [sp, #28]
 8012aa8:	b393      	cbz	r3, 8012b10 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012aaa:	6821      	ldr	r1, [r4, #0]
 8012aac:	692a      	ldr	r2, [r5, #16]
 8012aae:	6a2c      	ldr	r4, [r5, #32]
 8012ab0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8012ab4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012ab8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012abc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012ac0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8012ac4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012ac8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012acc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012ad0:	1a64      	subs	r4, r4, r1
 8012ad2:	fab4 f484 	clz	r4, r4
 8012ad6:	0964      	lsrs	r4, r4, #5
 8012ad8:	7034      	strb	r4, [r6, #0]
 8012ada:	1d0c      	adds	r4, r1, #4
 8012adc:	1b1b      	subs	r3, r3, r4
 8012ade:	fab3 f383 	clz	r3, r3
 8012ae2:	095b      	lsrs	r3, r3, #5
 8012ae4:	f101 0408 	add.w	r4, r1, #8
 8012ae8:	703b      	strb	r3, [r7, #0]
 8012aea:	f101 0314 	add.w	r3, r1, #20
 8012aee:	1b01      	subs	r1, r0, r4
 8012af0:	1ad3      	subs	r3, r2, r3
 8012af2:	fab1 f181 	clz	r1, r1
 8012af6:	9a06      	ldr	r2, [sp, #24]
 8012af8:	0949      	lsrs	r1, r1, #5
 8012afa:	7011      	strb	r1, [r2, #0]
 8012afc:	fab3 f383 	clz	r3, r3
 8012b00:	9a07      	ldr	r2, [sp, #28]
 8012b02:	095b      	lsrs	r3, r3, #5
 8012b04:	2000      	movs	r0, #0
 8012b06:	7013      	strb	r3, [r2, #0]
 8012b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012b0e:	4770      	bx	lr
 8012b10:	200b      	movs	r0, #11
 8012b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b14 <_execute_event_handler>:
 8012b14:	2002      	movs	r0, #2
 8012b16:	4770      	bx	lr

08012b18 <_cancel_goal_event_handler>:
 8012b18:	2003      	movs	r0, #3
 8012b1a:	4770      	bx	lr

08012b1c <_succeed_event_handler>:
 8012b1c:	2004      	movs	r0, #4
 8012b1e:	4770      	bx	lr

08012b20 <_abort_event_handler>:
 8012b20:	2006      	movs	r0, #6
 8012b22:	4770      	bx	lr

08012b24 <_canceled_event_handler>:
 8012b24:	2005      	movs	r0, #5
 8012b26:	4770      	bx	lr

08012b28 <rcl_action_transition_goal_state>:
 8012b28:	b2c2      	uxtb	r2, r0
 8012b2a:	2a06      	cmp	r2, #6
 8012b2c:	d80c      	bhi.n	8012b48 <rcl_action_transition_goal_state+0x20>
 8012b2e:	2904      	cmp	r1, #4
 8012b30:	d80a      	bhi.n	8012b48 <rcl_action_transition_goal_state+0x20>
 8012b32:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012b36:	b410      	push	{r4}
 8012b38:	1853      	adds	r3, r2, r1
 8012b3a:	4c06      	ldr	r4, [pc, #24]	@ (8012b54 <rcl_action_transition_goal_state+0x2c>)
 8012b3c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012b40:	b123      	cbz	r3, 8012b4c <rcl_action_transition_goal_state+0x24>
 8012b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b46:	4718      	bx	r3
 8012b48:	2000      	movs	r0, #0
 8012b4a:	4770      	bx	lr
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b52:	4770      	bx	lr
 8012b54:	08016a24 	.word	0x08016a24

08012b58 <rcl_action_get_zero_initialized_cancel_response>:
 8012b58:	b510      	push	{r4, lr}
 8012b5a:	4c07      	ldr	r4, [pc, #28]	@ (8012b78 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012b5c:	4686      	mov	lr, r0
 8012b5e:	4684      	mov	ip, r0
 8012b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b6c:	6823      	ldr	r3, [r4, #0]
 8012b6e:	f8cc 3000 	str.w	r3, [ip]
 8012b72:	4670      	mov	r0, lr
 8012b74:	bd10      	pop	{r4, pc}
 8012b76:	bf00      	nop
 8012b78:	08016ab0 	.word	0x08016ab0

08012b7c <rclc_action_send_result_request>:
 8012b7c:	b1d0      	cbz	r0, 8012bb4 <rclc_action_send_result_request+0x38>
 8012b7e:	b500      	push	{lr}
 8012b80:	4684      	mov	ip, r0
 8012b82:	b087      	sub	sp, #28
 8012b84:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012b88:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012b8c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012b90:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012b94:	f10d 0e08 	add.w	lr, sp, #8
 8012b98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012b9c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012ba0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8012ba4:	a902      	add	r1, sp, #8
 8012ba6:	3010      	adds	r0, #16
 8012ba8:	f7ff fbda 	bl	8012360 <rcl_action_send_result_request>
 8012bac:	b920      	cbnz	r0, 8012bb8 <rclc_action_send_result_request+0x3c>
 8012bae:	b007      	add	sp, #28
 8012bb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bb4:	200b      	movs	r0, #11
 8012bb6:	4770      	bx	lr
 8012bb8:	9001      	str	r0, [sp, #4]
 8012bba:	f7f7 fa65 	bl	800a088 <rcutils_reset_error>
 8012bbe:	9801      	ldr	r0, [sp, #4]
 8012bc0:	b007      	add	sp, #28
 8012bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bc6:	bf00      	nop

08012bc8 <rclc_action_take_goal_handle>:
 8012bc8:	b160      	cbz	r0, 8012be4 <rclc_action_take_goal_handle+0x1c>
 8012bca:	6883      	ldr	r3, [r0, #8]
 8012bcc:	b143      	cbz	r3, 8012be0 <rclc_action_take_goal_handle+0x18>
 8012bce:	6819      	ldr	r1, [r3, #0]
 8012bd0:	6081      	str	r1, [r0, #8]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	721a      	strb	r2, [r3, #8]
 8012bd6:	68c1      	ldr	r1, [r0, #12]
 8012bd8:	6019      	str	r1, [r3, #0]
 8012bda:	621a      	str	r2, [r3, #32]
 8012bdc:	849a      	strh	r2, [r3, #36]	@ 0x24
 8012bde:	60c3      	str	r3, [r0, #12]
 8012be0:	4618      	mov	r0, r3
 8012be2:	4770      	bx	lr
 8012be4:	4603      	mov	r3, r0
 8012be6:	e7fb      	b.n	8012be0 <rclc_action_take_goal_handle+0x18>

08012be8 <rclc_action_remove_used_goal_handle>:
 8012be8:	b180      	cbz	r0, 8012c0c <rclc_action_remove_used_goal_handle+0x24>
 8012bea:	b179      	cbz	r1, 8012c0c <rclc_action_remove_used_goal_handle+0x24>
 8012bec:	68c3      	ldr	r3, [r0, #12]
 8012bee:	4299      	cmp	r1, r3
 8012bf0:	d00d      	beq.n	8012c0e <rclc_action_remove_used_goal_handle+0x26>
 8012bf2:	b12b      	cbz	r3, 8012c00 <rclc_action_remove_used_goal_handle+0x18>
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	4291      	cmp	r1, r2
 8012bf8:	d003      	beq.n	8012c02 <rclc_action_remove_used_goal_handle+0x1a>
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d1f9      	bne.n	8012bf4 <rclc_action_remove_used_goal_handle+0xc>
 8012c00:	4770      	bx	lr
 8012c02:	680a      	ldr	r2, [r1, #0]
 8012c04:	601a      	str	r2, [r3, #0]
 8012c06:	6883      	ldr	r3, [r0, #8]
 8012c08:	600b      	str	r3, [r1, #0]
 8012c0a:	6081      	str	r1, [r0, #8]
 8012c0c:	4770      	bx	lr
 8012c0e:	680b      	ldr	r3, [r1, #0]
 8012c10:	60c3      	str	r3, [r0, #12]
 8012c12:	e7f8      	b.n	8012c06 <rclc_action_remove_used_goal_handle+0x1e>

08012c14 <rclc_action_find_goal_handle_by_uuid>:
 8012c14:	b538      	push	{r3, r4, r5, lr}
 8012c16:	b180      	cbz	r0, 8012c3a <rclc_action_find_goal_handle_by_uuid+0x26>
 8012c18:	460d      	mov	r5, r1
 8012c1a:	b181      	cbz	r1, 8012c3e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8012c1c:	68c4      	ldr	r4, [r0, #12]
 8012c1e:	b914      	cbnz	r4, 8012c26 <rclc_action_find_goal_handle_by_uuid+0x12>
 8012c20:	e009      	b.n	8012c36 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012c22:	6824      	ldr	r4, [r4, #0]
 8012c24:	b13c      	cbz	r4, 8012c36 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012c26:	f104 0009 	add.w	r0, r4, #9
 8012c2a:	2210      	movs	r2, #16
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	f002 f929 	bl	8014e84 <memcmp>
 8012c32:	2800      	cmp	r0, #0
 8012c34:	d1f5      	bne.n	8012c22 <rclc_action_find_goal_handle_by_uuid+0xe>
 8012c36:	4620      	mov	r0, r4
 8012c38:	bd38      	pop	{r3, r4, r5, pc}
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	e7fb      	b.n	8012c36 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012c3e:	460c      	mov	r4, r1
 8012c40:	e7f9      	b.n	8012c36 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012c42:	bf00      	nop

08012c44 <rclc_action_find_first_handle_by_status>:
 8012c44:	b140      	cbz	r0, 8012c58 <rclc_action_find_first_handle_by_status+0x14>
 8012c46:	68c0      	ldr	r0, [r0, #12]
 8012c48:	b910      	cbnz	r0, 8012c50 <rclc_action_find_first_handle_by_status+0xc>
 8012c4a:	e005      	b.n	8012c58 <rclc_action_find_first_handle_by_status+0x14>
 8012c4c:	6800      	ldr	r0, [r0, #0]
 8012c4e:	b118      	cbz	r0, 8012c58 <rclc_action_find_first_handle_by_status+0x14>
 8012c50:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012c54:	428b      	cmp	r3, r1
 8012c56:	d1f9      	bne.n	8012c4c <rclc_action_find_first_handle_by_status+0x8>
 8012c58:	4770      	bx	lr
 8012c5a:	bf00      	nop

08012c5c <rclc_action_find_first_terminated_handle>:
 8012c5c:	b140      	cbz	r0, 8012c70 <rclc_action_find_first_terminated_handle+0x14>
 8012c5e:	68c0      	ldr	r0, [r0, #12]
 8012c60:	b910      	cbnz	r0, 8012c68 <rclc_action_find_first_terminated_handle+0xc>
 8012c62:	e005      	b.n	8012c70 <rclc_action_find_first_terminated_handle+0x14>
 8012c64:	6800      	ldr	r0, [r0, #0]
 8012c66:	b118      	cbz	r0, 8012c70 <rclc_action_find_first_terminated_handle+0x14>
 8012c68:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012c6c:	2b03      	cmp	r3, #3
 8012c6e:	ddf9      	ble.n	8012c64 <rclc_action_find_first_terminated_handle+0x8>
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop

08012c74 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012c74:	b170      	cbz	r0, 8012c94 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012c76:	68c0      	ldr	r0, [r0, #12]
 8012c78:	b160      	cbz	r0, 8012c94 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012c7a:	b410      	push	{r4}
 8012c7c:	e001      	b.n	8012c82 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8012c7e:	6800      	ldr	r0, [r0, #0]
 8012c80:	b128      	cbz	r0, 8012c8e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012c82:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012c86:	4299      	cmp	r1, r3
 8012c88:	bf08      	it	eq
 8012c8a:	4294      	cmpeq	r4, r2
 8012c8c:	d1f7      	bne.n	8012c7e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8012c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c92:	4770      	bx	lr
 8012c94:	4770      	bx	lr
 8012c96:	bf00      	nop

08012c98 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012c98:	b170      	cbz	r0, 8012cb8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012c9a:	68c0      	ldr	r0, [r0, #12]
 8012c9c:	b160      	cbz	r0, 8012cb8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012c9e:	b410      	push	{r4}
 8012ca0:	e001      	b.n	8012ca6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8012ca2:	6800      	ldr	r0, [r0, #0]
 8012ca4:	b128      	cbz	r0, 8012cb2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012ca6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012caa:	4299      	cmp	r1, r3
 8012cac:	bf08      	it	eq
 8012cae:	4294      	cmpeq	r4, r2
 8012cb0:	d1f7      	bne.n	8012ca2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8012cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cb6:	4770      	bx	lr
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop

08012cbc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012cbc:	b170      	cbz	r0, 8012cdc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012cbe:	68c0      	ldr	r0, [r0, #12]
 8012cc0:	b160      	cbz	r0, 8012cdc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012cc2:	b410      	push	{r4}
 8012cc4:	e001      	b.n	8012cca <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012cc6:	6800      	ldr	r0, [r0, #0]
 8012cc8:	b128      	cbz	r0, 8012cd6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012cca:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012cce:	4299      	cmp	r1, r3
 8012cd0:	bf08      	it	eq
 8012cd2:	4294      	cmpeq	r4, r2
 8012cd4:	d1f7      	bne.n	8012cc6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cda:	4770      	bx	lr
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop

08012ce0 <rclc_action_find_first_handle_with_goal_response>:
 8012ce0:	b140      	cbz	r0, 8012cf4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012ce2:	68c0      	ldr	r0, [r0, #12]
 8012ce4:	b910      	cbnz	r0, 8012cec <rclc_action_find_first_handle_with_goal_response+0xc>
 8012ce6:	e005      	b.n	8012cf4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012ce8:	6800      	ldr	r0, [r0, #0]
 8012cea:	b118      	cbz	r0, 8012cf4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012cec:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d0f9      	beq.n	8012ce8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop

08012cf8 <rclc_action_find_first_handle_with_result_response>:
 8012cf8:	b140      	cbz	r0, 8012d0c <rclc_action_find_first_handle_with_result_response+0x14>
 8012cfa:	68c0      	ldr	r0, [r0, #12]
 8012cfc:	b910      	cbnz	r0, 8012d04 <rclc_action_find_first_handle_with_result_response+0xc>
 8012cfe:	e005      	b.n	8012d0c <rclc_action_find_first_handle_with_result_response+0x14>
 8012d00:	6800      	ldr	r0, [r0, #0]
 8012d02:	b118      	cbz	r0, 8012d0c <rclc_action_find_first_handle_with_result_response+0x14>
 8012d04:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d0f9      	beq.n	8012d00 <rclc_action_find_first_handle_with_result_response+0x8>
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop

08012d10 <rclc_action_server_response_goal_request>:
 8012d10:	b198      	cbz	r0, 8012d3a <rclc_action_server_response_goal_request+0x2a>
 8012d12:	b510      	push	{r4, lr}
 8012d14:	6844      	ldr	r4, [r0, #4]
 8012d16:	b086      	sub	sp, #24
 8012d18:	2200      	movs	r2, #0
 8012d1a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012d1e:	460b      	mov	r3, r1
 8012d20:	9205      	str	r2, [sp, #20]
 8012d22:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012d26:	aa03      	add	r2, sp, #12
 8012d28:	f104 0010 	add.w	r0, r4, #16
 8012d2c:	f88d 300c 	strb.w	r3, [sp, #12]
 8012d30:	f7ff fd4a 	bl	80127c8 <rcl_action_send_goal_response>
 8012d34:	b918      	cbnz	r0, 8012d3e <rclc_action_server_response_goal_request+0x2e>
 8012d36:	b006      	add	sp, #24
 8012d38:	bd10      	pop	{r4, pc}
 8012d3a:	200b      	movs	r0, #11
 8012d3c:	4770      	bx	lr
 8012d3e:	9001      	str	r0, [sp, #4]
 8012d40:	f7f7 f9a2 	bl	800a088 <rcutils_reset_error>
 8012d44:	9801      	ldr	r0, [sp, #4]
 8012d46:	b006      	add	sp, #24
 8012d48:	bd10      	pop	{r4, pc}
 8012d4a:	bf00      	nop
 8012d4c:	0000      	movs	r0, r0
	...

08012d50 <rclc_action_server_goal_cancel_accept>:
 8012d50:	b310      	cbz	r0, 8012d98 <rclc_action_server_goal_cancel_accept+0x48>
 8012d52:	b510      	push	{r4, lr}
 8012d54:	b090      	sub	sp, #64	@ 0x40
 8012d56:	4604      	mov	r4, r0
 8012d58:	a806      	add	r0, sp, #24
 8012d5a:	f7ff fefd 	bl	8012b58 <rcl_action_get_zero_initialized_cancel_response>
 8012d5e:	2300      	movs	r3, #0
 8012d60:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012d64:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012d68:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012d6c:	f88d 3018 	strb.w	r3, [sp, #24]
 8012d70:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012d74:	f8cd d01c 	str.w	sp, [sp, #28]
 8012d78:	46ec      	mov	ip, sp
 8012d7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d7e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012da0 <rclc_action_server_goal_cancel_accept+0x50>
 8012d82:	6860      	ldr	r0, [r4, #4]
 8012d84:	aa06      	add	r2, sp, #24
 8012d86:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012d8a:	3010      	adds	r0, #16
 8012d8c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012d90:	f7ff fdd2 	bl	8012938 <rcl_action_send_cancel_response>
 8012d94:	b010      	add	sp, #64	@ 0x40
 8012d96:	bd10      	pop	{r4, pc}
 8012d98:	200b      	movs	r0, #11
 8012d9a:	4770      	bx	lr
 8012d9c:	f3af 8000 	nop.w
 8012da0:	00000001 	.word	0x00000001
 8012da4:	00000001 	.word	0x00000001

08012da8 <rclc_action_server_goal_cancel_reject>:
 8012da8:	b082      	sub	sp, #8
 8012daa:	b530      	push	{r4, r5, lr}
 8012dac:	b08b      	sub	sp, #44	@ 0x2c
 8012dae:	ac0e      	add	r4, sp, #56	@ 0x38
 8012db0:	e884 000c 	stmia.w	r4, {r2, r3}
 8012db4:	b188      	cbz	r0, 8012dda <rclc_action_server_goal_cancel_reject+0x32>
 8012db6:	4604      	mov	r4, r0
 8012db8:	a801      	add	r0, sp, #4
 8012dba:	460d      	mov	r5, r1
 8012dbc:	f7ff fecc 	bl	8012b58 <rcl_action_get_zero_initialized_cancel_response>
 8012dc0:	aa01      	add	r2, sp, #4
 8012dc2:	a90e      	add	r1, sp, #56	@ 0x38
 8012dc4:	f104 0010 	add.w	r0, r4, #16
 8012dc8:	f88d 5004 	strb.w	r5, [sp, #4]
 8012dcc:	f7ff fdb4 	bl	8012938 <rcl_action_send_cancel_response>
 8012dd0:	b00b      	add	sp, #44	@ 0x2c
 8012dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012dd6:	b002      	add	sp, #8
 8012dd8:	4770      	bx	lr
 8012dda:	200b      	movs	r0, #11
 8012ddc:	b00b      	add	sp, #44	@ 0x2c
 8012dde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012de2:	b002      	add	sp, #8
 8012de4:	4770      	bx	lr
 8012de6:	bf00      	nop

08012de8 <rmw_get_zero_initialized_context>:
 8012de8:	b510      	push	{r4, lr}
 8012dea:	4604      	mov	r4, r0
 8012dec:	3010      	adds	r0, #16
 8012dee:	f7f7 fc3b 	bl	800a668 <rmw_get_zero_initialized_init_options>
 8012df2:	2300      	movs	r3, #0
 8012df4:	2000      	movs	r0, #0
 8012df6:	2100      	movs	r1, #0
 8012df8:	e9c4 0100 	strd	r0, r1, [r4]
 8012dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012e00:	60a3      	str	r3, [r4, #8]
 8012e02:	4620      	mov	r0, r4
 8012e04:	bd10      	pop	{r4, pc}
 8012e06:	bf00      	nop

08012e08 <rmw_time_equal>:
 8012e08:	b4f0      	push	{r4, r5, r6, r7}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	ac04      	add	r4, sp, #16
 8012e0e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012e12:	4603      	mov	r3, r0
 8012e14:	4924      	ldr	r1, [pc, #144]	@ (8012ea8 <rmw_time_equal+0xa0>)
 8012e16:	9e03      	ldr	r6, [sp, #12]
 8012e18:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012e1c:	2202      	movs	r2, #2
 8012e1e:	4299      	cmp	r1, r3
 8012e20:	41aa      	sbcs	r2, r5
 8012e22:	d330      	bcc.n	8012e86 <rmw_time_equal+0x7e>
 8012e24:	4c21      	ldr	r4, [pc, #132]	@ (8012eac <rmw_time_equal+0xa4>)
 8012e26:	fba3 3204 	umull	r3, r2, r3, r4
 8012e2a:	fb04 2205 	mla	r2, r4, r5, r2
 8012e2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e32:	43dd      	mvns	r5, r3
 8012e34:	1a8c      	subs	r4, r1, r2
 8012e36:	4285      	cmp	r5, r0
 8012e38:	41b4      	sbcs	r4, r6
 8012e3a:	d332      	bcc.n	8012ea2 <rmw_time_equal+0x9a>
 8012e3c:	eb10 0c03 	adds.w	ip, r0, r3
 8012e40:	eb42 0106 	adc.w	r1, r2, r6
 8012e44:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012e48:	4817      	ldr	r0, [pc, #92]	@ (8012ea8 <rmw_time_equal+0xa0>)
 8012e4a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012e4c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012e4e:	2202      	movs	r2, #2
 8012e50:	4298      	cmp	r0, r3
 8012e52:	41b2      	sbcs	r2, r6
 8012e54:	d31c      	bcc.n	8012e90 <rmw_time_equal+0x88>
 8012e56:	4c15      	ldr	r4, [pc, #84]	@ (8012eac <rmw_time_equal+0xa4>)
 8012e58:	fba3 3204 	umull	r3, r2, r3, r4
 8012e5c:	fb04 2206 	mla	r2, r4, r6, r2
 8012e60:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012e64:	43de      	mvns	r6, r3
 8012e66:	1a84      	subs	r4, r0, r2
 8012e68:	42ae      	cmp	r6, r5
 8012e6a:	41bc      	sbcs	r4, r7
 8012e6c:	d315      	bcc.n	8012e9a <rmw_time_equal+0x92>
 8012e6e:	195b      	adds	r3, r3, r5
 8012e70:	eb42 0207 	adc.w	r2, r2, r7
 8012e74:	428a      	cmp	r2, r1
 8012e76:	bf08      	it	eq
 8012e78:	4563      	cmpeq	r3, ip
 8012e7a:	bf0c      	ite	eq
 8012e7c:	2001      	moveq	r0, #1
 8012e7e:	2000      	movne	r0, #0
 8012e80:	b004      	add	sp, #16
 8012e82:	bcf0      	pop	{r4, r5, r6, r7}
 8012e84:	4770      	bx	lr
 8012e86:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012e8a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e8e:	e7d9      	b.n	8012e44 <rmw_time_equal+0x3c>
 8012e90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012e94:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012e98:	e7ec      	b.n	8012e74 <rmw_time_equal+0x6c>
 8012e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	e7e8      	b.n	8012e74 <rmw_time_equal+0x6c>
 8012ea2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012ea6:	e7cd      	b.n	8012e44 <rmw_time_equal+0x3c>
 8012ea8:	25c17d04 	.word	0x25c17d04
 8012eac:	3b9aca00 	.word	0x3b9aca00

08012eb0 <rmw_time_total_nsec>:
 8012eb0:	b470      	push	{r4, r5, r6}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	ac04      	add	r4, sp, #16
 8012eb6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012eba:	4603      	mov	r3, r0
 8012ebc:	4912      	ldr	r1, [pc, #72]	@ (8012f08 <rmw_time_total_nsec+0x58>)
 8012ebe:	9e03      	ldr	r6, [sp, #12]
 8012ec0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012ec4:	2202      	movs	r2, #2
 8012ec6:	4299      	cmp	r1, r3
 8012ec8:	41aa      	sbcs	r2, r5
 8012eca:	d311      	bcc.n	8012ef0 <rmw_time_total_nsec+0x40>
 8012ecc:	4c0f      	ldr	r4, [pc, #60]	@ (8012f0c <rmw_time_total_nsec+0x5c>)
 8012ece:	fba3 3204 	umull	r3, r2, r3, r4
 8012ed2:	fb04 2205 	mla	r2, r4, r5, r2
 8012ed6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012eda:	43dd      	mvns	r5, r3
 8012edc:	1a8c      	subs	r4, r1, r2
 8012ede:	4285      	cmp	r5, r0
 8012ee0:	41b4      	sbcs	r4, r6
 8012ee2:	d30c      	bcc.n	8012efe <rmw_time_total_nsec+0x4e>
 8012ee4:	1818      	adds	r0, r3, r0
 8012ee6:	eb42 0106 	adc.w	r1, r2, r6
 8012eea:	b005      	add	sp, #20
 8012eec:	bc70      	pop	{r4, r5, r6}
 8012eee:	4770      	bx	lr
 8012ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ef4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012ef8:	b005      	add	sp, #20
 8012efa:	bc70      	pop	{r4, r5, r6}
 8012efc:	4770      	bx	lr
 8012efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f02:	b005      	add	sp, #20
 8012f04:	bc70      	pop	{r4, r5, r6}
 8012f06:	4770      	bx	lr
 8012f08:	25c17d04 	.word	0x25c17d04
 8012f0c:	3b9aca00 	.word	0x3b9aca00

08012f10 <rmw_get_zero_initialized_message_info>:
 8012f10:	b510      	push	{r4, lr}
 8012f12:	2240      	movs	r2, #64	@ 0x40
 8012f14:	4604      	mov	r4, r0
 8012f16:	2100      	movs	r1, #0
 8012f18:	f001 ffde 	bl	8014ed8 <memset>
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	bd10      	pop	{r4, pc}

08012f20 <on_status>:
 8012f20:	b082      	sub	sp, #8
 8012f22:	b002      	add	sp, #8
 8012f24:	4770      	bx	lr
 8012f26:	bf00      	nop

08012f28 <on_topic>:
 8012f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f2c:	4a22      	ldr	r2, [pc, #136]	@ (8012fb8 <on_topic+0x90>)
 8012f2e:	b094      	sub	sp, #80	@ 0x50
 8012f30:	6812      	ldr	r2, [r2, #0]
 8012f32:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8012f34:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012f38:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8012f3c:	b3c2      	cbz	r2, 8012fb0 <on_topic+0x88>
 8012f3e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8012f42:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8012f46:	e001      	b.n	8012f4c <on_topic+0x24>
 8012f48:	6852      	ldr	r2, [r2, #4]
 8012f4a:	b38a      	cbz	r2, 8012fb0 <on_topic+0x88>
 8012f4c:	6894      	ldr	r4, [r2, #8]
 8012f4e:	8aa3      	ldrh	r3, [r4, #20]
 8012f50:	428b      	cmp	r3, r1
 8012f52:	d1f9      	bne.n	8012f48 <on_topic+0x20>
 8012f54:	7da3      	ldrb	r3, [r4, #22]
 8012f56:	4283      	cmp	r3, r0
 8012f58:	d1f6      	bne.n	8012f48 <on_topic+0x20>
 8012f5a:	2248      	movs	r2, #72	@ 0x48
 8012f5c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012f60:	4668      	mov	r0, sp
 8012f62:	f002 f882 	bl	801506a <memcpy>
 8012f66:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8012f6a:	cb0c      	ldmia	r3, {r2, r3}
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7f8 fe21 	bl	800bbb4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012f72:	4607      	mov	r7, r0
 8012f74:	b1e0      	cbz	r0, 8012fb0 <on_topic+0x88>
 8012f76:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8012f7a:	4632      	mov	r2, r6
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f108 0110 	add.w	r1, r8, #16
 8012f82:	f000 fc9f 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 8012f86:	b930      	cbnz	r0, 8012f96 <on_topic+0x6e>
 8012f88:	480c      	ldr	r0, [pc, #48]	@ (8012fbc <on_topic+0x94>)
 8012f8a:	4639      	mov	r1, r7
 8012f8c:	b014      	add	sp, #80	@ 0x50
 8012f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f92:	f000 b8bd 	b.w	8013110 <put_memory>
 8012f96:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8012f9a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8012f9e:	f7f8 fc07 	bl	800b7b0 <rmw_uros_epoch_nanos>
 8012fa2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8012fa6:	2305      	movs	r3, #5
 8012fa8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012fac:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8012fb0:	b014      	add	sp, #80	@ 0x50
 8012fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb6:	bf00      	nop
 8012fb8:	2000acb4 	.word	0x2000acb4
 8012fbc:	2000aca4 	.word	0x2000aca4

08012fc0 <on_request>:
 8012fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc4:	4823      	ldr	r0, [pc, #140]	@ (8013054 <on_request+0x94>)
 8012fc6:	b094      	sub	sp, #80	@ 0x50
 8012fc8:	6800      	ldr	r0, [r0, #0]
 8012fca:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012fcc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012fd0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d03b      	beq.n	801304e <on_request+0x8e>
 8012fd6:	461d      	mov	r5, r3
 8012fd8:	e001      	b.n	8012fde <on_request+0x1e>
 8012fda:	6840      	ldr	r0, [r0, #4]
 8012fdc:	b3b8      	cbz	r0, 801304e <on_request+0x8e>
 8012fde:	6884      	ldr	r4, [r0, #8]
 8012fe0:	8b21      	ldrh	r1, [r4, #24]
 8012fe2:	4291      	cmp	r1, r2
 8012fe4:	d1f9      	bne.n	8012fda <on_request+0x1a>
 8012fe6:	2248      	movs	r2, #72	@ 0x48
 8012fe8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012fec:	4668      	mov	r0, sp
 8012fee:	f002 f83c 	bl	801506a <memcpy>
 8012ff2:	f104 0320 	add.w	r3, r4, #32
 8012ff6:	cb0c      	ldmia	r3, {r2, r3}
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	f7f8 fddb 	bl	800bbb4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012ffe:	4680      	mov	r8, r0
 8013000:	b328      	cbz	r0, 801304e <on_request+0x8e>
 8013002:	4638      	mov	r0, r7
 8013004:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013008:	4632      	mov	r2, r6
 801300a:	f107 0110 	add.w	r1, r7, #16
 801300e:	f000 fc59 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 8013012:	b930      	cbnz	r0, 8013022 <on_request+0x62>
 8013014:	4810      	ldr	r0, [pc, #64]	@ (8013058 <on_request+0x98>)
 8013016:	4641      	mov	r1, r8
 8013018:	b014      	add	sp, #80	@ 0x50
 801301a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801301e:	f000 b877 	b.w	8013110 <put_memory>
 8013022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013024:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8013028:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801302c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013030:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013034:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013038:	e88c 0003 	stmia.w	ip, {r0, r1}
 801303c:	f7f8 fbb8 	bl	800b7b0 <rmw_uros_epoch_nanos>
 8013040:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8013044:	2303      	movs	r3, #3
 8013046:	e942 0102 	strd	r0, r1, [r2, #-8]
 801304a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801304e:	b014      	add	sp, #80	@ 0x50
 8013050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013054:	2000ac84 	.word	0x2000ac84
 8013058:	2000aca4 	.word	0x2000aca4

0801305c <on_reply>:
 801305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013060:	4821      	ldr	r0, [pc, #132]	@ (80130e8 <on_reply+0x8c>)
 8013062:	b094      	sub	sp, #80	@ 0x50
 8013064:	6800      	ldr	r0, [r0, #0]
 8013066:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013068:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801306c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801306e:	b3b8      	cbz	r0, 80130e0 <on_reply+0x84>
 8013070:	461d      	mov	r5, r3
 8013072:	e001      	b.n	8013078 <on_reply+0x1c>
 8013074:	6840      	ldr	r0, [r0, #4]
 8013076:	b398      	cbz	r0, 80130e0 <on_reply+0x84>
 8013078:	6884      	ldr	r4, [r0, #8]
 801307a:	8b21      	ldrh	r1, [r4, #24]
 801307c:	4291      	cmp	r1, r2
 801307e:	d1f9      	bne.n	8013074 <on_reply+0x18>
 8013080:	2248      	movs	r2, #72	@ 0x48
 8013082:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013086:	4668      	mov	r0, sp
 8013088:	f001 ffef 	bl	801506a <memcpy>
 801308c:	f104 0320 	add.w	r3, r4, #32
 8013090:	cb0c      	ldmia	r3, {r2, r3}
 8013092:	4620      	mov	r0, r4
 8013094:	f7f8 fd8e 	bl	800bbb4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013098:	4680      	mov	r8, r0
 801309a:	b308      	cbz	r0, 80130e0 <on_reply+0x84>
 801309c:	4638      	mov	r0, r7
 801309e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80130a2:	4632      	mov	r2, r6
 80130a4:	f107 0110 	add.w	r1, r7, #16
 80130a8:	f000 fc0c 	bl	80138c4 <ucdr_deserialize_array_uint8_t>
 80130ac:	b930      	cbnz	r0, 80130bc <on_reply+0x60>
 80130ae:	480f      	ldr	r0, [pc, #60]	@ (80130ec <on_reply+0x90>)
 80130b0:	4641      	mov	r1, r8
 80130b2:	b014      	add	sp, #80	@ 0x50
 80130b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130b8:	f000 b82a 	b.w	8013110 <put_memory>
 80130bc:	2200      	movs	r2, #0
 80130be:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80130c2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80130c6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80130ca:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80130ce:	f7f8 fb6f 	bl	800b7b0 <rmw_uros_epoch_nanos>
 80130d2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80130d6:	2304      	movs	r3, #4
 80130d8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80130dc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80130e0:	b014      	add	sp, #80	@ 0x50
 80130e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e6:	bf00      	nop
 80130e8:	20006398 	.word	0x20006398
 80130ec:	2000aca4 	.word	0x2000aca4

080130f0 <get_memory>:
 80130f0:	4603      	mov	r3, r0
 80130f2:	6840      	ldr	r0, [r0, #4]
 80130f4:	b158      	cbz	r0, 801310e <get_memory+0x1e>
 80130f6:	6842      	ldr	r2, [r0, #4]
 80130f8:	605a      	str	r2, [r3, #4]
 80130fa:	b10a      	cbz	r2, 8013100 <get_memory+0x10>
 80130fc:	2100      	movs	r1, #0
 80130fe:	6011      	str	r1, [r2, #0]
 8013100:	681a      	ldr	r2, [r3, #0]
 8013102:	6042      	str	r2, [r0, #4]
 8013104:	b102      	cbz	r2, 8013108 <get_memory+0x18>
 8013106:	6010      	str	r0, [r2, #0]
 8013108:	2200      	movs	r2, #0
 801310a:	6002      	str	r2, [r0, #0]
 801310c:	6018      	str	r0, [r3, #0]
 801310e:	4770      	bx	lr

08013110 <put_memory>:
 8013110:	680b      	ldr	r3, [r1, #0]
 8013112:	b10b      	cbz	r3, 8013118 <put_memory+0x8>
 8013114:	684a      	ldr	r2, [r1, #4]
 8013116:	605a      	str	r2, [r3, #4]
 8013118:	684a      	ldr	r2, [r1, #4]
 801311a:	b102      	cbz	r2, 801311e <put_memory+0xe>
 801311c:	6013      	str	r3, [r2, #0]
 801311e:	6803      	ldr	r3, [r0, #0]
 8013120:	428b      	cmp	r3, r1
 8013122:	6843      	ldr	r3, [r0, #4]
 8013124:	bf08      	it	eq
 8013126:	6002      	streq	r2, [r0, #0]
 8013128:	604b      	str	r3, [r1, #4]
 801312a:	b103      	cbz	r3, 801312e <put_memory+0x1e>
 801312c:	6019      	str	r1, [r3, #0]
 801312e:	2300      	movs	r3, #0
 8013130:	600b      	str	r3, [r1, #0]
 8013132:	6041      	str	r1, [r0, #4]
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop

08013138 <rmw_create_guard_condition>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	4605      	mov	r5, r0
 801313c:	4807      	ldr	r0, [pc, #28]	@ (801315c <rmw_create_guard_condition+0x24>)
 801313e:	f7ff ffd7 	bl	80130f0 <get_memory>
 8013142:	b148      	cbz	r0, 8013158 <rmw_create_guard_condition+0x20>
 8013144:	6884      	ldr	r4, [r0, #8]
 8013146:	2300      	movs	r3, #0
 8013148:	7423      	strb	r3, [r4, #16]
 801314a:	61e5      	str	r5, [r4, #28]
 801314c:	f7f7 fd2c 	bl	800aba8 <rmw_get_implementation_identifier>
 8013150:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013154:	f104 0014 	add.w	r0, r4, #20
 8013158:	bd38      	pop	{r3, r4, r5, pc}
 801315a:	bf00      	nop
 801315c:	2000ac44 	.word	0x2000ac44

08013160 <rmw_destroy_guard_condition>:
 8013160:	b508      	push	{r3, lr}
 8013162:	4b08      	ldr	r3, [pc, #32]	@ (8013184 <rmw_destroy_guard_condition+0x24>)
 8013164:	6819      	ldr	r1, [r3, #0]
 8013166:	b911      	cbnz	r1, 801316e <rmw_destroy_guard_condition+0xe>
 8013168:	e00a      	b.n	8013180 <rmw_destroy_guard_condition+0x20>
 801316a:	6849      	ldr	r1, [r1, #4]
 801316c:	b141      	cbz	r1, 8013180 <rmw_destroy_guard_condition+0x20>
 801316e:	688b      	ldr	r3, [r1, #8]
 8013170:	3314      	adds	r3, #20
 8013172:	4298      	cmp	r0, r3
 8013174:	d1f9      	bne.n	801316a <rmw_destroy_guard_condition+0xa>
 8013176:	4803      	ldr	r0, [pc, #12]	@ (8013184 <rmw_destroy_guard_condition+0x24>)
 8013178:	f7ff ffca 	bl	8013110 <put_memory>
 801317c:	2000      	movs	r0, #0
 801317e:	bd08      	pop	{r3, pc}
 8013180:	2001      	movs	r0, #1
 8013182:	bd08      	pop	{r3, pc}
 8013184:	2000ac44 	.word	0x2000ac44

08013188 <destroy_topic>:
 8013188:	b538      	push	{r3, r4, r5, lr}
 801318a:	6985      	ldr	r5, [r0, #24]
 801318c:	b1d5      	cbz	r5, 80131c4 <destroy_topic+0x3c>
 801318e:	4604      	mov	r4, r0
 8013190:	6928      	ldr	r0, [r5, #16]
 8013192:	6922      	ldr	r2, [r4, #16]
 8013194:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013198:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801319c:	6819      	ldr	r1, [r3, #0]
 801319e:	f7fa f8bb 	bl	800d318 <uxr_buffer_delete_entity>
 80131a2:	4602      	mov	r2, r0
 80131a4:	6928      	ldr	r0, [r5, #16]
 80131a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80131aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80131ae:	f7f8 fdf5 	bl	800bd9c <run_xrce_session>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	4620      	mov	r0, r4
 80131b6:	bf14      	ite	ne
 80131b8:	2400      	movne	r4, #0
 80131ba:	2402      	moveq	r4, #2
 80131bc:	f7f8 fcee 	bl	800bb9c <rmw_uxrce_fini_topic_memory>
 80131c0:	4620      	mov	r0, r4
 80131c2:	bd38      	pop	{r3, r4, r5, pc}
 80131c4:	2401      	movs	r4, #1
 80131c6:	4620      	mov	r0, r4
 80131c8:	bd38      	pop	{r3, r4, r5, pc}
 80131ca:	bf00      	nop

080131cc <rmw_take_with_info>:
 80131cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ce:	4604      	mov	r4, r0
 80131d0:	6800      	ldr	r0, [r0, #0]
 80131d2:	b089      	sub	sp, #36	@ 0x24
 80131d4:	460f      	mov	r7, r1
 80131d6:	4615      	mov	r5, r2
 80131d8:	b128      	cbz	r0, 80131e6 <rmw_take_with_info+0x1a>
 80131da:	4b24      	ldr	r3, [pc, #144]	@ (801326c <rmw_take_with_info+0xa0>)
 80131dc:	6819      	ldr	r1, [r3, #0]
 80131de:	f7ed f81f 	bl	8000220 <strcmp>
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d13e      	bne.n	8013264 <rmw_take_with_info+0x98>
 80131e6:	b305      	cbz	r5, 801322a <rmw_take_with_info+0x5e>
 80131e8:	6864      	ldr	r4, [r4, #4]
 80131ea:	2300      	movs	r3, #0
 80131ec:	702b      	strb	r3, [r5, #0]
 80131ee:	f7f8 fd57 	bl	800bca0 <rmw_uxrce_clean_expired_static_input_buffer>
 80131f2:	4620      	mov	r0, r4
 80131f4:	f7f8 fd2e 	bl	800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>
 80131f8:	4606      	mov	r6, r0
 80131fa:	b1f0      	cbz	r0, 801323a <rmw_take_with_info+0x6e>
 80131fc:	6881      	ldr	r1, [r0, #8]
 80131fe:	4668      	mov	r0, sp
 8013200:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013204:	3110      	adds	r1, #16
 8013206:	f7f9 ffbf 	bl	800d188 <ucdr_init_buffer>
 801320a:	69a3      	ldr	r3, [r4, #24]
 801320c:	4639      	mov	r1, r7
 801320e:	68db      	ldr	r3, [r3, #12]
 8013210:	4668      	mov	r0, sp
 8013212:	4798      	blx	r3
 8013214:	4631      	mov	r1, r6
 8013216:	4604      	mov	r4, r0
 8013218:	4815      	ldr	r0, [pc, #84]	@ (8013270 <rmw_take_with_info+0xa4>)
 801321a:	f7ff ff79 	bl	8013110 <put_memory>
 801321e:	702c      	strb	r4, [r5, #0]
 8013220:	f084 0001 	eor.w	r0, r4, #1
 8013224:	b2c0      	uxtb	r0, r0
 8013226:	b009      	add	sp, #36	@ 0x24
 8013228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801322a:	6864      	ldr	r4, [r4, #4]
 801322c:	f7f8 fd38 	bl	800bca0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013230:	4620      	mov	r0, r4
 8013232:	f7f8 fd0f 	bl	800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013236:	4605      	mov	r5, r0
 8013238:	b910      	cbnz	r0, 8013240 <rmw_take_with_info+0x74>
 801323a:	2001      	movs	r0, #1
 801323c:	b009      	add	sp, #36	@ 0x24
 801323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013240:	68a9      	ldr	r1, [r5, #8]
 8013242:	4668      	mov	r0, sp
 8013244:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013248:	3110      	adds	r1, #16
 801324a:	f7f9 ff9d 	bl	800d188 <ucdr_init_buffer>
 801324e:	69a3      	ldr	r3, [r4, #24]
 8013250:	4639      	mov	r1, r7
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	4668      	mov	r0, sp
 8013256:	4798      	blx	r3
 8013258:	4629      	mov	r1, r5
 801325a:	4604      	mov	r4, r0
 801325c:	4804      	ldr	r0, [pc, #16]	@ (8013270 <rmw_take_with_info+0xa4>)
 801325e:	f7ff ff57 	bl	8013110 <put_memory>
 8013262:	e7dd      	b.n	8013220 <rmw_take_with_info+0x54>
 8013264:	200c      	movs	r0, #12
 8013266:	b009      	add	sp, #36	@ 0x24
 8013268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801326a:	bf00      	nop
 801326c:	08016ad4 	.word	0x08016ad4
 8013270:	2000aca4 	.word	0x2000aca4

08013274 <rmw_trigger_guard_condition>:
 8013274:	b160      	cbz	r0, 8013290 <rmw_trigger_guard_condition+0x1c>
 8013276:	b510      	push	{r4, lr}
 8013278:	4604      	mov	r4, r0
 801327a:	6800      	ldr	r0, [r0, #0]
 801327c:	f7f8 fe5e 	bl	800bf3c <is_uxrce_rmw_identifier_valid>
 8013280:	b908      	cbnz	r0, 8013286 <rmw_trigger_guard_condition+0x12>
 8013282:	2001      	movs	r0, #1
 8013284:	bd10      	pop	{r4, pc}
 8013286:	6863      	ldr	r3, [r4, #4]
 8013288:	2201      	movs	r2, #1
 801328a:	741a      	strb	r2, [r3, #16]
 801328c:	2000      	movs	r0, #0
 801328e:	bd10      	pop	{r4, pc}
 8013290:	2001      	movs	r0, #1
 8013292:	4770      	bx	lr

08013294 <rmw_wait>:
 8013294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013298:	b089      	sub	sp, #36	@ 0x24
 801329a:	4605      	mov	r5, r0
 801329c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801329e:	460e      	mov	r6, r1
 80132a0:	4698      	mov	r8, r3
 80132a2:	4691      	mov	r9, r2
 80132a4:	2a00      	cmp	r2, #0
 80132a6:	f000 810a 	beq.w	80134be <rmw_wait+0x22a>
 80132aa:	b16c      	cbz	r4, 80132c8 <rmw_wait+0x34>
 80132ac:	4bae      	ldr	r3, [pc, #696]	@ (8013568 <rmw_wait+0x2d4>)
 80132ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80132b0:	af04      	add	r7, sp, #16
 80132b2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80132b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80132ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80132be:	f7ff fda3 	bl	8012e08 <rmw_time_equal>
 80132c2:	2800      	cmp	r0, #0
 80132c4:	f000 8127 	beq.w	8013516 <rmw_wait+0x282>
 80132c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80132cc:	f7f8 fce8 	bl	800bca0 <rmw_uxrce_clean_expired_static_input_buffer>
 80132d0:	4ba6      	ldr	r3, [pc, #664]	@ (801356c <rmw_wait+0x2d8>)
 80132d2:	681c      	ldr	r4, [r3, #0]
 80132d4:	b14c      	cbz	r4, 80132ea <rmw_wait+0x56>
 80132d6:	4623      	mov	r3, r4
 80132d8:	2100      	movs	r1, #0
 80132da:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80132de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80132e2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d1f7      	bne.n	80132da <rmw_wait+0x46>
 80132ea:	f1b9 0f00 	cmp.w	r9, #0
 80132ee:	d011      	beq.n	8013314 <rmw_wait+0x80>
 80132f0:	f8d9 1000 	ldr.w	r1, [r9]
 80132f4:	b171      	cbz	r1, 8013314 <rmw_wait+0x80>
 80132f6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80132fa:	2300      	movs	r3, #0
 80132fc:	2001      	movs	r0, #1
 80132fe:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013302:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013304:	6912      	ldr	r2, [r2, #16]
 8013306:	3301      	adds	r3, #1
 8013308:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801330c:	4299      	cmp	r1, r3
 801330e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013312:	d1f4      	bne.n	80132fe <rmw_wait+0x6a>
 8013314:	f1b8 0f00 	cmp.w	r8, #0
 8013318:	d011      	beq.n	801333e <rmw_wait+0xaa>
 801331a:	f8d8 1000 	ldr.w	r1, [r8]
 801331e:	b171      	cbz	r1, 801333e <rmw_wait+0xaa>
 8013320:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013324:	2300      	movs	r3, #0
 8013326:	2001      	movs	r0, #1
 8013328:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801332c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801332e:	6912      	ldr	r2, [r2, #16]
 8013330:	3301      	adds	r3, #1
 8013332:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013336:	4299      	cmp	r1, r3
 8013338:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801333c:	d1f4      	bne.n	8013328 <rmw_wait+0x94>
 801333e:	b185      	cbz	r5, 8013362 <rmw_wait+0xce>
 8013340:	6829      	ldr	r1, [r5, #0]
 8013342:	b171      	cbz	r1, 8013362 <rmw_wait+0xce>
 8013344:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013348:	2300      	movs	r3, #0
 801334a:	2001      	movs	r0, #1
 801334c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013350:	6a12      	ldr	r2, [r2, #32]
 8013352:	6912      	ldr	r2, [r2, #16]
 8013354:	3301      	adds	r3, #1
 8013356:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801335a:	4299      	cmp	r1, r3
 801335c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013360:	d1f4      	bne.n	801334c <rmw_wait+0xb8>
 8013362:	b34c      	cbz	r4, 80133b8 <rmw_wait+0x124>
 8013364:	4622      	mov	r2, r4
 8013366:	2300      	movs	r3, #0
 8013368:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801336c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013370:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013374:	440b      	add	r3, r1
 8013376:	b2db      	uxtb	r3, r3
 8013378:	2a00      	cmp	r2, #0
 801337a:	d1f5      	bne.n	8013368 <rmw_wait+0xd4>
 801337c:	2b00      	cmp	r3, #0
 801337e:	f000 8084 	beq.w	801348a <rmw_wait+0x1f6>
 8013382:	1c7a      	adds	r2, r7, #1
 8013384:	d00d      	beq.n	80133a2 <rmw_wait+0x10e>
 8013386:	ee07 7a90 	vmov	s15, r7
 801338a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801338e:	ee07 3a90 	vmov	s15, r3
 8013392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801339a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801339e:	ee17 7a90 	vmov	r7, s15
 80133a2:	68a0      	ldr	r0, [r4, #8]
 80133a4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80133a8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f040 8090 	bne.w	80134d2 <rmw_wait+0x23e>
 80133b2:	6864      	ldr	r4, [r4, #4]
 80133b4:	2c00      	cmp	r4, #0
 80133b6:	d1f4      	bne.n	80133a2 <rmw_wait+0x10e>
 80133b8:	f1b9 0f00 	cmp.w	r9, #0
 80133bc:	f000 80bc 	beq.w	8013538 <rmw_wait+0x2a4>
 80133c0:	f8d9 7000 	ldr.w	r7, [r9]
 80133c4:	2f00      	cmp	r7, #0
 80133c6:	f000 808e 	beq.w	80134e6 <rmw_wait+0x252>
 80133ca:	2400      	movs	r4, #0
 80133cc:	4627      	mov	r7, r4
 80133ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80133d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80133d6:	f7f8 fc3d 	bl	800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>
 80133da:	2800      	cmp	r0, #0
 80133dc:	d05f      	beq.n	801349e <rmw_wait+0x20a>
 80133de:	f8d9 3000 	ldr.w	r3, [r9]
 80133e2:	3401      	adds	r4, #1
 80133e4:	42a3      	cmp	r3, r4
 80133e6:	f04f 0701 	mov.w	r7, #1
 80133ea:	d8f0      	bhi.n	80133ce <rmw_wait+0x13a>
 80133ec:	f1b8 0f00 	cmp.w	r8, #0
 80133f0:	d012      	beq.n	8013418 <rmw_wait+0x184>
 80133f2:	f8d8 3000 	ldr.w	r3, [r8]
 80133f6:	b17b      	cbz	r3, 8013418 <rmw_wait+0x184>
 80133f8:	2400      	movs	r4, #0
 80133fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80133fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013402:	f7f8 fc27 	bl	800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013406:	2800      	cmp	r0, #0
 8013408:	d051      	beq.n	80134ae <rmw_wait+0x21a>
 801340a:	f8d8 3000 	ldr.w	r3, [r8]
 801340e:	3401      	adds	r4, #1
 8013410:	42a3      	cmp	r3, r4
 8013412:	f04f 0701 	mov.w	r7, #1
 8013416:	d8f0      	bhi.n	80133fa <rmw_wait+0x166>
 8013418:	b1dd      	cbz	r5, 8013452 <rmw_wait+0x1be>
 801341a:	682b      	ldr	r3, [r5, #0]
 801341c:	b1cb      	cbz	r3, 8013452 <rmw_wait+0x1be>
 801341e:	2400      	movs	r4, #0
 8013420:	686b      	ldr	r3, [r5, #4]
 8013422:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013426:	f7f8 fc15 	bl	800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>
 801342a:	b158      	cbz	r0, 8013444 <rmw_wait+0x1b0>
 801342c:	682b      	ldr	r3, [r5, #0]
 801342e:	3401      	adds	r4, #1
 8013430:	42a3      	cmp	r3, r4
 8013432:	d969      	bls.n	8013508 <rmw_wait+0x274>
 8013434:	686b      	ldr	r3, [r5, #4]
 8013436:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801343a:	2701      	movs	r7, #1
 801343c:	f7f8 fc0a 	bl	800bc54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013440:	2800      	cmp	r0, #0
 8013442:	d1f3      	bne.n	801342c <rmw_wait+0x198>
 8013444:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013448:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801344c:	3401      	adds	r4, #1
 801344e:	42a3      	cmp	r3, r4
 8013450:	d8e6      	bhi.n	8013420 <rmw_wait+0x18c>
 8013452:	b1a6      	cbz	r6, 801347e <rmw_wait+0x1ea>
 8013454:	6834      	ldr	r4, [r6, #0]
 8013456:	b194      	cbz	r4, 801347e <rmw_wait+0x1ea>
 8013458:	2300      	movs	r3, #0
 801345a:	461d      	mov	r5, r3
 801345c:	e004      	b.n	8013468 <rmw_wait+0x1d4>
 801345e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013462:	3301      	adds	r3, #1
 8013464:	42a3      	cmp	r3, r4
 8013466:	d00a      	beq.n	801347e <rmw_wait+0x1ea>
 8013468:	6870      	ldr	r0, [r6, #4]
 801346a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801346e:	7c0a      	ldrb	r2, [r1, #16]
 8013470:	2a00      	cmp	r2, #0
 8013472:	d0f4      	beq.n	801345e <rmw_wait+0x1ca>
 8013474:	3301      	adds	r3, #1
 8013476:	42a3      	cmp	r3, r4
 8013478:	740d      	strb	r5, [r1, #16]
 801347a:	4617      	mov	r7, r2
 801347c:	d1f4      	bne.n	8013468 <rmw_wait+0x1d4>
 801347e:	2f00      	cmp	r7, #0
 8013480:	d03e      	beq.n	8013500 <rmw_wait+0x26c>
 8013482:	2000      	movs	r0, #0
 8013484:	b009      	add	sp, #36	@ 0x24
 8013486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801348a:	68a0      	ldr	r0, [r4, #8]
 801348c:	2100      	movs	r1, #0
 801348e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013492:	f7fa febf 	bl	800e214 <uxr_run_session_timeout>
 8013496:	6864      	ldr	r4, [r4, #4]
 8013498:	2c00      	cmp	r4, #0
 801349a:	d1f6      	bne.n	801348a <rmw_wait+0x1f6>
 801349c:	e78c      	b.n	80133b8 <rmw_wait+0x124>
 801349e:	e9d9 3200 	ldrd	r3, r2, [r9]
 80134a2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80134a6:	3401      	adds	r4, #1
 80134a8:	42a3      	cmp	r3, r4
 80134aa:	d890      	bhi.n	80133ce <rmw_wait+0x13a>
 80134ac:	e79e      	b.n	80133ec <rmw_wait+0x158>
 80134ae:	e9d8 3200 	ldrd	r3, r2, [r8]
 80134b2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80134b6:	3401      	adds	r4, #1
 80134b8:	429c      	cmp	r4, r3
 80134ba:	d39e      	bcc.n	80133fa <rmw_wait+0x166>
 80134bc:	e7ac      	b.n	8013418 <rmw_wait+0x184>
 80134be:	2b00      	cmp	r3, #0
 80134c0:	f47f aef3 	bne.w	80132aa <rmw_wait+0x16>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	f47f aef0 	bne.w	80132aa <rmw_wait+0x16>
 80134ca:	2900      	cmp	r1, #0
 80134cc:	f47f aeed 	bne.w	80132aa <rmw_wait+0x16>
 80134d0:	e7d7      	b.n	8013482 <rmw_wait+0x1ee>
 80134d2:	4639      	mov	r1, r7
 80134d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134d8:	f7fa feb6 	bl	800e248 <uxr_run_session_until_data>
 80134dc:	6864      	ldr	r4, [r4, #4]
 80134de:	2c00      	cmp	r4, #0
 80134e0:	f47f af5f 	bne.w	80133a2 <rmw_wait+0x10e>
 80134e4:	e768      	b.n	80133b8 <rmw_wait+0x124>
 80134e6:	f1b8 0f00 	cmp.w	r8, #0
 80134ea:	d032      	beq.n	8013552 <rmw_wait+0x2be>
 80134ec:	f8d8 3000 	ldr.w	r3, [r8]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d181      	bne.n	80133f8 <rmw_wait+0x164>
 80134f4:	461f      	mov	r7, r3
 80134f6:	2d00      	cmp	r5, #0
 80134f8:	d18f      	bne.n	801341a <rmw_wait+0x186>
 80134fa:	462f      	mov	r7, r5
 80134fc:	2e00      	cmp	r6, #0
 80134fe:	d1a9      	bne.n	8013454 <rmw_wait+0x1c0>
 8013500:	2002      	movs	r0, #2
 8013502:	b009      	add	sp, #36	@ 0x24
 8013504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013508:	2e00      	cmp	r6, #0
 801350a:	d0ba      	beq.n	8013482 <rmw_wait+0x1ee>
 801350c:	6834      	ldr	r4, [r6, #0]
 801350e:	2701      	movs	r7, #1
 8013510:	2c00      	cmp	r4, #0
 8013512:	d1a1      	bne.n	8013458 <rmw_wait+0x1c4>
 8013514:	e7b5      	b.n	8013482 <rmw_wait+0x1ee>
 8013516:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801351a:	f7ff fcc9 	bl	8012eb0 <rmw_time_total_nsec>
 801351e:	2300      	movs	r3, #0
 8013520:	4a13      	ldr	r2, [pc, #76]	@ (8013570 <rmw_wait+0x2dc>)
 8013522:	f7ec ff35 	bl	8000390 <__aeabi_uldivmod>
 8013526:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801352a:	f171 0300 	sbcs.w	r3, r1, #0
 801352e:	4607      	mov	r7, r0
 8013530:	bfa8      	it	ge
 8013532:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8013536:	e6c9      	b.n	80132cc <rmw_wait+0x38>
 8013538:	f1b8 0f00 	cmp.w	r8, #0
 801353c:	d009      	beq.n	8013552 <rmw_wait+0x2be>
 801353e:	f8d8 3000 	ldr.w	r3, [r8]
 8013542:	464f      	mov	r7, r9
 8013544:	2b00      	cmp	r3, #0
 8013546:	f47f af57 	bne.w	80133f8 <rmw_wait+0x164>
 801354a:	2d00      	cmp	r5, #0
 801354c:	f47f af65 	bne.w	801341a <rmw_wait+0x186>
 8013550:	e7d3      	b.n	80134fa <rmw_wait+0x266>
 8013552:	b17d      	cbz	r5, 8013574 <rmw_wait+0x2e0>
 8013554:	682b      	ldr	r3, [r5, #0]
 8013556:	4647      	mov	r7, r8
 8013558:	2b00      	cmp	r3, #0
 801355a:	f47f af60 	bne.w	801341e <rmw_wait+0x18a>
 801355e:	2e00      	cmp	r6, #0
 8013560:	f47f af78 	bne.w	8013454 <rmw_wait+0x1c0>
 8013564:	e7cc      	b.n	8013500 <rmw_wait+0x26c>
 8013566:	bf00      	nop
 8013568:	08015d88 	.word	0x08015d88
 801356c:	2000ac94 	.word	0x2000ac94
 8013570:	000f4240 	.word	0x000f4240
 8013574:	2e00      	cmp	r6, #0
 8013576:	d0c3      	beq.n	8013500 <rmw_wait+0x26c>
 8013578:	6834      	ldr	r4, [r6, #0]
 801357a:	462f      	mov	r7, r5
 801357c:	2c00      	cmp	r4, #0
 801357e:	f47f af6b 	bne.w	8013458 <rmw_wait+0x1c4>
 8013582:	e7bd      	b.n	8013500 <rmw_wait+0x26c>

08013584 <rmw_create_wait_set>:
 8013584:	b508      	push	{r3, lr}
 8013586:	4803      	ldr	r0, [pc, #12]	@ (8013594 <rmw_create_wait_set+0x10>)
 8013588:	f7ff fdb2 	bl	80130f0 <get_memory>
 801358c:	b108      	cbz	r0, 8013592 <rmw_create_wait_set+0xe>
 801358e:	6880      	ldr	r0, [r0, #8]
 8013590:	3010      	adds	r0, #16
 8013592:	bd08      	pop	{r3, pc}
 8013594:	2000acd4 	.word	0x2000acd4

08013598 <rmw_destroy_wait_set>:
 8013598:	b508      	push	{r3, lr}
 801359a:	4b08      	ldr	r3, [pc, #32]	@ (80135bc <rmw_destroy_wait_set+0x24>)
 801359c:	6819      	ldr	r1, [r3, #0]
 801359e:	b911      	cbnz	r1, 80135a6 <rmw_destroy_wait_set+0xe>
 80135a0:	e00a      	b.n	80135b8 <rmw_destroy_wait_set+0x20>
 80135a2:	6849      	ldr	r1, [r1, #4]
 80135a4:	b141      	cbz	r1, 80135b8 <rmw_destroy_wait_set+0x20>
 80135a6:	688b      	ldr	r3, [r1, #8]
 80135a8:	3310      	adds	r3, #16
 80135aa:	4298      	cmp	r0, r3
 80135ac:	d1f9      	bne.n	80135a2 <rmw_destroy_wait_set+0xa>
 80135ae:	4803      	ldr	r0, [pc, #12]	@ (80135bc <rmw_destroy_wait_set+0x24>)
 80135b0:	f7ff fdae 	bl	8013110 <put_memory>
 80135b4:	2000      	movs	r0, #0
 80135b6:	bd08      	pop	{r3, pc}
 80135b8:	2001      	movs	r0, #1
 80135ba:	bd08      	pop	{r3, pc}
 80135bc:	2000acd4 	.word	0x2000acd4

080135c0 <rosidl_runtime_c__String__init>:
 80135c0:	b510      	push	{r4, lr}
 80135c2:	4604      	mov	r4, r0
 80135c4:	b086      	sub	sp, #24
 80135c6:	b170      	cbz	r0, 80135e6 <rosidl_runtime_c__String__init+0x26>
 80135c8:	a801      	add	r0, sp, #4
 80135ca:	f7f6 fc6d 	bl	8009ea8 <rcutils_get_default_allocator>
 80135ce:	9b01      	ldr	r3, [sp, #4]
 80135d0:	9905      	ldr	r1, [sp, #20]
 80135d2:	2001      	movs	r0, #1
 80135d4:	4798      	blx	r3
 80135d6:	6020      	str	r0, [r4, #0]
 80135d8:	b128      	cbz	r0, 80135e6 <rosidl_runtime_c__String__init+0x26>
 80135da:	2100      	movs	r1, #0
 80135dc:	2201      	movs	r2, #1
 80135de:	7001      	strb	r1, [r0, #0]
 80135e0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80135e4:	4610      	mov	r0, r2
 80135e6:	b006      	add	sp, #24
 80135e8:	bd10      	pop	{r4, pc}
 80135ea:	bf00      	nop

080135ec <rosidl_runtime_c__String__fini>:
 80135ec:	b320      	cbz	r0, 8013638 <rosidl_runtime_c__String__fini+0x4c>
 80135ee:	b510      	push	{r4, lr}
 80135f0:	6803      	ldr	r3, [r0, #0]
 80135f2:	b086      	sub	sp, #24
 80135f4:	4604      	mov	r4, r0
 80135f6:	b173      	cbz	r3, 8013616 <rosidl_runtime_c__String__fini+0x2a>
 80135f8:	6883      	ldr	r3, [r0, #8]
 80135fa:	b1f3      	cbz	r3, 801363a <rosidl_runtime_c__String__fini+0x4e>
 80135fc:	a801      	add	r0, sp, #4
 80135fe:	f7f6 fc53 	bl	8009ea8 <rcutils_get_default_allocator>
 8013602:	9b02      	ldr	r3, [sp, #8]
 8013604:	9905      	ldr	r1, [sp, #20]
 8013606:	6820      	ldr	r0, [r4, #0]
 8013608:	4798      	blx	r3
 801360a:	2300      	movs	r3, #0
 801360c:	e9c4 3300 	strd	r3, r3, [r4]
 8013610:	60a3      	str	r3, [r4, #8]
 8013612:	b006      	add	sp, #24
 8013614:	bd10      	pop	{r4, pc}
 8013616:	6843      	ldr	r3, [r0, #4]
 8013618:	b9db      	cbnz	r3, 8013652 <rosidl_runtime_c__String__fini+0x66>
 801361a:	6883      	ldr	r3, [r0, #8]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d0f8      	beq.n	8013612 <rosidl_runtime_c__String__fini+0x26>
 8013620:	4b12      	ldr	r3, [pc, #72]	@ (801366c <rosidl_runtime_c__String__fini+0x80>)
 8013622:	4813      	ldr	r0, [pc, #76]	@ (8013670 <rosidl_runtime_c__String__fini+0x84>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	2251      	movs	r2, #81	@ 0x51
 8013628:	68db      	ldr	r3, [r3, #12]
 801362a:	2101      	movs	r1, #1
 801362c:	f001 fac0 	bl	8014bb0 <fwrite>
 8013630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013634:	f000 ff7c 	bl	8014530 <exit>
 8013638:	4770      	bx	lr
 801363a:	4b0c      	ldr	r3, [pc, #48]	@ (801366c <rosidl_runtime_c__String__fini+0x80>)
 801363c:	480d      	ldr	r0, [pc, #52]	@ (8013674 <rosidl_runtime_c__String__fini+0x88>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	224c      	movs	r2, #76	@ 0x4c
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	2101      	movs	r1, #1
 8013646:	f001 fab3 	bl	8014bb0 <fwrite>
 801364a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801364e:	f000 ff6f 	bl	8014530 <exit>
 8013652:	4b06      	ldr	r3, [pc, #24]	@ (801366c <rosidl_runtime_c__String__fini+0x80>)
 8013654:	4808      	ldr	r0, [pc, #32]	@ (8013678 <rosidl_runtime_c__String__fini+0x8c>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	224e      	movs	r2, #78	@ 0x4e
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	2101      	movs	r1, #1
 801365e:	f001 faa7 	bl	8014bb0 <fwrite>
 8013662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013666:	f000 ff63 	bl	8014530 <exit>
 801366a:	bf00      	nop
 801366c:	20000190 	.word	0x20000190
 8013670:	0801657c 	.word	0x0801657c
 8013674:	080164dc 	.word	0x080164dc
 8013678:	0801652c 	.word	0x0801652c

0801367c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013680:	6805      	ldr	r5, [r0, #0]
 8013682:	4604      	mov	r4, r0
 8013684:	4628      	mov	r0, r5
 8013686:	460e      	mov	r6, r1
 8013688:	f7ec fdca 	bl	8000220 <strcmp>
 801368c:	b1c8      	cbz	r0, 80136c2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801368e:	4b11      	ldr	r3, [pc, #68]	@ (80136d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	429d      	cmp	r5, r3
 8013694:	d112      	bne.n	80136bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013696:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801369a:	f8d8 4000 	ldr.w	r4, [r8]
 801369e:	b16c      	cbz	r4, 80136bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80136a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80136a4:	2700      	movs	r7, #0
 80136a6:	3d04      	subs	r5, #4
 80136a8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80136ac:	4631      	mov	r1, r6
 80136ae:	f7ec fdb7 	bl	8000220 <strcmp>
 80136b2:	00bb      	lsls	r3, r7, #2
 80136b4:	b140      	cbz	r0, 80136c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80136b6:	3701      	adds	r7, #1
 80136b8:	42bc      	cmp	r4, r7
 80136ba:	d1f5      	bne.n	80136a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80136bc:	2000      	movs	r0, #0
 80136be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136c2:	4620      	mov	r0, r4
 80136c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80136cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136d0:	58d3      	ldr	r3, [r2, r3]
 80136d2:	4718      	bx	r3
 80136d4:	2000017c 	.word	0x2000017c

080136d8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80136d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136dc:	6805      	ldr	r5, [r0, #0]
 80136de:	4604      	mov	r4, r0
 80136e0:	4628      	mov	r0, r5
 80136e2:	460e      	mov	r6, r1
 80136e4:	f7ec fd9c 	bl	8000220 <strcmp>
 80136e8:	b1c8      	cbz	r0, 801371e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80136ea:	4b11      	ldr	r3, [pc, #68]	@ (8013730 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	429d      	cmp	r5, r3
 80136f0:	d112      	bne.n	8013718 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80136f2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80136f6:	f8d8 4000 	ldr.w	r4, [r8]
 80136fa:	b16c      	cbz	r4, 8013718 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80136fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013700:	2700      	movs	r7, #0
 8013702:	3d04      	subs	r5, #4
 8013704:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013708:	4631      	mov	r1, r6
 801370a:	f7ec fd89 	bl	8000220 <strcmp>
 801370e:	00bb      	lsls	r3, r7, #2
 8013710:	b140      	cbz	r0, 8013724 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8013712:	3701      	adds	r7, #1
 8013714:	42bc      	cmp	r4, r7
 8013716:	d1f5      	bne.n	8013704 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8013718:	2000      	movs	r0, #0
 801371a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801371e:	4620      	mov	r0, r4
 8013720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013724:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801372c:	58d3      	ldr	r3, [r2, r3]
 801372e:	4718      	bx	r3
 8013730:	2000017c 	.word	0x2000017c

08013734 <ucdr_serialize_endian_array_char>:
 8013734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013738:	4619      	mov	r1, r3
 801373a:	461f      	mov	r7, r3
 801373c:	4605      	mov	r5, r0
 801373e:	4690      	mov	r8, r2
 8013740:	f7f9 fcce 	bl	800d0e0 <ucdr_check_buffer_available_for>
 8013744:	b9e0      	cbnz	r0, 8013780 <ucdr_serialize_endian_array_char+0x4c>
 8013746:	463e      	mov	r6, r7
 8013748:	e009      	b.n	801375e <ucdr_serialize_endian_array_char+0x2a>
 801374a:	68a8      	ldr	r0, [r5, #8]
 801374c:	f001 fc8d 	bl	801506a <memcpy>
 8013750:	68ab      	ldr	r3, [r5, #8]
 8013752:	6928      	ldr	r0, [r5, #16]
 8013754:	4423      	add	r3, r4
 8013756:	4420      	add	r0, r4
 8013758:	1b36      	subs	r6, r6, r4
 801375a:	60ab      	str	r3, [r5, #8]
 801375c:	6128      	str	r0, [r5, #16]
 801375e:	4631      	mov	r1, r6
 8013760:	2201      	movs	r2, #1
 8013762:	4628      	mov	r0, r5
 8013764:	f7f9 fd44 	bl	800d1f0 <ucdr_check_final_buffer_behavior_array>
 8013768:	1bb9      	subs	r1, r7, r6
 801376a:	4441      	add	r1, r8
 801376c:	4604      	mov	r4, r0
 801376e:	4602      	mov	r2, r0
 8013770:	2800      	cmp	r0, #0
 8013772:	d1ea      	bne.n	801374a <ucdr_serialize_endian_array_char+0x16>
 8013774:	2301      	movs	r3, #1
 8013776:	7da8      	ldrb	r0, [r5, #22]
 8013778:	756b      	strb	r3, [r5, #21]
 801377a:	4058      	eors	r0, r3
 801377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013780:	463a      	mov	r2, r7
 8013782:	68a8      	ldr	r0, [r5, #8]
 8013784:	4641      	mov	r1, r8
 8013786:	f001 fc70 	bl	801506a <memcpy>
 801378a:	68aa      	ldr	r2, [r5, #8]
 801378c:	692b      	ldr	r3, [r5, #16]
 801378e:	443a      	add	r2, r7
 8013790:	443b      	add	r3, r7
 8013792:	60aa      	str	r2, [r5, #8]
 8013794:	612b      	str	r3, [r5, #16]
 8013796:	e7ed      	b.n	8013774 <ucdr_serialize_endian_array_char+0x40>

08013798 <ucdr_deserialize_endian_array_char>:
 8013798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801379c:	4619      	mov	r1, r3
 801379e:	461f      	mov	r7, r3
 80137a0:	4605      	mov	r5, r0
 80137a2:	4690      	mov	r8, r2
 80137a4:	f7f9 fc9c 	bl	800d0e0 <ucdr_check_buffer_available_for>
 80137a8:	b9e0      	cbnz	r0, 80137e4 <ucdr_deserialize_endian_array_char+0x4c>
 80137aa:	463e      	mov	r6, r7
 80137ac:	e009      	b.n	80137c2 <ucdr_deserialize_endian_array_char+0x2a>
 80137ae:	68a9      	ldr	r1, [r5, #8]
 80137b0:	f001 fc5b 	bl	801506a <memcpy>
 80137b4:	68ab      	ldr	r3, [r5, #8]
 80137b6:	6928      	ldr	r0, [r5, #16]
 80137b8:	4423      	add	r3, r4
 80137ba:	4420      	add	r0, r4
 80137bc:	1b36      	subs	r6, r6, r4
 80137be:	60ab      	str	r3, [r5, #8]
 80137c0:	6128      	str	r0, [r5, #16]
 80137c2:	2201      	movs	r2, #1
 80137c4:	4631      	mov	r1, r6
 80137c6:	4628      	mov	r0, r5
 80137c8:	f7f9 fd12 	bl	800d1f0 <ucdr_check_final_buffer_behavior_array>
 80137cc:	4604      	mov	r4, r0
 80137ce:	1bb8      	subs	r0, r7, r6
 80137d0:	4440      	add	r0, r8
 80137d2:	4622      	mov	r2, r4
 80137d4:	2c00      	cmp	r4, #0
 80137d6:	d1ea      	bne.n	80137ae <ucdr_deserialize_endian_array_char+0x16>
 80137d8:	2301      	movs	r3, #1
 80137da:	7da8      	ldrb	r0, [r5, #22]
 80137dc:	756b      	strb	r3, [r5, #21]
 80137de:	4058      	eors	r0, r3
 80137e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e4:	463a      	mov	r2, r7
 80137e6:	68a9      	ldr	r1, [r5, #8]
 80137e8:	4640      	mov	r0, r8
 80137ea:	f001 fc3e 	bl	801506a <memcpy>
 80137ee:	68aa      	ldr	r2, [r5, #8]
 80137f0:	692b      	ldr	r3, [r5, #16]
 80137f2:	443a      	add	r2, r7
 80137f4:	443b      	add	r3, r7
 80137f6:	60aa      	str	r2, [r5, #8]
 80137f8:	612b      	str	r3, [r5, #16]
 80137fa:	e7ed      	b.n	80137d8 <ucdr_deserialize_endian_array_char+0x40>

080137fc <ucdr_serialize_array_uint8_t>:
 80137fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013800:	4688      	mov	r8, r1
 8013802:	4611      	mov	r1, r2
 8013804:	4617      	mov	r7, r2
 8013806:	4605      	mov	r5, r0
 8013808:	f7f9 fc6a 	bl	800d0e0 <ucdr_check_buffer_available_for>
 801380c:	b9e0      	cbnz	r0, 8013848 <ucdr_serialize_array_uint8_t+0x4c>
 801380e:	463e      	mov	r6, r7
 8013810:	e009      	b.n	8013826 <ucdr_serialize_array_uint8_t+0x2a>
 8013812:	68a8      	ldr	r0, [r5, #8]
 8013814:	f001 fc29 	bl	801506a <memcpy>
 8013818:	68aa      	ldr	r2, [r5, #8]
 801381a:	692b      	ldr	r3, [r5, #16]
 801381c:	4422      	add	r2, r4
 801381e:	4423      	add	r3, r4
 8013820:	1b36      	subs	r6, r6, r4
 8013822:	60aa      	str	r2, [r5, #8]
 8013824:	612b      	str	r3, [r5, #16]
 8013826:	4631      	mov	r1, r6
 8013828:	2201      	movs	r2, #1
 801382a:	4628      	mov	r0, r5
 801382c:	f7f9 fce0 	bl	800d1f0 <ucdr_check_final_buffer_behavior_array>
 8013830:	1bb9      	subs	r1, r7, r6
 8013832:	4441      	add	r1, r8
 8013834:	4604      	mov	r4, r0
 8013836:	4602      	mov	r2, r0
 8013838:	2800      	cmp	r0, #0
 801383a:	d1ea      	bne.n	8013812 <ucdr_serialize_array_uint8_t+0x16>
 801383c:	2301      	movs	r3, #1
 801383e:	7da8      	ldrb	r0, [r5, #22]
 8013840:	756b      	strb	r3, [r5, #21]
 8013842:	4058      	eors	r0, r3
 8013844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013848:	463a      	mov	r2, r7
 801384a:	68a8      	ldr	r0, [r5, #8]
 801384c:	4641      	mov	r1, r8
 801384e:	f001 fc0c 	bl	801506a <memcpy>
 8013852:	68aa      	ldr	r2, [r5, #8]
 8013854:	692b      	ldr	r3, [r5, #16]
 8013856:	443a      	add	r2, r7
 8013858:	443b      	add	r3, r7
 801385a:	60aa      	str	r2, [r5, #8]
 801385c:	612b      	str	r3, [r5, #16]
 801385e:	e7ed      	b.n	801383c <ucdr_serialize_array_uint8_t+0x40>

08013860 <ucdr_serialize_endian_array_uint8_t>:
 8013860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013864:	4619      	mov	r1, r3
 8013866:	461f      	mov	r7, r3
 8013868:	4605      	mov	r5, r0
 801386a:	4690      	mov	r8, r2
 801386c:	f7f9 fc38 	bl	800d0e0 <ucdr_check_buffer_available_for>
 8013870:	b9e0      	cbnz	r0, 80138ac <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013872:	463e      	mov	r6, r7
 8013874:	e009      	b.n	801388a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013876:	68a8      	ldr	r0, [r5, #8]
 8013878:	f001 fbf7 	bl	801506a <memcpy>
 801387c:	68ab      	ldr	r3, [r5, #8]
 801387e:	6928      	ldr	r0, [r5, #16]
 8013880:	4423      	add	r3, r4
 8013882:	4420      	add	r0, r4
 8013884:	1b36      	subs	r6, r6, r4
 8013886:	60ab      	str	r3, [r5, #8]
 8013888:	6128      	str	r0, [r5, #16]
 801388a:	4631      	mov	r1, r6
 801388c:	2201      	movs	r2, #1
 801388e:	4628      	mov	r0, r5
 8013890:	f7f9 fcae 	bl	800d1f0 <ucdr_check_final_buffer_behavior_array>
 8013894:	1bb9      	subs	r1, r7, r6
 8013896:	4441      	add	r1, r8
 8013898:	4604      	mov	r4, r0
 801389a:	4602      	mov	r2, r0
 801389c:	2800      	cmp	r0, #0
 801389e:	d1ea      	bne.n	8013876 <ucdr_serialize_endian_array_uint8_t+0x16>
 80138a0:	2301      	movs	r3, #1
 80138a2:	7da8      	ldrb	r0, [r5, #22]
 80138a4:	756b      	strb	r3, [r5, #21]
 80138a6:	4058      	eors	r0, r3
 80138a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ac:	463a      	mov	r2, r7
 80138ae:	68a8      	ldr	r0, [r5, #8]
 80138b0:	4641      	mov	r1, r8
 80138b2:	f001 fbda 	bl	801506a <memcpy>
 80138b6:	68aa      	ldr	r2, [r5, #8]
 80138b8:	692b      	ldr	r3, [r5, #16]
 80138ba:	443a      	add	r2, r7
 80138bc:	443b      	add	r3, r7
 80138be:	60aa      	str	r2, [r5, #8]
 80138c0:	612b      	str	r3, [r5, #16]
 80138c2:	e7ed      	b.n	80138a0 <ucdr_serialize_endian_array_uint8_t+0x40>

080138c4 <ucdr_deserialize_array_uint8_t>:
 80138c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c8:	4688      	mov	r8, r1
 80138ca:	4611      	mov	r1, r2
 80138cc:	4617      	mov	r7, r2
 80138ce:	4605      	mov	r5, r0
 80138d0:	f7f9 fc06 	bl	800d0e0 <ucdr_check_buffer_available_for>
 80138d4:	b9e0      	cbnz	r0, 8013910 <ucdr_deserialize_array_uint8_t+0x4c>
 80138d6:	463e      	mov	r6, r7
 80138d8:	e009      	b.n	80138ee <ucdr_deserialize_array_uint8_t+0x2a>
 80138da:	68a9      	ldr	r1, [r5, #8]
 80138dc:	f001 fbc5 	bl	801506a <memcpy>
 80138e0:	68aa      	ldr	r2, [r5, #8]
 80138e2:	692b      	ldr	r3, [r5, #16]
 80138e4:	4422      	add	r2, r4
 80138e6:	4423      	add	r3, r4
 80138e8:	1b36      	subs	r6, r6, r4
 80138ea:	60aa      	str	r2, [r5, #8]
 80138ec:	612b      	str	r3, [r5, #16]
 80138ee:	2201      	movs	r2, #1
 80138f0:	4631      	mov	r1, r6
 80138f2:	4628      	mov	r0, r5
 80138f4:	f7f9 fc7c 	bl	800d1f0 <ucdr_check_final_buffer_behavior_array>
 80138f8:	4604      	mov	r4, r0
 80138fa:	1bb8      	subs	r0, r7, r6
 80138fc:	4440      	add	r0, r8
 80138fe:	4622      	mov	r2, r4
 8013900:	2c00      	cmp	r4, #0
 8013902:	d1ea      	bne.n	80138da <ucdr_deserialize_array_uint8_t+0x16>
 8013904:	2301      	movs	r3, #1
 8013906:	7da8      	ldrb	r0, [r5, #22]
 8013908:	756b      	strb	r3, [r5, #21]
 801390a:	4058      	eors	r0, r3
 801390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013910:	463a      	mov	r2, r7
 8013912:	68a9      	ldr	r1, [r5, #8]
 8013914:	4640      	mov	r0, r8
 8013916:	f001 fba8 	bl	801506a <memcpy>
 801391a:	68aa      	ldr	r2, [r5, #8]
 801391c:	692b      	ldr	r3, [r5, #16]
 801391e:	443a      	add	r2, r7
 8013920:	443b      	add	r3, r7
 8013922:	60aa      	str	r2, [r5, #8]
 8013924:	612b      	str	r3, [r5, #16]
 8013926:	e7ed      	b.n	8013904 <ucdr_deserialize_array_uint8_t+0x40>

08013928 <ucdr_deserialize_endian_array_uint8_t>:
 8013928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801392c:	4619      	mov	r1, r3
 801392e:	461f      	mov	r7, r3
 8013930:	4605      	mov	r5, r0
 8013932:	4690      	mov	r8, r2
 8013934:	f7f9 fbd4 	bl	800d0e0 <ucdr_check_buffer_available_for>
 8013938:	b9e0      	cbnz	r0, 8013974 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801393a:	463e      	mov	r6, r7
 801393c:	e009      	b.n	8013952 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801393e:	68a9      	ldr	r1, [r5, #8]
 8013940:	f001 fb93 	bl	801506a <memcpy>
 8013944:	68ab      	ldr	r3, [r5, #8]
 8013946:	6928      	ldr	r0, [r5, #16]
 8013948:	4423      	add	r3, r4
 801394a:	4420      	add	r0, r4
 801394c:	1b36      	subs	r6, r6, r4
 801394e:	60ab      	str	r3, [r5, #8]
 8013950:	6128      	str	r0, [r5, #16]
 8013952:	2201      	movs	r2, #1
 8013954:	4631      	mov	r1, r6
 8013956:	4628      	mov	r0, r5
 8013958:	f7f9 fc4a 	bl	800d1f0 <ucdr_check_final_buffer_behavior_array>
 801395c:	4604      	mov	r4, r0
 801395e:	1bb8      	subs	r0, r7, r6
 8013960:	4440      	add	r0, r8
 8013962:	4622      	mov	r2, r4
 8013964:	2c00      	cmp	r4, #0
 8013966:	d1ea      	bne.n	801393e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013968:	2301      	movs	r3, #1
 801396a:	7da8      	ldrb	r0, [r5, #22]
 801396c:	756b      	strb	r3, [r5, #21]
 801396e:	4058      	eors	r0, r3
 8013970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013974:	463a      	mov	r2, r7
 8013976:	68a9      	ldr	r1, [r5, #8]
 8013978:	4640      	mov	r0, r8
 801397a:	f001 fb76 	bl	801506a <memcpy>
 801397e:	68aa      	ldr	r2, [r5, #8]
 8013980:	692b      	ldr	r3, [r5, #16]
 8013982:	443a      	add	r2, r7
 8013984:	443b      	add	r3, r7
 8013986:	60aa      	str	r2, [r5, #8]
 8013988:	612b      	str	r3, [r5, #16]
 801398a:	e7ed      	b.n	8013968 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801398c <ucdr_serialize_string>:
 801398c:	b510      	push	{r4, lr}
 801398e:	b082      	sub	sp, #8
 8013990:	4604      	mov	r4, r0
 8013992:	4608      	mov	r0, r1
 8013994:	9101      	str	r1, [sp, #4]
 8013996:	f7ec fc4d 	bl	8000234 <strlen>
 801399a:	9901      	ldr	r1, [sp, #4]
 801399c:	1c42      	adds	r2, r0, #1
 801399e:	4620      	mov	r0, r4
 80139a0:	b002      	add	sp, #8
 80139a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139a6:	f7f9 bc5f 	b.w	800d268 <ucdr_serialize_sequence_char>
 80139aa:	bf00      	nop

080139ac <ucdr_deserialize_string>:
 80139ac:	b500      	push	{lr}
 80139ae:	b083      	sub	sp, #12
 80139b0:	ab01      	add	r3, sp, #4
 80139b2:	f7f9 fc6b 	bl	800d28c <ucdr_deserialize_sequence_char>
 80139b6:	b003      	add	sp, #12
 80139b8:	f85d fb04 	ldr.w	pc, [sp], #4

080139bc <uxr_init_input_best_effort_stream>:
 80139bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80139c0:	8003      	strh	r3, [r0, #0]
 80139c2:	4770      	bx	lr

080139c4 <uxr_reset_input_best_effort_stream>:
 80139c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80139c8:	8003      	strh	r3, [r0, #0]
 80139ca:	4770      	bx	lr

080139cc <uxr_receive_best_effort_message>:
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	4604      	mov	r4, r0
 80139d0:	8800      	ldrh	r0, [r0, #0]
 80139d2:	460d      	mov	r5, r1
 80139d4:	f000 fd22 	bl	801441c <uxr_seq_num_cmp>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80139e0:	bfb8      	it	lt
 80139e2:	8025      	strhlt	r5, [r4, #0]
 80139e4:	bd38      	pop	{r3, r4, r5, pc}
 80139e6:	bf00      	nop

080139e8 <on_full_input_buffer>:
 80139e8:	b570      	push	{r4, r5, r6, lr}
 80139ea:	4605      	mov	r5, r0
 80139ec:	460c      	mov	r4, r1
 80139ee:	682b      	ldr	r3, [r5, #0]
 80139f0:	6809      	ldr	r1, [r1, #0]
 80139f2:	8920      	ldrh	r0, [r4, #8]
 80139f4:	6862      	ldr	r2, [r4, #4]
 80139f6:	fbb2 f2f0 	udiv	r2, r2, r0
 80139fa:	eba3 0c01 	sub.w	ip, r3, r1
 80139fe:	fbbc fcf2 	udiv	ip, ip, r2
 8013a02:	f10c 0c01 	add.w	ip, ip, #1
 8013a06:	fa1f f38c 	uxth.w	r3, ip
 8013a0a:	fbb3 f6f0 	udiv	r6, r3, r0
 8013a0e:	fb00 3316 	mls	r3, r0, r6, r3
 8013a12:	b29b      	uxth	r3, r3
 8013a14:	fb02 f303 	mul.w	r3, r2, r3
 8013a18:	1d18      	adds	r0, r3, #4
 8013a1a:	4408      	add	r0, r1
 8013a1c:	7d26      	ldrb	r6, [r4, #20]
 8013a1e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013a22:	b116      	cbz	r6, 8013a2a <on_full_input_buffer+0x42>
 8013a24:	2600      	movs	r6, #0
 8013a26:	f840 6c04 	str.w	r6, [r0, #-4]
 8013a2a:	2a03      	cmp	r2, #3
 8013a2c:	d801      	bhi.n	8013a32 <on_full_input_buffer+0x4a>
 8013a2e:	2001      	movs	r0, #1
 8013a30:	bd70      	pop	{r4, r5, r6, pc}
 8013a32:	3308      	adds	r3, #8
 8013a34:	4419      	add	r1, r3
 8013a36:	4628      	mov	r0, r5
 8013a38:	692b      	ldr	r3, [r5, #16]
 8013a3a:	3a04      	subs	r2, #4
 8013a3c:	f7f9 fb9c 	bl	800d178 <ucdr_init_buffer_origin>
 8013a40:	4628      	mov	r0, r5
 8013a42:	4903      	ldr	r1, [pc, #12]	@ (8013a50 <on_full_input_buffer+0x68>)
 8013a44:	4622      	mov	r2, r4
 8013a46:	f7f9 fb73 	bl	800d130 <ucdr_set_on_full_buffer_callback>
 8013a4a:	2000      	movs	r0, #0
 8013a4c:	bd70      	pop	{r4, r5, r6, pc}
 8013a4e:	bf00      	nop
 8013a50:	080139e9 	.word	0x080139e9

08013a54 <uxr_init_input_reliable_stream>:
 8013a54:	b500      	push	{lr}
 8013a56:	e9c0 1200 	strd	r1, r2, [r0]
 8013a5a:	f04f 0e00 	mov.w	lr, #0
 8013a5e:	9a01      	ldr	r2, [sp, #4]
 8013a60:	8103      	strh	r3, [r0, #8]
 8013a62:	6102      	str	r2, [r0, #16]
 8013a64:	f880 e014 	strb.w	lr, [r0, #20]
 8013a68:	b1d3      	cbz	r3, 8013aa0 <uxr_init_input_reliable_stream+0x4c>
 8013a6a:	f8c1 e000 	str.w	lr, [r1]
 8013a6e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013a72:	f1bc 0f01 	cmp.w	ip, #1
 8013a76:	d913      	bls.n	8013aa0 <uxr_init_input_reliable_stream+0x4c>
 8013a78:	2301      	movs	r3, #1
 8013a7a:	fbb3 f1fc 	udiv	r1, r3, ip
 8013a7e:	fb0c 3111 	mls	r1, ip, r1, r3
 8013a82:	b289      	uxth	r1, r1
 8013a84:	6842      	ldr	r2, [r0, #4]
 8013a86:	fbb2 f2fc 	udiv	r2, r2, ip
 8013a8a:	fb01 f202 	mul.w	r2, r1, r2
 8013a8e:	6801      	ldr	r1, [r0, #0]
 8013a90:	f841 e002 	str.w	lr, [r1, r2]
 8013a94:	3301      	adds	r3, #1
 8013a96:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	459c      	cmp	ip, r3
 8013a9e:	d8ec      	bhi.n	8013a7a <uxr_init_input_reliable_stream+0x26>
 8013aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013aa4:	60c3      	str	r3, [r0, #12]
 8013aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013aaa:	bf00      	nop

08013aac <uxr_reset_input_reliable_stream>:
 8013aac:	8901      	ldrh	r1, [r0, #8]
 8013aae:	b1e9      	cbz	r1, 8013aec <uxr_reset_input_reliable_stream+0x40>
 8013ab0:	f04f 0c00 	mov.w	ip, #0
 8013ab4:	b500      	push	{lr}
 8013ab6:	4663      	mov	r3, ip
 8013ab8:	46e6      	mov	lr, ip
 8013aba:	fbb3 f2f1 	udiv	r2, r3, r1
 8013abe:	fb01 3312 	mls	r3, r1, r2, r3
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	6842      	ldr	r2, [r0, #4]
 8013ac6:	fbb2 f2f1 	udiv	r2, r2, r1
 8013aca:	fb02 f303 	mul.w	r3, r2, r3
 8013ace:	6802      	ldr	r2, [r0, #0]
 8013ad0:	f842 e003 	str.w	lr, [r2, r3]
 8013ad4:	f10c 0c01 	add.w	ip, ip, #1
 8013ad8:	8901      	ldrh	r1, [r0, #8]
 8013ada:	fa1f f38c 	uxth.w	r3, ip
 8013ade:	4299      	cmp	r1, r3
 8013ae0:	d8eb      	bhi.n	8013aba <uxr_reset_input_reliable_stream+0xe>
 8013ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013ae6:	60c3      	str	r3, [r0, #12]
 8013ae8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013af0:	60c3      	str	r3, [r0, #12]
 8013af2:	4770      	bx	lr

08013af4 <uxr_receive_reliable_message>:
 8013af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013af8:	4604      	mov	r4, r0
 8013afa:	460d      	mov	r5, r1
 8013afc:	8901      	ldrh	r1, [r0, #8]
 8013afe:	8980      	ldrh	r0, [r0, #12]
 8013b00:	4690      	mov	r8, r2
 8013b02:	461f      	mov	r7, r3
 8013b04:	f000 fc82 	bl	801440c <uxr_seq_num_add>
 8013b08:	4629      	mov	r1, r5
 8013b0a:	4606      	mov	r6, r0
 8013b0c:	89a0      	ldrh	r0, [r4, #12]
 8013b0e:	f000 fc85 	bl	801441c <uxr_seq_num_cmp>
 8013b12:	2800      	cmp	r0, #0
 8013b14:	db0a      	blt.n	8013b2c <uxr_receive_reliable_message+0x38>
 8013b16:	2600      	movs	r6, #0
 8013b18:	89e0      	ldrh	r0, [r4, #14]
 8013b1a:	4629      	mov	r1, r5
 8013b1c:	f000 fc7e 	bl	801441c <uxr_seq_num_cmp>
 8013b20:	2800      	cmp	r0, #0
 8013b22:	da00      	bge.n	8013b26 <uxr_receive_reliable_message+0x32>
 8013b24:	81e5      	strh	r5, [r4, #14]
 8013b26:	4630      	mov	r0, r6
 8013b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b2c:	4630      	mov	r0, r6
 8013b2e:	4629      	mov	r1, r5
 8013b30:	f000 fc74 	bl	801441c <uxr_seq_num_cmp>
 8013b34:	2800      	cmp	r0, #0
 8013b36:	dbee      	blt.n	8013b16 <uxr_receive_reliable_message+0x22>
 8013b38:	6923      	ldr	r3, [r4, #16]
 8013b3a:	4640      	mov	r0, r8
 8013b3c:	4798      	blx	r3
 8013b3e:	2101      	movs	r1, #1
 8013b40:	4681      	mov	r9, r0
 8013b42:	89a0      	ldrh	r0, [r4, #12]
 8013b44:	f000 fc62 	bl	801440c <uxr_seq_num_add>
 8013b48:	f1b9 0f00 	cmp.w	r9, #0
 8013b4c:	d101      	bne.n	8013b52 <uxr_receive_reliable_message+0x5e>
 8013b4e:	4285      	cmp	r5, r0
 8013b50:	d047      	beq.n	8013be2 <uxr_receive_reliable_message+0xee>
 8013b52:	8922      	ldrh	r2, [r4, #8]
 8013b54:	fbb5 f0f2 	udiv	r0, r5, r2
 8013b58:	fb02 5010 	mls	r0, r2, r0, r5
 8013b5c:	b280      	uxth	r0, r0
 8013b5e:	6863      	ldr	r3, [r4, #4]
 8013b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b64:	fb00 f303 	mul.w	r3, r0, r3
 8013b68:	6820      	ldr	r0, [r4, #0]
 8013b6a:	3304      	adds	r3, #4
 8013b6c:	4418      	add	r0, r3
 8013b6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d1cf      	bne.n	8013b16 <uxr_receive_reliable_message+0x22>
 8013b76:	4641      	mov	r1, r8
 8013b78:	463a      	mov	r2, r7
 8013b7a:	f001 fa76 	bl	801506a <memcpy>
 8013b7e:	8921      	ldrh	r1, [r4, #8]
 8013b80:	fbb5 f2f1 	udiv	r2, r5, r1
 8013b84:	fb01 5212 	mls	r2, r1, r2, r5
 8013b88:	b292      	uxth	r2, r2
 8013b8a:	6863      	ldr	r3, [r4, #4]
 8013b8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b90:	fb02 f303 	mul.w	r3, r2, r3
 8013b94:	6822      	ldr	r2, [r4, #0]
 8013b96:	50d7      	str	r7, [r2, r3]
 8013b98:	9a08      	ldr	r2, [sp, #32]
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	7013      	strb	r3, [r2, #0]
 8013b9e:	f1b9 0f00 	cmp.w	r9, #0
 8013ba2:	d0b8      	beq.n	8013b16 <uxr_receive_reliable_message+0x22>
 8013ba4:	89a6      	ldrh	r6, [r4, #12]
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	2101      	movs	r1, #1
 8013baa:	f000 fc2f 	bl	801440c <uxr_seq_num_add>
 8013bae:	8922      	ldrh	r2, [r4, #8]
 8013bb0:	6863      	ldr	r3, [r4, #4]
 8013bb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013bb6:	4606      	mov	r6, r0
 8013bb8:	fbb0 f0f2 	udiv	r0, r0, r2
 8013bbc:	fb02 6010 	mls	r0, r2, r0, r6
 8013bc0:	b280      	uxth	r0, r0
 8013bc2:	fb00 f303 	mul.w	r3, r0, r3
 8013bc6:	6820      	ldr	r0, [r4, #0]
 8013bc8:	3304      	adds	r3, #4
 8013bca:	4418      	add	r0, r3
 8013bcc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d0a0      	beq.n	8013b16 <uxr_receive_reliable_message+0x22>
 8013bd4:	6923      	ldr	r3, [r4, #16]
 8013bd6:	4798      	blx	r3
 8013bd8:	2802      	cmp	r0, #2
 8013bda:	d008      	beq.n	8013bee <uxr_receive_reliable_message+0xfa>
 8013bdc:	2801      	cmp	r0, #1
 8013bde:	d0e2      	beq.n	8013ba6 <uxr_receive_reliable_message+0xb2>
 8013be0:	e799      	b.n	8013b16 <uxr_receive_reliable_message+0x22>
 8013be2:	9b08      	ldr	r3, [sp, #32]
 8013be4:	81a5      	strh	r5, [r4, #12]
 8013be6:	2601      	movs	r6, #1
 8013be8:	f883 9000 	strb.w	r9, [r3]
 8013bec:	e794      	b.n	8013b18 <uxr_receive_reliable_message+0x24>
 8013bee:	2601      	movs	r6, #1
 8013bf0:	e792      	b.n	8013b18 <uxr_receive_reliable_message+0x24>
 8013bf2:	bf00      	nop

08013bf4 <uxr_next_input_reliable_buffer_available>:
 8013bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bf8:	4604      	mov	r4, r0
 8013bfa:	460f      	mov	r7, r1
 8013bfc:	8980      	ldrh	r0, [r0, #12]
 8013bfe:	2101      	movs	r1, #1
 8013c00:	4690      	mov	r8, r2
 8013c02:	f000 fc03 	bl	801440c <uxr_seq_num_add>
 8013c06:	8922      	ldrh	r2, [r4, #8]
 8013c08:	fbb0 f6f2 	udiv	r6, r0, r2
 8013c0c:	fb02 0616 	mls	r6, r2, r6, r0
 8013c10:	b2b6      	uxth	r6, r6
 8013c12:	6863      	ldr	r3, [r4, #4]
 8013c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c18:	fb06 f303 	mul.w	r3, r6, r3
 8013c1c:	6826      	ldr	r6, [r4, #0]
 8013c1e:	3304      	adds	r3, #4
 8013c20:	441e      	add	r6, r3
 8013c22:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8013c26:	f1b9 0f00 	cmp.w	r9, #0
 8013c2a:	d023      	beq.n	8013c74 <uxr_next_input_reliable_buffer_available+0x80>
 8013c2c:	6923      	ldr	r3, [r4, #16]
 8013c2e:	4605      	mov	r5, r0
 8013c30:	4630      	mov	r0, r6
 8013c32:	4798      	blx	r3
 8013c34:	4682      	mov	sl, r0
 8013c36:	b300      	cbz	r0, 8013c7a <uxr_next_input_reliable_buffer_available+0x86>
 8013c38:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013c3c:	2101      	movs	r1, #1
 8013c3e:	4650      	mov	r0, sl
 8013c40:	f000 fbe4 	bl	801440c <uxr_seq_num_add>
 8013c44:	8921      	ldrh	r1, [r4, #8]
 8013c46:	fbb0 f2f1 	udiv	r2, r0, r1
 8013c4a:	4682      	mov	sl, r0
 8013c4c:	fb01 0212 	mls	r2, r1, r2, r0
 8013c50:	e9d4 0300 	ldrd	r0, r3, [r4]
 8013c54:	b292      	uxth	r2, r2
 8013c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c5a:	fb02 f303 	mul.w	r3, r2, r3
 8013c5e:	3304      	adds	r3, #4
 8013c60:	4418      	add	r0, r3
 8013c62:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013c66:	b12b      	cbz	r3, 8013c74 <uxr_next_input_reliable_buffer_available+0x80>
 8013c68:	6923      	ldr	r3, [r4, #16]
 8013c6a:	4798      	blx	r3
 8013c6c:	2802      	cmp	r0, #2
 8013c6e:	d01b      	beq.n	8013ca8 <uxr_next_input_reliable_buffer_available+0xb4>
 8013c70:	2801      	cmp	r0, #1
 8013c72:	d0e3      	beq.n	8013c3c <uxr_next_input_reliable_buffer_available+0x48>
 8013c74:	2000      	movs	r0, #0
 8013c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c7a:	464a      	mov	r2, r9
 8013c7c:	4631      	mov	r1, r6
 8013c7e:	4638      	mov	r0, r7
 8013c80:	f7f9 fa82 	bl	800d188 <ucdr_init_buffer>
 8013c84:	8921      	ldrh	r1, [r4, #8]
 8013c86:	fbb5 f2f1 	udiv	r2, r5, r1
 8013c8a:	fb01 5212 	mls	r2, r1, r2, r5
 8013c8e:	b292      	uxth	r2, r2
 8013c90:	6863      	ldr	r3, [r4, #4]
 8013c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c96:	fb02 f303 	mul.w	r3, r2, r3
 8013c9a:	6822      	ldr	r2, [r4, #0]
 8013c9c:	f842 a003 	str.w	sl, [r2, r3]
 8013ca0:	2001      	movs	r0, #1
 8013ca2:	81a5      	strh	r5, [r4, #12]
 8013ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ca8:	8920      	ldrh	r0, [r4, #8]
 8013caa:	fbb5 f3f0 	udiv	r3, r5, r0
 8013cae:	fb00 5513 	mls	r5, r0, r3, r5
 8013cb2:	b2ad      	uxth	r5, r5
 8013cb4:	6863      	ldr	r3, [r4, #4]
 8013cb6:	fbb3 f3f0 	udiv	r3, r3, r0
 8013cba:	fb03 f505 	mul.w	r5, r3, r5
 8013cbe:	6823      	ldr	r3, [r4, #0]
 8013cc0:	2000      	movs	r0, #0
 8013cc2:	5158      	str	r0, [r3, r5]
 8013cc4:	eb06 0108 	add.w	r1, r6, r8
 8013cc8:	eba9 0208 	sub.w	r2, r9, r8
 8013ccc:	4638      	mov	r0, r7
 8013cce:	f7f9 fa5b 	bl	800d188 <ucdr_init_buffer>
 8013cd2:	4638      	mov	r0, r7
 8013cd4:	4903      	ldr	r1, [pc, #12]	@ (8013ce4 <uxr_next_input_reliable_buffer_available+0xf0>)
 8013cd6:	4622      	mov	r2, r4
 8013cd8:	f7f9 fa2a 	bl	800d130 <ucdr_set_on_full_buffer_callback>
 8013cdc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013ce0:	2001      	movs	r0, #1
 8013ce2:	e7c8      	b.n	8013c76 <uxr_next_input_reliable_buffer_available+0x82>
 8013ce4:	080139e9 	.word	0x080139e9

08013ce8 <uxr_process_heartbeat>:
 8013ce8:	b538      	push	{r3, r4, r5, lr}
 8013cea:	4611      	mov	r1, r2
 8013cec:	4604      	mov	r4, r0
 8013cee:	89c0      	ldrh	r0, [r0, #14]
 8013cf0:	4615      	mov	r5, r2
 8013cf2:	f000 fb93 	bl	801441c <uxr_seq_num_cmp>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	bfb8      	it	lt
 8013cfa:	81e5      	strhlt	r5, [r4, #14]
 8013cfc:	bd38      	pop	{r3, r4, r5, pc}
 8013cfe:	bf00      	nop

08013d00 <uxr_compute_acknack>:
 8013d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d04:	8903      	ldrh	r3, [r0, #8]
 8013d06:	8985      	ldrh	r5, [r0, #12]
 8013d08:	4604      	mov	r4, r0
 8013d0a:	460e      	mov	r6, r1
 8013d0c:	b1d3      	cbz	r3, 8013d44 <uxr_compute_acknack+0x44>
 8013d0e:	4628      	mov	r0, r5
 8013d10:	2701      	movs	r7, #1
 8013d12:	e003      	b.n	8013d1c <uxr_compute_acknack+0x1c>
 8013d14:	4567      	cmp	r7, ip
 8013d16:	d215      	bcs.n	8013d44 <uxr_compute_acknack+0x44>
 8013d18:	89a0      	ldrh	r0, [r4, #12]
 8013d1a:	3701      	adds	r7, #1
 8013d1c:	b2b9      	uxth	r1, r7
 8013d1e:	f000 fb75 	bl	801440c <uxr_seq_num_add>
 8013d22:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013d26:	fbb0 f3fc 	udiv	r3, r0, ip
 8013d2a:	fb0c 0313 	mls	r3, ip, r3, r0
 8013d2e:	b29a      	uxth	r2, r3
 8013d30:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013d34:	fbb3 f3fc 	udiv	r3, r3, ip
 8013d38:	fb02 f303 	mul.w	r3, r2, r3
 8013d3c:	58cb      	ldr	r3, [r1, r3]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d1e8      	bne.n	8013d14 <uxr_compute_acknack+0x14>
 8013d42:	4605      	mov	r5, r0
 8013d44:	8035      	strh	r5, [r6, #0]
 8013d46:	2101      	movs	r1, #1
 8013d48:	4628      	mov	r0, r5
 8013d4a:	89e7      	ldrh	r7, [r4, #14]
 8013d4c:	f000 fb62 	bl	8014414 <uxr_seq_num_sub>
 8013d50:	4601      	mov	r1, r0
 8013d52:	4638      	mov	r0, r7
 8013d54:	f000 fb5e 	bl	8014414 <uxr_seq_num_sub>
 8013d58:	4605      	mov	r5, r0
 8013d5a:	b318      	cbz	r0, 8013da4 <uxr_compute_acknack+0xa4>
 8013d5c:	f04f 0900 	mov.w	r9, #0
 8013d60:	464f      	mov	r7, r9
 8013d62:	f04f 0801 	mov.w	r8, #1
 8013d66:	fa1f f189 	uxth.w	r1, r9
 8013d6a:	8830      	ldrh	r0, [r6, #0]
 8013d6c:	f000 fb4e 	bl	801440c <uxr_seq_num_add>
 8013d70:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013d74:	fbb0 f3fc 	udiv	r3, r0, ip
 8013d78:	e9d4 1200 	ldrd	r1, r2, [r4]
 8013d7c:	fb03 001c 	mls	r0, r3, ip, r0
 8013d80:	b283      	uxth	r3, r0
 8013d82:	fbb2 f2fc 	udiv	r2, r2, ip
 8013d86:	fb02 f303 	mul.w	r3, r2, r3
 8013d8a:	fa08 f209 	lsl.w	r2, r8, r9
 8013d8e:	58cb      	ldr	r3, [r1, r3]
 8013d90:	f109 0901 	add.w	r9, r9, #1
 8013d94:	b90b      	cbnz	r3, 8013d9a <uxr_compute_acknack+0x9a>
 8013d96:	4317      	orrs	r7, r2
 8013d98:	b2bf      	uxth	r7, r7
 8013d9a:	454d      	cmp	r5, r9
 8013d9c:	d1e3      	bne.n	8013d66 <uxr_compute_acknack+0x66>
 8013d9e:	4638      	mov	r0, r7
 8013da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013da4:	4607      	mov	r7, r0
 8013da6:	4638      	mov	r0, r7
 8013da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013dac <uxr_init_output_best_effort_stream>:
 8013dac:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8013db0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8013db4:	6001      	str	r1, [r0, #0]
 8013db6:	7303      	strb	r3, [r0, #12]
 8013db8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8013dbc:	4770      	bx	lr
 8013dbe:	bf00      	nop

08013dc0 <uxr_reset_output_best_effort_stream>:
 8013dc0:	7b02      	ldrb	r2, [r0, #12]
 8013dc2:	6042      	str	r2, [r0, #4]
 8013dc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013dc8:	81c3      	strh	r3, [r0, #14]
 8013dca:	4770      	bx	lr

08013dcc <uxr_prepare_best_effort_buffer_to_write>:
 8013dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dce:	4604      	mov	r4, r0
 8013dd0:	b083      	sub	sp, #12
 8013dd2:	6840      	ldr	r0, [r0, #4]
 8013dd4:	460d      	mov	r5, r1
 8013dd6:	4616      	mov	r6, r2
 8013dd8:	f7fb fc68 	bl	800f6ac <uxr_submessage_padding>
 8013ddc:	6863      	ldr	r3, [r4, #4]
 8013dde:	4418      	add	r0, r3
 8013de0:	68a3      	ldr	r3, [r4, #8]
 8013de2:	1942      	adds	r2, r0, r5
 8013de4:	4293      	cmp	r3, r2
 8013de6:	bf2c      	ite	cs
 8013de8:	2701      	movcs	r7, #1
 8013dea:	2700      	movcc	r7, #0
 8013dec:	d202      	bcs.n	8013df4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8013dee:	4638      	mov	r0, r7
 8013df0:	b003      	add	sp, #12
 8013df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df4:	9000      	str	r0, [sp, #0]
 8013df6:	6821      	ldr	r1, [r4, #0]
 8013df8:	4630      	mov	r0, r6
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	f7f9 f9b2 	bl	800d164 <ucdr_init_buffer_origin_offset>
 8013e00:	6861      	ldr	r1, [r4, #4]
 8013e02:	4638      	mov	r0, r7
 8013e04:	4429      	add	r1, r5
 8013e06:	6061      	str	r1, [r4, #4]
 8013e08:	b003      	add	sp, #12
 8013e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e0c <uxr_prepare_best_effort_buffer_to_send>:
 8013e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e10:	4604      	mov	r4, r0
 8013e12:	461d      	mov	r5, r3
 8013e14:	6840      	ldr	r0, [r0, #4]
 8013e16:	7b23      	ldrb	r3, [r4, #12]
 8013e18:	4298      	cmp	r0, r3
 8013e1a:	bf8c      	ite	hi
 8013e1c:	2601      	movhi	r6, #1
 8013e1e:	2600      	movls	r6, #0
 8013e20:	d802      	bhi.n	8013e28 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8013e22:	4630      	mov	r0, r6
 8013e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e28:	4688      	mov	r8, r1
 8013e2a:	89e0      	ldrh	r0, [r4, #14]
 8013e2c:	2101      	movs	r1, #1
 8013e2e:	4617      	mov	r7, r2
 8013e30:	f000 faec 	bl	801440c <uxr_seq_num_add>
 8013e34:	6823      	ldr	r3, [r4, #0]
 8013e36:	81e0      	strh	r0, [r4, #14]
 8013e38:	8028      	strh	r0, [r5, #0]
 8013e3a:	f8c8 3000 	str.w	r3, [r8]
 8013e3e:	6863      	ldr	r3, [r4, #4]
 8013e40:	603b      	str	r3, [r7, #0]
 8013e42:	7b23      	ldrb	r3, [r4, #12]
 8013e44:	6063      	str	r3, [r4, #4]
 8013e46:	4630      	mov	r0, r6
 8013e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e4c <on_full_output_buffer>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	6802      	ldr	r2, [r0, #0]
 8013e50:	460c      	mov	r4, r1
 8013e52:	6809      	ldr	r1, [r1, #0]
 8013e54:	8923      	ldrh	r3, [r4, #8]
 8013e56:	eba2 0c01 	sub.w	ip, r2, r1
 8013e5a:	6862      	ldr	r2, [r4, #4]
 8013e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013e60:	fbbc fcf2 	udiv	ip, ip, r2
 8013e64:	f10c 0c01 	add.w	ip, ip, #1
 8013e68:	fa1f fc8c 	uxth.w	ip, ip
 8013e6c:	fbbc fef3 	udiv	lr, ip, r3
 8013e70:	fb03 c31e 	mls	r3, r3, lr, ip
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	fb02 f303 	mul.w	r3, r2, r3
 8013e7a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8013e7e:	58ca      	ldr	r2, [r1, r3]
 8013e80:	4463      	add	r3, ip
 8013e82:	eba2 020c 	sub.w	r2, r2, ip
 8013e86:	3308      	adds	r3, #8
 8013e88:	4605      	mov	r5, r0
 8013e8a:	4419      	add	r1, r3
 8013e8c:	3a04      	subs	r2, #4
 8013e8e:	6903      	ldr	r3, [r0, #16]
 8013e90:	f7f9 f972 	bl	800d178 <ucdr_init_buffer_origin>
 8013e94:	4628      	mov	r0, r5
 8013e96:	4903      	ldr	r1, [pc, #12]	@ (8013ea4 <on_full_output_buffer+0x58>)
 8013e98:	4622      	mov	r2, r4
 8013e9a:	f7f9 f949 	bl	800d130 <ucdr_set_on_full_buffer_callback>
 8013e9e:	2000      	movs	r0, #0
 8013ea0:	bd38      	pop	{r3, r4, r5, pc}
 8013ea2:	bf00      	nop
 8013ea4:	08013e4d 	.word	0x08013e4d

08013ea8 <uxr_init_output_reliable_stream>:
 8013ea8:	b410      	push	{r4}
 8013eaa:	f89d c004 	ldrb.w	ip, [sp, #4]
 8013eae:	8103      	strh	r3, [r0, #8]
 8013eb0:	e9c0 1200 	strd	r1, r2, [r0]
 8013eb4:	f880 c00c 	strb.w	ip, [r0, #12]
 8013eb8:	b1d3      	cbz	r3, 8013ef0 <uxr_init_output_reliable_stream+0x48>
 8013eba:	f8c1 c000 	str.w	ip, [r1]
 8013ebe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013ec2:	f1bc 0f01 	cmp.w	ip, #1
 8013ec6:	d913      	bls.n	8013ef0 <uxr_init_output_reliable_stream+0x48>
 8013ec8:	2301      	movs	r3, #1
 8013eca:	fbb3 f1fc 	udiv	r1, r3, ip
 8013ece:	fb0c 3111 	mls	r1, ip, r1, r3
 8013ed2:	b289      	uxth	r1, r1
 8013ed4:	6842      	ldr	r2, [r0, #4]
 8013ed6:	6804      	ldr	r4, [r0, #0]
 8013ed8:	fbb2 f2fc 	udiv	r2, r2, ip
 8013edc:	fb01 f202 	mul.w	r2, r1, r2
 8013ee0:	7b01      	ldrb	r1, [r0, #12]
 8013ee2:	50a1      	str	r1, [r4, r2]
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	459c      	cmp	ip, r3
 8013eee:	d8ec      	bhi.n	8013eca <uxr_init_output_reliable_stream+0x22>
 8013ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013ef4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013ef8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013efc:	4905      	ldr	r1, [pc, #20]	@ (8013f14 <uxr_init_output_reliable_stream+0x6c>)
 8013efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f02:	f8c0 100e 	str.w	r1, [r0, #14]
 8013f06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	8242      	strh	r2, [r0, #18]
 8013f0e:	8403      	strh	r3, [r0, #32]
 8013f10:	4770      	bx	lr
 8013f12:	bf00      	nop
 8013f14:	ffff0000 	.word	0xffff0000

08013f18 <uxr_reset_output_reliable_stream>:
 8013f18:	8901      	ldrh	r1, [r0, #8]
 8013f1a:	b1b1      	cbz	r1, 8013f4a <uxr_reset_output_reliable_stream+0x32>
 8013f1c:	f04f 0c00 	mov.w	ip, #0
 8013f20:	4663      	mov	r3, ip
 8013f22:	fbb3 f2f1 	udiv	r2, r3, r1
 8013f26:	fb01 3312 	mls	r3, r1, r2, r3
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	6842      	ldr	r2, [r0, #4]
 8013f2e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013f32:	6801      	ldr	r1, [r0, #0]
 8013f34:	fb02 f303 	mul.w	r3, r2, r3
 8013f38:	7b02      	ldrb	r2, [r0, #12]
 8013f3a:	50ca      	str	r2, [r1, r3]
 8013f3c:	f10c 0c01 	add.w	ip, ip, #1
 8013f40:	8901      	ldrh	r1, [r0, #8]
 8013f42:	fa1f f38c 	uxth.w	r3, ip
 8013f46:	4299      	cmp	r1, r3
 8013f48:	d8eb      	bhi.n	8013f22 <uxr_reset_output_reliable_stream+0xa>
 8013f4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013f4e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013f52:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013f56:	4904      	ldr	r1, [pc, #16]	@ (8013f68 <uxr_reset_output_reliable_stream+0x50>)
 8013f58:	f8c0 100e 	str.w	r1, [r0, #14]
 8013f5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013f60:	2300      	movs	r3, #0
 8013f62:	8242      	strh	r2, [r0, #18]
 8013f64:	8403      	strh	r3, [r0, #32]
 8013f66:	4770      	bx	lr
 8013f68:	ffff0000 	.word	0xffff0000

08013f6c <uxr_prepare_reliable_buffer_to_write>:
 8013f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f70:	4604      	mov	r4, r0
 8013f72:	b091      	sub	sp, #68	@ 0x44
 8013f74:	8900      	ldrh	r0, [r0, #8]
 8013f76:	89e6      	ldrh	r6, [r4, #14]
 8013f78:	6823      	ldr	r3, [r4, #0]
 8013f7a:	9204      	str	r2, [sp, #16]
 8013f7c:	fbb6 f2f0 	udiv	r2, r6, r0
 8013f80:	fb00 6212 	mls	r2, r0, r2, r6
 8013f84:	b292      	uxth	r2, r2
 8013f86:	6865      	ldr	r5, [r4, #4]
 8013f88:	fbb5 f5f0 	udiv	r5, r5, r0
 8013f8c:	fb05 3202 	mla	r2, r5, r2, r3
 8013f90:	3204      	adds	r2, #4
 8013f92:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8013f96:	f894 900c 	ldrb.w	r9, [r4, #12]
 8013f9a:	9203      	str	r2, [sp, #12]
 8013f9c:	468b      	mov	fp, r1
 8013f9e:	1f2f      	subs	r7, r5, #4
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	f000 814c 	beq.w	801423e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8013fa6:	f04f 0c00 	mov.w	ip, #0
 8013faa:	46e2      	mov	sl, ip
 8013fac:	4661      	mov	r1, ip
 8013fae:	fbb1 f2f0 	udiv	r2, r1, r0
 8013fb2:	fb00 1212 	mls	r2, r0, r2, r1
 8013fb6:	b292      	uxth	r2, r2
 8013fb8:	fb05 f202 	mul.w	r2, r5, r2
 8013fbc:	f10c 0c01 	add.w	ip, ip, #1
 8013fc0:	589a      	ldr	r2, [r3, r2]
 8013fc2:	454a      	cmp	r2, r9
 8013fc4:	bf08      	it	eq
 8013fc6:	f10a 0a01 	addeq.w	sl, sl, #1
 8013fca:	fa1f f18c 	uxth.w	r1, ip
 8013fce:	bf08      	it	eq
 8013fd0:	fa1f fa8a 	uxtheq.w	sl, sl
 8013fd4:	4281      	cmp	r1, r0
 8013fd6:	d3ea      	bcc.n	8013fae <uxr_prepare_reliable_buffer_to_write+0x42>
 8013fd8:	4640      	mov	r0, r8
 8013fda:	2104      	movs	r1, #4
 8013fdc:	f8cd a014 	str.w	sl, [sp, #20]
 8013fe0:	f7f9 f8d6 	bl	800d190 <ucdr_alignment>
 8013fe4:	4480      	add	r8, r0
 8013fe6:	eb08 020b 	add.w	r2, r8, fp
 8013fea:	42ba      	cmp	r2, r7
 8013fec:	f240 80cd 	bls.w	801418a <uxr_prepare_reliable_buffer_to_write+0x21e>
 8013ff0:	7b22      	ldrb	r2, [r4, #12]
 8013ff2:	445a      	add	r2, fp
 8013ff4:	42ba      	cmp	r2, r7
 8013ff6:	f240 80b5 	bls.w	8014164 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8013ffa:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8013ffe:	33fc      	adds	r3, #252	@ 0xfc
 8014000:	b2ba      	uxth	r2, r7
 8014002:	4413      	add	r3, r2
 8014004:	b29b      	uxth	r3, r3
 8014006:	fb0a f903 	mul.w	r9, sl, r3
 801400a:	45d9      	cmp	r9, fp
 801400c:	9305      	str	r3, [sp, #20]
 801400e:	9306      	str	r3, [sp, #24]
 8014010:	f0c0 80b7 	bcc.w	8014182 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014014:	f108 0304 	add.w	r3, r8, #4
 8014018:	42bb      	cmp	r3, r7
 801401a:	f080 80db 	bcs.w	80141d4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801401e:	f1a2 0904 	sub.w	r9, r2, #4
 8014022:	eba9 0908 	sub.w	r9, r9, r8
 8014026:	9b05      	ldr	r3, [sp, #20]
 8014028:	fa1f f989 	uxth.w	r9, r9
 801402c:	ebab 0b09 	sub.w	fp, fp, r9
 8014030:	fbbb f2f3 	udiv	r2, fp, r3
 8014034:	fb03 b312 	mls	r3, r3, r2, fp
 8014038:	2b00      	cmp	r3, #0
 801403a:	f000 80c8 	beq.w	80141ce <uxr_prepare_reliable_buffer_to_write+0x262>
 801403e:	3201      	adds	r2, #1
 8014040:	b292      	uxth	r2, r2
 8014042:	9306      	str	r3, [sp, #24]
 8014044:	4552      	cmp	r2, sl
 8014046:	f200 809c 	bhi.w	8014182 <uxr_prepare_reliable_buffer_to_write+0x216>
 801404a:	f10d 0b20 	add.w	fp, sp, #32
 801404e:	2a00      	cmp	r2, #0
 8014050:	d042      	beq.n	80140d8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014052:	f8cd 801c 	str.w	r8, [sp, #28]
 8014056:	f04f 0a00 	mov.w	sl, #0
 801405a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801405e:	9505      	str	r5, [sp, #20]
 8014060:	f10d 0b20 	add.w	fp, sp, #32
 8014064:	4615      	mov	r5, r2
 8014066:	e000      	b.n	801406a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014068:	46c1      	mov	r9, r8
 801406a:	8920      	ldrh	r0, [r4, #8]
 801406c:	fbb6 f2f0 	udiv	r2, r6, r0
 8014070:	fb00 6112 	mls	r1, r0, r2, r6
 8014074:	b28a      	uxth	r2, r1
 8014076:	6863      	ldr	r3, [r4, #4]
 8014078:	fbb3 f1f0 	udiv	r1, r3, r0
 801407c:	6823      	ldr	r3, [r4, #0]
 801407e:	fb02 f101 	mul.w	r1, r2, r1
 8014082:	3104      	adds	r1, #4
 8014084:	4419      	add	r1, r3
 8014086:	4658      	mov	r0, fp
 8014088:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801408c:	9200      	str	r2, [sp, #0]
 801408e:	2300      	movs	r3, #0
 8014090:	463a      	mov	r2, r7
 8014092:	f7f9 f867 	bl	800d164 <ucdr_init_buffer_origin_offset>
 8014096:	464a      	mov	r2, r9
 8014098:	2300      	movs	r3, #0
 801409a:	210d      	movs	r1, #13
 801409c:	4658      	mov	r0, fp
 801409e:	f7fb fac5 	bl	800f62c <uxr_buffer_submessage_header>
 80140a2:	8921      	ldrh	r1, [r4, #8]
 80140a4:	fbb6 f2f1 	udiv	r2, r6, r1
 80140a8:	fb01 6212 	mls	r2, r1, r2, r6
 80140ac:	b292      	uxth	r2, r2
 80140ae:	6863      	ldr	r3, [r4, #4]
 80140b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80140b4:	fb02 f303 	mul.w	r3, r2, r3
 80140b8:	6822      	ldr	r2, [r4, #0]
 80140ba:	4630      	mov	r0, r6
 80140bc:	50d7      	str	r7, [r2, r3]
 80140be:	2101      	movs	r1, #1
 80140c0:	f000 f9a4 	bl	801440c <uxr_seq_num_add>
 80140c4:	f10a 0a01 	add.w	sl, sl, #1
 80140c8:	fa1f f38a 	uxth.w	r3, sl
 80140cc:	429d      	cmp	r5, r3
 80140ce:	4606      	mov	r6, r0
 80140d0:	d8ca      	bhi.n	8014068 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80140d2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80140d6:	9d05      	ldr	r5, [sp, #20]
 80140d8:	8920      	ldrh	r0, [r4, #8]
 80140da:	fbb6 f3f0 	udiv	r3, r6, r0
 80140de:	fb00 6313 	mls	r3, r0, r3, r6
 80140e2:	b299      	uxth	r1, r3
 80140e4:	6863      	ldr	r3, [r4, #4]
 80140e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80140ea:	fb01 f303 	mul.w	r3, r1, r3
 80140ee:	6821      	ldr	r1, [r4, #0]
 80140f0:	3304      	adds	r3, #4
 80140f2:	4419      	add	r1, r3
 80140f4:	463a      	mov	r2, r7
 80140f6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80140fa:	9000      	str	r0, [sp, #0]
 80140fc:	2300      	movs	r3, #0
 80140fe:	4658      	mov	r0, fp
 8014100:	f7f9 f830 	bl	800d164 <ucdr_init_buffer_origin_offset>
 8014104:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014108:	4658      	mov	r0, fp
 801410a:	fa1f f289 	uxth.w	r2, r9
 801410e:	2302      	movs	r3, #2
 8014110:	210d      	movs	r1, #13
 8014112:	f7fb fa8b 	bl	800f62c <uxr_buffer_submessage_header>
 8014116:	9b03      	ldr	r3, [sp, #12]
 8014118:	8927      	ldrh	r7, [r4, #8]
 801411a:	7b20      	ldrb	r0, [r4, #12]
 801411c:	f108 0104 	add.w	r1, r8, #4
 8014120:	440b      	add	r3, r1
 8014122:	4619      	mov	r1, r3
 8014124:	fbb6 f3f7 	udiv	r3, r6, r7
 8014128:	fb07 6313 	mls	r3, r7, r3, r6
 801412c:	f1a5 0208 	sub.w	r2, r5, #8
 8014130:	b29d      	uxth	r5, r3
 8014132:	3004      	adds	r0, #4
 8014134:	6863      	ldr	r3, [r4, #4]
 8014136:	fbb3 f3f7 	udiv	r3, r3, r7
 801413a:	fb05 f303 	mul.w	r3, r5, r3
 801413e:	6825      	ldr	r5, [r4, #0]
 8014140:	4448      	add	r0, r9
 8014142:	50e8      	str	r0, [r5, r3]
 8014144:	9d04      	ldr	r5, [sp, #16]
 8014146:	eba2 0208 	sub.w	r2, r2, r8
 801414a:	4628      	mov	r0, r5
 801414c:	f7f9 f81c 	bl	800d188 <ucdr_init_buffer>
 8014150:	4628      	mov	r0, r5
 8014152:	493c      	ldr	r1, [pc, #240]	@ (8014244 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014154:	4622      	mov	r2, r4
 8014156:	f7f8 ffeb 	bl	800d130 <ucdr_set_on_full_buffer_callback>
 801415a:	2001      	movs	r0, #1
 801415c:	81e6      	strh	r6, [r4, #14]
 801415e:	b011      	add	sp, #68	@ 0x44
 8014160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014164:	2101      	movs	r1, #1
 8014166:	89e0      	ldrh	r0, [r4, #14]
 8014168:	f000 f950 	bl	801440c <uxr_seq_num_add>
 801416c:	8921      	ldrh	r1, [r4, #8]
 801416e:	4605      	mov	r5, r0
 8014170:	8a60      	ldrh	r0, [r4, #18]
 8014172:	f000 f94b 	bl	801440c <uxr_seq_num_add>
 8014176:	4601      	mov	r1, r0
 8014178:	4628      	mov	r0, r5
 801417a:	f000 f94f 	bl	801441c <uxr_seq_num_cmp>
 801417e:	2800      	cmp	r0, #0
 8014180:	dd42      	ble.n	8014208 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8014182:	2000      	movs	r0, #0
 8014184:	b011      	add	sp, #68	@ 0x44
 8014186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801418a:	8921      	ldrh	r1, [r4, #8]
 801418c:	8a60      	ldrh	r0, [r4, #18]
 801418e:	9205      	str	r2, [sp, #20]
 8014190:	f000 f93c 	bl	801440c <uxr_seq_num_add>
 8014194:	4601      	mov	r1, r0
 8014196:	4630      	mov	r0, r6
 8014198:	f000 f940 	bl	801441c <uxr_seq_num_cmp>
 801419c:	2800      	cmp	r0, #0
 801419e:	9a05      	ldr	r2, [sp, #20]
 80141a0:	dcef      	bgt.n	8014182 <uxr_prepare_reliable_buffer_to_write+0x216>
 80141a2:	8927      	ldrh	r7, [r4, #8]
 80141a4:	fbb6 f3f7 	udiv	r3, r6, r7
 80141a8:	fb07 6313 	mls	r3, r7, r3, r6
 80141ac:	b29d      	uxth	r5, r3
 80141ae:	6863      	ldr	r3, [r4, #4]
 80141b0:	6824      	ldr	r4, [r4, #0]
 80141b2:	fbb3 f3f7 	udiv	r3, r3, r7
 80141b6:	fb05 f303 	mul.w	r3, r5, r3
 80141ba:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80141be:	50e2      	str	r2, [r4, r3]
 80141c0:	2300      	movs	r3, #0
 80141c2:	f8cd 8000 	str.w	r8, [sp]
 80141c6:	f7f8 ffcd 	bl	800d164 <ucdr_init_buffer_origin_offset>
 80141ca:	2001      	movs	r0, #1
 80141cc:	e7da      	b.n	8014184 <uxr_prepare_reliable_buffer_to_write+0x218>
 80141ce:	b293      	uxth	r3, r2
 80141d0:	461a      	mov	r2, r3
 80141d2:	e737      	b.n	8014044 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80141d4:	4630      	mov	r0, r6
 80141d6:	2101      	movs	r1, #1
 80141d8:	9207      	str	r2, [sp, #28]
 80141da:	f000 f917 	bl	801440c <uxr_seq_num_add>
 80141de:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80141e2:	fbb0 f1fc 	udiv	r1, r0, ip
 80141e6:	fb0c 0111 	mls	r1, ip, r1, r0
 80141ea:	4606      	mov	r6, r0
 80141ec:	b288      	uxth	r0, r1
 80141ee:	6863      	ldr	r3, [r4, #4]
 80141f0:	fbb3 f1fc 	udiv	r1, r3, ip
 80141f4:	6823      	ldr	r3, [r4, #0]
 80141f6:	9a07      	ldr	r2, [sp, #28]
 80141f8:	fb00 f101 	mul.w	r1, r0, r1
 80141fc:	3104      	adds	r1, #4
 80141fe:	440b      	add	r3, r1
 8014200:	9303      	str	r3, [sp, #12]
 8014202:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014206:	e70a      	b.n	801401e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014208:	8921      	ldrh	r1, [r4, #8]
 801420a:	fbb5 f3f1 	udiv	r3, r5, r1
 801420e:	fb01 5313 	mls	r3, r1, r3, r5
 8014212:	b29a      	uxth	r2, r3
 8014214:	6863      	ldr	r3, [r4, #4]
 8014216:	fbb3 f3f1 	udiv	r3, r3, r1
 801421a:	6821      	ldr	r1, [r4, #0]
 801421c:	9804      	ldr	r0, [sp, #16]
 801421e:	fb02 f303 	mul.w	r3, r2, r3
 8014222:	3304      	adds	r3, #4
 8014224:	7b22      	ldrb	r2, [r4, #12]
 8014226:	4419      	add	r1, r3
 8014228:	445a      	add	r2, fp
 801422a:	f841 2c04 	str.w	r2, [r1, #-4]
 801422e:	7b23      	ldrb	r3, [r4, #12]
 8014230:	9300      	str	r3, [sp, #0]
 8014232:	2300      	movs	r3, #0
 8014234:	f7f8 ff96 	bl	800d164 <ucdr_init_buffer_origin_offset>
 8014238:	81e5      	strh	r5, [r4, #14]
 801423a:	2001      	movs	r0, #1
 801423c:	e7a2      	b.n	8014184 <uxr_prepare_reliable_buffer_to_write+0x218>
 801423e:	4682      	mov	sl, r0
 8014240:	e6ca      	b.n	8013fd8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014242:	bf00      	nop
 8014244:	08013e4d 	.word	0x08013e4d

08014248 <uxr_prepare_next_reliable_buffer_to_send>:
 8014248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424a:	4604      	mov	r4, r0
 801424c:	460f      	mov	r7, r1
 801424e:	8a00      	ldrh	r0, [r0, #16]
 8014250:	2101      	movs	r1, #1
 8014252:	4616      	mov	r6, r2
 8014254:	461d      	mov	r5, r3
 8014256:	f000 f8d9 	bl	801440c <uxr_seq_num_add>
 801425a:	8028      	strh	r0, [r5, #0]
 801425c:	8922      	ldrh	r2, [r4, #8]
 801425e:	fbb0 f3f2 	udiv	r3, r0, r2
 8014262:	fb02 0c13 	mls	ip, r2, r3, r0
 8014266:	fa1f fc8c 	uxth.w	ip, ip
 801426a:	6863      	ldr	r3, [r4, #4]
 801426c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014270:	fb0c fc03 	mul.w	ip, ip, r3
 8014274:	6823      	ldr	r3, [r4, #0]
 8014276:	89e1      	ldrh	r1, [r4, #14]
 8014278:	f10c 0c04 	add.w	ip, ip, #4
 801427c:	4463      	add	r3, ip
 801427e:	603b      	str	r3, [r7, #0]
 8014280:	6823      	ldr	r3, [r4, #0]
 8014282:	449c      	add	ip, r3
 8014284:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014288:	6033      	str	r3, [r6, #0]
 801428a:	f000 f8c7 	bl	801441c <uxr_seq_num_cmp>
 801428e:	2800      	cmp	r0, #0
 8014290:	dd01      	ble.n	8014296 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014292:	2000      	movs	r0, #0
 8014294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014296:	7b23      	ldrb	r3, [r4, #12]
 8014298:	6832      	ldr	r2, [r6, #0]
 801429a:	429a      	cmp	r2, r3
 801429c:	d9f9      	bls.n	8014292 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801429e:	8a61      	ldrh	r1, [r4, #18]
 80142a0:	8a20      	ldrh	r0, [r4, #16]
 80142a2:	f000 f8b7 	bl	8014414 <uxr_seq_num_sub>
 80142a6:	8923      	ldrh	r3, [r4, #8]
 80142a8:	4283      	cmp	r3, r0
 80142aa:	d0f2      	beq.n	8014292 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80142ac:	8828      	ldrh	r0, [r5, #0]
 80142ae:	89e3      	ldrh	r3, [r4, #14]
 80142b0:	8220      	strh	r0, [r4, #16]
 80142b2:	4298      	cmp	r0, r3
 80142b4:	d001      	beq.n	80142ba <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80142b6:	2001      	movs	r0, #1
 80142b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142ba:	2101      	movs	r1, #1
 80142bc:	f000 f8a6 	bl	801440c <uxr_seq_num_add>
 80142c0:	81e0      	strh	r0, [r4, #14]
 80142c2:	2001      	movs	r0, #1
 80142c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142c6:	bf00      	nop

080142c8 <uxr_update_output_stream_heartbeat_timestamp>:
 80142c8:	b570      	push	{r4, r5, r6, lr}
 80142ca:	8a01      	ldrh	r1, [r0, #16]
 80142cc:	4604      	mov	r4, r0
 80142ce:	8a40      	ldrh	r0, [r0, #18]
 80142d0:	4615      	mov	r5, r2
 80142d2:	461e      	mov	r6, r3
 80142d4:	f000 f8a2 	bl	801441c <uxr_seq_num_cmp>
 80142d8:	2800      	cmp	r0, #0
 80142da:	db07      	blt.n	80142ec <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80142dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80142e4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80142e8:	2000      	movs	r0, #0
 80142ea:	bd70      	pop	{r4, r5, r6, pc}
 80142ec:	f894 0020 	ldrb.w	r0, [r4, #32]
 80142f0:	b940      	cbnz	r0, 8014304 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80142f2:	2301      	movs	r3, #1
 80142f4:	f884 3020 	strb.w	r3, [r4, #32]
 80142f8:	3564      	adds	r5, #100	@ 0x64
 80142fa:	f146 0600 	adc.w	r6, r6, #0
 80142fe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014302:	bd70      	pop	{r4, r5, r6, pc}
 8014304:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014308:	4295      	cmp	r5, r2
 801430a:	eb76 0303 	sbcs.w	r3, r6, r3
 801430e:	bfa5      	ittet	ge
 8014310:	3001      	addge	r0, #1
 8014312:	f884 0020 	strbge.w	r0, [r4, #32]
 8014316:	2000      	movlt	r0, #0
 8014318:	2001      	movge	r0, #1
 801431a:	e7ed      	b.n	80142f8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801431c <uxr_begin_output_nack_buffer_it>:
 801431c:	8a40      	ldrh	r0, [r0, #18]
 801431e:	4770      	bx	lr

08014320 <uxr_next_reliable_nack_buffer_to_send>:
 8014320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014324:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014328:	b082      	sub	sp, #8
 801432a:	f1b8 0f00 	cmp.w	r8, #0
 801432e:	d011      	beq.n	8014354 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014330:	4604      	mov	r4, r0
 8014332:	8818      	ldrh	r0, [r3, #0]
 8014334:	460e      	mov	r6, r1
 8014336:	4617      	mov	r7, r2
 8014338:	461d      	mov	r5, r3
 801433a:	2101      	movs	r1, #1
 801433c:	f000 f866 	bl	801440c <uxr_seq_num_add>
 8014340:	8028      	strh	r0, [r5, #0]
 8014342:	8a21      	ldrh	r1, [r4, #16]
 8014344:	f000 f86a 	bl	801441c <uxr_seq_num_cmp>
 8014348:	2800      	cmp	r0, #0
 801434a:	dd07      	ble.n	801435c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801434c:	f04f 0800 	mov.w	r8, #0
 8014350:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8014354:	4640      	mov	r0, r8
 8014356:	b002      	add	sp, #8
 8014358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801435c:	8921      	ldrh	r1, [r4, #8]
 801435e:	8828      	ldrh	r0, [r5, #0]
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	fbb0 f2f1 	udiv	r2, r0, r1
 8014366:	fb01 0c12 	mls	ip, r1, r2, r0
 801436a:	fa1f f28c 	uxth.w	r2, ip
 801436e:	9301      	str	r3, [sp, #4]
 8014370:	6863      	ldr	r3, [r4, #4]
 8014372:	fbb3 fcf1 	udiv	ip, r3, r1
 8014376:	9b01      	ldr	r3, [sp, #4]
 8014378:	fb02 fc0c 	mul.w	ip, r2, ip
 801437c:	f10c 0c04 	add.w	ip, ip, #4
 8014380:	4463      	add	r3, ip
 8014382:	6033      	str	r3, [r6, #0]
 8014384:	6823      	ldr	r3, [r4, #0]
 8014386:	4463      	add	r3, ip
 8014388:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801438c:	603b      	str	r3, [r7, #0]
 801438e:	7b22      	ldrb	r2, [r4, #12]
 8014390:	429a      	cmp	r2, r3
 8014392:	d0d2      	beq.n	801433a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8014394:	4640      	mov	r0, r8
 8014396:	b002      	add	sp, #8
 8014398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801439c <uxr_process_acknack>:
 801439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801439e:	4604      	mov	r4, r0
 80143a0:	460e      	mov	r6, r1
 80143a2:	4610      	mov	r0, r2
 80143a4:	2101      	movs	r1, #1
 80143a6:	f000 f835 	bl	8014414 <uxr_seq_num_sub>
 80143aa:	8a61      	ldrh	r1, [r4, #18]
 80143ac:	f000 f832 	bl	8014414 <uxr_seq_num_sub>
 80143b0:	b1c0      	cbz	r0, 80143e4 <uxr_process_acknack+0x48>
 80143b2:	4605      	mov	r5, r0
 80143b4:	2700      	movs	r7, #0
 80143b6:	2101      	movs	r1, #1
 80143b8:	8a60      	ldrh	r0, [r4, #18]
 80143ba:	f000 f827 	bl	801440c <uxr_seq_num_add>
 80143be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80143c2:	fbb0 f1fc 	udiv	r1, r0, ip
 80143c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80143ca:	fb0c 0111 	mls	r1, ip, r1, r0
 80143ce:	b289      	uxth	r1, r1
 80143d0:	3701      	adds	r7, #1
 80143d2:	fbb3 f3fc 	udiv	r3, r3, ip
 80143d6:	fb01 f303 	mul.w	r3, r1, r3
 80143da:	42bd      	cmp	r5, r7
 80143dc:	7b21      	ldrb	r1, [r4, #12]
 80143de:	8260      	strh	r0, [r4, #18]
 80143e0:	50d1      	str	r1, [r2, r3]
 80143e2:	d1e8      	bne.n	80143b6 <uxr_process_acknack+0x1a>
 80143e4:	3e00      	subs	r6, #0
 80143e6:	f04f 0300 	mov.w	r3, #0
 80143ea:	bf18      	it	ne
 80143ec:	2601      	movne	r6, #1
 80143ee:	f884 3020 	strb.w	r3, [r4, #32]
 80143f2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80143f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080143f8 <uxr_is_output_up_to_date>:
 80143f8:	8a01      	ldrh	r1, [r0, #16]
 80143fa:	8a40      	ldrh	r0, [r0, #18]
 80143fc:	b508      	push	{r3, lr}
 80143fe:	f000 f80d 	bl	801441c <uxr_seq_num_cmp>
 8014402:	fab0 f080 	clz	r0, r0
 8014406:	0940      	lsrs	r0, r0, #5
 8014408:	bd08      	pop	{r3, pc}
 801440a:	bf00      	nop

0801440c <uxr_seq_num_add>:
 801440c:	4408      	add	r0, r1
 801440e:	b280      	uxth	r0, r0
 8014410:	4770      	bx	lr
 8014412:	bf00      	nop

08014414 <uxr_seq_num_sub>:
 8014414:	1a40      	subs	r0, r0, r1
 8014416:	b280      	uxth	r0, r0
 8014418:	4770      	bx	lr
 801441a:	bf00      	nop

0801441c <uxr_seq_num_cmp>:
 801441c:	4288      	cmp	r0, r1
 801441e:	d011      	beq.n	8014444 <uxr_seq_num_cmp+0x28>
 8014420:	d309      	bcc.n	8014436 <uxr_seq_num_cmp+0x1a>
 8014422:	4288      	cmp	r0, r1
 8014424:	d910      	bls.n	8014448 <uxr_seq_num_cmp+0x2c>
 8014426:	1a40      	subs	r0, r0, r1
 8014428:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801442c:	bfd4      	ite	le
 801442e:	2001      	movle	r0, #1
 8014430:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014434:	4770      	bx	lr
 8014436:	1a0b      	subs	r3, r1, r0
 8014438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801443c:	daf1      	bge.n	8014422 <uxr_seq_num_cmp+0x6>
 801443e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014442:	4770      	bx	lr
 8014444:	2000      	movs	r0, #0
 8014446:	4770      	bx	lr
 8014448:	2001      	movs	r0, #1
 801444a:	4770      	bx	lr

0801444c <rcl_get_default_domain_id>:
 801444c:	b530      	push	{r4, r5, lr}
 801444e:	b083      	sub	sp, #12
 8014450:	2300      	movs	r3, #0
 8014452:	9300      	str	r3, [sp, #0]
 8014454:	b1d0      	cbz	r0, 801448c <rcl_get_default_domain_id+0x40>
 8014456:	4604      	mov	r4, r0
 8014458:	4669      	mov	r1, sp
 801445a:	4815      	ldr	r0, [pc, #84]	@ (80144b0 <rcl_get_default_domain_id+0x64>)
 801445c:	f7f5 fde4 	bl	800a028 <rcutils_get_env>
 8014460:	4602      	mov	r2, r0
 8014462:	b110      	cbz	r0, 801446a <rcl_get_default_domain_id+0x1e>
 8014464:	2001      	movs	r0, #1
 8014466:	b003      	add	sp, #12
 8014468:	bd30      	pop	{r4, r5, pc}
 801446a:	9b00      	ldr	r3, [sp, #0]
 801446c:	b18b      	cbz	r3, 8014492 <rcl_get_default_domain_id+0x46>
 801446e:	7818      	ldrb	r0, [r3, #0]
 8014470:	2800      	cmp	r0, #0
 8014472:	d0f8      	beq.n	8014466 <rcl_get_default_domain_id+0x1a>
 8014474:	a901      	add	r1, sp, #4
 8014476:	4618      	mov	r0, r3
 8014478:	9201      	str	r2, [sp, #4]
 801447a:	f000 fa81 	bl	8014980 <strtoul>
 801447e:	4605      	mov	r5, r0
 8014480:	b150      	cbz	r0, 8014498 <rcl_get_default_domain_id+0x4c>
 8014482:	1c43      	adds	r3, r0, #1
 8014484:	d00d      	beq.n	80144a2 <rcl_get_default_domain_id+0x56>
 8014486:	6025      	str	r5, [r4, #0]
 8014488:	2000      	movs	r0, #0
 801448a:	e7ec      	b.n	8014466 <rcl_get_default_domain_id+0x1a>
 801448c:	200b      	movs	r0, #11
 801448e:	b003      	add	sp, #12
 8014490:	bd30      	pop	{r4, r5, pc}
 8014492:	4618      	mov	r0, r3
 8014494:	b003      	add	sp, #12
 8014496:	bd30      	pop	{r4, r5, pc}
 8014498:	9b01      	ldr	r3, [sp, #4]
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d0f2      	beq.n	8014486 <rcl_get_default_domain_id+0x3a>
 80144a0:	e7e0      	b.n	8014464 <rcl_get_default_domain_id+0x18>
 80144a2:	f000 fdad 	bl	8015000 <__errno>
 80144a6:	6803      	ldr	r3, [r0, #0]
 80144a8:	2b22      	cmp	r3, #34	@ 0x22
 80144aa:	d1ec      	bne.n	8014486 <rcl_get_default_domain_id+0x3a>
 80144ac:	e7da      	b.n	8014464 <rcl_get_default_domain_id+0x18>
 80144ae:	bf00      	nop
 80144b0:	080165e8 	.word	0x080165e8

080144b4 <rcl_publisher_is_valid>:
 80144b4:	b1a0      	cbz	r0, 80144e0 <rcl_publisher_is_valid+0x2c>
 80144b6:	6803      	ldr	r3, [r0, #0]
 80144b8:	b510      	push	{r4, lr}
 80144ba:	4604      	mov	r4, r0
 80144bc:	b173      	cbz	r3, 80144dc <rcl_publisher_is_valid+0x28>
 80144be:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80144c2:	b15a      	cbz	r2, 80144dc <rcl_publisher_is_valid+0x28>
 80144c4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80144c8:	f7fc f802 	bl	80104d0 <rcl_context_is_valid>
 80144cc:	b130      	cbz	r0, 80144dc <rcl_publisher_is_valid+0x28>
 80144ce:	6823      	ldr	r3, [r4, #0]
 80144d0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80144d4:	3800      	subs	r0, #0
 80144d6:	bf18      	it	ne
 80144d8:	2001      	movne	r0, #1
 80144da:	bd10      	pop	{r4, pc}
 80144dc:	2000      	movs	r0, #0
 80144de:	bd10      	pop	{r4, pc}
 80144e0:	2000      	movs	r0, #0
 80144e2:	4770      	bx	lr

080144e4 <rcl_publisher_is_valid_except_context>:
 80144e4:	b130      	cbz	r0, 80144f4 <rcl_publisher_is_valid_except_context+0x10>
 80144e6:	6800      	ldr	r0, [r0, #0]
 80144e8:	b120      	cbz	r0, 80144f4 <rcl_publisher_is_valid_except_context+0x10>
 80144ea:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80144ee:	3800      	subs	r0, #0
 80144f0:	bf18      	it	ne
 80144f2:	2001      	movne	r0, #1
 80144f4:	4770      	bx	lr
 80144f6:	bf00      	nop

080144f8 <calloc>:
 80144f8:	4b02      	ldr	r3, [pc, #8]	@ (8014504 <calloc+0xc>)
 80144fa:	460a      	mov	r2, r1
 80144fc:	4601      	mov	r1, r0
 80144fe:	6818      	ldr	r0, [r3, #0]
 8014500:	f000 b802 	b.w	8014508 <_calloc_r>
 8014504:	20000190 	.word	0x20000190

08014508 <_calloc_r>:
 8014508:	b570      	push	{r4, r5, r6, lr}
 801450a:	fba1 5402 	umull	r5, r4, r1, r2
 801450e:	b934      	cbnz	r4, 801451e <_calloc_r+0x16>
 8014510:	4629      	mov	r1, r5
 8014512:	f000 f899 	bl	8014648 <_malloc_r>
 8014516:	4606      	mov	r6, r0
 8014518:	b928      	cbnz	r0, 8014526 <_calloc_r+0x1e>
 801451a:	4630      	mov	r0, r6
 801451c:	bd70      	pop	{r4, r5, r6, pc}
 801451e:	220c      	movs	r2, #12
 8014520:	6002      	str	r2, [r0, #0]
 8014522:	2600      	movs	r6, #0
 8014524:	e7f9      	b.n	801451a <_calloc_r+0x12>
 8014526:	462a      	mov	r2, r5
 8014528:	4621      	mov	r1, r4
 801452a:	f000 fcd5 	bl	8014ed8 <memset>
 801452e:	e7f4      	b.n	801451a <_calloc_r+0x12>

08014530 <exit>:
 8014530:	b508      	push	{r3, lr}
 8014532:	4b06      	ldr	r3, [pc, #24]	@ (801454c <exit+0x1c>)
 8014534:	4604      	mov	r4, r0
 8014536:	b113      	cbz	r3, 801453e <exit+0xe>
 8014538:	2100      	movs	r1, #0
 801453a:	f3af 8000 	nop.w
 801453e:	4b04      	ldr	r3, [pc, #16]	@ (8014550 <exit+0x20>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	b103      	cbz	r3, 8014546 <exit+0x16>
 8014544:	4798      	blx	r3
 8014546:	4620      	mov	r0, r4
 8014548:	f7ed f820 	bl	800158c <_exit>
 801454c:	00000000 	.word	0x00000000
 8014550:	2000ae40 	.word	0x2000ae40

08014554 <getenv>:
 8014554:	b507      	push	{r0, r1, r2, lr}
 8014556:	4b04      	ldr	r3, [pc, #16]	@ (8014568 <getenv+0x14>)
 8014558:	4601      	mov	r1, r0
 801455a:	aa01      	add	r2, sp, #4
 801455c:	6818      	ldr	r0, [r3, #0]
 801455e:	f000 f805 	bl	801456c <_findenv_r>
 8014562:	b003      	add	sp, #12
 8014564:	f85d fb04 	ldr.w	pc, [sp], #4
 8014568:	20000190 	.word	0x20000190

0801456c <_findenv_r>:
 801456c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014570:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80145e0 <_findenv_r+0x74>
 8014574:	4606      	mov	r6, r0
 8014576:	4689      	mov	r9, r1
 8014578:	4617      	mov	r7, r2
 801457a:	f000 fda3 	bl	80150c4 <__env_lock>
 801457e:	f8da 4000 	ldr.w	r4, [sl]
 8014582:	b134      	cbz	r4, 8014592 <_findenv_r+0x26>
 8014584:	464b      	mov	r3, r9
 8014586:	4698      	mov	r8, r3
 8014588:	f813 2b01 	ldrb.w	r2, [r3], #1
 801458c:	b13a      	cbz	r2, 801459e <_findenv_r+0x32>
 801458e:	2a3d      	cmp	r2, #61	@ 0x3d
 8014590:	d1f9      	bne.n	8014586 <_findenv_r+0x1a>
 8014592:	4630      	mov	r0, r6
 8014594:	f000 fd9c 	bl	80150d0 <__env_unlock>
 8014598:	2000      	movs	r0, #0
 801459a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801459e:	eba8 0809 	sub.w	r8, r8, r9
 80145a2:	46a3      	mov	fp, r4
 80145a4:	f854 0b04 	ldr.w	r0, [r4], #4
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d0f2      	beq.n	8014592 <_findenv_r+0x26>
 80145ac:	4642      	mov	r2, r8
 80145ae:	4649      	mov	r1, r9
 80145b0:	f000 fca7 	bl	8014f02 <strncmp>
 80145b4:	2800      	cmp	r0, #0
 80145b6:	d1f4      	bne.n	80145a2 <_findenv_r+0x36>
 80145b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80145bc:	eb03 0508 	add.w	r5, r3, r8
 80145c0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80145c4:	2b3d      	cmp	r3, #61	@ 0x3d
 80145c6:	d1ec      	bne.n	80145a2 <_findenv_r+0x36>
 80145c8:	f8da 3000 	ldr.w	r3, [sl]
 80145cc:	ebab 0303 	sub.w	r3, fp, r3
 80145d0:	109b      	asrs	r3, r3, #2
 80145d2:	4630      	mov	r0, r6
 80145d4:	603b      	str	r3, [r7, #0]
 80145d6:	f000 fd7b 	bl	80150d0 <__env_unlock>
 80145da:	1c68      	adds	r0, r5, #1
 80145dc:	e7dd      	b.n	801459a <_findenv_r+0x2e>
 80145de:	bf00      	nop
 80145e0:	20000000 	.word	0x20000000

080145e4 <malloc>:
 80145e4:	4b02      	ldr	r3, [pc, #8]	@ (80145f0 <malloc+0xc>)
 80145e6:	4601      	mov	r1, r0
 80145e8:	6818      	ldr	r0, [r3, #0]
 80145ea:	f000 b82d 	b.w	8014648 <_malloc_r>
 80145ee:	bf00      	nop
 80145f0:	20000190 	.word	0x20000190

080145f4 <free>:
 80145f4:	4b02      	ldr	r3, [pc, #8]	@ (8014600 <free+0xc>)
 80145f6:	4601      	mov	r1, r0
 80145f8:	6818      	ldr	r0, [r3, #0]
 80145fa:	f000 bd6f 	b.w	80150dc <_free_r>
 80145fe:	bf00      	nop
 8014600:	20000190 	.word	0x20000190

08014604 <sbrk_aligned>:
 8014604:	b570      	push	{r4, r5, r6, lr}
 8014606:	4e0f      	ldr	r6, [pc, #60]	@ (8014644 <sbrk_aligned+0x40>)
 8014608:	460c      	mov	r4, r1
 801460a:	6831      	ldr	r1, [r6, #0]
 801460c:	4605      	mov	r5, r0
 801460e:	b911      	cbnz	r1, 8014616 <sbrk_aligned+0x12>
 8014610:	f000 fcd4 	bl	8014fbc <_sbrk_r>
 8014614:	6030      	str	r0, [r6, #0]
 8014616:	4621      	mov	r1, r4
 8014618:	4628      	mov	r0, r5
 801461a:	f000 fccf 	bl	8014fbc <_sbrk_r>
 801461e:	1c43      	adds	r3, r0, #1
 8014620:	d103      	bne.n	801462a <sbrk_aligned+0x26>
 8014622:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014626:	4620      	mov	r0, r4
 8014628:	bd70      	pop	{r4, r5, r6, pc}
 801462a:	1cc4      	adds	r4, r0, #3
 801462c:	f024 0403 	bic.w	r4, r4, #3
 8014630:	42a0      	cmp	r0, r4
 8014632:	d0f8      	beq.n	8014626 <sbrk_aligned+0x22>
 8014634:	1a21      	subs	r1, r4, r0
 8014636:	4628      	mov	r0, r5
 8014638:	f000 fcc0 	bl	8014fbc <_sbrk_r>
 801463c:	3001      	adds	r0, #1
 801463e:	d1f2      	bne.n	8014626 <sbrk_aligned+0x22>
 8014640:	e7ef      	b.n	8014622 <sbrk_aligned+0x1e>
 8014642:	bf00      	nop
 8014644:	2000ad00 	.word	0x2000ad00

08014648 <_malloc_r>:
 8014648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801464c:	1ccd      	adds	r5, r1, #3
 801464e:	f025 0503 	bic.w	r5, r5, #3
 8014652:	3508      	adds	r5, #8
 8014654:	2d0c      	cmp	r5, #12
 8014656:	bf38      	it	cc
 8014658:	250c      	movcc	r5, #12
 801465a:	2d00      	cmp	r5, #0
 801465c:	4606      	mov	r6, r0
 801465e:	db01      	blt.n	8014664 <_malloc_r+0x1c>
 8014660:	42a9      	cmp	r1, r5
 8014662:	d904      	bls.n	801466e <_malloc_r+0x26>
 8014664:	230c      	movs	r3, #12
 8014666:	6033      	str	r3, [r6, #0]
 8014668:	2000      	movs	r0, #0
 801466a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801466e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014744 <_malloc_r+0xfc>
 8014672:	f000 f869 	bl	8014748 <__malloc_lock>
 8014676:	f8d8 3000 	ldr.w	r3, [r8]
 801467a:	461c      	mov	r4, r3
 801467c:	bb44      	cbnz	r4, 80146d0 <_malloc_r+0x88>
 801467e:	4629      	mov	r1, r5
 8014680:	4630      	mov	r0, r6
 8014682:	f7ff ffbf 	bl	8014604 <sbrk_aligned>
 8014686:	1c43      	adds	r3, r0, #1
 8014688:	4604      	mov	r4, r0
 801468a:	d158      	bne.n	801473e <_malloc_r+0xf6>
 801468c:	f8d8 4000 	ldr.w	r4, [r8]
 8014690:	4627      	mov	r7, r4
 8014692:	2f00      	cmp	r7, #0
 8014694:	d143      	bne.n	801471e <_malloc_r+0xd6>
 8014696:	2c00      	cmp	r4, #0
 8014698:	d04b      	beq.n	8014732 <_malloc_r+0xea>
 801469a:	6823      	ldr	r3, [r4, #0]
 801469c:	4639      	mov	r1, r7
 801469e:	4630      	mov	r0, r6
 80146a0:	eb04 0903 	add.w	r9, r4, r3
 80146a4:	f000 fc8a 	bl	8014fbc <_sbrk_r>
 80146a8:	4581      	cmp	r9, r0
 80146aa:	d142      	bne.n	8014732 <_malloc_r+0xea>
 80146ac:	6821      	ldr	r1, [r4, #0]
 80146ae:	1a6d      	subs	r5, r5, r1
 80146b0:	4629      	mov	r1, r5
 80146b2:	4630      	mov	r0, r6
 80146b4:	f7ff ffa6 	bl	8014604 <sbrk_aligned>
 80146b8:	3001      	adds	r0, #1
 80146ba:	d03a      	beq.n	8014732 <_malloc_r+0xea>
 80146bc:	6823      	ldr	r3, [r4, #0]
 80146be:	442b      	add	r3, r5
 80146c0:	6023      	str	r3, [r4, #0]
 80146c2:	f8d8 3000 	ldr.w	r3, [r8]
 80146c6:	685a      	ldr	r2, [r3, #4]
 80146c8:	bb62      	cbnz	r2, 8014724 <_malloc_r+0xdc>
 80146ca:	f8c8 7000 	str.w	r7, [r8]
 80146ce:	e00f      	b.n	80146f0 <_malloc_r+0xa8>
 80146d0:	6822      	ldr	r2, [r4, #0]
 80146d2:	1b52      	subs	r2, r2, r5
 80146d4:	d420      	bmi.n	8014718 <_malloc_r+0xd0>
 80146d6:	2a0b      	cmp	r2, #11
 80146d8:	d917      	bls.n	801470a <_malloc_r+0xc2>
 80146da:	1961      	adds	r1, r4, r5
 80146dc:	42a3      	cmp	r3, r4
 80146de:	6025      	str	r5, [r4, #0]
 80146e0:	bf18      	it	ne
 80146e2:	6059      	strne	r1, [r3, #4]
 80146e4:	6863      	ldr	r3, [r4, #4]
 80146e6:	bf08      	it	eq
 80146e8:	f8c8 1000 	streq.w	r1, [r8]
 80146ec:	5162      	str	r2, [r4, r5]
 80146ee:	604b      	str	r3, [r1, #4]
 80146f0:	4630      	mov	r0, r6
 80146f2:	f000 f82f 	bl	8014754 <__malloc_unlock>
 80146f6:	f104 000b 	add.w	r0, r4, #11
 80146fa:	1d23      	adds	r3, r4, #4
 80146fc:	f020 0007 	bic.w	r0, r0, #7
 8014700:	1ac2      	subs	r2, r0, r3
 8014702:	bf1c      	itt	ne
 8014704:	1a1b      	subne	r3, r3, r0
 8014706:	50a3      	strne	r3, [r4, r2]
 8014708:	e7af      	b.n	801466a <_malloc_r+0x22>
 801470a:	6862      	ldr	r2, [r4, #4]
 801470c:	42a3      	cmp	r3, r4
 801470e:	bf0c      	ite	eq
 8014710:	f8c8 2000 	streq.w	r2, [r8]
 8014714:	605a      	strne	r2, [r3, #4]
 8014716:	e7eb      	b.n	80146f0 <_malloc_r+0xa8>
 8014718:	4623      	mov	r3, r4
 801471a:	6864      	ldr	r4, [r4, #4]
 801471c:	e7ae      	b.n	801467c <_malloc_r+0x34>
 801471e:	463c      	mov	r4, r7
 8014720:	687f      	ldr	r7, [r7, #4]
 8014722:	e7b6      	b.n	8014692 <_malloc_r+0x4a>
 8014724:	461a      	mov	r2, r3
 8014726:	685b      	ldr	r3, [r3, #4]
 8014728:	42a3      	cmp	r3, r4
 801472a:	d1fb      	bne.n	8014724 <_malloc_r+0xdc>
 801472c:	2300      	movs	r3, #0
 801472e:	6053      	str	r3, [r2, #4]
 8014730:	e7de      	b.n	80146f0 <_malloc_r+0xa8>
 8014732:	230c      	movs	r3, #12
 8014734:	6033      	str	r3, [r6, #0]
 8014736:	4630      	mov	r0, r6
 8014738:	f000 f80c 	bl	8014754 <__malloc_unlock>
 801473c:	e794      	b.n	8014668 <_malloc_r+0x20>
 801473e:	6005      	str	r5, [r0, #0]
 8014740:	e7d6      	b.n	80146f0 <_malloc_r+0xa8>
 8014742:	bf00      	nop
 8014744:	2000ad04 	.word	0x2000ad04

08014748 <__malloc_lock>:
 8014748:	4801      	ldr	r0, [pc, #4]	@ (8014750 <__malloc_lock+0x8>)
 801474a:	f000 bc84 	b.w	8015056 <__retarget_lock_acquire_recursive>
 801474e:	bf00      	nop
 8014750:	2000ae49 	.word	0x2000ae49

08014754 <__malloc_unlock>:
 8014754:	4801      	ldr	r0, [pc, #4]	@ (801475c <__malloc_unlock+0x8>)
 8014756:	f000 bc7f 	b.w	8015058 <__retarget_lock_release_recursive>
 801475a:	bf00      	nop
 801475c:	2000ae49 	.word	0x2000ae49

08014760 <srand>:
 8014760:	b538      	push	{r3, r4, r5, lr}
 8014762:	4b10      	ldr	r3, [pc, #64]	@ (80147a4 <srand+0x44>)
 8014764:	681d      	ldr	r5, [r3, #0]
 8014766:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014768:	4604      	mov	r4, r0
 801476a:	b9b3      	cbnz	r3, 801479a <srand+0x3a>
 801476c:	2018      	movs	r0, #24
 801476e:	f7ff ff39 	bl	80145e4 <malloc>
 8014772:	4602      	mov	r2, r0
 8014774:	6328      	str	r0, [r5, #48]	@ 0x30
 8014776:	b920      	cbnz	r0, 8014782 <srand+0x22>
 8014778:	4b0b      	ldr	r3, [pc, #44]	@ (80147a8 <srand+0x48>)
 801477a:	480c      	ldr	r0, [pc, #48]	@ (80147ac <srand+0x4c>)
 801477c:	2146      	movs	r1, #70	@ 0x46
 801477e:	f000 fc83 	bl	8015088 <__assert_func>
 8014782:	490b      	ldr	r1, [pc, #44]	@ (80147b0 <srand+0x50>)
 8014784:	4b0b      	ldr	r3, [pc, #44]	@ (80147b4 <srand+0x54>)
 8014786:	e9c0 1300 	strd	r1, r3, [r0]
 801478a:	4b0b      	ldr	r3, [pc, #44]	@ (80147b8 <srand+0x58>)
 801478c:	6083      	str	r3, [r0, #8]
 801478e:	230b      	movs	r3, #11
 8014790:	8183      	strh	r3, [r0, #12]
 8014792:	2100      	movs	r1, #0
 8014794:	2001      	movs	r0, #1
 8014796:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801479a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801479c:	2200      	movs	r2, #0
 801479e:	611c      	str	r4, [r3, #16]
 80147a0:	615a      	str	r2, [r3, #20]
 80147a2:	bd38      	pop	{r3, r4, r5, pc}
 80147a4:	20000190 	.word	0x20000190
 80147a8:	08016ad8 	.word	0x08016ad8
 80147ac:	08016aef 	.word	0x08016aef
 80147b0:	abcd330e 	.word	0xabcd330e
 80147b4:	e66d1234 	.word	0xe66d1234
 80147b8:	0005deec 	.word	0x0005deec

080147bc <rand>:
 80147bc:	4b16      	ldr	r3, [pc, #88]	@ (8014818 <rand+0x5c>)
 80147be:	b510      	push	{r4, lr}
 80147c0:	681c      	ldr	r4, [r3, #0]
 80147c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80147c4:	b9b3      	cbnz	r3, 80147f4 <rand+0x38>
 80147c6:	2018      	movs	r0, #24
 80147c8:	f7ff ff0c 	bl	80145e4 <malloc>
 80147cc:	4602      	mov	r2, r0
 80147ce:	6320      	str	r0, [r4, #48]	@ 0x30
 80147d0:	b920      	cbnz	r0, 80147dc <rand+0x20>
 80147d2:	4b12      	ldr	r3, [pc, #72]	@ (801481c <rand+0x60>)
 80147d4:	4812      	ldr	r0, [pc, #72]	@ (8014820 <rand+0x64>)
 80147d6:	2152      	movs	r1, #82	@ 0x52
 80147d8:	f000 fc56 	bl	8015088 <__assert_func>
 80147dc:	4911      	ldr	r1, [pc, #68]	@ (8014824 <rand+0x68>)
 80147de:	4b12      	ldr	r3, [pc, #72]	@ (8014828 <rand+0x6c>)
 80147e0:	e9c0 1300 	strd	r1, r3, [r0]
 80147e4:	4b11      	ldr	r3, [pc, #68]	@ (801482c <rand+0x70>)
 80147e6:	6083      	str	r3, [r0, #8]
 80147e8:	230b      	movs	r3, #11
 80147ea:	8183      	strh	r3, [r0, #12]
 80147ec:	2100      	movs	r1, #0
 80147ee:	2001      	movs	r0, #1
 80147f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80147f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80147f6:	480e      	ldr	r0, [pc, #56]	@ (8014830 <rand+0x74>)
 80147f8:	690b      	ldr	r3, [r1, #16]
 80147fa:	694c      	ldr	r4, [r1, #20]
 80147fc:	4a0d      	ldr	r2, [pc, #52]	@ (8014834 <rand+0x78>)
 80147fe:	4358      	muls	r0, r3
 8014800:	fb02 0004 	mla	r0, r2, r4, r0
 8014804:	fba3 3202 	umull	r3, r2, r3, r2
 8014808:	3301      	adds	r3, #1
 801480a:	eb40 0002 	adc.w	r0, r0, r2
 801480e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014812:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014816:	bd10      	pop	{r4, pc}
 8014818:	20000190 	.word	0x20000190
 801481c:	08016ad8 	.word	0x08016ad8
 8014820:	08016aef 	.word	0x08016aef
 8014824:	abcd330e 	.word	0xabcd330e
 8014828:	e66d1234 	.word	0xe66d1234
 801482c:	0005deec 	.word	0x0005deec
 8014830:	5851f42d 	.word	0x5851f42d
 8014834:	4c957f2d 	.word	0x4c957f2d

08014838 <realloc>:
 8014838:	4b02      	ldr	r3, [pc, #8]	@ (8014844 <realloc+0xc>)
 801483a:	460a      	mov	r2, r1
 801483c:	4601      	mov	r1, r0
 801483e:	6818      	ldr	r0, [r3, #0]
 8014840:	f000 b802 	b.w	8014848 <_realloc_r>
 8014844:	20000190 	.word	0x20000190

08014848 <_realloc_r>:
 8014848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801484c:	4607      	mov	r7, r0
 801484e:	4614      	mov	r4, r2
 8014850:	460d      	mov	r5, r1
 8014852:	b921      	cbnz	r1, 801485e <_realloc_r+0x16>
 8014854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014858:	4611      	mov	r1, r2
 801485a:	f7ff bef5 	b.w	8014648 <_malloc_r>
 801485e:	b92a      	cbnz	r2, 801486c <_realloc_r+0x24>
 8014860:	f000 fc3c 	bl	80150dc <_free_r>
 8014864:	4625      	mov	r5, r4
 8014866:	4628      	mov	r0, r5
 8014868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801486c:	f000 fc80 	bl	8015170 <_malloc_usable_size_r>
 8014870:	4284      	cmp	r4, r0
 8014872:	4606      	mov	r6, r0
 8014874:	d802      	bhi.n	801487c <_realloc_r+0x34>
 8014876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801487a:	d8f4      	bhi.n	8014866 <_realloc_r+0x1e>
 801487c:	4621      	mov	r1, r4
 801487e:	4638      	mov	r0, r7
 8014880:	f7ff fee2 	bl	8014648 <_malloc_r>
 8014884:	4680      	mov	r8, r0
 8014886:	b908      	cbnz	r0, 801488c <_realloc_r+0x44>
 8014888:	4645      	mov	r5, r8
 801488a:	e7ec      	b.n	8014866 <_realloc_r+0x1e>
 801488c:	42b4      	cmp	r4, r6
 801488e:	4622      	mov	r2, r4
 8014890:	4629      	mov	r1, r5
 8014892:	bf28      	it	cs
 8014894:	4632      	movcs	r2, r6
 8014896:	f000 fbe8 	bl	801506a <memcpy>
 801489a:	4629      	mov	r1, r5
 801489c:	4638      	mov	r0, r7
 801489e:	f000 fc1d 	bl	80150dc <_free_r>
 80148a2:	e7f1      	b.n	8014888 <_realloc_r+0x40>

080148a4 <_strtoul_l.isra.0>:
 80148a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148a8:	4e34      	ldr	r6, [pc, #208]	@ (801497c <_strtoul_l.isra.0+0xd8>)
 80148aa:	4686      	mov	lr, r0
 80148ac:	460d      	mov	r5, r1
 80148ae:	4628      	mov	r0, r5
 80148b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148b4:	5d37      	ldrb	r7, [r6, r4]
 80148b6:	f017 0708 	ands.w	r7, r7, #8
 80148ba:	d1f8      	bne.n	80148ae <_strtoul_l.isra.0+0xa>
 80148bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80148be:	d110      	bne.n	80148e2 <_strtoul_l.isra.0+0x3e>
 80148c0:	782c      	ldrb	r4, [r5, #0]
 80148c2:	2701      	movs	r7, #1
 80148c4:	1c85      	adds	r5, r0, #2
 80148c6:	f033 0010 	bics.w	r0, r3, #16
 80148ca:	d115      	bne.n	80148f8 <_strtoul_l.isra.0+0x54>
 80148cc:	2c30      	cmp	r4, #48	@ 0x30
 80148ce:	d10d      	bne.n	80148ec <_strtoul_l.isra.0+0x48>
 80148d0:	7828      	ldrb	r0, [r5, #0]
 80148d2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80148d6:	2858      	cmp	r0, #88	@ 0x58
 80148d8:	d108      	bne.n	80148ec <_strtoul_l.isra.0+0x48>
 80148da:	786c      	ldrb	r4, [r5, #1]
 80148dc:	3502      	adds	r5, #2
 80148de:	2310      	movs	r3, #16
 80148e0:	e00a      	b.n	80148f8 <_strtoul_l.isra.0+0x54>
 80148e2:	2c2b      	cmp	r4, #43	@ 0x2b
 80148e4:	bf04      	itt	eq
 80148e6:	782c      	ldrbeq	r4, [r5, #0]
 80148e8:	1c85      	addeq	r5, r0, #2
 80148ea:	e7ec      	b.n	80148c6 <_strtoul_l.isra.0+0x22>
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d1f6      	bne.n	80148de <_strtoul_l.isra.0+0x3a>
 80148f0:	2c30      	cmp	r4, #48	@ 0x30
 80148f2:	bf14      	ite	ne
 80148f4:	230a      	movne	r3, #10
 80148f6:	2308      	moveq	r3, #8
 80148f8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80148fc:	2600      	movs	r6, #0
 80148fe:	fbb8 f8f3 	udiv	r8, r8, r3
 8014902:	fb03 f908 	mul.w	r9, r3, r8
 8014906:	ea6f 0909 	mvn.w	r9, r9
 801490a:	4630      	mov	r0, r6
 801490c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014910:	f1bc 0f09 	cmp.w	ip, #9
 8014914:	d810      	bhi.n	8014938 <_strtoul_l.isra.0+0x94>
 8014916:	4664      	mov	r4, ip
 8014918:	42a3      	cmp	r3, r4
 801491a:	dd1e      	ble.n	801495a <_strtoul_l.isra.0+0xb6>
 801491c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8014920:	d007      	beq.n	8014932 <_strtoul_l.isra.0+0x8e>
 8014922:	4580      	cmp	r8, r0
 8014924:	d316      	bcc.n	8014954 <_strtoul_l.isra.0+0xb0>
 8014926:	d101      	bne.n	801492c <_strtoul_l.isra.0+0x88>
 8014928:	45a1      	cmp	r9, r4
 801492a:	db13      	blt.n	8014954 <_strtoul_l.isra.0+0xb0>
 801492c:	fb00 4003 	mla	r0, r0, r3, r4
 8014930:	2601      	movs	r6, #1
 8014932:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014936:	e7e9      	b.n	801490c <_strtoul_l.isra.0+0x68>
 8014938:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801493c:	f1bc 0f19 	cmp.w	ip, #25
 8014940:	d801      	bhi.n	8014946 <_strtoul_l.isra.0+0xa2>
 8014942:	3c37      	subs	r4, #55	@ 0x37
 8014944:	e7e8      	b.n	8014918 <_strtoul_l.isra.0+0x74>
 8014946:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801494a:	f1bc 0f19 	cmp.w	ip, #25
 801494e:	d804      	bhi.n	801495a <_strtoul_l.isra.0+0xb6>
 8014950:	3c57      	subs	r4, #87	@ 0x57
 8014952:	e7e1      	b.n	8014918 <_strtoul_l.isra.0+0x74>
 8014954:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8014958:	e7eb      	b.n	8014932 <_strtoul_l.isra.0+0x8e>
 801495a:	1c73      	adds	r3, r6, #1
 801495c:	d106      	bne.n	801496c <_strtoul_l.isra.0+0xc8>
 801495e:	2322      	movs	r3, #34	@ 0x22
 8014960:	f8ce 3000 	str.w	r3, [lr]
 8014964:	4630      	mov	r0, r6
 8014966:	b932      	cbnz	r2, 8014976 <_strtoul_l.isra.0+0xd2>
 8014968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801496c:	b107      	cbz	r7, 8014970 <_strtoul_l.isra.0+0xcc>
 801496e:	4240      	negs	r0, r0
 8014970:	2a00      	cmp	r2, #0
 8014972:	d0f9      	beq.n	8014968 <_strtoul_l.isra.0+0xc4>
 8014974:	b106      	cbz	r6, 8014978 <_strtoul_l.isra.0+0xd4>
 8014976:	1e69      	subs	r1, r5, #1
 8014978:	6011      	str	r1, [r2, #0]
 801497a:	e7f5      	b.n	8014968 <_strtoul_l.isra.0+0xc4>
 801497c:	08016bb7 	.word	0x08016bb7

08014980 <strtoul>:
 8014980:	4613      	mov	r3, r2
 8014982:	460a      	mov	r2, r1
 8014984:	4601      	mov	r1, r0
 8014986:	4802      	ldr	r0, [pc, #8]	@ (8014990 <strtoul+0x10>)
 8014988:	6800      	ldr	r0, [r0, #0]
 801498a:	f7ff bf8b 	b.w	80148a4 <_strtoul_l.isra.0>
 801498e:	bf00      	nop
 8014990:	20000190 	.word	0x20000190

08014994 <std>:
 8014994:	2300      	movs	r3, #0
 8014996:	b510      	push	{r4, lr}
 8014998:	4604      	mov	r4, r0
 801499a:	e9c0 3300 	strd	r3, r3, [r0]
 801499e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80149a2:	6083      	str	r3, [r0, #8]
 80149a4:	8181      	strh	r1, [r0, #12]
 80149a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80149a8:	81c2      	strh	r2, [r0, #14]
 80149aa:	6183      	str	r3, [r0, #24]
 80149ac:	4619      	mov	r1, r3
 80149ae:	2208      	movs	r2, #8
 80149b0:	305c      	adds	r0, #92	@ 0x5c
 80149b2:	f000 fa91 	bl	8014ed8 <memset>
 80149b6:	4b0d      	ldr	r3, [pc, #52]	@ (80149ec <std+0x58>)
 80149b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80149ba:	4b0d      	ldr	r3, [pc, #52]	@ (80149f0 <std+0x5c>)
 80149bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80149be:	4b0d      	ldr	r3, [pc, #52]	@ (80149f4 <std+0x60>)
 80149c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80149c2:	4b0d      	ldr	r3, [pc, #52]	@ (80149f8 <std+0x64>)
 80149c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80149c6:	4b0d      	ldr	r3, [pc, #52]	@ (80149fc <std+0x68>)
 80149c8:	6224      	str	r4, [r4, #32]
 80149ca:	429c      	cmp	r4, r3
 80149cc:	d006      	beq.n	80149dc <std+0x48>
 80149ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80149d2:	4294      	cmp	r4, r2
 80149d4:	d002      	beq.n	80149dc <std+0x48>
 80149d6:	33d0      	adds	r3, #208	@ 0xd0
 80149d8:	429c      	cmp	r4, r3
 80149da:	d105      	bne.n	80149e8 <std+0x54>
 80149dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80149e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149e4:	f000 bb36 	b.w	8015054 <__retarget_lock_init_recursive>
 80149e8:	bd10      	pop	{r4, pc}
 80149ea:	bf00      	nop
 80149ec:	08014c5d 	.word	0x08014c5d
 80149f0:	08014c7f 	.word	0x08014c7f
 80149f4:	08014cb7 	.word	0x08014cb7
 80149f8:	08014cdb 	.word	0x08014cdb
 80149fc:	2000ad08 	.word	0x2000ad08

08014a00 <stdio_exit_handler>:
 8014a00:	4a02      	ldr	r2, [pc, #8]	@ (8014a0c <stdio_exit_handler+0xc>)
 8014a02:	4903      	ldr	r1, [pc, #12]	@ (8014a10 <stdio_exit_handler+0x10>)
 8014a04:	4803      	ldr	r0, [pc, #12]	@ (8014a14 <stdio_exit_handler+0x14>)
 8014a06:	f000 b869 	b.w	8014adc <_fwalk_sglue>
 8014a0a:	bf00      	nop
 8014a0c:	20000184 	.word	0x20000184
 8014a10:	08015ad5 	.word	0x08015ad5
 8014a14:	20000194 	.word	0x20000194

08014a18 <cleanup_stdio>:
 8014a18:	6841      	ldr	r1, [r0, #4]
 8014a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8014a4c <cleanup_stdio+0x34>)
 8014a1c:	4299      	cmp	r1, r3
 8014a1e:	b510      	push	{r4, lr}
 8014a20:	4604      	mov	r4, r0
 8014a22:	d001      	beq.n	8014a28 <cleanup_stdio+0x10>
 8014a24:	f001 f856 	bl	8015ad4 <_fflush_r>
 8014a28:	68a1      	ldr	r1, [r4, #8]
 8014a2a:	4b09      	ldr	r3, [pc, #36]	@ (8014a50 <cleanup_stdio+0x38>)
 8014a2c:	4299      	cmp	r1, r3
 8014a2e:	d002      	beq.n	8014a36 <cleanup_stdio+0x1e>
 8014a30:	4620      	mov	r0, r4
 8014a32:	f001 f84f 	bl	8015ad4 <_fflush_r>
 8014a36:	68e1      	ldr	r1, [r4, #12]
 8014a38:	4b06      	ldr	r3, [pc, #24]	@ (8014a54 <cleanup_stdio+0x3c>)
 8014a3a:	4299      	cmp	r1, r3
 8014a3c:	d004      	beq.n	8014a48 <cleanup_stdio+0x30>
 8014a3e:	4620      	mov	r0, r4
 8014a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a44:	f001 b846 	b.w	8015ad4 <_fflush_r>
 8014a48:	bd10      	pop	{r4, pc}
 8014a4a:	bf00      	nop
 8014a4c:	2000ad08 	.word	0x2000ad08
 8014a50:	2000ad70 	.word	0x2000ad70
 8014a54:	2000add8 	.word	0x2000add8

08014a58 <global_stdio_init.part.0>:
 8014a58:	b510      	push	{r4, lr}
 8014a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8014a88 <global_stdio_init.part.0+0x30>)
 8014a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8014a8c <global_stdio_init.part.0+0x34>)
 8014a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8014a90 <global_stdio_init.part.0+0x38>)
 8014a60:	601a      	str	r2, [r3, #0]
 8014a62:	4620      	mov	r0, r4
 8014a64:	2200      	movs	r2, #0
 8014a66:	2104      	movs	r1, #4
 8014a68:	f7ff ff94 	bl	8014994 <std>
 8014a6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014a70:	2201      	movs	r2, #1
 8014a72:	2109      	movs	r1, #9
 8014a74:	f7ff ff8e 	bl	8014994 <std>
 8014a78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014a7c:	2202      	movs	r2, #2
 8014a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a82:	2112      	movs	r1, #18
 8014a84:	f7ff bf86 	b.w	8014994 <std>
 8014a88:	2000ae40 	.word	0x2000ae40
 8014a8c:	2000ad08 	.word	0x2000ad08
 8014a90:	08014a01 	.word	0x08014a01

08014a94 <__sfp_lock_acquire>:
 8014a94:	4801      	ldr	r0, [pc, #4]	@ (8014a9c <__sfp_lock_acquire+0x8>)
 8014a96:	f000 bade 	b.w	8015056 <__retarget_lock_acquire_recursive>
 8014a9a:	bf00      	nop
 8014a9c:	2000ae4a 	.word	0x2000ae4a

08014aa0 <__sfp_lock_release>:
 8014aa0:	4801      	ldr	r0, [pc, #4]	@ (8014aa8 <__sfp_lock_release+0x8>)
 8014aa2:	f000 bad9 	b.w	8015058 <__retarget_lock_release_recursive>
 8014aa6:	bf00      	nop
 8014aa8:	2000ae4a 	.word	0x2000ae4a

08014aac <__sinit>:
 8014aac:	b510      	push	{r4, lr}
 8014aae:	4604      	mov	r4, r0
 8014ab0:	f7ff fff0 	bl	8014a94 <__sfp_lock_acquire>
 8014ab4:	6a23      	ldr	r3, [r4, #32]
 8014ab6:	b11b      	cbz	r3, 8014ac0 <__sinit+0x14>
 8014ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014abc:	f7ff bff0 	b.w	8014aa0 <__sfp_lock_release>
 8014ac0:	4b04      	ldr	r3, [pc, #16]	@ (8014ad4 <__sinit+0x28>)
 8014ac2:	6223      	str	r3, [r4, #32]
 8014ac4:	4b04      	ldr	r3, [pc, #16]	@ (8014ad8 <__sinit+0x2c>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d1f5      	bne.n	8014ab8 <__sinit+0xc>
 8014acc:	f7ff ffc4 	bl	8014a58 <global_stdio_init.part.0>
 8014ad0:	e7f2      	b.n	8014ab8 <__sinit+0xc>
 8014ad2:	bf00      	nop
 8014ad4:	08014a19 	.word	0x08014a19
 8014ad8:	2000ae40 	.word	0x2000ae40

08014adc <_fwalk_sglue>:
 8014adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ae0:	4607      	mov	r7, r0
 8014ae2:	4688      	mov	r8, r1
 8014ae4:	4614      	mov	r4, r2
 8014ae6:	2600      	movs	r6, #0
 8014ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014aec:	f1b9 0901 	subs.w	r9, r9, #1
 8014af0:	d505      	bpl.n	8014afe <_fwalk_sglue+0x22>
 8014af2:	6824      	ldr	r4, [r4, #0]
 8014af4:	2c00      	cmp	r4, #0
 8014af6:	d1f7      	bne.n	8014ae8 <_fwalk_sglue+0xc>
 8014af8:	4630      	mov	r0, r6
 8014afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014afe:	89ab      	ldrh	r3, [r5, #12]
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d907      	bls.n	8014b14 <_fwalk_sglue+0x38>
 8014b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b08:	3301      	adds	r3, #1
 8014b0a:	d003      	beq.n	8014b14 <_fwalk_sglue+0x38>
 8014b0c:	4629      	mov	r1, r5
 8014b0e:	4638      	mov	r0, r7
 8014b10:	47c0      	blx	r8
 8014b12:	4306      	orrs	r6, r0
 8014b14:	3568      	adds	r5, #104	@ 0x68
 8014b16:	e7e9      	b.n	8014aec <_fwalk_sglue+0x10>

08014b18 <_fwrite_r>:
 8014b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b1c:	9c08      	ldr	r4, [sp, #32]
 8014b1e:	468a      	mov	sl, r1
 8014b20:	4690      	mov	r8, r2
 8014b22:	fb02 f903 	mul.w	r9, r2, r3
 8014b26:	4606      	mov	r6, r0
 8014b28:	b118      	cbz	r0, 8014b32 <_fwrite_r+0x1a>
 8014b2a:	6a03      	ldr	r3, [r0, #32]
 8014b2c:	b90b      	cbnz	r3, 8014b32 <_fwrite_r+0x1a>
 8014b2e:	f7ff ffbd 	bl	8014aac <__sinit>
 8014b32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014b34:	07dd      	lsls	r5, r3, #31
 8014b36:	d405      	bmi.n	8014b44 <_fwrite_r+0x2c>
 8014b38:	89a3      	ldrh	r3, [r4, #12]
 8014b3a:	0598      	lsls	r0, r3, #22
 8014b3c:	d402      	bmi.n	8014b44 <_fwrite_r+0x2c>
 8014b3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b40:	f000 fa89 	bl	8015056 <__retarget_lock_acquire_recursive>
 8014b44:	89a3      	ldrh	r3, [r4, #12]
 8014b46:	0719      	lsls	r1, r3, #28
 8014b48:	d516      	bpl.n	8014b78 <_fwrite_r+0x60>
 8014b4a:	6923      	ldr	r3, [r4, #16]
 8014b4c:	b1a3      	cbz	r3, 8014b78 <_fwrite_r+0x60>
 8014b4e:	2500      	movs	r5, #0
 8014b50:	454d      	cmp	r5, r9
 8014b52:	d01f      	beq.n	8014b94 <_fwrite_r+0x7c>
 8014b54:	68a7      	ldr	r7, [r4, #8]
 8014b56:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8014b5a:	3f01      	subs	r7, #1
 8014b5c:	2f00      	cmp	r7, #0
 8014b5e:	60a7      	str	r7, [r4, #8]
 8014b60:	da04      	bge.n	8014b6c <_fwrite_r+0x54>
 8014b62:	69a3      	ldr	r3, [r4, #24]
 8014b64:	429f      	cmp	r7, r3
 8014b66:	db0f      	blt.n	8014b88 <_fwrite_r+0x70>
 8014b68:	290a      	cmp	r1, #10
 8014b6a:	d00d      	beq.n	8014b88 <_fwrite_r+0x70>
 8014b6c:	6823      	ldr	r3, [r4, #0]
 8014b6e:	1c5a      	adds	r2, r3, #1
 8014b70:	6022      	str	r2, [r4, #0]
 8014b72:	7019      	strb	r1, [r3, #0]
 8014b74:	3501      	adds	r5, #1
 8014b76:	e7eb      	b.n	8014b50 <_fwrite_r+0x38>
 8014b78:	4621      	mov	r1, r4
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	f000 f92c 	bl	8014dd8 <__swsetup_r>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d0e4      	beq.n	8014b4e <_fwrite_r+0x36>
 8014b84:	2500      	movs	r5, #0
 8014b86:	e005      	b.n	8014b94 <_fwrite_r+0x7c>
 8014b88:	4622      	mov	r2, r4
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	f000 f8e6 	bl	8014d5c <__swbuf_r>
 8014b90:	3001      	adds	r0, #1
 8014b92:	d1ef      	bne.n	8014b74 <_fwrite_r+0x5c>
 8014b94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014b96:	07da      	lsls	r2, r3, #31
 8014b98:	d405      	bmi.n	8014ba6 <_fwrite_r+0x8e>
 8014b9a:	89a3      	ldrh	r3, [r4, #12]
 8014b9c:	059b      	lsls	r3, r3, #22
 8014b9e:	d402      	bmi.n	8014ba6 <_fwrite_r+0x8e>
 8014ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ba2:	f000 fa59 	bl	8015058 <__retarget_lock_release_recursive>
 8014ba6:	fbb5 f0f8 	udiv	r0, r5, r8
 8014baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08014bb0 <fwrite>:
 8014bb0:	b507      	push	{r0, r1, r2, lr}
 8014bb2:	9300      	str	r3, [sp, #0]
 8014bb4:	4613      	mov	r3, r2
 8014bb6:	460a      	mov	r2, r1
 8014bb8:	4601      	mov	r1, r0
 8014bba:	4803      	ldr	r0, [pc, #12]	@ (8014bc8 <fwrite+0x18>)
 8014bbc:	6800      	ldr	r0, [r0, #0]
 8014bbe:	f7ff ffab 	bl	8014b18 <_fwrite_r>
 8014bc2:	b003      	add	sp, #12
 8014bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bc8:	20000190 	.word	0x20000190

08014bcc <iprintf>:
 8014bcc:	b40f      	push	{r0, r1, r2, r3}
 8014bce:	b507      	push	{r0, r1, r2, lr}
 8014bd0:	4906      	ldr	r1, [pc, #24]	@ (8014bec <iprintf+0x20>)
 8014bd2:	ab04      	add	r3, sp, #16
 8014bd4:	6808      	ldr	r0, [r1, #0]
 8014bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bda:	6881      	ldr	r1, [r0, #8]
 8014bdc:	9301      	str	r3, [sp, #4]
 8014bde:	f000 fc51 	bl	8015484 <_vfiprintf_r>
 8014be2:	b003      	add	sp, #12
 8014be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014be8:	b004      	add	sp, #16
 8014bea:	4770      	bx	lr
 8014bec:	20000190 	.word	0x20000190

08014bf0 <sniprintf>:
 8014bf0:	b40c      	push	{r2, r3}
 8014bf2:	b530      	push	{r4, r5, lr}
 8014bf4:	4b18      	ldr	r3, [pc, #96]	@ (8014c58 <sniprintf+0x68>)
 8014bf6:	1e0c      	subs	r4, r1, #0
 8014bf8:	681d      	ldr	r5, [r3, #0]
 8014bfa:	b09d      	sub	sp, #116	@ 0x74
 8014bfc:	da08      	bge.n	8014c10 <sniprintf+0x20>
 8014bfe:	238b      	movs	r3, #139	@ 0x8b
 8014c00:	602b      	str	r3, [r5, #0]
 8014c02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c06:	b01d      	add	sp, #116	@ 0x74
 8014c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c0c:	b002      	add	sp, #8
 8014c0e:	4770      	bx	lr
 8014c10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014c14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014c18:	f04f 0300 	mov.w	r3, #0
 8014c1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014c1e:	bf14      	ite	ne
 8014c20:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8014c24:	4623      	moveq	r3, r4
 8014c26:	9304      	str	r3, [sp, #16]
 8014c28:	9307      	str	r3, [sp, #28]
 8014c2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014c2e:	9002      	str	r0, [sp, #8]
 8014c30:	9006      	str	r0, [sp, #24]
 8014c32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014c36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014c38:	ab21      	add	r3, sp, #132	@ 0x84
 8014c3a:	a902      	add	r1, sp, #8
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	9301      	str	r3, [sp, #4]
 8014c40:	f000 fafa 	bl	8015238 <_svfiprintf_r>
 8014c44:	1c43      	adds	r3, r0, #1
 8014c46:	bfbc      	itt	lt
 8014c48:	238b      	movlt	r3, #139	@ 0x8b
 8014c4a:	602b      	strlt	r3, [r5, #0]
 8014c4c:	2c00      	cmp	r4, #0
 8014c4e:	d0da      	beq.n	8014c06 <sniprintf+0x16>
 8014c50:	9b02      	ldr	r3, [sp, #8]
 8014c52:	2200      	movs	r2, #0
 8014c54:	701a      	strb	r2, [r3, #0]
 8014c56:	e7d6      	b.n	8014c06 <sniprintf+0x16>
 8014c58:	20000190 	.word	0x20000190

08014c5c <__sread>:
 8014c5c:	b510      	push	{r4, lr}
 8014c5e:	460c      	mov	r4, r1
 8014c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c64:	f000 f998 	bl	8014f98 <_read_r>
 8014c68:	2800      	cmp	r0, #0
 8014c6a:	bfab      	itete	ge
 8014c6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8014c70:	181b      	addge	r3, r3, r0
 8014c72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014c76:	bfac      	ite	ge
 8014c78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014c7a:	81a3      	strhlt	r3, [r4, #12]
 8014c7c:	bd10      	pop	{r4, pc}

08014c7e <__swrite>:
 8014c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c82:	461f      	mov	r7, r3
 8014c84:	898b      	ldrh	r3, [r1, #12]
 8014c86:	05db      	lsls	r3, r3, #23
 8014c88:	4605      	mov	r5, r0
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	4616      	mov	r6, r2
 8014c8e:	d505      	bpl.n	8014c9c <__swrite+0x1e>
 8014c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c94:	2302      	movs	r3, #2
 8014c96:	2200      	movs	r2, #0
 8014c98:	f000 f96c 	bl	8014f74 <_lseek_r>
 8014c9c:	89a3      	ldrh	r3, [r4, #12]
 8014c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014ca6:	81a3      	strh	r3, [r4, #12]
 8014ca8:	4632      	mov	r2, r6
 8014caa:	463b      	mov	r3, r7
 8014cac:	4628      	mov	r0, r5
 8014cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb2:	f000 b993 	b.w	8014fdc <_write_r>

08014cb6 <__sseek>:
 8014cb6:	b510      	push	{r4, lr}
 8014cb8:	460c      	mov	r4, r1
 8014cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cbe:	f000 f959 	bl	8014f74 <_lseek_r>
 8014cc2:	1c43      	adds	r3, r0, #1
 8014cc4:	89a3      	ldrh	r3, [r4, #12]
 8014cc6:	bf15      	itete	ne
 8014cc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014cca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014cce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014cd2:	81a3      	strheq	r3, [r4, #12]
 8014cd4:	bf18      	it	ne
 8014cd6:	81a3      	strhne	r3, [r4, #12]
 8014cd8:	bd10      	pop	{r4, pc}

08014cda <__sclose>:
 8014cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cde:	f000 b939 	b.w	8014f54 <_close_r>

08014ce2 <_vsniprintf_r>:
 8014ce2:	b530      	push	{r4, r5, lr}
 8014ce4:	4614      	mov	r4, r2
 8014ce6:	2c00      	cmp	r4, #0
 8014ce8:	b09b      	sub	sp, #108	@ 0x6c
 8014cea:	4605      	mov	r5, r0
 8014cec:	461a      	mov	r2, r3
 8014cee:	da05      	bge.n	8014cfc <_vsniprintf_r+0x1a>
 8014cf0:	238b      	movs	r3, #139	@ 0x8b
 8014cf2:	6003      	str	r3, [r0, #0]
 8014cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014cf8:	b01b      	add	sp, #108	@ 0x6c
 8014cfa:	bd30      	pop	{r4, r5, pc}
 8014cfc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014d00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014d04:	f04f 0300 	mov.w	r3, #0
 8014d08:	9319      	str	r3, [sp, #100]	@ 0x64
 8014d0a:	bf14      	ite	ne
 8014d0c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8014d10:	4623      	moveq	r3, r4
 8014d12:	9302      	str	r3, [sp, #8]
 8014d14:	9305      	str	r3, [sp, #20]
 8014d16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d1a:	9100      	str	r1, [sp, #0]
 8014d1c:	9104      	str	r1, [sp, #16]
 8014d1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014d22:	4669      	mov	r1, sp
 8014d24:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8014d26:	f000 fa87 	bl	8015238 <_svfiprintf_r>
 8014d2a:	1c43      	adds	r3, r0, #1
 8014d2c:	bfbc      	itt	lt
 8014d2e:	238b      	movlt	r3, #139	@ 0x8b
 8014d30:	602b      	strlt	r3, [r5, #0]
 8014d32:	2c00      	cmp	r4, #0
 8014d34:	d0e0      	beq.n	8014cf8 <_vsniprintf_r+0x16>
 8014d36:	9b00      	ldr	r3, [sp, #0]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	701a      	strb	r2, [r3, #0]
 8014d3c:	e7dc      	b.n	8014cf8 <_vsniprintf_r+0x16>
	...

08014d40 <vsniprintf>:
 8014d40:	b507      	push	{r0, r1, r2, lr}
 8014d42:	9300      	str	r3, [sp, #0]
 8014d44:	4613      	mov	r3, r2
 8014d46:	460a      	mov	r2, r1
 8014d48:	4601      	mov	r1, r0
 8014d4a:	4803      	ldr	r0, [pc, #12]	@ (8014d58 <vsniprintf+0x18>)
 8014d4c:	6800      	ldr	r0, [r0, #0]
 8014d4e:	f7ff ffc8 	bl	8014ce2 <_vsniprintf_r>
 8014d52:	b003      	add	sp, #12
 8014d54:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d58:	20000190 	.word	0x20000190

08014d5c <__swbuf_r>:
 8014d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d5e:	460e      	mov	r6, r1
 8014d60:	4614      	mov	r4, r2
 8014d62:	4605      	mov	r5, r0
 8014d64:	b118      	cbz	r0, 8014d6e <__swbuf_r+0x12>
 8014d66:	6a03      	ldr	r3, [r0, #32]
 8014d68:	b90b      	cbnz	r3, 8014d6e <__swbuf_r+0x12>
 8014d6a:	f7ff fe9f 	bl	8014aac <__sinit>
 8014d6e:	69a3      	ldr	r3, [r4, #24]
 8014d70:	60a3      	str	r3, [r4, #8]
 8014d72:	89a3      	ldrh	r3, [r4, #12]
 8014d74:	071a      	lsls	r2, r3, #28
 8014d76:	d501      	bpl.n	8014d7c <__swbuf_r+0x20>
 8014d78:	6923      	ldr	r3, [r4, #16]
 8014d7a:	b943      	cbnz	r3, 8014d8e <__swbuf_r+0x32>
 8014d7c:	4621      	mov	r1, r4
 8014d7e:	4628      	mov	r0, r5
 8014d80:	f000 f82a 	bl	8014dd8 <__swsetup_r>
 8014d84:	b118      	cbz	r0, 8014d8e <__swbuf_r+0x32>
 8014d86:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014d8a:	4638      	mov	r0, r7
 8014d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d8e:	6823      	ldr	r3, [r4, #0]
 8014d90:	6922      	ldr	r2, [r4, #16]
 8014d92:	1a98      	subs	r0, r3, r2
 8014d94:	6963      	ldr	r3, [r4, #20]
 8014d96:	b2f6      	uxtb	r6, r6
 8014d98:	4283      	cmp	r3, r0
 8014d9a:	4637      	mov	r7, r6
 8014d9c:	dc05      	bgt.n	8014daa <__swbuf_r+0x4e>
 8014d9e:	4621      	mov	r1, r4
 8014da0:	4628      	mov	r0, r5
 8014da2:	f000 fe97 	bl	8015ad4 <_fflush_r>
 8014da6:	2800      	cmp	r0, #0
 8014da8:	d1ed      	bne.n	8014d86 <__swbuf_r+0x2a>
 8014daa:	68a3      	ldr	r3, [r4, #8]
 8014dac:	3b01      	subs	r3, #1
 8014dae:	60a3      	str	r3, [r4, #8]
 8014db0:	6823      	ldr	r3, [r4, #0]
 8014db2:	1c5a      	adds	r2, r3, #1
 8014db4:	6022      	str	r2, [r4, #0]
 8014db6:	701e      	strb	r6, [r3, #0]
 8014db8:	6962      	ldr	r2, [r4, #20]
 8014dba:	1c43      	adds	r3, r0, #1
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d004      	beq.n	8014dca <__swbuf_r+0x6e>
 8014dc0:	89a3      	ldrh	r3, [r4, #12]
 8014dc2:	07db      	lsls	r3, r3, #31
 8014dc4:	d5e1      	bpl.n	8014d8a <__swbuf_r+0x2e>
 8014dc6:	2e0a      	cmp	r6, #10
 8014dc8:	d1df      	bne.n	8014d8a <__swbuf_r+0x2e>
 8014dca:	4621      	mov	r1, r4
 8014dcc:	4628      	mov	r0, r5
 8014dce:	f000 fe81 	bl	8015ad4 <_fflush_r>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d0d9      	beq.n	8014d8a <__swbuf_r+0x2e>
 8014dd6:	e7d6      	b.n	8014d86 <__swbuf_r+0x2a>

08014dd8 <__swsetup_r>:
 8014dd8:	b538      	push	{r3, r4, r5, lr}
 8014dda:	4b29      	ldr	r3, [pc, #164]	@ (8014e80 <__swsetup_r+0xa8>)
 8014ddc:	4605      	mov	r5, r0
 8014dde:	6818      	ldr	r0, [r3, #0]
 8014de0:	460c      	mov	r4, r1
 8014de2:	b118      	cbz	r0, 8014dec <__swsetup_r+0x14>
 8014de4:	6a03      	ldr	r3, [r0, #32]
 8014de6:	b90b      	cbnz	r3, 8014dec <__swsetup_r+0x14>
 8014de8:	f7ff fe60 	bl	8014aac <__sinit>
 8014dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014df0:	0719      	lsls	r1, r3, #28
 8014df2:	d422      	bmi.n	8014e3a <__swsetup_r+0x62>
 8014df4:	06da      	lsls	r2, r3, #27
 8014df6:	d407      	bmi.n	8014e08 <__swsetup_r+0x30>
 8014df8:	2209      	movs	r2, #9
 8014dfa:	602a      	str	r2, [r5, #0]
 8014dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e00:	81a3      	strh	r3, [r4, #12]
 8014e02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e06:	e033      	b.n	8014e70 <__swsetup_r+0x98>
 8014e08:	0758      	lsls	r0, r3, #29
 8014e0a:	d512      	bpl.n	8014e32 <__swsetup_r+0x5a>
 8014e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e0e:	b141      	cbz	r1, 8014e22 <__swsetup_r+0x4a>
 8014e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e14:	4299      	cmp	r1, r3
 8014e16:	d002      	beq.n	8014e1e <__swsetup_r+0x46>
 8014e18:	4628      	mov	r0, r5
 8014e1a:	f000 f95f 	bl	80150dc <_free_r>
 8014e1e:	2300      	movs	r3, #0
 8014e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e22:	89a3      	ldrh	r3, [r4, #12]
 8014e24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014e28:	81a3      	strh	r3, [r4, #12]
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	6063      	str	r3, [r4, #4]
 8014e2e:	6923      	ldr	r3, [r4, #16]
 8014e30:	6023      	str	r3, [r4, #0]
 8014e32:	89a3      	ldrh	r3, [r4, #12]
 8014e34:	f043 0308 	orr.w	r3, r3, #8
 8014e38:	81a3      	strh	r3, [r4, #12]
 8014e3a:	6923      	ldr	r3, [r4, #16]
 8014e3c:	b94b      	cbnz	r3, 8014e52 <__swsetup_r+0x7a>
 8014e3e:	89a3      	ldrh	r3, [r4, #12]
 8014e40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e48:	d003      	beq.n	8014e52 <__swsetup_r+0x7a>
 8014e4a:	4621      	mov	r1, r4
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	f000 fea1 	bl	8015b94 <__smakebuf_r>
 8014e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e56:	f013 0201 	ands.w	r2, r3, #1
 8014e5a:	d00a      	beq.n	8014e72 <__swsetup_r+0x9a>
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	60a2      	str	r2, [r4, #8]
 8014e60:	6962      	ldr	r2, [r4, #20]
 8014e62:	4252      	negs	r2, r2
 8014e64:	61a2      	str	r2, [r4, #24]
 8014e66:	6922      	ldr	r2, [r4, #16]
 8014e68:	b942      	cbnz	r2, 8014e7c <__swsetup_r+0xa4>
 8014e6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014e6e:	d1c5      	bne.n	8014dfc <__swsetup_r+0x24>
 8014e70:	bd38      	pop	{r3, r4, r5, pc}
 8014e72:	0799      	lsls	r1, r3, #30
 8014e74:	bf58      	it	pl
 8014e76:	6962      	ldrpl	r2, [r4, #20]
 8014e78:	60a2      	str	r2, [r4, #8]
 8014e7a:	e7f4      	b.n	8014e66 <__swsetup_r+0x8e>
 8014e7c:	2000      	movs	r0, #0
 8014e7e:	e7f7      	b.n	8014e70 <__swsetup_r+0x98>
 8014e80:	20000190 	.word	0x20000190

08014e84 <memcmp>:
 8014e84:	b510      	push	{r4, lr}
 8014e86:	3901      	subs	r1, #1
 8014e88:	4402      	add	r2, r0
 8014e8a:	4290      	cmp	r0, r2
 8014e8c:	d101      	bne.n	8014e92 <memcmp+0xe>
 8014e8e:	2000      	movs	r0, #0
 8014e90:	e005      	b.n	8014e9e <memcmp+0x1a>
 8014e92:	7803      	ldrb	r3, [r0, #0]
 8014e94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014e98:	42a3      	cmp	r3, r4
 8014e9a:	d001      	beq.n	8014ea0 <memcmp+0x1c>
 8014e9c:	1b18      	subs	r0, r3, r4
 8014e9e:	bd10      	pop	{r4, pc}
 8014ea0:	3001      	adds	r0, #1
 8014ea2:	e7f2      	b.n	8014e8a <memcmp+0x6>

08014ea4 <memmove>:
 8014ea4:	4288      	cmp	r0, r1
 8014ea6:	b510      	push	{r4, lr}
 8014ea8:	eb01 0402 	add.w	r4, r1, r2
 8014eac:	d902      	bls.n	8014eb4 <memmove+0x10>
 8014eae:	4284      	cmp	r4, r0
 8014eb0:	4623      	mov	r3, r4
 8014eb2:	d807      	bhi.n	8014ec4 <memmove+0x20>
 8014eb4:	1e43      	subs	r3, r0, #1
 8014eb6:	42a1      	cmp	r1, r4
 8014eb8:	d008      	beq.n	8014ecc <memmove+0x28>
 8014eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ec2:	e7f8      	b.n	8014eb6 <memmove+0x12>
 8014ec4:	4402      	add	r2, r0
 8014ec6:	4601      	mov	r1, r0
 8014ec8:	428a      	cmp	r2, r1
 8014eca:	d100      	bne.n	8014ece <memmove+0x2a>
 8014ecc:	bd10      	pop	{r4, pc}
 8014ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ed6:	e7f7      	b.n	8014ec8 <memmove+0x24>

08014ed8 <memset>:
 8014ed8:	4402      	add	r2, r0
 8014eda:	4603      	mov	r3, r0
 8014edc:	4293      	cmp	r3, r2
 8014ede:	d100      	bne.n	8014ee2 <memset+0xa>
 8014ee0:	4770      	bx	lr
 8014ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8014ee6:	e7f9      	b.n	8014edc <memset+0x4>

08014ee8 <strchr>:
 8014ee8:	b2c9      	uxtb	r1, r1
 8014eea:	4603      	mov	r3, r0
 8014eec:	4618      	mov	r0, r3
 8014eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ef2:	b112      	cbz	r2, 8014efa <strchr+0x12>
 8014ef4:	428a      	cmp	r2, r1
 8014ef6:	d1f9      	bne.n	8014eec <strchr+0x4>
 8014ef8:	4770      	bx	lr
 8014efa:	2900      	cmp	r1, #0
 8014efc:	bf18      	it	ne
 8014efe:	2000      	movne	r0, #0
 8014f00:	4770      	bx	lr

08014f02 <strncmp>:
 8014f02:	b510      	push	{r4, lr}
 8014f04:	b16a      	cbz	r2, 8014f22 <strncmp+0x20>
 8014f06:	3901      	subs	r1, #1
 8014f08:	1884      	adds	r4, r0, r2
 8014f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d103      	bne.n	8014f1e <strncmp+0x1c>
 8014f16:	42a0      	cmp	r0, r4
 8014f18:	d001      	beq.n	8014f1e <strncmp+0x1c>
 8014f1a:	2a00      	cmp	r2, #0
 8014f1c:	d1f5      	bne.n	8014f0a <strncmp+0x8>
 8014f1e:	1ad0      	subs	r0, r2, r3
 8014f20:	bd10      	pop	{r4, pc}
 8014f22:	4610      	mov	r0, r2
 8014f24:	e7fc      	b.n	8014f20 <strncmp+0x1e>

08014f26 <strstr>:
 8014f26:	780a      	ldrb	r2, [r1, #0]
 8014f28:	b570      	push	{r4, r5, r6, lr}
 8014f2a:	b96a      	cbnz	r2, 8014f48 <strstr+0x22>
 8014f2c:	bd70      	pop	{r4, r5, r6, pc}
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d109      	bne.n	8014f46 <strstr+0x20>
 8014f32:	460c      	mov	r4, r1
 8014f34:	4605      	mov	r5, r0
 8014f36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d0f6      	beq.n	8014f2c <strstr+0x6>
 8014f3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014f42:	429e      	cmp	r6, r3
 8014f44:	d0f7      	beq.n	8014f36 <strstr+0x10>
 8014f46:	3001      	adds	r0, #1
 8014f48:	7803      	ldrb	r3, [r0, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d1ef      	bne.n	8014f2e <strstr+0x8>
 8014f4e:	4618      	mov	r0, r3
 8014f50:	e7ec      	b.n	8014f2c <strstr+0x6>
	...

08014f54 <_close_r>:
 8014f54:	b538      	push	{r3, r4, r5, lr}
 8014f56:	4d06      	ldr	r5, [pc, #24]	@ (8014f70 <_close_r+0x1c>)
 8014f58:	2300      	movs	r3, #0
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	4608      	mov	r0, r1
 8014f5e:	602b      	str	r3, [r5, #0]
 8014f60:	f7ec fb58 	bl	8001614 <_close>
 8014f64:	1c43      	adds	r3, r0, #1
 8014f66:	d102      	bne.n	8014f6e <_close_r+0x1a>
 8014f68:	682b      	ldr	r3, [r5, #0]
 8014f6a:	b103      	cbz	r3, 8014f6e <_close_r+0x1a>
 8014f6c:	6023      	str	r3, [r4, #0]
 8014f6e:	bd38      	pop	{r3, r4, r5, pc}
 8014f70:	2000ae44 	.word	0x2000ae44

08014f74 <_lseek_r>:
 8014f74:	b538      	push	{r3, r4, r5, lr}
 8014f76:	4d07      	ldr	r5, [pc, #28]	@ (8014f94 <_lseek_r+0x20>)
 8014f78:	4604      	mov	r4, r0
 8014f7a:	4608      	mov	r0, r1
 8014f7c:	4611      	mov	r1, r2
 8014f7e:	2200      	movs	r2, #0
 8014f80:	602a      	str	r2, [r5, #0]
 8014f82:	461a      	mov	r2, r3
 8014f84:	f7ec fb6d 	bl	8001662 <_lseek>
 8014f88:	1c43      	adds	r3, r0, #1
 8014f8a:	d102      	bne.n	8014f92 <_lseek_r+0x1e>
 8014f8c:	682b      	ldr	r3, [r5, #0]
 8014f8e:	b103      	cbz	r3, 8014f92 <_lseek_r+0x1e>
 8014f90:	6023      	str	r3, [r4, #0]
 8014f92:	bd38      	pop	{r3, r4, r5, pc}
 8014f94:	2000ae44 	.word	0x2000ae44

08014f98 <_read_r>:
 8014f98:	b538      	push	{r3, r4, r5, lr}
 8014f9a:	4d07      	ldr	r5, [pc, #28]	@ (8014fb8 <_read_r+0x20>)
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	4608      	mov	r0, r1
 8014fa0:	4611      	mov	r1, r2
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	602a      	str	r2, [r5, #0]
 8014fa6:	461a      	mov	r2, r3
 8014fa8:	f7ec fafb 	bl	80015a2 <_read>
 8014fac:	1c43      	adds	r3, r0, #1
 8014fae:	d102      	bne.n	8014fb6 <_read_r+0x1e>
 8014fb0:	682b      	ldr	r3, [r5, #0]
 8014fb2:	b103      	cbz	r3, 8014fb6 <_read_r+0x1e>
 8014fb4:	6023      	str	r3, [r4, #0]
 8014fb6:	bd38      	pop	{r3, r4, r5, pc}
 8014fb8:	2000ae44 	.word	0x2000ae44

08014fbc <_sbrk_r>:
 8014fbc:	b538      	push	{r3, r4, r5, lr}
 8014fbe:	4d06      	ldr	r5, [pc, #24]	@ (8014fd8 <_sbrk_r+0x1c>)
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	4608      	mov	r0, r1
 8014fc6:	602b      	str	r3, [r5, #0]
 8014fc8:	f7ec fb58 	bl	800167c <_sbrk>
 8014fcc:	1c43      	adds	r3, r0, #1
 8014fce:	d102      	bne.n	8014fd6 <_sbrk_r+0x1a>
 8014fd0:	682b      	ldr	r3, [r5, #0]
 8014fd2:	b103      	cbz	r3, 8014fd6 <_sbrk_r+0x1a>
 8014fd4:	6023      	str	r3, [r4, #0]
 8014fd6:	bd38      	pop	{r3, r4, r5, pc}
 8014fd8:	2000ae44 	.word	0x2000ae44

08014fdc <_write_r>:
 8014fdc:	b538      	push	{r3, r4, r5, lr}
 8014fde:	4d07      	ldr	r5, [pc, #28]	@ (8014ffc <_write_r+0x20>)
 8014fe0:	4604      	mov	r4, r0
 8014fe2:	4608      	mov	r0, r1
 8014fe4:	4611      	mov	r1, r2
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	602a      	str	r2, [r5, #0]
 8014fea:	461a      	mov	r2, r3
 8014fec:	f7ec faf6 	bl	80015dc <_write>
 8014ff0:	1c43      	adds	r3, r0, #1
 8014ff2:	d102      	bne.n	8014ffa <_write_r+0x1e>
 8014ff4:	682b      	ldr	r3, [r5, #0]
 8014ff6:	b103      	cbz	r3, 8014ffa <_write_r+0x1e>
 8014ff8:	6023      	str	r3, [r4, #0]
 8014ffa:	bd38      	pop	{r3, r4, r5, pc}
 8014ffc:	2000ae44 	.word	0x2000ae44

08015000 <__errno>:
 8015000:	4b01      	ldr	r3, [pc, #4]	@ (8015008 <__errno+0x8>)
 8015002:	6818      	ldr	r0, [r3, #0]
 8015004:	4770      	bx	lr
 8015006:	bf00      	nop
 8015008:	20000190 	.word	0x20000190

0801500c <__libc_init_array>:
 801500c:	b570      	push	{r4, r5, r6, lr}
 801500e:	4d0d      	ldr	r5, [pc, #52]	@ (8015044 <__libc_init_array+0x38>)
 8015010:	4c0d      	ldr	r4, [pc, #52]	@ (8015048 <__libc_init_array+0x3c>)
 8015012:	1b64      	subs	r4, r4, r5
 8015014:	10a4      	asrs	r4, r4, #2
 8015016:	2600      	movs	r6, #0
 8015018:	42a6      	cmp	r6, r4
 801501a:	d109      	bne.n	8015030 <__libc_init_array+0x24>
 801501c:	4d0b      	ldr	r5, [pc, #44]	@ (801504c <__libc_init_array+0x40>)
 801501e:	4c0c      	ldr	r4, [pc, #48]	@ (8015050 <__libc_init_array+0x44>)
 8015020:	f000 fe62 	bl	8015ce8 <_init>
 8015024:	1b64      	subs	r4, r4, r5
 8015026:	10a4      	asrs	r4, r4, #2
 8015028:	2600      	movs	r6, #0
 801502a:	42a6      	cmp	r6, r4
 801502c:	d105      	bne.n	801503a <__libc_init_array+0x2e>
 801502e:	bd70      	pop	{r4, r5, r6, pc}
 8015030:	f855 3b04 	ldr.w	r3, [r5], #4
 8015034:	4798      	blx	r3
 8015036:	3601      	adds	r6, #1
 8015038:	e7ee      	b.n	8015018 <__libc_init_array+0xc>
 801503a:	f855 3b04 	ldr.w	r3, [r5], #4
 801503e:	4798      	blx	r3
 8015040:	3601      	adds	r6, #1
 8015042:	e7f2      	b.n	801502a <__libc_init_array+0x1e>
 8015044:	08016cc0 	.word	0x08016cc0
 8015048:	08016cc0 	.word	0x08016cc0
 801504c:	08016cc0 	.word	0x08016cc0
 8015050:	08016cc8 	.word	0x08016cc8

08015054 <__retarget_lock_init_recursive>:
 8015054:	4770      	bx	lr

08015056 <__retarget_lock_acquire_recursive>:
 8015056:	4770      	bx	lr

08015058 <__retarget_lock_release_recursive>:
 8015058:	4770      	bx	lr

0801505a <strcpy>:
 801505a:	4603      	mov	r3, r0
 801505c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015060:	f803 2b01 	strb.w	r2, [r3], #1
 8015064:	2a00      	cmp	r2, #0
 8015066:	d1f9      	bne.n	801505c <strcpy+0x2>
 8015068:	4770      	bx	lr

0801506a <memcpy>:
 801506a:	440a      	add	r2, r1
 801506c:	4291      	cmp	r1, r2
 801506e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015072:	d100      	bne.n	8015076 <memcpy+0xc>
 8015074:	4770      	bx	lr
 8015076:	b510      	push	{r4, lr}
 8015078:	f811 4b01 	ldrb.w	r4, [r1], #1
 801507c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015080:	4291      	cmp	r1, r2
 8015082:	d1f9      	bne.n	8015078 <memcpy+0xe>
 8015084:	bd10      	pop	{r4, pc}
	...

08015088 <__assert_func>:
 8015088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801508a:	4614      	mov	r4, r2
 801508c:	461a      	mov	r2, r3
 801508e:	4b09      	ldr	r3, [pc, #36]	@ (80150b4 <__assert_func+0x2c>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	4605      	mov	r5, r0
 8015094:	68d8      	ldr	r0, [r3, #12]
 8015096:	b14c      	cbz	r4, 80150ac <__assert_func+0x24>
 8015098:	4b07      	ldr	r3, [pc, #28]	@ (80150b8 <__assert_func+0x30>)
 801509a:	9100      	str	r1, [sp, #0]
 801509c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80150a0:	4906      	ldr	r1, [pc, #24]	@ (80150bc <__assert_func+0x34>)
 80150a2:	462b      	mov	r3, r5
 80150a4:	f000 fd3e 	bl	8015b24 <fiprintf>
 80150a8:	f000 fdd2 	bl	8015c50 <abort>
 80150ac:	4b04      	ldr	r3, [pc, #16]	@ (80150c0 <__assert_func+0x38>)
 80150ae:	461c      	mov	r4, r3
 80150b0:	e7f3      	b.n	801509a <__assert_func+0x12>
 80150b2:	bf00      	nop
 80150b4:	20000190 	.word	0x20000190
 80150b8:	08016b47 	.word	0x08016b47
 80150bc:	08016b54 	.word	0x08016b54
 80150c0:	08016b82 	.word	0x08016b82

080150c4 <__env_lock>:
 80150c4:	4801      	ldr	r0, [pc, #4]	@ (80150cc <__env_lock+0x8>)
 80150c6:	f7ff bfc6 	b.w	8015056 <__retarget_lock_acquire_recursive>
 80150ca:	bf00      	nop
 80150cc:	2000ae48 	.word	0x2000ae48

080150d0 <__env_unlock>:
 80150d0:	4801      	ldr	r0, [pc, #4]	@ (80150d8 <__env_unlock+0x8>)
 80150d2:	f7ff bfc1 	b.w	8015058 <__retarget_lock_release_recursive>
 80150d6:	bf00      	nop
 80150d8:	2000ae48 	.word	0x2000ae48

080150dc <_free_r>:
 80150dc:	b538      	push	{r3, r4, r5, lr}
 80150de:	4605      	mov	r5, r0
 80150e0:	2900      	cmp	r1, #0
 80150e2:	d041      	beq.n	8015168 <_free_r+0x8c>
 80150e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150e8:	1f0c      	subs	r4, r1, #4
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	bfb8      	it	lt
 80150ee:	18e4      	addlt	r4, r4, r3
 80150f0:	f7ff fb2a 	bl	8014748 <__malloc_lock>
 80150f4:	4a1d      	ldr	r2, [pc, #116]	@ (801516c <_free_r+0x90>)
 80150f6:	6813      	ldr	r3, [r2, #0]
 80150f8:	b933      	cbnz	r3, 8015108 <_free_r+0x2c>
 80150fa:	6063      	str	r3, [r4, #4]
 80150fc:	6014      	str	r4, [r2, #0]
 80150fe:	4628      	mov	r0, r5
 8015100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015104:	f7ff bb26 	b.w	8014754 <__malloc_unlock>
 8015108:	42a3      	cmp	r3, r4
 801510a:	d908      	bls.n	801511e <_free_r+0x42>
 801510c:	6820      	ldr	r0, [r4, #0]
 801510e:	1821      	adds	r1, r4, r0
 8015110:	428b      	cmp	r3, r1
 8015112:	bf01      	itttt	eq
 8015114:	6819      	ldreq	r1, [r3, #0]
 8015116:	685b      	ldreq	r3, [r3, #4]
 8015118:	1809      	addeq	r1, r1, r0
 801511a:	6021      	streq	r1, [r4, #0]
 801511c:	e7ed      	b.n	80150fa <_free_r+0x1e>
 801511e:	461a      	mov	r2, r3
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	b10b      	cbz	r3, 8015128 <_free_r+0x4c>
 8015124:	42a3      	cmp	r3, r4
 8015126:	d9fa      	bls.n	801511e <_free_r+0x42>
 8015128:	6811      	ldr	r1, [r2, #0]
 801512a:	1850      	adds	r0, r2, r1
 801512c:	42a0      	cmp	r0, r4
 801512e:	d10b      	bne.n	8015148 <_free_r+0x6c>
 8015130:	6820      	ldr	r0, [r4, #0]
 8015132:	4401      	add	r1, r0
 8015134:	1850      	adds	r0, r2, r1
 8015136:	4283      	cmp	r3, r0
 8015138:	6011      	str	r1, [r2, #0]
 801513a:	d1e0      	bne.n	80150fe <_free_r+0x22>
 801513c:	6818      	ldr	r0, [r3, #0]
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	6053      	str	r3, [r2, #4]
 8015142:	4408      	add	r0, r1
 8015144:	6010      	str	r0, [r2, #0]
 8015146:	e7da      	b.n	80150fe <_free_r+0x22>
 8015148:	d902      	bls.n	8015150 <_free_r+0x74>
 801514a:	230c      	movs	r3, #12
 801514c:	602b      	str	r3, [r5, #0]
 801514e:	e7d6      	b.n	80150fe <_free_r+0x22>
 8015150:	6820      	ldr	r0, [r4, #0]
 8015152:	1821      	adds	r1, r4, r0
 8015154:	428b      	cmp	r3, r1
 8015156:	bf04      	itt	eq
 8015158:	6819      	ldreq	r1, [r3, #0]
 801515a:	685b      	ldreq	r3, [r3, #4]
 801515c:	6063      	str	r3, [r4, #4]
 801515e:	bf04      	itt	eq
 8015160:	1809      	addeq	r1, r1, r0
 8015162:	6021      	streq	r1, [r4, #0]
 8015164:	6054      	str	r4, [r2, #4]
 8015166:	e7ca      	b.n	80150fe <_free_r+0x22>
 8015168:	bd38      	pop	{r3, r4, r5, pc}
 801516a:	bf00      	nop
 801516c:	2000ad04 	.word	0x2000ad04

08015170 <_malloc_usable_size_r>:
 8015170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015174:	1f18      	subs	r0, r3, #4
 8015176:	2b00      	cmp	r3, #0
 8015178:	bfbc      	itt	lt
 801517a:	580b      	ldrlt	r3, [r1, r0]
 801517c:	18c0      	addlt	r0, r0, r3
 801517e:	4770      	bx	lr

08015180 <__ssputs_r>:
 8015180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015184:	688e      	ldr	r6, [r1, #8]
 8015186:	461f      	mov	r7, r3
 8015188:	42be      	cmp	r6, r7
 801518a:	680b      	ldr	r3, [r1, #0]
 801518c:	4682      	mov	sl, r0
 801518e:	460c      	mov	r4, r1
 8015190:	4690      	mov	r8, r2
 8015192:	d82d      	bhi.n	80151f0 <__ssputs_r+0x70>
 8015194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801519c:	d026      	beq.n	80151ec <__ssputs_r+0x6c>
 801519e:	6965      	ldr	r5, [r4, #20]
 80151a0:	6909      	ldr	r1, [r1, #16]
 80151a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151a6:	eba3 0901 	sub.w	r9, r3, r1
 80151aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80151ae:	1c7b      	adds	r3, r7, #1
 80151b0:	444b      	add	r3, r9
 80151b2:	106d      	asrs	r5, r5, #1
 80151b4:	429d      	cmp	r5, r3
 80151b6:	bf38      	it	cc
 80151b8:	461d      	movcc	r5, r3
 80151ba:	0553      	lsls	r3, r2, #21
 80151bc:	d527      	bpl.n	801520e <__ssputs_r+0x8e>
 80151be:	4629      	mov	r1, r5
 80151c0:	f7ff fa42 	bl	8014648 <_malloc_r>
 80151c4:	4606      	mov	r6, r0
 80151c6:	b360      	cbz	r0, 8015222 <__ssputs_r+0xa2>
 80151c8:	6921      	ldr	r1, [r4, #16]
 80151ca:	464a      	mov	r2, r9
 80151cc:	f7ff ff4d 	bl	801506a <memcpy>
 80151d0:	89a3      	ldrh	r3, [r4, #12]
 80151d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80151d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151da:	81a3      	strh	r3, [r4, #12]
 80151dc:	6126      	str	r6, [r4, #16]
 80151de:	6165      	str	r5, [r4, #20]
 80151e0:	444e      	add	r6, r9
 80151e2:	eba5 0509 	sub.w	r5, r5, r9
 80151e6:	6026      	str	r6, [r4, #0]
 80151e8:	60a5      	str	r5, [r4, #8]
 80151ea:	463e      	mov	r6, r7
 80151ec:	42be      	cmp	r6, r7
 80151ee:	d900      	bls.n	80151f2 <__ssputs_r+0x72>
 80151f0:	463e      	mov	r6, r7
 80151f2:	6820      	ldr	r0, [r4, #0]
 80151f4:	4632      	mov	r2, r6
 80151f6:	4641      	mov	r1, r8
 80151f8:	f7ff fe54 	bl	8014ea4 <memmove>
 80151fc:	68a3      	ldr	r3, [r4, #8]
 80151fe:	1b9b      	subs	r3, r3, r6
 8015200:	60a3      	str	r3, [r4, #8]
 8015202:	6823      	ldr	r3, [r4, #0]
 8015204:	4433      	add	r3, r6
 8015206:	6023      	str	r3, [r4, #0]
 8015208:	2000      	movs	r0, #0
 801520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801520e:	462a      	mov	r2, r5
 8015210:	f7ff fb1a 	bl	8014848 <_realloc_r>
 8015214:	4606      	mov	r6, r0
 8015216:	2800      	cmp	r0, #0
 8015218:	d1e0      	bne.n	80151dc <__ssputs_r+0x5c>
 801521a:	6921      	ldr	r1, [r4, #16]
 801521c:	4650      	mov	r0, sl
 801521e:	f7ff ff5d 	bl	80150dc <_free_r>
 8015222:	230c      	movs	r3, #12
 8015224:	f8ca 3000 	str.w	r3, [sl]
 8015228:	89a3      	ldrh	r3, [r4, #12]
 801522a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801522e:	81a3      	strh	r3, [r4, #12]
 8015230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015234:	e7e9      	b.n	801520a <__ssputs_r+0x8a>
	...

08015238 <_svfiprintf_r>:
 8015238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801523c:	4698      	mov	r8, r3
 801523e:	898b      	ldrh	r3, [r1, #12]
 8015240:	061b      	lsls	r3, r3, #24
 8015242:	b09d      	sub	sp, #116	@ 0x74
 8015244:	4607      	mov	r7, r0
 8015246:	460d      	mov	r5, r1
 8015248:	4614      	mov	r4, r2
 801524a:	d510      	bpl.n	801526e <_svfiprintf_r+0x36>
 801524c:	690b      	ldr	r3, [r1, #16]
 801524e:	b973      	cbnz	r3, 801526e <_svfiprintf_r+0x36>
 8015250:	2140      	movs	r1, #64	@ 0x40
 8015252:	f7ff f9f9 	bl	8014648 <_malloc_r>
 8015256:	6028      	str	r0, [r5, #0]
 8015258:	6128      	str	r0, [r5, #16]
 801525a:	b930      	cbnz	r0, 801526a <_svfiprintf_r+0x32>
 801525c:	230c      	movs	r3, #12
 801525e:	603b      	str	r3, [r7, #0]
 8015260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015264:	b01d      	add	sp, #116	@ 0x74
 8015266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801526a:	2340      	movs	r3, #64	@ 0x40
 801526c:	616b      	str	r3, [r5, #20]
 801526e:	2300      	movs	r3, #0
 8015270:	9309      	str	r3, [sp, #36]	@ 0x24
 8015272:	2320      	movs	r3, #32
 8015274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015278:	f8cd 800c 	str.w	r8, [sp, #12]
 801527c:	2330      	movs	r3, #48	@ 0x30
 801527e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801541c <_svfiprintf_r+0x1e4>
 8015282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015286:	f04f 0901 	mov.w	r9, #1
 801528a:	4623      	mov	r3, r4
 801528c:	469a      	mov	sl, r3
 801528e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015292:	b10a      	cbz	r2, 8015298 <_svfiprintf_r+0x60>
 8015294:	2a25      	cmp	r2, #37	@ 0x25
 8015296:	d1f9      	bne.n	801528c <_svfiprintf_r+0x54>
 8015298:	ebba 0b04 	subs.w	fp, sl, r4
 801529c:	d00b      	beq.n	80152b6 <_svfiprintf_r+0x7e>
 801529e:	465b      	mov	r3, fp
 80152a0:	4622      	mov	r2, r4
 80152a2:	4629      	mov	r1, r5
 80152a4:	4638      	mov	r0, r7
 80152a6:	f7ff ff6b 	bl	8015180 <__ssputs_r>
 80152aa:	3001      	adds	r0, #1
 80152ac:	f000 80a7 	beq.w	80153fe <_svfiprintf_r+0x1c6>
 80152b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152b2:	445a      	add	r2, fp
 80152b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80152b6:	f89a 3000 	ldrb.w	r3, [sl]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f000 809f 	beq.w	80153fe <_svfiprintf_r+0x1c6>
 80152c0:	2300      	movs	r3, #0
 80152c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80152c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152ca:	f10a 0a01 	add.w	sl, sl, #1
 80152ce:	9304      	str	r3, [sp, #16]
 80152d0:	9307      	str	r3, [sp, #28]
 80152d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80152d8:	4654      	mov	r4, sl
 80152da:	2205      	movs	r2, #5
 80152dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152e0:	484e      	ldr	r0, [pc, #312]	@ (801541c <_svfiprintf_r+0x1e4>)
 80152e2:	f7ea ffb5 	bl	8000250 <memchr>
 80152e6:	9a04      	ldr	r2, [sp, #16]
 80152e8:	b9d8      	cbnz	r0, 8015322 <_svfiprintf_r+0xea>
 80152ea:	06d0      	lsls	r0, r2, #27
 80152ec:	bf44      	itt	mi
 80152ee:	2320      	movmi	r3, #32
 80152f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152f4:	0711      	lsls	r1, r2, #28
 80152f6:	bf44      	itt	mi
 80152f8:	232b      	movmi	r3, #43	@ 0x2b
 80152fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152fe:	f89a 3000 	ldrb.w	r3, [sl]
 8015302:	2b2a      	cmp	r3, #42	@ 0x2a
 8015304:	d015      	beq.n	8015332 <_svfiprintf_r+0xfa>
 8015306:	9a07      	ldr	r2, [sp, #28]
 8015308:	4654      	mov	r4, sl
 801530a:	2000      	movs	r0, #0
 801530c:	f04f 0c0a 	mov.w	ip, #10
 8015310:	4621      	mov	r1, r4
 8015312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015316:	3b30      	subs	r3, #48	@ 0x30
 8015318:	2b09      	cmp	r3, #9
 801531a:	d94b      	bls.n	80153b4 <_svfiprintf_r+0x17c>
 801531c:	b1b0      	cbz	r0, 801534c <_svfiprintf_r+0x114>
 801531e:	9207      	str	r2, [sp, #28]
 8015320:	e014      	b.n	801534c <_svfiprintf_r+0x114>
 8015322:	eba0 0308 	sub.w	r3, r0, r8
 8015326:	fa09 f303 	lsl.w	r3, r9, r3
 801532a:	4313      	orrs	r3, r2
 801532c:	9304      	str	r3, [sp, #16]
 801532e:	46a2      	mov	sl, r4
 8015330:	e7d2      	b.n	80152d8 <_svfiprintf_r+0xa0>
 8015332:	9b03      	ldr	r3, [sp, #12]
 8015334:	1d19      	adds	r1, r3, #4
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	9103      	str	r1, [sp, #12]
 801533a:	2b00      	cmp	r3, #0
 801533c:	bfbb      	ittet	lt
 801533e:	425b      	neglt	r3, r3
 8015340:	f042 0202 	orrlt.w	r2, r2, #2
 8015344:	9307      	strge	r3, [sp, #28]
 8015346:	9307      	strlt	r3, [sp, #28]
 8015348:	bfb8      	it	lt
 801534a:	9204      	strlt	r2, [sp, #16]
 801534c:	7823      	ldrb	r3, [r4, #0]
 801534e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015350:	d10a      	bne.n	8015368 <_svfiprintf_r+0x130>
 8015352:	7863      	ldrb	r3, [r4, #1]
 8015354:	2b2a      	cmp	r3, #42	@ 0x2a
 8015356:	d132      	bne.n	80153be <_svfiprintf_r+0x186>
 8015358:	9b03      	ldr	r3, [sp, #12]
 801535a:	1d1a      	adds	r2, r3, #4
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	9203      	str	r2, [sp, #12]
 8015360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015364:	3402      	adds	r4, #2
 8015366:	9305      	str	r3, [sp, #20]
 8015368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801542c <_svfiprintf_r+0x1f4>
 801536c:	7821      	ldrb	r1, [r4, #0]
 801536e:	2203      	movs	r2, #3
 8015370:	4650      	mov	r0, sl
 8015372:	f7ea ff6d 	bl	8000250 <memchr>
 8015376:	b138      	cbz	r0, 8015388 <_svfiprintf_r+0x150>
 8015378:	9b04      	ldr	r3, [sp, #16]
 801537a:	eba0 000a 	sub.w	r0, r0, sl
 801537e:	2240      	movs	r2, #64	@ 0x40
 8015380:	4082      	lsls	r2, r0
 8015382:	4313      	orrs	r3, r2
 8015384:	3401      	adds	r4, #1
 8015386:	9304      	str	r3, [sp, #16]
 8015388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801538c:	4824      	ldr	r0, [pc, #144]	@ (8015420 <_svfiprintf_r+0x1e8>)
 801538e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015392:	2206      	movs	r2, #6
 8015394:	f7ea ff5c 	bl	8000250 <memchr>
 8015398:	2800      	cmp	r0, #0
 801539a:	d036      	beq.n	801540a <_svfiprintf_r+0x1d2>
 801539c:	4b21      	ldr	r3, [pc, #132]	@ (8015424 <_svfiprintf_r+0x1ec>)
 801539e:	bb1b      	cbnz	r3, 80153e8 <_svfiprintf_r+0x1b0>
 80153a0:	9b03      	ldr	r3, [sp, #12]
 80153a2:	3307      	adds	r3, #7
 80153a4:	f023 0307 	bic.w	r3, r3, #7
 80153a8:	3308      	adds	r3, #8
 80153aa:	9303      	str	r3, [sp, #12]
 80153ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153ae:	4433      	add	r3, r6
 80153b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80153b2:	e76a      	b.n	801528a <_svfiprintf_r+0x52>
 80153b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80153b8:	460c      	mov	r4, r1
 80153ba:	2001      	movs	r0, #1
 80153bc:	e7a8      	b.n	8015310 <_svfiprintf_r+0xd8>
 80153be:	2300      	movs	r3, #0
 80153c0:	3401      	adds	r4, #1
 80153c2:	9305      	str	r3, [sp, #20]
 80153c4:	4619      	mov	r1, r3
 80153c6:	f04f 0c0a 	mov.w	ip, #10
 80153ca:	4620      	mov	r0, r4
 80153cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153d0:	3a30      	subs	r2, #48	@ 0x30
 80153d2:	2a09      	cmp	r2, #9
 80153d4:	d903      	bls.n	80153de <_svfiprintf_r+0x1a6>
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d0c6      	beq.n	8015368 <_svfiprintf_r+0x130>
 80153da:	9105      	str	r1, [sp, #20]
 80153dc:	e7c4      	b.n	8015368 <_svfiprintf_r+0x130>
 80153de:	fb0c 2101 	mla	r1, ip, r1, r2
 80153e2:	4604      	mov	r4, r0
 80153e4:	2301      	movs	r3, #1
 80153e6:	e7f0      	b.n	80153ca <_svfiprintf_r+0x192>
 80153e8:	ab03      	add	r3, sp, #12
 80153ea:	9300      	str	r3, [sp, #0]
 80153ec:	462a      	mov	r2, r5
 80153ee:	4b0e      	ldr	r3, [pc, #56]	@ (8015428 <_svfiprintf_r+0x1f0>)
 80153f0:	a904      	add	r1, sp, #16
 80153f2:	4638      	mov	r0, r7
 80153f4:	f3af 8000 	nop.w
 80153f8:	1c42      	adds	r2, r0, #1
 80153fa:	4606      	mov	r6, r0
 80153fc:	d1d6      	bne.n	80153ac <_svfiprintf_r+0x174>
 80153fe:	89ab      	ldrh	r3, [r5, #12]
 8015400:	065b      	lsls	r3, r3, #25
 8015402:	f53f af2d 	bmi.w	8015260 <_svfiprintf_r+0x28>
 8015406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015408:	e72c      	b.n	8015264 <_svfiprintf_r+0x2c>
 801540a:	ab03      	add	r3, sp, #12
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	462a      	mov	r2, r5
 8015410:	4b05      	ldr	r3, [pc, #20]	@ (8015428 <_svfiprintf_r+0x1f0>)
 8015412:	a904      	add	r1, sp, #16
 8015414:	4638      	mov	r0, r7
 8015416:	f000 f9bb 	bl	8015790 <_printf_i>
 801541a:	e7ed      	b.n	80153f8 <_svfiprintf_r+0x1c0>
 801541c:	08016b83 	.word	0x08016b83
 8015420:	08016b8d 	.word	0x08016b8d
 8015424:	00000000 	.word	0x00000000
 8015428:	08015181 	.word	0x08015181
 801542c:	08016b89 	.word	0x08016b89

08015430 <__sfputc_r>:
 8015430:	6893      	ldr	r3, [r2, #8]
 8015432:	3b01      	subs	r3, #1
 8015434:	2b00      	cmp	r3, #0
 8015436:	b410      	push	{r4}
 8015438:	6093      	str	r3, [r2, #8]
 801543a:	da08      	bge.n	801544e <__sfputc_r+0x1e>
 801543c:	6994      	ldr	r4, [r2, #24]
 801543e:	42a3      	cmp	r3, r4
 8015440:	db01      	blt.n	8015446 <__sfputc_r+0x16>
 8015442:	290a      	cmp	r1, #10
 8015444:	d103      	bne.n	801544e <__sfputc_r+0x1e>
 8015446:	f85d 4b04 	ldr.w	r4, [sp], #4
 801544a:	f7ff bc87 	b.w	8014d5c <__swbuf_r>
 801544e:	6813      	ldr	r3, [r2, #0]
 8015450:	1c58      	adds	r0, r3, #1
 8015452:	6010      	str	r0, [r2, #0]
 8015454:	7019      	strb	r1, [r3, #0]
 8015456:	4608      	mov	r0, r1
 8015458:	f85d 4b04 	ldr.w	r4, [sp], #4
 801545c:	4770      	bx	lr

0801545e <__sfputs_r>:
 801545e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015460:	4606      	mov	r6, r0
 8015462:	460f      	mov	r7, r1
 8015464:	4614      	mov	r4, r2
 8015466:	18d5      	adds	r5, r2, r3
 8015468:	42ac      	cmp	r4, r5
 801546a:	d101      	bne.n	8015470 <__sfputs_r+0x12>
 801546c:	2000      	movs	r0, #0
 801546e:	e007      	b.n	8015480 <__sfputs_r+0x22>
 8015470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015474:	463a      	mov	r2, r7
 8015476:	4630      	mov	r0, r6
 8015478:	f7ff ffda 	bl	8015430 <__sfputc_r>
 801547c:	1c43      	adds	r3, r0, #1
 801547e:	d1f3      	bne.n	8015468 <__sfputs_r+0xa>
 8015480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015484 <_vfiprintf_r>:
 8015484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015488:	460d      	mov	r5, r1
 801548a:	b09d      	sub	sp, #116	@ 0x74
 801548c:	4614      	mov	r4, r2
 801548e:	4698      	mov	r8, r3
 8015490:	4606      	mov	r6, r0
 8015492:	b118      	cbz	r0, 801549c <_vfiprintf_r+0x18>
 8015494:	6a03      	ldr	r3, [r0, #32]
 8015496:	b90b      	cbnz	r3, 801549c <_vfiprintf_r+0x18>
 8015498:	f7ff fb08 	bl	8014aac <__sinit>
 801549c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801549e:	07d9      	lsls	r1, r3, #31
 80154a0:	d405      	bmi.n	80154ae <_vfiprintf_r+0x2a>
 80154a2:	89ab      	ldrh	r3, [r5, #12]
 80154a4:	059a      	lsls	r2, r3, #22
 80154a6:	d402      	bmi.n	80154ae <_vfiprintf_r+0x2a>
 80154a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154aa:	f7ff fdd4 	bl	8015056 <__retarget_lock_acquire_recursive>
 80154ae:	89ab      	ldrh	r3, [r5, #12]
 80154b0:	071b      	lsls	r3, r3, #28
 80154b2:	d501      	bpl.n	80154b8 <_vfiprintf_r+0x34>
 80154b4:	692b      	ldr	r3, [r5, #16]
 80154b6:	b99b      	cbnz	r3, 80154e0 <_vfiprintf_r+0x5c>
 80154b8:	4629      	mov	r1, r5
 80154ba:	4630      	mov	r0, r6
 80154bc:	f7ff fc8c 	bl	8014dd8 <__swsetup_r>
 80154c0:	b170      	cbz	r0, 80154e0 <_vfiprintf_r+0x5c>
 80154c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154c4:	07dc      	lsls	r4, r3, #31
 80154c6:	d504      	bpl.n	80154d2 <_vfiprintf_r+0x4e>
 80154c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154cc:	b01d      	add	sp, #116	@ 0x74
 80154ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d2:	89ab      	ldrh	r3, [r5, #12]
 80154d4:	0598      	lsls	r0, r3, #22
 80154d6:	d4f7      	bmi.n	80154c8 <_vfiprintf_r+0x44>
 80154d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154da:	f7ff fdbd 	bl	8015058 <__retarget_lock_release_recursive>
 80154de:	e7f3      	b.n	80154c8 <_vfiprintf_r+0x44>
 80154e0:	2300      	movs	r3, #0
 80154e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80154e4:	2320      	movs	r3, #32
 80154e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80154ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80154ee:	2330      	movs	r3, #48	@ 0x30
 80154f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80156a0 <_vfiprintf_r+0x21c>
 80154f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80154f8:	f04f 0901 	mov.w	r9, #1
 80154fc:	4623      	mov	r3, r4
 80154fe:	469a      	mov	sl, r3
 8015500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015504:	b10a      	cbz	r2, 801550a <_vfiprintf_r+0x86>
 8015506:	2a25      	cmp	r2, #37	@ 0x25
 8015508:	d1f9      	bne.n	80154fe <_vfiprintf_r+0x7a>
 801550a:	ebba 0b04 	subs.w	fp, sl, r4
 801550e:	d00b      	beq.n	8015528 <_vfiprintf_r+0xa4>
 8015510:	465b      	mov	r3, fp
 8015512:	4622      	mov	r2, r4
 8015514:	4629      	mov	r1, r5
 8015516:	4630      	mov	r0, r6
 8015518:	f7ff ffa1 	bl	801545e <__sfputs_r>
 801551c:	3001      	adds	r0, #1
 801551e:	f000 80a7 	beq.w	8015670 <_vfiprintf_r+0x1ec>
 8015522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015524:	445a      	add	r2, fp
 8015526:	9209      	str	r2, [sp, #36]	@ 0x24
 8015528:	f89a 3000 	ldrb.w	r3, [sl]
 801552c:	2b00      	cmp	r3, #0
 801552e:	f000 809f 	beq.w	8015670 <_vfiprintf_r+0x1ec>
 8015532:	2300      	movs	r3, #0
 8015534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801553c:	f10a 0a01 	add.w	sl, sl, #1
 8015540:	9304      	str	r3, [sp, #16]
 8015542:	9307      	str	r3, [sp, #28]
 8015544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015548:	931a      	str	r3, [sp, #104]	@ 0x68
 801554a:	4654      	mov	r4, sl
 801554c:	2205      	movs	r2, #5
 801554e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015552:	4853      	ldr	r0, [pc, #332]	@ (80156a0 <_vfiprintf_r+0x21c>)
 8015554:	f7ea fe7c 	bl	8000250 <memchr>
 8015558:	9a04      	ldr	r2, [sp, #16]
 801555a:	b9d8      	cbnz	r0, 8015594 <_vfiprintf_r+0x110>
 801555c:	06d1      	lsls	r1, r2, #27
 801555e:	bf44      	itt	mi
 8015560:	2320      	movmi	r3, #32
 8015562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015566:	0713      	lsls	r3, r2, #28
 8015568:	bf44      	itt	mi
 801556a:	232b      	movmi	r3, #43	@ 0x2b
 801556c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015570:	f89a 3000 	ldrb.w	r3, [sl]
 8015574:	2b2a      	cmp	r3, #42	@ 0x2a
 8015576:	d015      	beq.n	80155a4 <_vfiprintf_r+0x120>
 8015578:	9a07      	ldr	r2, [sp, #28]
 801557a:	4654      	mov	r4, sl
 801557c:	2000      	movs	r0, #0
 801557e:	f04f 0c0a 	mov.w	ip, #10
 8015582:	4621      	mov	r1, r4
 8015584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015588:	3b30      	subs	r3, #48	@ 0x30
 801558a:	2b09      	cmp	r3, #9
 801558c:	d94b      	bls.n	8015626 <_vfiprintf_r+0x1a2>
 801558e:	b1b0      	cbz	r0, 80155be <_vfiprintf_r+0x13a>
 8015590:	9207      	str	r2, [sp, #28]
 8015592:	e014      	b.n	80155be <_vfiprintf_r+0x13a>
 8015594:	eba0 0308 	sub.w	r3, r0, r8
 8015598:	fa09 f303 	lsl.w	r3, r9, r3
 801559c:	4313      	orrs	r3, r2
 801559e:	9304      	str	r3, [sp, #16]
 80155a0:	46a2      	mov	sl, r4
 80155a2:	e7d2      	b.n	801554a <_vfiprintf_r+0xc6>
 80155a4:	9b03      	ldr	r3, [sp, #12]
 80155a6:	1d19      	adds	r1, r3, #4
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	9103      	str	r1, [sp, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	bfbb      	ittet	lt
 80155b0:	425b      	neglt	r3, r3
 80155b2:	f042 0202 	orrlt.w	r2, r2, #2
 80155b6:	9307      	strge	r3, [sp, #28]
 80155b8:	9307      	strlt	r3, [sp, #28]
 80155ba:	bfb8      	it	lt
 80155bc:	9204      	strlt	r2, [sp, #16]
 80155be:	7823      	ldrb	r3, [r4, #0]
 80155c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80155c2:	d10a      	bne.n	80155da <_vfiprintf_r+0x156>
 80155c4:	7863      	ldrb	r3, [r4, #1]
 80155c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80155c8:	d132      	bne.n	8015630 <_vfiprintf_r+0x1ac>
 80155ca:	9b03      	ldr	r3, [sp, #12]
 80155cc:	1d1a      	adds	r2, r3, #4
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	9203      	str	r2, [sp, #12]
 80155d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80155d6:	3402      	adds	r4, #2
 80155d8:	9305      	str	r3, [sp, #20]
 80155da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80156b0 <_vfiprintf_r+0x22c>
 80155de:	7821      	ldrb	r1, [r4, #0]
 80155e0:	2203      	movs	r2, #3
 80155e2:	4650      	mov	r0, sl
 80155e4:	f7ea fe34 	bl	8000250 <memchr>
 80155e8:	b138      	cbz	r0, 80155fa <_vfiprintf_r+0x176>
 80155ea:	9b04      	ldr	r3, [sp, #16]
 80155ec:	eba0 000a 	sub.w	r0, r0, sl
 80155f0:	2240      	movs	r2, #64	@ 0x40
 80155f2:	4082      	lsls	r2, r0
 80155f4:	4313      	orrs	r3, r2
 80155f6:	3401      	adds	r4, #1
 80155f8:	9304      	str	r3, [sp, #16]
 80155fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155fe:	4829      	ldr	r0, [pc, #164]	@ (80156a4 <_vfiprintf_r+0x220>)
 8015600:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015604:	2206      	movs	r2, #6
 8015606:	f7ea fe23 	bl	8000250 <memchr>
 801560a:	2800      	cmp	r0, #0
 801560c:	d03f      	beq.n	801568e <_vfiprintf_r+0x20a>
 801560e:	4b26      	ldr	r3, [pc, #152]	@ (80156a8 <_vfiprintf_r+0x224>)
 8015610:	bb1b      	cbnz	r3, 801565a <_vfiprintf_r+0x1d6>
 8015612:	9b03      	ldr	r3, [sp, #12]
 8015614:	3307      	adds	r3, #7
 8015616:	f023 0307 	bic.w	r3, r3, #7
 801561a:	3308      	adds	r3, #8
 801561c:	9303      	str	r3, [sp, #12]
 801561e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015620:	443b      	add	r3, r7
 8015622:	9309      	str	r3, [sp, #36]	@ 0x24
 8015624:	e76a      	b.n	80154fc <_vfiprintf_r+0x78>
 8015626:	fb0c 3202 	mla	r2, ip, r2, r3
 801562a:	460c      	mov	r4, r1
 801562c:	2001      	movs	r0, #1
 801562e:	e7a8      	b.n	8015582 <_vfiprintf_r+0xfe>
 8015630:	2300      	movs	r3, #0
 8015632:	3401      	adds	r4, #1
 8015634:	9305      	str	r3, [sp, #20]
 8015636:	4619      	mov	r1, r3
 8015638:	f04f 0c0a 	mov.w	ip, #10
 801563c:	4620      	mov	r0, r4
 801563e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015642:	3a30      	subs	r2, #48	@ 0x30
 8015644:	2a09      	cmp	r2, #9
 8015646:	d903      	bls.n	8015650 <_vfiprintf_r+0x1cc>
 8015648:	2b00      	cmp	r3, #0
 801564a:	d0c6      	beq.n	80155da <_vfiprintf_r+0x156>
 801564c:	9105      	str	r1, [sp, #20]
 801564e:	e7c4      	b.n	80155da <_vfiprintf_r+0x156>
 8015650:	fb0c 2101 	mla	r1, ip, r1, r2
 8015654:	4604      	mov	r4, r0
 8015656:	2301      	movs	r3, #1
 8015658:	e7f0      	b.n	801563c <_vfiprintf_r+0x1b8>
 801565a:	ab03      	add	r3, sp, #12
 801565c:	9300      	str	r3, [sp, #0]
 801565e:	462a      	mov	r2, r5
 8015660:	4b12      	ldr	r3, [pc, #72]	@ (80156ac <_vfiprintf_r+0x228>)
 8015662:	a904      	add	r1, sp, #16
 8015664:	4630      	mov	r0, r6
 8015666:	f3af 8000 	nop.w
 801566a:	4607      	mov	r7, r0
 801566c:	1c78      	adds	r0, r7, #1
 801566e:	d1d6      	bne.n	801561e <_vfiprintf_r+0x19a>
 8015670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015672:	07d9      	lsls	r1, r3, #31
 8015674:	d405      	bmi.n	8015682 <_vfiprintf_r+0x1fe>
 8015676:	89ab      	ldrh	r3, [r5, #12]
 8015678:	059a      	lsls	r2, r3, #22
 801567a:	d402      	bmi.n	8015682 <_vfiprintf_r+0x1fe>
 801567c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801567e:	f7ff fceb 	bl	8015058 <__retarget_lock_release_recursive>
 8015682:	89ab      	ldrh	r3, [r5, #12]
 8015684:	065b      	lsls	r3, r3, #25
 8015686:	f53f af1f 	bmi.w	80154c8 <_vfiprintf_r+0x44>
 801568a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801568c:	e71e      	b.n	80154cc <_vfiprintf_r+0x48>
 801568e:	ab03      	add	r3, sp, #12
 8015690:	9300      	str	r3, [sp, #0]
 8015692:	462a      	mov	r2, r5
 8015694:	4b05      	ldr	r3, [pc, #20]	@ (80156ac <_vfiprintf_r+0x228>)
 8015696:	a904      	add	r1, sp, #16
 8015698:	4630      	mov	r0, r6
 801569a:	f000 f879 	bl	8015790 <_printf_i>
 801569e:	e7e4      	b.n	801566a <_vfiprintf_r+0x1e6>
 80156a0:	08016b83 	.word	0x08016b83
 80156a4:	08016b8d 	.word	0x08016b8d
 80156a8:	00000000 	.word	0x00000000
 80156ac:	0801545f 	.word	0x0801545f
 80156b0:	08016b89 	.word	0x08016b89

080156b4 <_printf_common>:
 80156b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156b8:	4616      	mov	r6, r2
 80156ba:	4698      	mov	r8, r3
 80156bc:	688a      	ldr	r2, [r1, #8]
 80156be:	690b      	ldr	r3, [r1, #16]
 80156c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80156c4:	4293      	cmp	r3, r2
 80156c6:	bfb8      	it	lt
 80156c8:	4613      	movlt	r3, r2
 80156ca:	6033      	str	r3, [r6, #0]
 80156cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80156d0:	4607      	mov	r7, r0
 80156d2:	460c      	mov	r4, r1
 80156d4:	b10a      	cbz	r2, 80156da <_printf_common+0x26>
 80156d6:	3301      	adds	r3, #1
 80156d8:	6033      	str	r3, [r6, #0]
 80156da:	6823      	ldr	r3, [r4, #0]
 80156dc:	0699      	lsls	r1, r3, #26
 80156de:	bf42      	ittt	mi
 80156e0:	6833      	ldrmi	r3, [r6, #0]
 80156e2:	3302      	addmi	r3, #2
 80156e4:	6033      	strmi	r3, [r6, #0]
 80156e6:	6825      	ldr	r5, [r4, #0]
 80156e8:	f015 0506 	ands.w	r5, r5, #6
 80156ec:	d106      	bne.n	80156fc <_printf_common+0x48>
 80156ee:	f104 0a19 	add.w	sl, r4, #25
 80156f2:	68e3      	ldr	r3, [r4, #12]
 80156f4:	6832      	ldr	r2, [r6, #0]
 80156f6:	1a9b      	subs	r3, r3, r2
 80156f8:	42ab      	cmp	r3, r5
 80156fa:	dc26      	bgt.n	801574a <_printf_common+0x96>
 80156fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015700:	6822      	ldr	r2, [r4, #0]
 8015702:	3b00      	subs	r3, #0
 8015704:	bf18      	it	ne
 8015706:	2301      	movne	r3, #1
 8015708:	0692      	lsls	r2, r2, #26
 801570a:	d42b      	bmi.n	8015764 <_printf_common+0xb0>
 801570c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015710:	4641      	mov	r1, r8
 8015712:	4638      	mov	r0, r7
 8015714:	47c8      	blx	r9
 8015716:	3001      	adds	r0, #1
 8015718:	d01e      	beq.n	8015758 <_printf_common+0xa4>
 801571a:	6823      	ldr	r3, [r4, #0]
 801571c:	6922      	ldr	r2, [r4, #16]
 801571e:	f003 0306 	and.w	r3, r3, #6
 8015722:	2b04      	cmp	r3, #4
 8015724:	bf02      	ittt	eq
 8015726:	68e5      	ldreq	r5, [r4, #12]
 8015728:	6833      	ldreq	r3, [r6, #0]
 801572a:	1aed      	subeq	r5, r5, r3
 801572c:	68a3      	ldr	r3, [r4, #8]
 801572e:	bf0c      	ite	eq
 8015730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015734:	2500      	movne	r5, #0
 8015736:	4293      	cmp	r3, r2
 8015738:	bfc4      	itt	gt
 801573a:	1a9b      	subgt	r3, r3, r2
 801573c:	18ed      	addgt	r5, r5, r3
 801573e:	2600      	movs	r6, #0
 8015740:	341a      	adds	r4, #26
 8015742:	42b5      	cmp	r5, r6
 8015744:	d11a      	bne.n	801577c <_printf_common+0xc8>
 8015746:	2000      	movs	r0, #0
 8015748:	e008      	b.n	801575c <_printf_common+0xa8>
 801574a:	2301      	movs	r3, #1
 801574c:	4652      	mov	r2, sl
 801574e:	4641      	mov	r1, r8
 8015750:	4638      	mov	r0, r7
 8015752:	47c8      	blx	r9
 8015754:	3001      	adds	r0, #1
 8015756:	d103      	bne.n	8015760 <_printf_common+0xac>
 8015758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801575c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015760:	3501      	adds	r5, #1
 8015762:	e7c6      	b.n	80156f2 <_printf_common+0x3e>
 8015764:	18e1      	adds	r1, r4, r3
 8015766:	1c5a      	adds	r2, r3, #1
 8015768:	2030      	movs	r0, #48	@ 0x30
 801576a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801576e:	4422      	add	r2, r4
 8015770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015774:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015778:	3302      	adds	r3, #2
 801577a:	e7c7      	b.n	801570c <_printf_common+0x58>
 801577c:	2301      	movs	r3, #1
 801577e:	4622      	mov	r2, r4
 8015780:	4641      	mov	r1, r8
 8015782:	4638      	mov	r0, r7
 8015784:	47c8      	blx	r9
 8015786:	3001      	adds	r0, #1
 8015788:	d0e6      	beq.n	8015758 <_printf_common+0xa4>
 801578a:	3601      	adds	r6, #1
 801578c:	e7d9      	b.n	8015742 <_printf_common+0x8e>
	...

08015790 <_printf_i>:
 8015790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015794:	7e0f      	ldrb	r7, [r1, #24]
 8015796:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015798:	2f78      	cmp	r7, #120	@ 0x78
 801579a:	4691      	mov	r9, r2
 801579c:	4680      	mov	r8, r0
 801579e:	460c      	mov	r4, r1
 80157a0:	469a      	mov	sl, r3
 80157a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80157a6:	d807      	bhi.n	80157b8 <_printf_i+0x28>
 80157a8:	2f62      	cmp	r7, #98	@ 0x62
 80157aa:	d80a      	bhi.n	80157c2 <_printf_i+0x32>
 80157ac:	2f00      	cmp	r7, #0
 80157ae:	f000 80d1 	beq.w	8015954 <_printf_i+0x1c4>
 80157b2:	2f58      	cmp	r7, #88	@ 0x58
 80157b4:	f000 80b8 	beq.w	8015928 <_printf_i+0x198>
 80157b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80157bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80157c0:	e03a      	b.n	8015838 <_printf_i+0xa8>
 80157c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80157c6:	2b15      	cmp	r3, #21
 80157c8:	d8f6      	bhi.n	80157b8 <_printf_i+0x28>
 80157ca:	a101      	add	r1, pc, #4	@ (adr r1, 80157d0 <_printf_i+0x40>)
 80157cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80157d0:	08015829 	.word	0x08015829
 80157d4:	0801583d 	.word	0x0801583d
 80157d8:	080157b9 	.word	0x080157b9
 80157dc:	080157b9 	.word	0x080157b9
 80157e0:	080157b9 	.word	0x080157b9
 80157e4:	080157b9 	.word	0x080157b9
 80157e8:	0801583d 	.word	0x0801583d
 80157ec:	080157b9 	.word	0x080157b9
 80157f0:	080157b9 	.word	0x080157b9
 80157f4:	080157b9 	.word	0x080157b9
 80157f8:	080157b9 	.word	0x080157b9
 80157fc:	0801593b 	.word	0x0801593b
 8015800:	08015867 	.word	0x08015867
 8015804:	080158f5 	.word	0x080158f5
 8015808:	080157b9 	.word	0x080157b9
 801580c:	080157b9 	.word	0x080157b9
 8015810:	0801595d 	.word	0x0801595d
 8015814:	080157b9 	.word	0x080157b9
 8015818:	08015867 	.word	0x08015867
 801581c:	080157b9 	.word	0x080157b9
 8015820:	080157b9 	.word	0x080157b9
 8015824:	080158fd 	.word	0x080158fd
 8015828:	6833      	ldr	r3, [r6, #0]
 801582a:	1d1a      	adds	r2, r3, #4
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	6032      	str	r2, [r6, #0]
 8015830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015838:	2301      	movs	r3, #1
 801583a:	e09c      	b.n	8015976 <_printf_i+0x1e6>
 801583c:	6833      	ldr	r3, [r6, #0]
 801583e:	6820      	ldr	r0, [r4, #0]
 8015840:	1d19      	adds	r1, r3, #4
 8015842:	6031      	str	r1, [r6, #0]
 8015844:	0606      	lsls	r6, r0, #24
 8015846:	d501      	bpl.n	801584c <_printf_i+0xbc>
 8015848:	681d      	ldr	r5, [r3, #0]
 801584a:	e003      	b.n	8015854 <_printf_i+0xc4>
 801584c:	0645      	lsls	r5, r0, #25
 801584e:	d5fb      	bpl.n	8015848 <_printf_i+0xb8>
 8015850:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015854:	2d00      	cmp	r5, #0
 8015856:	da03      	bge.n	8015860 <_printf_i+0xd0>
 8015858:	232d      	movs	r3, #45	@ 0x2d
 801585a:	426d      	negs	r5, r5
 801585c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015860:	4858      	ldr	r0, [pc, #352]	@ (80159c4 <_printf_i+0x234>)
 8015862:	230a      	movs	r3, #10
 8015864:	e011      	b.n	801588a <_printf_i+0xfa>
 8015866:	6821      	ldr	r1, [r4, #0]
 8015868:	6833      	ldr	r3, [r6, #0]
 801586a:	0608      	lsls	r0, r1, #24
 801586c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015870:	d402      	bmi.n	8015878 <_printf_i+0xe8>
 8015872:	0649      	lsls	r1, r1, #25
 8015874:	bf48      	it	mi
 8015876:	b2ad      	uxthmi	r5, r5
 8015878:	2f6f      	cmp	r7, #111	@ 0x6f
 801587a:	4852      	ldr	r0, [pc, #328]	@ (80159c4 <_printf_i+0x234>)
 801587c:	6033      	str	r3, [r6, #0]
 801587e:	bf14      	ite	ne
 8015880:	230a      	movne	r3, #10
 8015882:	2308      	moveq	r3, #8
 8015884:	2100      	movs	r1, #0
 8015886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801588a:	6866      	ldr	r6, [r4, #4]
 801588c:	60a6      	str	r6, [r4, #8]
 801588e:	2e00      	cmp	r6, #0
 8015890:	db05      	blt.n	801589e <_printf_i+0x10e>
 8015892:	6821      	ldr	r1, [r4, #0]
 8015894:	432e      	orrs	r6, r5
 8015896:	f021 0104 	bic.w	r1, r1, #4
 801589a:	6021      	str	r1, [r4, #0]
 801589c:	d04b      	beq.n	8015936 <_printf_i+0x1a6>
 801589e:	4616      	mov	r6, r2
 80158a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80158a4:	fb03 5711 	mls	r7, r3, r1, r5
 80158a8:	5dc7      	ldrb	r7, [r0, r7]
 80158aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80158ae:	462f      	mov	r7, r5
 80158b0:	42bb      	cmp	r3, r7
 80158b2:	460d      	mov	r5, r1
 80158b4:	d9f4      	bls.n	80158a0 <_printf_i+0x110>
 80158b6:	2b08      	cmp	r3, #8
 80158b8:	d10b      	bne.n	80158d2 <_printf_i+0x142>
 80158ba:	6823      	ldr	r3, [r4, #0]
 80158bc:	07df      	lsls	r7, r3, #31
 80158be:	d508      	bpl.n	80158d2 <_printf_i+0x142>
 80158c0:	6923      	ldr	r3, [r4, #16]
 80158c2:	6861      	ldr	r1, [r4, #4]
 80158c4:	4299      	cmp	r1, r3
 80158c6:	bfde      	ittt	le
 80158c8:	2330      	movle	r3, #48	@ 0x30
 80158ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80158ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80158d2:	1b92      	subs	r2, r2, r6
 80158d4:	6122      	str	r2, [r4, #16]
 80158d6:	f8cd a000 	str.w	sl, [sp]
 80158da:	464b      	mov	r3, r9
 80158dc:	aa03      	add	r2, sp, #12
 80158de:	4621      	mov	r1, r4
 80158e0:	4640      	mov	r0, r8
 80158e2:	f7ff fee7 	bl	80156b4 <_printf_common>
 80158e6:	3001      	adds	r0, #1
 80158e8:	d14a      	bne.n	8015980 <_printf_i+0x1f0>
 80158ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80158ee:	b004      	add	sp, #16
 80158f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	f043 0320 	orr.w	r3, r3, #32
 80158fa:	6023      	str	r3, [r4, #0]
 80158fc:	4832      	ldr	r0, [pc, #200]	@ (80159c8 <_printf_i+0x238>)
 80158fe:	2778      	movs	r7, #120	@ 0x78
 8015900:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015904:	6823      	ldr	r3, [r4, #0]
 8015906:	6831      	ldr	r1, [r6, #0]
 8015908:	061f      	lsls	r7, r3, #24
 801590a:	f851 5b04 	ldr.w	r5, [r1], #4
 801590e:	d402      	bmi.n	8015916 <_printf_i+0x186>
 8015910:	065f      	lsls	r7, r3, #25
 8015912:	bf48      	it	mi
 8015914:	b2ad      	uxthmi	r5, r5
 8015916:	6031      	str	r1, [r6, #0]
 8015918:	07d9      	lsls	r1, r3, #31
 801591a:	bf44      	itt	mi
 801591c:	f043 0320 	orrmi.w	r3, r3, #32
 8015920:	6023      	strmi	r3, [r4, #0]
 8015922:	b11d      	cbz	r5, 801592c <_printf_i+0x19c>
 8015924:	2310      	movs	r3, #16
 8015926:	e7ad      	b.n	8015884 <_printf_i+0xf4>
 8015928:	4826      	ldr	r0, [pc, #152]	@ (80159c4 <_printf_i+0x234>)
 801592a:	e7e9      	b.n	8015900 <_printf_i+0x170>
 801592c:	6823      	ldr	r3, [r4, #0]
 801592e:	f023 0320 	bic.w	r3, r3, #32
 8015932:	6023      	str	r3, [r4, #0]
 8015934:	e7f6      	b.n	8015924 <_printf_i+0x194>
 8015936:	4616      	mov	r6, r2
 8015938:	e7bd      	b.n	80158b6 <_printf_i+0x126>
 801593a:	6833      	ldr	r3, [r6, #0]
 801593c:	6825      	ldr	r5, [r4, #0]
 801593e:	6961      	ldr	r1, [r4, #20]
 8015940:	1d18      	adds	r0, r3, #4
 8015942:	6030      	str	r0, [r6, #0]
 8015944:	062e      	lsls	r6, r5, #24
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	d501      	bpl.n	801594e <_printf_i+0x1be>
 801594a:	6019      	str	r1, [r3, #0]
 801594c:	e002      	b.n	8015954 <_printf_i+0x1c4>
 801594e:	0668      	lsls	r0, r5, #25
 8015950:	d5fb      	bpl.n	801594a <_printf_i+0x1ba>
 8015952:	8019      	strh	r1, [r3, #0]
 8015954:	2300      	movs	r3, #0
 8015956:	6123      	str	r3, [r4, #16]
 8015958:	4616      	mov	r6, r2
 801595a:	e7bc      	b.n	80158d6 <_printf_i+0x146>
 801595c:	6833      	ldr	r3, [r6, #0]
 801595e:	1d1a      	adds	r2, r3, #4
 8015960:	6032      	str	r2, [r6, #0]
 8015962:	681e      	ldr	r6, [r3, #0]
 8015964:	6862      	ldr	r2, [r4, #4]
 8015966:	2100      	movs	r1, #0
 8015968:	4630      	mov	r0, r6
 801596a:	f7ea fc71 	bl	8000250 <memchr>
 801596e:	b108      	cbz	r0, 8015974 <_printf_i+0x1e4>
 8015970:	1b80      	subs	r0, r0, r6
 8015972:	6060      	str	r0, [r4, #4]
 8015974:	6863      	ldr	r3, [r4, #4]
 8015976:	6123      	str	r3, [r4, #16]
 8015978:	2300      	movs	r3, #0
 801597a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801597e:	e7aa      	b.n	80158d6 <_printf_i+0x146>
 8015980:	6923      	ldr	r3, [r4, #16]
 8015982:	4632      	mov	r2, r6
 8015984:	4649      	mov	r1, r9
 8015986:	4640      	mov	r0, r8
 8015988:	47d0      	blx	sl
 801598a:	3001      	adds	r0, #1
 801598c:	d0ad      	beq.n	80158ea <_printf_i+0x15a>
 801598e:	6823      	ldr	r3, [r4, #0]
 8015990:	079b      	lsls	r3, r3, #30
 8015992:	d413      	bmi.n	80159bc <_printf_i+0x22c>
 8015994:	68e0      	ldr	r0, [r4, #12]
 8015996:	9b03      	ldr	r3, [sp, #12]
 8015998:	4298      	cmp	r0, r3
 801599a:	bfb8      	it	lt
 801599c:	4618      	movlt	r0, r3
 801599e:	e7a6      	b.n	80158ee <_printf_i+0x15e>
 80159a0:	2301      	movs	r3, #1
 80159a2:	4632      	mov	r2, r6
 80159a4:	4649      	mov	r1, r9
 80159a6:	4640      	mov	r0, r8
 80159a8:	47d0      	blx	sl
 80159aa:	3001      	adds	r0, #1
 80159ac:	d09d      	beq.n	80158ea <_printf_i+0x15a>
 80159ae:	3501      	adds	r5, #1
 80159b0:	68e3      	ldr	r3, [r4, #12]
 80159b2:	9903      	ldr	r1, [sp, #12]
 80159b4:	1a5b      	subs	r3, r3, r1
 80159b6:	42ab      	cmp	r3, r5
 80159b8:	dcf2      	bgt.n	80159a0 <_printf_i+0x210>
 80159ba:	e7eb      	b.n	8015994 <_printf_i+0x204>
 80159bc:	2500      	movs	r5, #0
 80159be:	f104 0619 	add.w	r6, r4, #25
 80159c2:	e7f5      	b.n	80159b0 <_printf_i+0x220>
 80159c4:	08016b94 	.word	0x08016b94
 80159c8:	08016ba5 	.word	0x08016ba5

080159cc <__sflush_r>:
 80159cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80159d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159d4:	0716      	lsls	r6, r2, #28
 80159d6:	4605      	mov	r5, r0
 80159d8:	460c      	mov	r4, r1
 80159da:	d454      	bmi.n	8015a86 <__sflush_r+0xba>
 80159dc:	684b      	ldr	r3, [r1, #4]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	dc02      	bgt.n	80159e8 <__sflush_r+0x1c>
 80159e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	dd48      	ble.n	8015a7a <__sflush_r+0xae>
 80159e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80159ea:	2e00      	cmp	r6, #0
 80159ec:	d045      	beq.n	8015a7a <__sflush_r+0xae>
 80159ee:	2300      	movs	r3, #0
 80159f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80159f4:	682f      	ldr	r7, [r5, #0]
 80159f6:	6a21      	ldr	r1, [r4, #32]
 80159f8:	602b      	str	r3, [r5, #0]
 80159fa:	d030      	beq.n	8015a5e <__sflush_r+0x92>
 80159fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80159fe:	89a3      	ldrh	r3, [r4, #12]
 8015a00:	0759      	lsls	r1, r3, #29
 8015a02:	d505      	bpl.n	8015a10 <__sflush_r+0x44>
 8015a04:	6863      	ldr	r3, [r4, #4]
 8015a06:	1ad2      	subs	r2, r2, r3
 8015a08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015a0a:	b10b      	cbz	r3, 8015a10 <__sflush_r+0x44>
 8015a0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015a0e:	1ad2      	subs	r2, r2, r3
 8015a10:	2300      	movs	r3, #0
 8015a12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015a14:	6a21      	ldr	r1, [r4, #32]
 8015a16:	4628      	mov	r0, r5
 8015a18:	47b0      	blx	r6
 8015a1a:	1c43      	adds	r3, r0, #1
 8015a1c:	89a3      	ldrh	r3, [r4, #12]
 8015a1e:	d106      	bne.n	8015a2e <__sflush_r+0x62>
 8015a20:	6829      	ldr	r1, [r5, #0]
 8015a22:	291d      	cmp	r1, #29
 8015a24:	d82b      	bhi.n	8015a7e <__sflush_r+0xb2>
 8015a26:	4a2a      	ldr	r2, [pc, #168]	@ (8015ad0 <__sflush_r+0x104>)
 8015a28:	40ca      	lsrs	r2, r1
 8015a2a:	07d6      	lsls	r6, r2, #31
 8015a2c:	d527      	bpl.n	8015a7e <__sflush_r+0xb2>
 8015a2e:	2200      	movs	r2, #0
 8015a30:	6062      	str	r2, [r4, #4]
 8015a32:	04d9      	lsls	r1, r3, #19
 8015a34:	6922      	ldr	r2, [r4, #16]
 8015a36:	6022      	str	r2, [r4, #0]
 8015a38:	d504      	bpl.n	8015a44 <__sflush_r+0x78>
 8015a3a:	1c42      	adds	r2, r0, #1
 8015a3c:	d101      	bne.n	8015a42 <__sflush_r+0x76>
 8015a3e:	682b      	ldr	r3, [r5, #0]
 8015a40:	b903      	cbnz	r3, 8015a44 <__sflush_r+0x78>
 8015a42:	6560      	str	r0, [r4, #84]	@ 0x54
 8015a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a46:	602f      	str	r7, [r5, #0]
 8015a48:	b1b9      	cbz	r1, 8015a7a <__sflush_r+0xae>
 8015a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a4e:	4299      	cmp	r1, r3
 8015a50:	d002      	beq.n	8015a58 <__sflush_r+0x8c>
 8015a52:	4628      	mov	r0, r5
 8015a54:	f7ff fb42 	bl	80150dc <_free_r>
 8015a58:	2300      	movs	r3, #0
 8015a5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a5c:	e00d      	b.n	8015a7a <__sflush_r+0xae>
 8015a5e:	2301      	movs	r3, #1
 8015a60:	4628      	mov	r0, r5
 8015a62:	47b0      	blx	r6
 8015a64:	4602      	mov	r2, r0
 8015a66:	1c50      	adds	r0, r2, #1
 8015a68:	d1c9      	bne.n	80159fe <__sflush_r+0x32>
 8015a6a:	682b      	ldr	r3, [r5, #0]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d0c6      	beq.n	80159fe <__sflush_r+0x32>
 8015a70:	2b1d      	cmp	r3, #29
 8015a72:	d001      	beq.n	8015a78 <__sflush_r+0xac>
 8015a74:	2b16      	cmp	r3, #22
 8015a76:	d11e      	bne.n	8015ab6 <__sflush_r+0xea>
 8015a78:	602f      	str	r7, [r5, #0]
 8015a7a:	2000      	movs	r0, #0
 8015a7c:	e022      	b.n	8015ac4 <__sflush_r+0xf8>
 8015a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a82:	b21b      	sxth	r3, r3
 8015a84:	e01b      	b.n	8015abe <__sflush_r+0xf2>
 8015a86:	690f      	ldr	r7, [r1, #16]
 8015a88:	2f00      	cmp	r7, #0
 8015a8a:	d0f6      	beq.n	8015a7a <__sflush_r+0xae>
 8015a8c:	0793      	lsls	r3, r2, #30
 8015a8e:	680e      	ldr	r6, [r1, #0]
 8015a90:	bf08      	it	eq
 8015a92:	694b      	ldreq	r3, [r1, #20]
 8015a94:	600f      	str	r7, [r1, #0]
 8015a96:	bf18      	it	ne
 8015a98:	2300      	movne	r3, #0
 8015a9a:	eba6 0807 	sub.w	r8, r6, r7
 8015a9e:	608b      	str	r3, [r1, #8]
 8015aa0:	f1b8 0f00 	cmp.w	r8, #0
 8015aa4:	dde9      	ble.n	8015a7a <__sflush_r+0xae>
 8015aa6:	6a21      	ldr	r1, [r4, #32]
 8015aa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015aaa:	4643      	mov	r3, r8
 8015aac:	463a      	mov	r2, r7
 8015aae:	4628      	mov	r0, r5
 8015ab0:	47b0      	blx	r6
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	dc08      	bgt.n	8015ac8 <__sflush_r+0xfc>
 8015ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015abe:	81a3      	strh	r3, [r4, #12]
 8015ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac8:	4407      	add	r7, r0
 8015aca:	eba8 0800 	sub.w	r8, r8, r0
 8015ace:	e7e7      	b.n	8015aa0 <__sflush_r+0xd4>
 8015ad0:	20400001 	.word	0x20400001

08015ad4 <_fflush_r>:
 8015ad4:	b538      	push	{r3, r4, r5, lr}
 8015ad6:	690b      	ldr	r3, [r1, #16]
 8015ad8:	4605      	mov	r5, r0
 8015ada:	460c      	mov	r4, r1
 8015adc:	b913      	cbnz	r3, 8015ae4 <_fflush_r+0x10>
 8015ade:	2500      	movs	r5, #0
 8015ae0:	4628      	mov	r0, r5
 8015ae2:	bd38      	pop	{r3, r4, r5, pc}
 8015ae4:	b118      	cbz	r0, 8015aee <_fflush_r+0x1a>
 8015ae6:	6a03      	ldr	r3, [r0, #32]
 8015ae8:	b90b      	cbnz	r3, 8015aee <_fflush_r+0x1a>
 8015aea:	f7fe ffdf 	bl	8014aac <__sinit>
 8015aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d0f3      	beq.n	8015ade <_fflush_r+0xa>
 8015af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015af8:	07d0      	lsls	r0, r2, #31
 8015afa:	d404      	bmi.n	8015b06 <_fflush_r+0x32>
 8015afc:	0599      	lsls	r1, r3, #22
 8015afe:	d402      	bmi.n	8015b06 <_fflush_r+0x32>
 8015b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b02:	f7ff faa8 	bl	8015056 <__retarget_lock_acquire_recursive>
 8015b06:	4628      	mov	r0, r5
 8015b08:	4621      	mov	r1, r4
 8015b0a:	f7ff ff5f 	bl	80159cc <__sflush_r>
 8015b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b10:	07da      	lsls	r2, r3, #31
 8015b12:	4605      	mov	r5, r0
 8015b14:	d4e4      	bmi.n	8015ae0 <_fflush_r+0xc>
 8015b16:	89a3      	ldrh	r3, [r4, #12]
 8015b18:	059b      	lsls	r3, r3, #22
 8015b1a:	d4e1      	bmi.n	8015ae0 <_fflush_r+0xc>
 8015b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b1e:	f7ff fa9b 	bl	8015058 <__retarget_lock_release_recursive>
 8015b22:	e7dd      	b.n	8015ae0 <_fflush_r+0xc>

08015b24 <fiprintf>:
 8015b24:	b40e      	push	{r1, r2, r3}
 8015b26:	b503      	push	{r0, r1, lr}
 8015b28:	4601      	mov	r1, r0
 8015b2a:	ab03      	add	r3, sp, #12
 8015b2c:	4805      	ldr	r0, [pc, #20]	@ (8015b44 <fiprintf+0x20>)
 8015b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b32:	6800      	ldr	r0, [r0, #0]
 8015b34:	9301      	str	r3, [sp, #4]
 8015b36:	f7ff fca5 	bl	8015484 <_vfiprintf_r>
 8015b3a:	b002      	add	sp, #8
 8015b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b40:	b003      	add	sp, #12
 8015b42:	4770      	bx	lr
 8015b44:	20000190 	.word	0x20000190

08015b48 <__swhatbuf_r>:
 8015b48:	b570      	push	{r4, r5, r6, lr}
 8015b4a:	460c      	mov	r4, r1
 8015b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b50:	2900      	cmp	r1, #0
 8015b52:	b096      	sub	sp, #88	@ 0x58
 8015b54:	4615      	mov	r5, r2
 8015b56:	461e      	mov	r6, r3
 8015b58:	da0d      	bge.n	8015b76 <__swhatbuf_r+0x2e>
 8015b5a:	89a3      	ldrh	r3, [r4, #12]
 8015b5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015b60:	f04f 0100 	mov.w	r1, #0
 8015b64:	bf14      	ite	ne
 8015b66:	2340      	movne	r3, #64	@ 0x40
 8015b68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015b6c:	2000      	movs	r0, #0
 8015b6e:	6031      	str	r1, [r6, #0]
 8015b70:	602b      	str	r3, [r5, #0]
 8015b72:	b016      	add	sp, #88	@ 0x58
 8015b74:	bd70      	pop	{r4, r5, r6, pc}
 8015b76:	466a      	mov	r2, sp
 8015b78:	f000 f848 	bl	8015c0c <_fstat_r>
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	dbec      	blt.n	8015b5a <__swhatbuf_r+0x12>
 8015b80:	9901      	ldr	r1, [sp, #4]
 8015b82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015b86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015b8a:	4259      	negs	r1, r3
 8015b8c:	4159      	adcs	r1, r3
 8015b8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015b92:	e7eb      	b.n	8015b6c <__swhatbuf_r+0x24>

08015b94 <__smakebuf_r>:
 8015b94:	898b      	ldrh	r3, [r1, #12]
 8015b96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b98:	079d      	lsls	r5, r3, #30
 8015b9a:	4606      	mov	r6, r0
 8015b9c:	460c      	mov	r4, r1
 8015b9e:	d507      	bpl.n	8015bb0 <__smakebuf_r+0x1c>
 8015ba0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015ba4:	6023      	str	r3, [r4, #0]
 8015ba6:	6123      	str	r3, [r4, #16]
 8015ba8:	2301      	movs	r3, #1
 8015baa:	6163      	str	r3, [r4, #20]
 8015bac:	b003      	add	sp, #12
 8015bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bb0:	ab01      	add	r3, sp, #4
 8015bb2:	466a      	mov	r2, sp
 8015bb4:	f7ff ffc8 	bl	8015b48 <__swhatbuf_r>
 8015bb8:	9f00      	ldr	r7, [sp, #0]
 8015bba:	4605      	mov	r5, r0
 8015bbc:	4639      	mov	r1, r7
 8015bbe:	4630      	mov	r0, r6
 8015bc0:	f7fe fd42 	bl	8014648 <_malloc_r>
 8015bc4:	b948      	cbnz	r0, 8015bda <__smakebuf_r+0x46>
 8015bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bca:	059a      	lsls	r2, r3, #22
 8015bcc:	d4ee      	bmi.n	8015bac <__smakebuf_r+0x18>
 8015bce:	f023 0303 	bic.w	r3, r3, #3
 8015bd2:	f043 0302 	orr.w	r3, r3, #2
 8015bd6:	81a3      	strh	r3, [r4, #12]
 8015bd8:	e7e2      	b.n	8015ba0 <__smakebuf_r+0xc>
 8015bda:	89a3      	ldrh	r3, [r4, #12]
 8015bdc:	6020      	str	r0, [r4, #0]
 8015bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015be2:	81a3      	strh	r3, [r4, #12]
 8015be4:	9b01      	ldr	r3, [sp, #4]
 8015be6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015bea:	b15b      	cbz	r3, 8015c04 <__smakebuf_r+0x70>
 8015bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	f000 f81d 	bl	8015c30 <_isatty_r>
 8015bf6:	b128      	cbz	r0, 8015c04 <__smakebuf_r+0x70>
 8015bf8:	89a3      	ldrh	r3, [r4, #12]
 8015bfa:	f023 0303 	bic.w	r3, r3, #3
 8015bfe:	f043 0301 	orr.w	r3, r3, #1
 8015c02:	81a3      	strh	r3, [r4, #12]
 8015c04:	89a3      	ldrh	r3, [r4, #12]
 8015c06:	431d      	orrs	r5, r3
 8015c08:	81a5      	strh	r5, [r4, #12]
 8015c0a:	e7cf      	b.n	8015bac <__smakebuf_r+0x18>

08015c0c <_fstat_r>:
 8015c0c:	b538      	push	{r3, r4, r5, lr}
 8015c0e:	4d07      	ldr	r5, [pc, #28]	@ (8015c2c <_fstat_r+0x20>)
 8015c10:	2300      	movs	r3, #0
 8015c12:	4604      	mov	r4, r0
 8015c14:	4608      	mov	r0, r1
 8015c16:	4611      	mov	r1, r2
 8015c18:	602b      	str	r3, [r5, #0]
 8015c1a:	f7eb fd07 	bl	800162c <_fstat>
 8015c1e:	1c43      	adds	r3, r0, #1
 8015c20:	d102      	bne.n	8015c28 <_fstat_r+0x1c>
 8015c22:	682b      	ldr	r3, [r5, #0]
 8015c24:	b103      	cbz	r3, 8015c28 <_fstat_r+0x1c>
 8015c26:	6023      	str	r3, [r4, #0]
 8015c28:	bd38      	pop	{r3, r4, r5, pc}
 8015c2a:	bf00      	nop
 8015c2c:	2000ae44 	.word	0x2000ae44

08015c30 <_isatty_r>:
 8015c30:	b538      	push	{r3, r4, r5, lr}
 8015c32:	4d06      	ldr	r5, [pc, #24]	@ (8015c4c <_isatty_r+0x1c>)
 8015c34:	2300      	movs	r3, #0
 8015c36:	4604      	mov	r4, r0
 8015c38:	4608      	mov	r0, r1
 8015c3a:	602b      	str	r3, [r5, #0]
 8015c3c:	f7eb fd06 	bl	800164c <_isatty>
 8015c40:	1c43      	adds	r3, r0, #1
 8015c42:	d102      	bne.n	8015c4a <_isatty_r+0x1a>
 8015c44:	682b      	ldr	r3, [r5, #0]
 8015c46:	b103      	cbz	r3, 8015c4a <_isatty_r+0x1a>
 8015c48:	6023      	str	r3, [r4, #0]
 8015c4a:	bd38      	pop	{r3, r4, r5, pc}
 8015c4c:	2000ae44 	.word	0x2000ae44

08015c50 <abort>:
 8015c50:	b508      	push	{r3, lr}
 8015c52:	2006      	movs	r0, #6
 8015c54:	f000 f82c 	bl	8015cb0 <raise>
 8015c58:	2001      	movs	r0, #1
 8015c5a:	f7eb fc97 	bl	800158c <_exit>

08015c5e <_raise_r>:
 8015c5e:	291f      	cmp	r1, #31
 8015c60:	b538      	push	{r3, r4, r5, lr}
 8015c62:	4605      	mov	r5, r0
 8015c64:	460c      	mov	r4, r1
 8015c66:	d904      	bls.n	8015c72 <_raise_r+0x14>
 8015c68:	2316      	movs	r3, #22
 8015c6a:	6003      	str	r3, [r0, #0]
 8015c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c70:	bd38      	pop	{r3, r4, r5, pc}
 8015c72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015c74:	b112      	cbz	r2, 8015c7c <_raise_r+0x1e>
 8015c76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015c7a:	b94b      	cbnz	r3, 8015c90 <_raise_r+0x32>
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	f000 f831 	bl	8015ce4 <_getpid_r>
 8015c82:	4622      	mov	r2, r4
 8015c84:	4601      	mov	r1, r0
 8015c86:	4628      	mov	r0, r5
 8015c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c8c:	f000 b818 	b.w	8015cc0 <_kill_r>
 8015c90:	2b01      	cmp	r3, #1
 8015c92:	d00a      	beq.n	8015caa <_raise_r+0x4c>
 8015c94:	1c59      	adds	r1, r3, #1
 8015c96:	d103      	bne.n	8015ca0 <_raise_r+0x42>
 8015c98:	2316      	movs	r3, #22
 8015c9a:	6003      	str	r3, [r0, #0]
 8015c9c:	2001      	movs	r0, #1
 8015c9e:	e7e7      	b.n	8015c70 <_raise_r+0x12>
 8015ca0:	2100      	movs	r1, #0
 8015ca2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	4798      	blx	r3
 8015caa:	2000      	movs	r0, #0
 8015cac:	e7e0      	b.n	8015c70 <_raise_r+0x12>
	...

08015cb0 <raise>:
 8015cb0:	4b02      	ldr	r3, [pc, #8]	@ (8015cbc <raise+0xc>)
 8015cb2:	4601      	mov	r1, r0
 8015cb4:	6818      	ldr	r0, [r3, #0]
 8015cb6:	f7ff bfd2 	b.w	8015c5e <_raise_r>
 8015cba:	bf00      	nop
 8015cbc:	20000190 	.word	0x20000190

08015cc0 <_kill_r>:
 8015cc0:	b538      	push	{r3, r4, r5, lr}
 8015cc2:	4d07      	ldr	r5, [pc, #28]	@ (8015ce0 <_kill_r+0x20>)
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	4608      	mov	r0, r1
 8015cca:	4611      	mov	r1, r2
 8015ccc:	602b      	str	r3, [r5, #0]
 8015cce:	f7eb fc4d 	bl	800156c <_kill>
 8015cd2:	1c43      	adds	r3, r0, #1
 8015cd4:	d102      	bne.n	8015cdc <_kill_r+0x1c>
 8015cd6:	682b      	ldr	r3, [r5, #0]
 8015cd8:	b103      	cbz	r3, 8015cdc <_kill_r+0x1c>
 8015cda:	6023      	str	r3, [r4, #0]
 8015cdc:	bd38      	pop	{r3, r4, r5, pc}
 8015cde:	bf00      	nop
 8015ce0:	2000ae44 	.word	0x2000ae44

08015ce4 <_getpid_r>:
 8015ce4:	f7eb bc3a 	b.w	800155c <_getpid>

08015ce8 <_init>:
 8015ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cea:	bf00      	nop
 8015cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cee:	bc08      	pop	{r3}
 8015cf0:	469e      	mov	lr, r3
 8015cf2:	4770      	bx	lr

08015cf4 <_fini>:
 8015cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cf6:	bf00      	nop
 8015cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cfa:	bc08      	pop	{r3}
 8015cfc:	469e      	mov	lr, r3
 8015cfe:	4770      	bx	lr
